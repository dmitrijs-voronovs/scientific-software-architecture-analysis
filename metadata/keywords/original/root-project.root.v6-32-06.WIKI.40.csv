id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11760,Modifiability,variab,variables,11760,"r.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11787,Modifiability,variab,variable,11787,"r.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11850,Modifiability,variab,variables,11850,"r.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:13943,Modifiability,variab,variables,13943,). bool ROOT::Math::GeneticMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Definition at line 252 of file GeneticMinimizer.cxx. ◆ MinimizerParameters(). const GeneticMinimizerParameters & ROOT::Math::GeneticMinimizer::MinimizerParameters ; (; ); const. inline . Definition at line 96 of file GeneticMinimizer.h. ◆ MinValue(). double ROOT::Math::GeneticMinimizer::MinValue ; (; ); const. overridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 331 of file GeneticMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GeneticMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 340 of file GeneticMinimizer.cxx. ◆ NDim(). unsigned int ROOT::Math::GeneticMinimizer::NDim ; (; ); const. overridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 348 of file GeneticMinimizer.cxx. ◆ NFree(). unsigned int ROOT::Math::GeneticMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 355 of file GeneticMinimizer.cxx. ◆ Options(). ROOT::Math::MinimizerOptions ROOT::Math::GeneticMinimizer::Options ; (; ); const. overridevirtual . retrieve the minimizer options (implement derived class if needed) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 185 of file GeneticMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GeneticMinimizer::ProvidesError ; (; ); const. overridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable().,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:14176,Modifiability,variab,variables,14176,"mizerParameters & ROOT::Math::GeneticMinimizer::MinimizerParameters ; (; ); const. inline . Definition at line 96 of file GeneticMinimizer.h. ◆ MinValue(). double ROOT::Math::GeneticMinimizer::MinValue ; (; ); const. overridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 331 of file GeneticMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GeneticMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 340 of file GeneticMinimizer.cxx. ◆ NDim(). unsigned int ROOT::Math::GeneticMinimizer::NDim ; (; ); const. overridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 348 of file GeneticMinimizer.cxx. ◆ NFree(). unsigned int ROOT::Math::GeneticMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 355 of file GeneticMinimizer.cxx. ◆ Options(). ROOT::Math::MinimizerOptions ROOT::Math::GeneticMinimizer::Options ; (; ); const. overridevirtual . retrieve the minimizer options (implement derived class if needed) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 185 of file GeneticMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GeneticMinimizer::ProvidesError ; (; ); const. overridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::GeneticMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set a new fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Ma",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:15123,Modifiability,variab,variable,15123," number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 355 of file GeneticMinimizer.cxx. ◆ Options(). ROOT::Math::MinimizerOptions ROOT::Math::GeneticMinimizer::Options ; (; ); const. overridevirtual . retrieve the minimizer options (implement derived class if needed) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 185 of file GeneticMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GeneticMinimizer::ProvidesError ; (; ); const. overridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::GeneticMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set a new fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 165 of file GeneticMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::GeneticMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 137 of file GeneticMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::GeneticMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file GeneticMinimizer.cxx. ◆ SetOptions(). void ROOT::Math::GeneticMinimizer::SetOptions ; (; const ROOT::Math::MinimizerOptions & ; opt). virtual . Definition at line 217 of file GeneticMinimizer.cxx. ◆ SetParameters",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:15777,Modifiability,variab,variable,15777,"ror matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::GeneticMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set a new fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 165 of file GeneticMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::GeneticMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 137 of file GeneticMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::GeneticMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file GeneticMinimizer.cxx. ◆ SetOptions(). void ROOT::Math::GeneticMinimizer::SetOptions ; (; const ROOT::Math::MinimizerOptions & ; opt). virtual . Definition at line 217 of file GeneticMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GeneticMinimizer::SetParameters ; (; const GeneticMinimizerParameters & ; params). Definition at line 177 of file GeneticMinimizer.cxx. ◆ SetRandomSeed(). void ROOT::Math::GeneticMinimizer::SetRandomSeed ; (; int ; seed). inline . Definition at line 94 of file GeneticMinimizer.h. ◆ SetVariable(). bool ROOT::Math::GeneticMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set a new free variable ; Implements ROOT::Math::Minimizer.; Definition at line 153 of file GeneticMinimizer.cxx. ◆ X(). const double * ROOT::Math::GeneticMinimizer::X ; (; ); const. overridevir",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:15863,Modifiability,variab,variable,15863,"ror matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 365 of file GeneticMinimizer.cxx. ◆ SetFixedVariable(). bool ROOT::Math::GeneticMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set a new fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 165 of file GeneticMinimizer.cxx. ◆ SetFunction(). void ROOT::Math::GeneticMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 137 of file GeneticMinimizer.cxx. ◆ SetLimitedVariable(). bool ROOT::Math::GeneticMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file GeneticMinimizer.cxx. ◆ SetOptions(). void ROOT::Math::GeneticMinimizer::SetOptions ; (; const ROOT::Math::MinimizerOptions & ; opt). virtual . Definition at line 217 of file GeneticMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GeneticMinimizer::SetParameters ; (; const GeneticMinimizerParameters & ; params). Definition at line 177 of file GeneticMinimizer.cxx. ◆ SetRandomSeed(). void ROOT::Math::GeneticMinimizer::SetRandomSeed ; (; int ; seed). inline . Definition at line 94 of file GeneticMinimizer.h. ◆ SetVariable(). bool ROOT::Math::GeneticMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set a new free variable ; Implements ROOT::Math::Minimizer.; Definition at line 153 of file GeneticMinimizer.cxx. ◆ X(). const double * ROOT::Math::GeneticMinimizer::X ; (; ); const. overridevir",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:16652,Modifiability,variab,variable,16652," val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set a new upper/lower limited variable (override if minimizer supports them ) otherwise as default set an unlimited variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file GeneticMinimizer.cxx. ◆ SetOptions(). void ROOT::Math::GeneticMinimizer::SetOptions ; (; const ROOT::Math::MinimizerOptions & ; opt). virtual . Definition at line 217 of file GeneticMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GeneticMinimizer::SetParameters ; (; const GeneticMinimizerParameters & ; params). Definition at line 177 of file GeneticMinimizer.cxx. ◆ SetRandomSeed(). void ROOT::Math::GeneticMinimizer::SetRandomSeed ; (; int ; seed). inline . Definition at line 94 of file GeneticMinimizer.h. ◆ SetVariable(). bool ROOT::Math::GeneticMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set a new free variable ; Implements ROOT::Math::Minimizer.; Definition at line 153 of file GeneticMinimizer.cxx. ◆ X(). const double * ROOT::Math::GeneticMinimizer::X ; (; ); const. overridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 336 of file GeneticMinimizer.cxx. Member Data Documentation. ◆ fFitness. TMVA::IFitterTarget* ROOT::Math::GeneticMinimizer::fFitness. protected . Definition at line 107 of file GeneticMinimizer.h. ◆ fMinValue. double ROOT::Math::GeneticMinimizer::fMinValue. protected . Definition at line 108 of file GeneticMinimizer.h. ◆ fParameters. GeneticMinimizerParameters ROOT::Math::GeneticMinimizer::fParameters. protected . Definition at line 111 of file GeneticMinimizer.h. ◆ fRanges. std::vector<TMVA::Interval*> ROOT::Math::GeneticMinimizer::fRanges. protected . Definition at line 106 of file GeneticMinimizer.h. ◆ fResult. std::vector<double> ROOT::Math::GeneticMinimizer::fResult. protected . Definition at line 109 of file Geneti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:1317,Performance,perform,perform,1317,"ide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; ROOT::Math::GeneticMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GeneticMinimizer. ; Minimizer class based on the Gentic algorithm implemented in TMVA ; Definition at line 61 of file GeneticMinimizer.h. Public Member Functions;  GeneticMinimizer (int i=0);  ;  ~GeneticMinimizer () override;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; double Edm () const override;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GeneticMinimizerParameters & MinimizerParameters () const;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total (re-implement if minimizer supports bounded parameters) ;  ; ROOT::Math::MinimizerOptions Options () const override;  retrieve the minimizer options (implement derived class if needed) ;  ; bool ProvidesError () const override;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5436,Performance,perform,perform,5436,"e matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5677,Performance,perform,performed,5677," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:8588,Performance,perform,perform,8588,">);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; virtual bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower);  set a new lower limit variable (override if minimizer supports them ) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; virtual bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper);  set a new upper limit variable (override if minimizer supports them ) ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; virtual bool SetVariableLimits (unsigned int ivar, double lower, double upper);  set the limits of an already existing variable ;  ; virtual bool SetVariableLowerLimit (unsigned int ivar, double lower);  set the lower-limit of an already existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableStepSize (unsigned int ivar, double value);  set the step size of an already existing variable ;  ; virtual bool SetVariableUpperLimit (unsigne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:13043,Performance,perform,perform,13043,const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file GeneticMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GeneticMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Definition at line 252 of file GeneticMinimizer.cxx. ◆ MinimizerParameters(). const GeneticMinimizerParameters & ROOT::Math::GeneticMinimizer::MinimizerParameters ; (; ); const. inline . Definition at line 96 of file GeneticMinimizer.h. ◆ MinValue(). double ROOT::Math::GeneticMinimizer::MinValue ; (; ); const. overridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 331 of file GeneticMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GeneticMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 340 of file GeneticMinimizer.cxx. ◆ NDim(). unsigned int ROOT::Math::GeneticMinimizer::NDim ; (; ); const. overridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 348 of file GeneticMinimizer.cxx. ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:5704,Security,validat,validation,5704," &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual bool IsFixedVariable (unsigned int ivar) const;  query if an existing variable is fixed (i.e. ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ReleaseVariable (unsigned int ivar);  release an existing variable ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:10753,Security,validat,validated,10753,"ng variable ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  ; virtual int VariableIndex (const std::string &name) const;  get index of variable given a variable given a name return -1 if variable is not found ;  ; virtual std::string VariableName (unsigned int ivar) const;  get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ;  . Protected Member Functions; void GetGeneticOptions (ROOT::Math::MinimizerOptions &opt) const;  . Protected Attributes; TMVA::IFitterTarget * fFitness;  ; double fMinValue;  ; GeneticMinimizerParameters fParameters;  ; std::vector< TMVA::Interval * > fRanges;  ; std::vector< double > fResult;  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GeneticMinimizer.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:820,Integrability,interface,interface,820,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:2392,Integrability,interface,interface,2392,"ld not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5041,Integrability,interface,interface,5041,"lass's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5498,Integrability,interface,interface,5498,"tionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:10620,Integrability,interface,interface,10620,"Distribution ; dist = kUndefined, . const std::vector< double > & ; distParams = {} . ). Constructor for 1-sample tests with a specified distribution. ; If a specific distribution is not specified it can be set later using SetDistribution. ; Definition at line 161 of file GoFTest.cxx. ◆ GoFTest() [3/6]. template<class Dist > . ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ; Definition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFunction & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:19389,Integrability,interface,interface,19389,"te . set a vector of samples ; Definition at line 181 of file GoFTest.cxx. ◆ SetUserCDF() [1/2]. void ROOT::Math::GoFTest::SetUserCDF ; (; const IGenFunction & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ; Definition at line 147 of file GoFTest.h. ◆ SetUserCDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserCDF ; (; Dist & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a cumulative distribution function for 1-sample tests. ; The CDF must return zero for x=xmin and 1 for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probabi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:20085,Integrability,interface,interface,20085,"for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . The combined data. ; Definition at line 241 of file GoFTest.h. ◆ fDist. EDistribution ROOT::Math::GoFTest::fDist. private . Type of distribution. ; Definition at line 238 of file GoFTest.h. ◆ fParams. std::vector<Double_t> ROOT::Math::GoFTest::fParams. private . The distribution parameters (e.g. fParams[0] = mean",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3953,Performance,perform,performing,3953,"  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16355,Performance,perform,performing,16355,"est ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF()",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:480,Testability,test,tests,480,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:595,Testability,test,tests,595,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:630,Testability,test,test,630,". ROOT: ROOT::Math::GoFTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:1330,Testability,test,test,1330,"ttributes |; List of all members ; ROOT::Math::GoFTest Class ReferenceMath » MathCore » Goodness of Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:1367,Testability,test,test,1367," Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interf",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:1424,Testability,test,test,1424," Fit Tests. ; GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. ; The class implements the AndersonDarling and the KolmogorovSmirnov tests; In the case of the 1-sample test the user needs to provide:; input data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interf",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:1689,Testability,test,tests,1689,"ut data; theoretical distribution. The distribution can be provided as a function object (functor) or an object implementing the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object imple",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:1776,Testability,test,test,1776,"ting the ROOT::Math::IGenFunction interface. One can provide either the PDF (default) of the CDF (cumulative distribution) One can also provide a pre-defined function. In that case one needs to give also the distribution parameters otherwise the default values will be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndef",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:2124,Testability,test,tests,2124,"l be used. The pre-defined distributions are:; kGaussian with default parameter mean=0, sigma=1; kExponential with default parameter rate=1; kLogNormal with default parameter meanlog=0, sigmalog=1. Note that one should not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void Anders",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:2309,Testability,test,tests,2309,"ld not use data computed distribution parameters, otherwise the test will be biased. The 1-sample KS test using data computed quantities is called Lilliefors test (see https://en.wikipedia.org/wiki/Lilliefors_test) . Definition at line 65 of file GoFTest.h. Public Types; enum  EDistribution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:2601,Testability,test,tests,2601,"ution { ;   kUndefined; , kUserDefined; , kGaussian; , kLogNormal; , ;   kExponential. };  H0 distributions for using only with 1-sample tests. More...;  ; enum  ETestType { kAD; , kAD2s; , kKS; , kKS2s; };  Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &p",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:2864,Testability,test,tests,2864," the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) con",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3101,Testability,test,testStat,3101,"Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Retu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3324,Testability,test,testStat,3324,"r specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={}); ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3570,Testability,test,testStat,3570,"0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3789,Testability,test,testStat,3789,"ndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3873,Testability,test,test,3873,"  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3907,Testability,test,testStat,3907,"  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3972,Testability,test,test,3972,"  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4050,Testability,test,test,4050,"forms the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4185,Testability,test,test,4185,"forms the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4222,Testability,test,test,4222,"forms the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4429,Testability,test,tests,4429," const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t x",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4620,Testability,test,tests,4620,"amplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4804,Testability,test,tests,4804,"ple Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Fun",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5001,Testability,test,test,5001,"lass's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5243,Testability,test,test,5243,"ption ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Fun",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5457,Testability,test,tests,5457,"tionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5682,Testability,test,tests,5682,"function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (const Double_t *sample, size_t sampleSize);  ; Double_t LogNormalCDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5861,Testability,test,testStat,5861,"(const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (const Double_t *sample, size_t sampleSize);  ; Double_t LogNormalCDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ; GoFTest operator= (GoFTest &gof);  Disallowed assign operator. ;  ; Double_t PValueAD1Sample (Double_t A2) const;  Computation of the 1-Sample Anderson-Darling Test's p-value. ;  ; void SetCDF ();  ; void SetDistributionFunction (const IGenFu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:5911,Testability,test,test,5911,"(const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (const Double_t *sample, size_t sampleSize);  ; Double_t LogNormalCDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ; GoFTest operator= (GoFTest &gof);  Disallowed assign operator. ;  ; Double_t PValueAD1Sample (Double_t A2) const;  Computation of the 1-Sample Anderson-Darling Test's p-value. ;  ; void SetCDF ();  ; void SetDistributionFunction (const IGenFu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:6516,Testability,log,logarithm,6516,"function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (const Double_t *sample, size_t sampleSize);  ; Double_t LogNormalCDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ; GoFTest operator= (GoFTest &gof);  Disallowed assign operator. ;  ; Double_t PValueAD1Sample (Double_t A2) const;  Computation of the 1-Sample Anderson-Darling Test's p-value. ;  ; void SetCDF ();  ; void SetDistributionFunction (const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax);  ; void SetParameters (const std::vector< double > &params);  Sets the distribution parameters. ;  ; void SetSamples (std::vector< const Double_t * > samples, const std::vector< size_t > samplesSizes);  set a vector of samples ;  . Static Private Member Functions; static Double_t GetSigmaN (const std::vector< size_t > &ns, size_t N);  Computation of sigma_N as described in (1) ;  ; static Double_t InterpolatePValues (int nsamples, Double_t A2);  Linear interpolation used in GoFTest::PValueAD2Samples. ;  . Private Attributes; std::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:6575,Testability,test,test,6575,"function for 1-sample tests using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserPDF (Dist &pdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a probability density function for 1-sample tests. ;  . Static Public Member Functions; static void AndersonDarling2SamplesTest (const ROOT::Fit::BinData &data1, const ROOT::Fit::BinData &data2, Double_t &pvalue, Double_t &testStat);  Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ;  ; static Double_t PValueADKSamples (size_t nsamples, Double_t A2);  Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ;  . Private Member Functions;  GoFTest ();  Disallowed default constructor. ;  ;  GoFTest (GoFTest &gof);  Disallowed copy constructor. ;  ; Double_t ExponentialCDF (Double_t x) const;  ; Double_t GaussianCDF (Double_t x) const;  ; void Instantiate (const Double_t *sample, size_t sampleSize);  ; Double_t LogNormalCDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ; GoFTest operator= (GoFTest &gof);  Disallowed assign operator. ;  ; Double_t PValueAD1Sample (Double_t A2) const;  Computation of the 1-Sample Anderson-Darling Test's p-value. ;  ; void SetCDF ();  ; void SetDistributionFunction (const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax);  ; void SetParameters (const std::vector< double > &params);  Sets the distribution parameters. ;  ; void SetSamples (std::vector< const Double_t * > samples, const std::vector< size_t > samplesSizes);  set a vector of samples ;  . Static Private Member Functions; static Double_t GetSigmaN (const std::vector< size_t > &ns, size_t N);  Computation of sigma_N as described in (1) ;  ; static Double_t InterpolatePValues (int nsamples, Double_t A2);  Linear interpolation used in GoFTest::PValueAD2Samples. ;  . Private Attributes; std::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:7501,Testability,test,test,7501,"CDF (Double_t x) const;  ; void LogSample ();  Applies the logarithm to the sample when the specified distribution to test is LogNormal. ;  ; GoFTest operator= (GoFTest &gof);  Disallowed assign operator. ;  ; Double_t PValueAD1Sample (Double_t A2) const;  Computation of the 1-Sample Anderson-Darling Test's p-value. ;  ; void SetCDF ();  ; void SetDistributionFunction (const IGenFunction &cdf, Bool_t isPDF, Double_t xmin, Double_t xmax);  ; void SetParameters (const std::vector< double > &params);  Sets the distribution parameters. ;  ; void SetSamples (std::vector< const Double_t * > samples, const std::vector< size_t > samplesSizes);  set a vector of samples ;  . Static Private Member Functions; static Double_t GetSigmaN (const std::vector< size_t > &ns, size_t N);  Computation of sigma_N as described in (1) ;  ; static Double_t InterpolatePValues (int nsamples, Double_t A2);  Linear interpolation used in GoFTest::PValueAD2Samples. ;  . Private Attributes; std::unique_ptr< IGenFunction > fCDF;  Pointer to CDF used in 1-sample test. ;  ; std::vector< Double_t > fCombinedSamples;  The combined data. ;  ; EDistribution fDist;  Type of distribution. ;  ; std::vector< Double_t > fParams;  The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ;  ; std::vector< std::vector< Double_t > > fSamples;  The input data. ;  ; Bool_t fTestSampleFromH0;  . #include <Math/GoFTest.h>; Member Enumeration Documentation. ◆ EDistribution. enum ROOT::Math::GoFTest::EDistribution. H0 distributions for using only with 1-sample tests. ; One should provide the distribution parameters otherwise the default values will be used . EnumeratorkUndefined ; kUserDefined Default value for non templated 1-sample test. Set with SetDistribution. . kGaussian For internal use only within the class's template constructor. . kLogNormal Gaussian distribution with default mean=0, sigma=1. . kExponential Lognormal distribution with default meanlog=0, sigmalog=1. ; Exponential d",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:8020,Testability,test,tests,8020," void SetSamples (std::vector< const Double_t * > samples, const std::vector< size_t > samplesSizes);  set a vector of samples ;  . Static Private Member Functions; static Double_t GetSigmaN (const std::vector< size_t > &ns, size_t N);  Computation of sigma_N as described in (1) ;  ; static Double_t InterpolatePValues (int nsamples, Double_t A2);  Linear interpolation used in GoFTest::PValueAD2Samples. ;  . Private Attributes; std::unique_ptr< IGenFunction > fCDF;  Pointer to CDF used in 1-sample test. ;  ; std::vector< Double_t > fCombinedSamples;  The combined data. ;  ; EDistribution fDist;  Type of distribution. ;  ; std::vector< Double_t > fParams;  The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ;  ; std::vector< std::vector< Double_t > > fSamples;  The input data. ;  ; Bool_t fTestSampleFromH0;  . #include <Math/GoFTest.h>; Member Enumeration Documentation. ◆ EDistribution. enum ROOT::Math::GoFTest::EDistribution. H0 distributions for using only with 1-sample tests. ; One should provide the distribution parameters otherwise the default values will be used . EnumeratorkUndefined ; kUserDefined Default value for non templated 1-sample test. Set with SetDistribution. . kGaussian For internal use only within the class's template constructor. . kLogNormal Gaussian distribution with default mean=0, sigma=1. . kExponential Lognormal distribution with default meanlog=0, sigmalog=1. ; Exponential distribution with default rate=1 . Definition at line 70 of file GoFTest.h. ◆ ETestType. enum ROOT::Math::GoFTest::ETestType. Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. . EnumeratorkAD ; kAD2s Anderson-Darling Test. Default value. . kKS Anderson-Darling 2-Samples Test. . kKS2s Kolmogorov-Smirnov Test. ; Kolmogorov-Smirnov 2-Samples Test . Definition at line 85 of file GoFTest.h. ◆ EUserDistribution. enum ROOT::Math::GoFTest::EUserDistribution. User input distribution opt",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:8197,Testability,test,test,8197,"ns; static Double_t GetSigmaN (const std::vector< size_t > &ns, size_t N);  Computation of sigma_N as described in (1) ;  ; static Double_t InterpolatePValues (int nsamples, Double_t A2);  Linear interpolation used in GoFTest::PValueAD2Samples. ;  . Private Attributes; std::unique_ptr< IGenFunction > fCDF;  Pointer to CDF used in 1-sample test. ;  ; std::vector< Double_t > fCombinedSamples;  The combined data. ;  ; EDistribution fDist;  Type of distribution. ;  ; std::vector< Double_t > fParams;  The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ;  ; std::vector< std::vector< Double_t > > fSamples;  The input data. ;  ; Bool_t fTestSampleFromH0;  . #include <Math/GoFTest.h>; Member Enumeration Documentation. ◆ EDistribution. enum ROOT::Math::GoFTest::EDistribution. H0 distributions for using only with 1-sample tests. ; One should provide the distribution parameters otherwise the default values will be used . EnumeratorkUndefined ; kUserDefined Default value for non templated 1-sample test. Set with SetDistribution. . kGaussian For internal use only within the class's template constructor. . kLogNormal Gaussian distribution with default mean=0, sigma=1. . kExponential Lognormal distribution with default meanlog=0, sigmalog=1. ; Exponential distribution with default rate=1 . Definition at line 70 of file GoFTest.h. ◆ ETestType. enum ROOT::Math::GoFTest::ETestType. Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. . EnumeratorkAD ; kAD2s Anderson-Darling Test. Default value. . kKS Anderson-Darling 2-Samples Test. . kKS2s Kolmogorov-Smirnov Test. ; Kolmogorov-Smirnov 2-Samples Test . Definition at line 85 of file GoFTest.h. ◆ EUserDistribution. enum ROOT::Math::GoFTest::EUserDistribution. User input distribution option. . EnumeratorkCDF ; kPDF Input distribution is a CDF : cumulative distribution function. ; Input distribution is a PDF (Default value) . Definition at line 7",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:8599,Testability,test,test,8599,"or< Double_t > fParams;  The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ;  ; std::vector< std::vector< Double_t > > fSamples;  The input data. ;  ; Bool_t fTestSampleFromH0;  . #include <Math/GoFTest.h>; Member Enumeration Documentation. ◆ EDistribution. enum ROOT::Math::GoFTest::EDistribution. H0 distributions for using only with 1-sample tests. ; One should provide the distribution parameters otherwise the default values will be used . EnumeratorkUndefined ; kUserDefined Default value for non templated 1-sample test. Set with SetDistribution. . kGaussian For internal use only within the class's template constructor. . kLogNormal Gaussian distribution with default mean=0, sigma=1. . kExponential Lognormal distribution with default meanlog=0, sigmalog=1. ; Exponential distribution with default rate=1 . Definition at line 70 of file GoFTest.h. ◆ ETestType. enum ROOT::Math::GoFTest::ETestType. Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. . EnumeratorkAD ; kAD2s Anderson-Darling Test. Default value. . kKS Anderson-Darling 2-Samples Test. . kKS2s Kolmogorov-Smirnov Test. ; Kolmogorov-Smirnov 2-Samples Test . Definition at line 85 of file GoFTest.h. ◆ EUserDistribution. enum ROOT::Math::GoFTest::EUserDistribution. User input distribution option. . EnumeratorkCDF ; kPDF Input distribution is a CDF : cumulative distribution function. ; Input distribution is a PDF (Default value) . Definition at line 79 of file GoFTest.h. Constructor & Destructor Documentation. ◆ GoFTest() [1/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sample1Size, . const Double_t * ; sample1, . size_t ; sample2Size, . const Double_t * ; sample2 . ). Constructor for 2-samples tests. ; Definition at line 134 of file GoFTest.cxx. ◆ GoFTest() [2/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . EDistribution ; dist = kUndefined, . const std::vector< double > & ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:9411,Testability,test,tests,9411,"bution with default meanlog=0, sigmalog=1. ; Exponential distribution with default rate=1 . Definition at line 70 of file GoFTest.h. ◆ ETestType. enum ROOT::Math::GoFTest::ETestType. Goodness of Fit test types for using with the class's unary functions as a shorthand for the in-built methods. . EnumeratorkAD ; kAD2s Anderson-Darling Test. Default value. . kKS Anderson-Darling 2-Samples Test. . kKS2s Kolmogorov-Smirnov Test. ; Kolmogorov-Smirnov 2-Samples Test . Definition at line 85 of file GoFTest.h. ◆ EUserDistribution. enum ROOT::Math::GoFTest::EUserDistribution. User input distribution option. . EnumeratorkCDF ; kPDF Input distribution is a CDF : cumulative distribution function. ; Input distribution is a PDF (Default value) . Definition at line 79 of file GoFTest.h. Constructor & Destructor Documentation. ◆ GoFTest() [1/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sample1Size, . const Double_t * ; sample1, . size_t ; sample2Size, . const Double_t * ; sample2 . ). Constructor for 2-samples tests. ; Definition at line 134 of file GoFTest.cxx. ◆ GoFTest() [2/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . EDistribution ; dist = kUndefined, . const std::vector< double > & ; distParams = {} . ). Constructor for 1-sample tests with a specified distribution. ; If a specific distribution is not specified it can be set later using SetDistribution. ; Definition at line 161 of file GoFTest.cxx. ◆ GoFTest() [3/6]. template<class Dist > . ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ; Definition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFuncti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:9684,Testability,test,tests,9684,"ods. . EnumeratorkAD ; kAD2s Anderson-Darling Test. Default value. . kKS Anderson-Darling 2-Samples Test. . kKS2s Kolmogorov-Smirnov Test. ; Kolmogorov-Smirnov 2-Samples Test . Definition at line 85 of file GoFTest.h. ◆ EUserDistribution. enum ROOT::Math::GoFTest::EUserDistribution. User input distribution option. . EnumeratorkCDF ; kPDF Input distribution is a CDF : cumulative distribution function. ; Input distribution is a PDF (Default value) . Definition at line 79 of file GoFTest.h. Constructor & Destructor Documentation. ◆ GoFTest() [1/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sample1Size, . const Double_t * ; sample1, . size_t ; sample2Size, . const Double_t * ; sample2 . ). Constructor for 2-samples tests. ; Definition at line 134 of file GoFTest.cxx. ◆ GoFTest() [2/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . EDistribution ; dist = kUndefined, . const std::vector< double > & ; distParams = {} . ). Constructor for 1-sample tests with a specified distribution. ; If a specific distribution is not specified it can be set later using SetDistribution. ; Definition at line 161 of file GoFTest.cxx. ◆ GoFTest() [3/6]. template<class Dist > . ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ; Definition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFunction & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:10133,Testability,test,tests,10133,"file GoFTest.h. Constructor & Destructor Documentation. ◆ GoFTest() [1/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sample1Size, . const Double_t * ; sample1, . size_t ; sample2Size, . const Double_t * ; sample2 . ). Constructor for 2-samples tests. ; Definition at line 134 of file GoFTest.cxx. ◆ GoFTest() [2/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . EDistribution ; dist = kUndefined, . const std::vector< double > & ; distParams = {} . ). Constructor for 1-sample tests with a specified distribution. ; If a specific distribution is not specified it can be set later using SetDistribution. ; Definition at line 161 of file GoFTest.cxx. ◆ GoFTest() [3/6]. template<class Dist > . ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ; Definition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFunction & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. A",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:10537,Testability,test,tests,10537,"Distribution ; dist = kUndefined, . const std::vector< double > & ; distParams = {} . ). Constructor for 1-sample tests with a specified distribution. ; If a specific distribution is not specified it can be set later using SetDistribution. ; Definition at line 161 of file GoFTest.cxx. ◆ GoFTest() [3/6]. template<class Dist > . ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ; Definition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFunction & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:11265,Testability,test,test,11265,"ition at line 101 of file GoFTest.h. ◆ GoFTest() [4/6]. ROOT::Math::GoFTest::GoFTest ; (; size_t ; sampleSize, . const Double_t * ; sample, . const IGenFunction & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Associat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:11548,Testability,test,testStat,11548,"h a user specified distribution implementing the ROOT::Math::IGenFunction interface. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns th",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:11609,Testability,test,test,11609,"e. ; Definition at line 109 of file GoFTest.h. ◆ ~GoFTest(). ROOT::Math::GoFTest::~GoFTest ; (; ). virtual . Definition at line 179 of file GoFTest.cxx. ◆ GoFTest() [5/6]. ROOT::Math::GoFTest::GoFTest ; (; ). private . Disallowed default constructor. . ◆ GoFTest() [6/6]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ Anderso",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:11899,Testability,test,testStat,11899,"]. ROOT::Math::GoFTest::GoFTest ; (; GoFTest & ; gof). private . Disallowed copy constructor. . Member Function Documentation. ◆ AndersonDarling2SamplesTest() [1/3]. Double_t ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns by default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ AndersonDarlingTest() [2/2]. void ROOT::Math::GoFTest::AndersonDarlingTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 1-Sample Test. ; The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at ht",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:12548,Testability,test,test,12548," . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ AndersonDarlingTest() [2/2]. void ROOT::Math::GoFTest::AndersonDarlingTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 1-Sample Test. ; The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm and described and taken from (2) Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02. and described and taken from (3) Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124. ; Definition at line 862 of file GoFTest.cxx. ◆ ExponentialCDF(). Double_t ROOT::Math::GoFTest::ExponentialCDF ; (; Double_t ; x); const. private . Definition at line 299 of file GoFTest.cxx. ◆ GaussianCDF(). Double_t ROOT::Math::GoFTes",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:12738,Testability,test,testStat,12738,"ine 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ AndersonDarlingTest() [2/2]. void ROOT::Math::GoFTest::AndersonDarlingTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 1-Sample Test. ; The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm and described and taken from (2) Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02. and described and taken from (3) Lewis P.A.W. (1961), The Annals of Mathematical Statistics, Distribution of the Anderson-Darling Statistic, Volume 32, Number 4, 1118-1124. ; Definition at line 862 of file GoFTest.cxx. ◆ ExponentialCDF(). Double_t ROOT::Math::GoFTest::ExponentialCDF ; (; Double_t ; x); const. private . Definition at line 299 of file GoFTest.cxx. ◆ GaussianCDF(). Double_t ROOT::Math::GoFTest::GaussianCDF ; (; Double_t ; x); const. private . Definition at line 295 of file GoFTest.cxx. ◆ GetSigmaN(). Double_t ROOT::Math::GoFTest::GetSigmaN ; (; const std::vector< size_",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:14472,Testability,test,test,14472,". private . Definition at line 299 of file GoFTest.cxx. ◆ GaussianCDF(). Double_t ROOT::Math::GoFTest::GaussianCDF ; (; Double_t ; x); const. private . Definition at line 295 of file GoFTest.cxx. ◆ GetSigmaN(). Double_t ROOT::Math::GoFTest::GetSigmaN ; (; const std::vector< size_t > & ; ns, . size_t ; N . ). staticprivate . Computation of sigma_N as described in (1) ; Definition at line 311 of file GoFTest.cxx. ◆ Instantiate(). void ROOT::Math::GoFTest::Instantiate ; (; const Double_t * ; sample, . size_t ; sampleSize . ). private . Definition at line 279 of file GoFTest.cxx. ◆ InterpolatePValues(). static Double_t ROOT::Math::GoFTest::InterpolatePValues ; (; int ; nsamples, . Double_t ; A2 . ). staticprivate . Linear interpolation used in GoFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:14683,Testability,test,testStat,14683,":Math::GoFTest::GetSigmaN ; (; const std::vector< size_t > & ; ns, . size_t ; N . ). staticprivate . Computation of sigma_N as described in (1) ; Definition at line 311 of file GoFTest.cxx. ◆ Instantiate(). void ROOT::Math::GoFTest::Instantiate ; (; const Double_t * ; sample, . size_t ; sampleSize . ). private . Definition at line 279 of file GoFTest.cxx. ◆ InterpolatePValues(). static Double_t ROOT::Math::GoFTest::InterpolatePValues ; (; int ; nsamples, . Double_t ; A2 . ). staticprivate . Linear interpolation used in GoFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:15220,Testability,test,test,15220,"oFTest::PValueAD2Samples. . ◆ KolmogorovSmirnov2SamplesTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 2-Samples Test. ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:15415,Testability,test,testStat,15415,". ; Returns by default the p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 913 of file GoFTest.cxx. ◆ KolmogorovSmirnov2SamplesTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnov2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 2-Samples Test. ; The Kolmogorov-Smirnov 2-Samples Test algorithm is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/ks2samp.htm and described and taken from https://root.cern/doc/master/namespaceTMath.html ; Definition at line 896 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [1/2]. Double_t ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provide",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16062,Testability,log,logarithm,16062,"(; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16121,Testability,test,test,16121,"(; const Char_t * ; option = ""p""); const. Kolmogorov-Smirnov 1-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16262,Testability,test,test,16262,"ue ""Dn"". ; Definition at line 945 of file GoFTest.cxx. ◆ KolmogorovSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Com",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16306,Testability,test,testStat,16306,"vSmirnovTest() [2/2]. void ROOT::Math::GoFTest::KolmogorovSmirnovTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as descri",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16374,Testability,test,test,16374,"est ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Kolmogorov-Smirnov 1-Sample Test. ; The Kolmogorov-Smirnov 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF()",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16542,Testability,test,test,16542,"for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/kstest.htm and described and taken from (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF(). void ROOT::Math::GoFTest::SetCDF ; (; ). private . Definition at line 244 of file GoFTest.cxx. ◆ SetDistribution(). void ROOT::Math::GoFTest::SetD",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16689,Testability,test,test,16689,"om (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF(). void ROOT::Math::GoFTest::SetCDF ; (; ). private . Definition at line 244 of file GoFTest.cxx. ◆ SetDistribution(). void ROOT::Math::GoFTest::SetDistribution ; (; EDistribution ; dist, . const std::vector< double > & ; distParams = {} . ). Sets the distribution for the predefined distribution ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:16726,Testability,test,test,16726,"om (4) Press W. H., Teukolsky S.A., Vetterling W.T., Flannery B.P. (2007), Numerical Recipes - The Art of Scientific Computing (Third Edition), Cambridge University Press ; Definition at line 921 of file GoFTest.cxx. ◆ LogNormalCDF(). Double_t ROOT::Math::GoFTest::LogNormalCDF ; (; Double_t ; x); const. private . ◆ LogSample(). void ROOT::Math::GoFTest::LogSample ; (; ). private . Applies the logarithm to the sample when the specified distribution to test is LogNormal. ; Definition at line 303 of file GoFTest.cxx. ◆ operator()() [1/2]. void ROOT::Math::GoFTest::operator() ; (; ETestType ; test, . Double_t & ; pvalue, . Double_t & ; testStat . ); const. The class's unary functions performing the gif test according to the ETestType provided. ; Definition at line 208 of file GoFTest.cxx. ◆ operator()() [2/2]. Double_t ROOT::Math::GoFTest::operator() ; (; ETestType ; test = kAD, . const Char_t * ; option = ""p"" . ); const. Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF(). void ROOT::Math::GoFTest::SetCDF ; (; ). private . Definition at line 244 of file GoFTest.cxx. ◆ SetDistribution(). void ROOT::Math::GoFTest::SetDistribution ; (; EDistribution ; dist, . const std::vector< double > & ; distParams = {} . ). Sets the distribution for the predefined distribution ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:17716,Testability,test,tests,17716,"ption ""t"" returns the test statistic value specific to the test type. ; Definition at line 225 of file GoFTest.cxx. ◆ operator=(). GoFTest ROOT::Math::GoFTest::operator= ; (; GoFTest & ; gof). private . Disallowed assign operator. . ◆ PValueAD1Sample(). Double_t ROOT::Math::GoFTest::PValueAD1Sample ; (; Double_t ; A2); const. private . Computation of the 1-Sample Anderson-Darling Test's p-value. ; Definition at line 483 of file GoFTest.cxx. ◆ PValueADKSamples(). Double_t ROOT::Math::GoFTest::PValueADKSamples ; (; size_t ; nsamples, . Double_t ; A2 . ). static . Computation of the K-Sample Anderson-Darling Test's p-value as described in (1) ; Definition at line 353 of file GoFTest.cxx. ◆ SetCDF(). void ROOT::Math::GoFTest::SetCDF ; (; ). private . Definition at line 244 of file GoFTest.cxx. ◆ SetDistribution(). void ROOT::Math::GoFTest::SetDistribution ; (; EDistribution ; dist, . const std::vector< double > & ; distParams = {} . ). Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ; Definition at line 124 of file GoFTest.cxx. ◆ SetDistributionFunction(). void ROOT::Math::GoFTest::SetDistributionFunction ; (; const IGenFunction & ; cdf, . Bool_t ; isPDF, . Double_t ; xmin, . Double_t ; xmax . ). private . Definition at line 267 of file GoFTest.cxx. ◆ SetParameters(). void ROOT::Math::GoFTest::SetParameters ; (; const std::vector< double > & ; params). private . Sets the distribution parameters. ; Definition at line 204 of file GoFTest.cxx. ◆ SetSamples(). void ROOT::Math::GoFTest::SetSamples ; (; std::vector< const Double_t * > ; samples, . const std::vector< size_t > ; samplesSizes . ). private . set a vector of samples ; Definition at line 181 of file GoFTest.cxx. ◆ SetUserCDF() [1/2]. void ROOT::Math::GoFTest::SetUserCDF ; (; const IGenFunction & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a cumulative distribution function for 1-s",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:18673,Testability,test,tests,18673,"tribution for the predefined distribution types and optionally its parameters for 1-sample tests. ; Definition at line 124 of file GoFTest.cxx. ◆ SetDistributionFunction(). void ROOT::Math::GoFTest::SetDistributionFunction ; (; const IGenFunction & ; cdf, . Bool_t ; isPDF, . Double_t ; xmin, . Double_t ; xmax . ). private . Definition at line 267 of file GoFTest.cxx. ◆ SetParameters(). void ROOT::Math::GoFTest::SetParameters ; (; const std::vector< double > & ; params). private . Sets the distribution parameters. ; Definition at line 204 of file GoFTest.cxx. ◆ SetSamples(). void ROOT::Math::GoFTest::SetSamples ; (; std::vector< const Double_t * > ; samples, . const std::vector< size_t > ; samplesSizes . ). private . set a vector of samples ; Definition at line 181 of file GoFTest.cxx. ◆ SetUserCDF() [1/2]. void ROOT::Math::GoFTest::SetUserCDF ; (; const IGenFunction & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ; Definition at line 147 of file GoFTest.h. ◆ SetUserCDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserCDF ; (; Dist & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a cumulative distribution function for 1-sample tests. ; The CDF must return zero for x=xmin and 1 for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:18969,Testability,test,tests,18969,"; xmax . ). private . Definition at line 267 of file GoFTest.cxx. ◆ SetParameters(). void ROOT::Math::GoFTest::SetParameters ; (; const std::vector< double > & ; params). private . Sets the distribution parameters. ; Definition at line 204 of file GoFTest.cxx. ◆ SetSamples(). void ROOT::Math::GoFTest::SetSamples ; (; std::vector< const Double_t * > ; samples, . const std::vector< size_t > ; samplesSizes . ). private . set a vector of samples ; Definition at line 181 of file GoFTest.cxx. ◆ SetUserCDF() [1/2]. void ROOT::Math::GoFTest::SetUserCDF ; (; const IGenFunction & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ; Definition at line 147 of file GoFTest.h. ◆ SetUserCDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserCDF ; (; Dist & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a cumulative distribution function for 1-sample tests. ; The CDF must return zero for x=xmin and 1 for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax =",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:19349,Testability,test,test,19349,"te . set a vector of samples ; Definition at line 181 of file GoFTest.cxx. ◆ SetUserCDF() [1/2]. void ROOT::Math::GoFTest::SetUserCDF ; (; const IGenFunction & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ; Definition at line 147 of file GoFTest.h. ◆ SetUserCDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserCDF ; (; Dist & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a cumulative distribution function for 1-sample tests. ; The CDF must return zero for x=xmin and 1 for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probabi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:19718,Testability,test,test,19718,"f file GoFTest.h. ◆ SetUserCDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserCDF ; (; Dist & ; cdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a cumulative distribution function for 1-sample tests. ; The CDF must return zero for x=xmin and 1 for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:20044,Testability,test,tests,20044,"for x=xmax. ; Definition at line 142 of file GoFTest.h. ◆ SetUserDistribution() [1/2]. void ROOT::Math::GoFTest::SetUserDistribution ; (; const IGenFunction & ; dist, . GoFTest::EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . The combined data. ; Definition at line 241 of file GoFTest.h. ◆ fDist. EDistribution ROOT::Math::GoFTest::fDist. private . Type of distribution. ; Definition at line 238 of file GoFTest.h. ◆ fParams. std::vector<Double_t> ROOT::Math::GoFTest::fParams. private . The distribution parameters (e.g. fParams[0] = mean",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:20381,Testability,test,tests,20381,"ample test using the ROOT::Math::IGenFunction interface. ; Definition at line 124 of file GoFTest.h. ◆ SetUserDistribution() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserDistribution ; (; Dist & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . The combined data. ; Definition at line 241 of file GoFTest.h. ◆ fDist. EDistribution ROOT::Math::GoFTest::fDist. private . Type of distribution. ; Definition at line 238 of file GoFTest.h. ◆ fParams. std::vector<Double_t> ROOT::Math::GoFTest::fParams. private . The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ; Definition at line 239 of file GoFTest.h. ◆ fSamples. std::vector<std::vector<Double_t> > ROOT::Math::GoFTest::fSamples. private . The input data. ; Definition at line 243 of file GoFTest.h. ◆ fTestSampleFromH0. Bool_t ROOT::Math::GoFTest::fTestSampleFromH0. private . Definition at l",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:20566,Testability,test,test,20566,"st & ; dist, . EUserDistribution ; userDist = kPDF, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution function for 1-sample test as a generic functor object. ; Definition at line 118 of file GoFTest.h. ◆ SetUserPDF() [1/2]. void ROOT::Math::GoFTest::SetUserPDF ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Specialization to set the user input distribution as a probability density function for 1-sample tests using the ROOT::Math::IGenFunction interface. ; Definition at line 135 of file GoFTest.h. ◆ SetUserPDF() [2/2]. template<class Dist > . void ROOT::Math::GoFTest::SetUserPDF ; (; Dist & ; pdf, . Double_t ; xmin = 1, . Double_t ; xmax = 0 . ). inline . Sets the user input distribution as a probability density function for 1-sample tests. ; Definition at line 130 of file GoFTest.h. Member Data Documentation. ◆ fCDF. std::unique_ptr<IGenFunction> ROOT::Math::GoFTest::fCDF. private . Pointer to CDF used in 1-sample test. ; Definition at line 235 of file GoFTest.h. ◆ fCombinedSamples. std::vector<Double_t> ROOT::Math::GoFTest::fCombinedSamples. private . The combined data. ; Definition at line 241 of file GoFTest.h. ◆ fDist. EDistribution ROOT::Math::GoFTest::fDist. private . Type of distribution. ; Definition at line 238 of file GoFTest.h. ◆ fParams. std::vector<Double_t> ROOT::Math::GoFTest::fParams. private . The distribution parameters (e.g. fParams[0] = mean, fParams[1] = sigma for a Gaussian) ; Definition at line 239 of file GoFTest.h. ◆ fSamples. std::vector<std::vector<Double_t> > ROOT::Math::GoFTest::fSamples. private . The input data. ; Definition at line 243 of file GoFTest.h. ◆ fTestSampleFromH0. Bool_t ROOT::Math::GoFTest::fTestSampleFromH0. private . Definition at line 245 of file GoFTest.h. Libraries for ROOT::Math::GoFTest:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/GoFTest.h; math/mathcore/src/GoFTest.c",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GoFTest.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:460,Integrability,wrap,wrap,460,". ROOT: ROOT::Math::GradFunctor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GradFunctor Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; GradFunctor class for Multidimensional gradient functions. ; It is used to wrap in a very C++ callable object to make gradient functions. It can be constructed in three different way: . from an object implementing both double operator()( const double * ) for the function evaluation and double Derivative(const double *, int icoord) for the partial derivatives . from an object implementing any member function like Foo::XXX(const double *) for the function evaluation and any member function like Foo::XXX(const double *, int icoord) for the partial derivatives . from two function objects implementing double operator()( const double * ) for the function evaluation and another function object implementing double operator() (const double *, int icoord) for the partial derivatives . from two function objects . The function dimension is required when constructing the functor. ; Definition at line 142 of file Functor.h. Public Member Functions;  GradFunctor ()=default;  Default constructor. ;  ; template<typename Func > ;  GradFunctor (const Func &f, unsigned int dim);  construct from a callable object of multi-dimension implementing operator()(const double *x) and Derivative(const double * x,icoord) ;  ; template<class PtrObj , typename MemFn , typename DerivMemFn , std::enable_if_t< std::is_floating_point< decltype((std::declval< std::remove_pointer_t< PtrObj > >().*std::declval< DerivMemFn >())(std::declval< const double * >(), std::declval< int >()))>::value , bool > ;  GradFunctor (const PtrObj &p, MemFn memFn, DerivMemFn gradFn, unsigned int dim);  Construct from a pointer to member function a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:3442,Modifiability,inherit,inherited,3442,"e(double const *)> const &f, std::function< double(double const *, unsigned int)> const &g, unsigned int dim);  Construct for Gradient Functions of multi-dimension Func gives the function evaluation, GradFunc the partial derivatives The function dimension is required. ;  ;  GradFunctor (std::function< double(double const *)> const &f, unsigned int dim, std::function< void(double const *, double *)> const &g);  Construct a new GradFunctor object using 2 std::function, one for the function evaluation and one for the Gradient Note the difference with the constructor above where partial derivative function is used as input. ;  ; GradFunctor * Clone () const override;  Clone a function. ;  ; void Gradient (const double *x, double *g) const override;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual unsigned int NDim () const=0;  Retrieve the dimension of the function. ;  ; virtual bool returnsInMinuit2ParameterSpace () const; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:4604,Modifiability,inherit,inherited,4604,"hm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual unsigned int NDim () const=0;  Retrieve the dimension of the function. ;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *x, unsigned int icoord) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; std::function< double(double const *, unsigned int)> fDerivFunc;  ; unsigned int fDim;  ; std::function< double(const double *)> fFunc;  ; std::function< void(const double *, double *)> fGradFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor:. This browser is not able to show SVG",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:5211,Modifiability,inherit,inherited,5211,"us step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual unsigned int NDim () const=0;  Retrieve the dimension of the function. ;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *x, unsigned int icoord) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; std::function< double(double const *, unsigned int)> fDerivFunc;  ; unsigned int fDim;  ; std::function< double(const double *)> fFunc;  ; std::function< void(const double *, double *)> fGradFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GradFunctor() [1/6]. ROOT::Math::GradFunctor::GradFunctor ; (; ). default . Default constructor. . ◆ GradFunctor() [2/6]. template<typename Func > . ROOT::Math::GradFunctor::GradFunctor ; (; const Func & ; f, . unsigned int ; dim . ). inline . construct from a callable object of multi-dimension implementing operator()(const double *x) and Derivative(const double * x,icoord) ; Definition at line 156 of file Functor.h. ◆ GradFunctor() [3/6]. template<class PtrObj , typename MemFn , typename DerivMemFn , std::enable_if_t< std::is_floating_point< decltype((std::declval< std::remove_pointer_t< Ptr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html:5399,Modifiability,inherit,inherited,5399,"us step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual unsigned int NDim () const=0;  Retrieve the dimension of the function. ;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *x, unsigned int icoord) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; std::function< double(double const *, unsigned int)> fDerivFunc;  ; unsigned int fDim;  ; std::function< double(const double *)> fFunc;  ; std::function< void(const double *, double *)> fGradFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GradFunctor() [1/6]. ROOT::Math::GradFunctor::GradFunctor ; (; ). default . Default constructor. . ◆ GradFunctor() [2/6]. template<typename Func > . ROOT::Math::GradFunctor::GradFunctor ; (; const Func & ; f, . unsigned int ; dim . ). inline . construct from a callable object of multi-dimension implementing operator()(const double *x) and Derivative(const double * x,icoord) ; Definition at line 156 of file Functor.h. ◆ GradFunctor() [3/6]. template<class PtrObj , typename MemFn , typename DerivMemFn , std::enable_if_t< std::is_floating_point< decltype((std::declval< std::remove_pointer_t< Ptr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:465,Integrability,wrap,wrap,465,". ROOT: ROOT::Math::GradFunctor1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GradFunctor1D Class ReferenceMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; GradFunctor1D class for one-dimensional gradient functions. ; It is used to wrap in a very C++ callable object to make a 1D gradient functions. It can be constructed in three different way: . from an object implementing both double operator()( double ) for the function evaluation and double Derivative(double ) for the partial derivatives . from an object implementing any member function like Foo::XXX(double ) for the function evaluation and any other member function like Foo::YYY(double ) for the derivative. . from an 2 function objects implementing double operator()( double ) . One object provides the function evaluation, the other the derivative. . Definition at line 269 of file Functor.h. Public Member Functions;  GradFunctor1D ()=default;  Default constructor. ;  ; template<typename Func > ;  GradFunctor1D (const Func &f);  Construct from an object with the right signature, implementing both operator() (double x) and Derivative(double x). ;  ; template<class PtrObj , typename MemFn , typename GradMemFn > ;  GradFunctor1D (const PtrObj &p, MemFn memFn, GradMemFn gradFn);  construct from a pointer to class and two pointers to member functions, one for the function evaluation and the other for the derivative. ;  ;  GradFunctor1D (std::function< double(double)> const &f, std::function< double(double)> const &g);  Specialized constructor from 2 function objects implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) cons",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:2049,Integrability,interface,interface,2049,"bject provides the function evaluation, the other the derivative. . Definition at line 269 of file Functor.h. Public Member Functions;  GradFunctor1D ()=default;  Default constructor. ;  ; template<typename Func > ;  GradFunctor1D (const Func &f);  Construct from an object with the right signature, implementing both operator() (double x) and Derivative(double x). ;  ; template<class PtrObj , typename MemFn , typename GradMemFn > ;  GradFunctor1D (const PtrObj &p, MemFn memFn, GradMemFn gradFn);  construct from a pointer to class and two pointers to member functions, one for the function evaluation and the other for the derivative. ;  ;  GradFunctor1D (std::function< double(double)> const &f, std::function< double(double)> const &g);  Specialized constructor from 2 function objects implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Priv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:2320,Integrability,interface,interface,2320,"ing both operator() (double x) and Derivative(double x). ;  ; template<class PtrObj , typename MemFn , typename GradMemFn > ;  GradFunctor1D (const PtrObj &p, MemFn memFn, GradMemFn gradFn);  construct from a pointer to class and two pointers to member functions, one for the function evaluation and the other for the derivative. ;  ;  GradFunctor1D (std::function< double(double)> const &f, std::function< double(double)> const &g);  Specialized constructor from 2 function objects implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoDerivative (double x) const override;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:2626,Integrability,interface,interface,2626,"d the other for the derivative. ;  ;  GradFunctor1D (std::function< double(double)> const &f, std::function< double(double)> const &g);  Specialized constructor from 2 function objects implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoDerivative (double x) const override;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fDerivFunc;  ; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:1909,Modifiability,inherit,inherited,1909,"bject provides the function evaluation, the other the derivative. . Definition at line 269 of file Functor.h. Public Member Functions;  GradFunctor1D ()=default;  Default constructor. ;  ; template<typename Func > ;  GradFunctor1D (const Func &f);  Construct from an object with the right signature, implementing both operator() (double x) and Derivative(double x). ;  ; template<class PtrObj , typename MemFn , typename GradMemFn > ;  GradFunctor1D (const PtrObj &p, MemFn memFn, GradMemFn gradFn);  construct from a pointer to class and two pointers to member functions, one for the function evaluation and the other for the derivative. ;  ;  GradFunctor1D (std::function< double(double)> const &f, std::function< double(double)> const &g);  Specialized constructor from 2 function objects implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Priv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:2719,Modifiability,inherit,inherited,2719,"s implementing double operator()(double x). ;  ; GradFunctor1D * Clone () const override;  Clone a function. ;  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionOneDim; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoDerivative (double x) const override;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fDerivFunc;  ; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor1D:. This brows",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:3441,Modifiability,inherit,inherited,3441,"adient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoDerivative (double x) const override;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fDerivFunc;  ; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GradFunctor1D() [1/4]. ROOT::Math::GradFunctor1D::GradFunctor1D ; (; ). default . Default constructor. . ◆ GradFunctor1D() [2/4]. template<typename Func > . ROOT::Math::GradFunctor1D::GradFunctor1D ; (; const Func & ; f). inline . Construct from an object with the right signature, implementing both operator() (double x) and Derivative(double x). ; Definition at line 279 of file Functor.h. ◆ GradFunctor1D() [3/4]. template<class PtrObj , typename MemFn , typename GradMemFn > . ROOT::Math::GradFunctor1D::GradFunctor1D ; (; const PtrObj & ; p, . MemFn ; memFn, . GradMemFn ; gradFn . ). inline . construct from a pointer to class and two",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html:3593,Modifiability,inherit,inherited,3593,"adient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoDerivative (double x) const override;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  . Private Attributes; std::function< double(double)> fDerivFunc;  ; std::function< double(double)> fFunc;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . #include <Math/Functor.h>. Inheritance diagram for ROOT::Math::GradFunctor1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GradFunctor1D() [1/4]. ROOT::Math::GradFunctor1D::GradFunctor1D ; (; ). default . Default constructor. . ◆ GradFunctor1D() [2/4]. template<typename Func > . ROOT::Math::GradFunctor1D::GradFunctor1D ; (; const Func & ; f). inline . Construct from an object with the right signature, implementing both operator() (double x) and Derivative(double x). ; Definition at line 279 of file Functor.h. ◆ GradFunctor1D() [3/4]. template<class PtrObj , typename MemFn , typename GradMemFn > . ROOT::Math::GradFunctor1D::GradFunctor1D ; (; const PtrObj & ; p, . MemFn ; memFn, . GradMemFn ; gradFn . ). inline . construct from a pointer to class and two",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GradFunctor1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GradFunctor1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSL1DMinimizerWrapper.html:374,Integrability,wrap,wrapper,374,. ROOT: ROOT::Math::GSL1DMinimizerWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSL1DMinimizerWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; wrapper class for gsl_min_fminimizer structure ; Definition at line 44 of file GSL1DMinimizerWrapper.h. Public Member Functions;  GSL1DMinimizerWrapper (const GSL1DMinimizerWrapper &)=delete;  ;  GSL1DMinimizerWrapper (const gsl_min_fminimizer_type *T);  ;  GSL1DMinimizerWrapper (GSL1DMinimizerWrapper &&)=delete;  ; virtual ~GSL1DMinimizerWrapper ();  ; gsl_min_fminimizer * Get () const;  ; GSL1DMinimizerWrapper & operator= (const GSL1DMinimizerWrapper &)=delete;  ; GSL1DMinimizerWrapper & operator= (GSL1DMinimizerWrapper &&)=delete;  . Private Attributes; gsl_min_fminimizer * fMinimizer;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSL1DMinimizerWrapper.h>; Constructor & Destructor Documentation. ◆ GSL1DMinimizerWrapper() [1/3]. ROOT::Math::GSL1DMinimizerWrapper::GSL1DMinimizerWrapper ; (; const gsl_min_fminimizer_type * ; T). inline . Definition at line 47 of file GSL1DMinimizerWrapper.h. ◆ ~GSL1DMinimizerWrapper(). virtual ROOT::Math::GSL1DMinimizerWrapper::~GSL1DMinimizerWrapper ; (; ). inlinevirtual . Definition at line 51 of file GSL1DMinimizerWrapper.h. ◆ GSL1DMinimizerWrapper() [2/3]. ROOT::Math::GSL1DMinimizerWrapper::GSL1DMinimizerWrapper ; (; const GSL1DMinimizerWrapper & ; ). delete . ◆ GSL1DMinimizerWrapper() [3/3]. ROOT::Math::GSL1DMinimizerWrapper::GSL1DMinimizerWrapper ; (; GSL1DMinimizerWrapper && ; ). delete . Member Function Documentation. ◆ Get(). gsl_min_fminimizer * ROOT::Math::GSL1DMinimizerWrapper::Get ; (; ); const. inline . Definition at line 61 of file GSL1DMinimizerWrapper.h. ◆ operator=() [1/2]. GSL1DMinimizerWr,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSL1DMinimizerWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSL1DMinimizerWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLChebSeries.html:271,Integrability,wrap,wrapper,271,. ROOT: ROOT::Math::GSLChebSeries Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLChebSeries Class Reference. ; wrapper class for C struct gsl_cheb_series ; Definition at line 44 of file GSLChebSeries.h. Public Member Functions;  GSLChebSeries (const GSLChebSeries &)=delete;  ;  GSLChebSeries (GSLChebSeries &&)=delete;  ;  GSLChebSeries (size_t n);  ; virtual ~GSLChebSeries ();  ; gsl_cheb_series * get () const;  ; GSLChebSeries & operator= (const GSLChebSeries &)=delete;  ; GSLChebSeries & operator= (GSLChebSeries &&)=delete;  . Private Attributes; gsl_cheb_series * m_cs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLChebSeries.h>; Constructor & Destructor Documentation. ◆ GSLChebSeries() [1/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; size_t ; n). inline . Definition at line 47 of file GSLChebSeries.h. ◆ ~GSLChebSeries(). virtual ROOT::Math::GSLChebSeries::~GSLChebSeries ; (; ). inlinevirtual . Definition at line 52 of file GSLChebSeries.h. ◆ GSLChebSeries() [2/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; const GSLChebSeries & ; ). delete . ◆ GSLChebSeries() [3/3]. ROOT::Math::GSLChebSeries::GSLChebSeries ; (; GSLChebSeries && ; ). delete . Member Function Documentation. ◆ get(). gsl_cheb_series * ROOT::Math::GSLChebSeries::get ; (; ); const. inline . Definition at line 62 of file GSLChebSeries.h. ◆ operator=() [1/2]. GSLChebSeries & ROOT::Math::GSLChebSeries::operator= ; (; const GSLChebSeries & ; ). delete . ◆ operator=() [2/2]. GSLChebSeries & ROOT::Math::GSLChebSeries::operator= ; (; GSLChebSeries && ; ). delete . Member Data Documentation. ◆ m_cs. gsl_cheb_series* ROOT::Math::GSLChebSeries::m_cs. private . Definition at line 66 of file GSLChebSeries.h. math/mathmore/src/GSLChebSeries.h. ROOTMathGSLChebSeries. ROOT master - Reference,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLChebSeries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLChebSeries.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:1651,Availability,error,error,1651,"ard (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:1845,Availability,error,error,1845,"ard (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3189,Availability,error,error,3189,"ion f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a po",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:6268,Availability,error,error,6268,":GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSLDerivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 123 of file GSLDerivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 117 of file GSLDerivator.cxx. ◆ Status(). int ROOT::Math::GSLDerivator::Status ; (; ); const. return the error status of the last integral calculation ; Definition at line 113 of file GSLDerivator.cxx. Member Data Documentation. ◆ fError. double ROOT::Math::GSLDerivator::fError. private . Definition at line 163 of file GSLDerivator.h. ◆ fFunction. GSLFunctionWrapper ROOT::Math::GSLDerivator::fFunction. private . Definition at line 165 of file GSLDerivator.h. ◆ fResult. double ROOT::Math::GSLDerivator::fResult. private . Definition at line 162 of file GSLDerivator.h. ◆ fStatus. int ROOT::Math::GSLDerivator::fStatus. private . Definition at line 161 of file GSLDerivator.h. math/mathmore/src/GSLDerivator.h; math/mathmore/src/GSLDerivator.cxx. ROOTMathGSLDerivator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:884,Energy Efficiency,adapt,adaptive,884,". ROOT: ROOT::Math::GSLDerivator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:1046,Energy Efficiency,adapt,adaptive,1046,"LDerivator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:1207,Energy Efficiency,adapt,adaptive,1207,"st of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the n",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:2035,Energy Efficiency,adapt,adaptive,2035,"ard (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:2242,Energy Efficiency,adapt,adaptive,2242," x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:2450,Energy Efficiency,adapt,adaptive,2450," void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3495,Energy Efficiency,adapt,adaptive,3495,"m with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x u",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3836,Energy Efficiency,adapt,adaptive,3836,"ithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward diff",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:4229,Energy Efficiency,adapt,adaptive,4229,"culation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:4496,Energy Efficiency,adapt,adaptive,4496,"daptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:4816,Energy Efficiency,adapt,adaptive,4816,"ative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSLDerivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 123 of file GSLDerivator.cxx. ◆ SetFunction() [2/2]. void R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:5157,Energy Efficiency,adapt,adaptive,5157,"Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSLDerivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 123 of file GSLDerivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:884,Modifiability,adapt,adaptive,884,". ROOT: ROOT::Math::GSLDerivator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:1046,Modifiability,adapt,adaptive,1046,"LDerivator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:1207,Modifiability,adapt,adaptive,1207,"st of all members ; ROOT::Math::GSLDerivator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Differentiation. ; Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). ; Definition at line 62 of file GSLDerivator.h. Public Member Functions;  GSLDerivator ();  Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ;  ; virtual ~GSLDerivator ();  destructor (no operations) ;  ; double EvalBackward (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the n",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:2035,Modifiability,adapt,adaptive,2035,"ard (double x, double h);  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h);  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h);  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:2242,Modifiability,adapt,adaptive,2242," x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:2450,Modifiability,adapt,adaptive,2450," void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  . — Static methods —; int fStatus;  ; double fResult;  ; double fError;  ; GSLFunctionWrapper fFunction;  ; int Status () const;  return the error status of the last integral calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double EvalCentral (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3495,Modifiability,adapt,adaptive,3495,"m with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x u",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3836,Modifiability,adapt,adaptive,3836,"ithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward diff",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:4229,Modifiability,adapt,adaptive,4229,"culation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:4496,Modifiability,adapt,adaptive,4496,"daptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:4816,Modifiability,adapt,adaptive,4816,"ative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSLDerivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 123 of file GSLDerivator.cxx. ◆ SetFunction() [2/2]. void R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:5157,Modifiability,adapt,adaptive,5157,"Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 90 of file GSLDerivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSLDerivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 123 of file GSLDerivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLError.html:478,Availability,error,error,478,". ROOT: ROOT::Math::GSLError Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLError Class Reference. ; class to change GSL Error handler to use ROOT one. ; It is used only when building the dictionary (G__DICTIONARY is defined) and not in the stand-alone version of the library. In that case the default GSL error handler is used ; Definition at line 38 of file GSLError.cxx. Public Member Functions;  GSLError ();  . Static Public Member Functions; static void Handler (const char *reason, const char *file, int line, int gsl_errno);  . Constructor & Destructor Documentation. ◆ GSLError(). ROOT::Math::GSLError::GSLError ; (; ). inline . Definition at line 42 of file GSLError.cxx. Member Function Documentation. ◆ Handler(). static void ROOT::Math::GSLError::Handler ; (; const char * ; reason, . const char * ; file, . int ; line, . int ; gsl_errno . ). inlinestatic . Definition at line 47 of file GSLError.cxx. The documentation for this class was generated from the following file:; math/mathmore/src/GSLError.cxx. ROOTMathGSLError. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLError.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLError.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html:419,Energy Efficiency,adapt,adapting,419,". ROOT: ROOT::Math::GSLFunctionAdapter< UserFunc > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLFunctionAdapter< UserFunc > Class Template Reference. ; template<class UserFunc>; class ROOT::Math::GSLFunctionAdapter< UserFunc >Class for adapting any C++ functor class to C function pointers used by GSL. ; The templated C++ function class must implement:; double operator( double x) and if the derivatives are required: double Gradient( double x); This class defines static methods with will be used to fill the gsl_function and gsl_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 63 of file GSLFunctionAdapter.h. Public Member Functions;  GSLFunctionAdapter ();  ; virtual ~GSLFunctionAdapter ();  . Static Public Member Functions; static double Df (double x, void *p);  ; static double F (double x, void *p);  ; static void Fdf (double x, void *p, double *f, double *df);  . #include <Math/GSLFunctionAdapter.h>; Constructor & Destructor Documentation. ◆ GSLFunctionAdapter(). template<class UserFunc > . ROOT::Math::GSLFunctionAdapter< UserFunc >::GSLFunctionAdapter ; (; ). inline . Definition at line 67 of file GSLFunctionAdapter.h. ◆ ~GSLFunctionAdapter(). template<class UserFunc > . virtual ROOT::Math::GSLFunctionAdapter< UserFunc >::~GSLFunctionAdapter ; (; ). inlinevirtual . Definition at line 68 of file GSLFunctionAdapter.h. Member Function Documentation. ◆ Df(). template<class UserFunc > . static double ROOT::Math::GSLFunctionAdapter< UserFunc >::Df ; (; double ; x, . void * ; p . ). inlinestatic . Definition at line 77 of file GSLFunctionAdapter.h. ◆ F(). template<class UserFunc > . static double ROOT::Math::GSLFunctionAdapter< UserFunc >::F ; (; double ; x, . void * ; p . ). inlinestatic . Definition at line 70 of file GSLFunctionAdapter.h. ◆ Fdf(",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html:419,Modifiability,adapt,adapting,419,". ROOT: ROOT::Math::GSLFunctionAdapter< UserFunc > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLFunctionAdapter< UserFunc > Class Template Reference. ; template<class UserFunc>; class ROOT::Math::GSLFunctionAdapter< UserFunc >Class for adapting any C++ functor class to C function pointers used by GSL. ; The templated C++ function class must implement:; double operator( double x) and if the derivatives are required: double Gradient( double x); This class defines static methods with will be used to fill the gsl_function and gsl_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 63 of file GSLFunctionAdapter.h. Public Member Functions;  GSLFunctionAdapter ();  ; virtual ~GSLFunctionAdapter ();  . Static Public Member Functions; static double Df (double x, void *p);  ; static double F (double x, void *p);  ; static void Fdf (double x, void *p, double *f, double *df);  . #include <Math/GSLFunctionAdapter.h>; Constructor & Destructor Documentation. ◆ GSLFunctionAdapter(). template<class UserFunc > . ROOT::Math::GSLFunctionAdapter< UserFunc >::GSLFunctionAdapter ; (; ). inline . Definition at line 67 of file GSLFunctionAdapter.h. ◆ ~GSLFunctionAdapter(). template<class UserFunc > . virtual ROOT::Math::GSLFunctionAdapter< UserFunc >::~GSLFunctionAdapter ; (; ). inlinevirtual . Definition at line 68 of file GSLFunctionAdapter.h. Member Function Documentation. ◆ Df(). template<class UserFunc > . static double ROOT::Math::GSLFunctionAdapter< UserFunc >::Df ; (; double ; x, . void * ; p . ). inlinestatic . Definition at line 77 of file GSLFunctionAdapter.h. ◆ F(). template<class UserFunc > . static double ROOT::Math::GSLFunctionAdapter< UserFunc >::F ; (; double ; x, . void * ; p . ). inlinestatic . Definition at line 70 of file GSLFunctionAdapter.h. ◆ Fdf(",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionAdapter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html:300,Integrability,wrap,wrap,300,". ROOT: ROOT::Math::GSLFunctionDerivWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLFunctionDerivWrapper Class Reference. ; class to wrap a gsl_function_fdf (with derivatives) ; Definition at line 105 of file GSLFunctionWrapper.h. Public Member Functions;  GSLFunctionDerivWrapper ();  ; double Derivative (double x);  ; void Fdf (double x, double &f, double &df);  ; gsl_function_fdf * GetFunc ();  ; bool IsValid ();  check if function is valid (has been set) ;  ; double operator() (double x);  ; void SetDerivPointer (GSLFuncPointer f);  ; void SetFdfPointer (GSLFdfPointer f);  ; void SetFuncPointer (GSLFuncPointer f);  ; void SetParams (void *p);  . Private Attributes; gsl_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLFunctionDerivWrapper(). ROOT::Math::GSLFunctionDerivWrapper::GSLFunctionDerivWrapper ; (; ). inline . Definition at line 109 of file GSLFunctionWrapper.h. Member Function Documentation. ◆ Derivative(). double ROOT::Math::GSLFunctionDerivWrapper::Derivative ; (; double ; x). inline . Definition at line 129 of file GSLFunctionWrapper.h. ◆ Fdf(). void ROOT::Math::GSLFunctionDerivWrapper::Fdf ; (; double ; x, . double & ; f, . double & ; df . ). inline . Definition at line 131 of file GSLFunctionWrapper.h. ◆ GetFunc(). gsl_function_fdf * ROOT::Math::GSLFunctionDerivWrapper::GetFunc ; (; ). inline . Definition at line 124 of file GSLFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLFunctionDerivWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 136 of file GSLFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLFunctionDerivWrapper::operator() ; (; double ; x). inline . Definition at line 127 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionDerivWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html:460,Energy Efficiency,adapt,adapt,460,. ROOT: ROOT::Math::GSLFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLFunctionWrapper Class Reference. ; Wrapper class to the gsl_function C structure. ; This class to fill the GSL C structure gsl_function with the C++ function objcet. Use the class ROOT::Math::GSLFunctionAdapter to adapt the C++ function object to the right signature (function pointer type) requested by GSL ; Definition at line 57 of file GSLFunctionWrapper.h. Public Member Functions;  GSLFunctionWrapper ();  ; GSLFuncPointer FunctionPtr ();  ; gsl_function * GetFunc ();  ; bool IsValid ();  check if function is valid (has been set) ;  ; double operator() (double x);  ; void SetFuncPointer (GSLFuncPointer f);  set in the GSL C struct the pointer to the function evaluation ;  ; template<class FuncType > ; void SetFunction (const FuncType &f);  fill the GSL C struct from a generic C++ callable object implementing operator() ;  ; void SetParams (void *p);  set in the GSL C struct the extra-object pointer ;  . Private Attributes; gsl_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLFunctionWrapper(). ROOT::Math::GSLFunctionWrapper::GSLFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLFunctionWrapper.h. Member Function Documentation. ◆ FunctionPtr(). GSLFuncPointer ROOT::Math::GSLFunctionWrapper::FunctionPtr ; (; ). inline . Definition at line 85 of file GSLFunctionWrapper.h. ◆ GetFunc(). gsl_function * ROOT::Math::GSLFunctionWrapper::GetFunc ; (; ). inline . Definition at line 83 of file GSLFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLFunctionWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 91 of file GSLFunctionWrapper.h.,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html:460,Modifiability,adapt,adapt,460,. ROOT: ROOT::Math::GSLFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLFunctionWrapper Class Reference. ; Wrapper class to the gsl_function C structure. ; This class to fill the GSL C structure gsl_function with the C++ function objcet. Use the class ROOT::Math::GSLFunctionAdapter to adapt the C++ function object to the right signature (function pointer type) requested by GSL ; Definition at line 57 of file GSLFunctionWrapper.h. Public Member Functions;  GSLFunctionWrapper ();  ; GSLFuncPointer FunctionPtr ();  ; gsl_function * GetFunc ();  ; bool IsValid ();  check if function is valid (has been set) ;  ; double operator() (double x);  ; void SetFuncPointer (GSLFuncPointer f);  set in the GSL C struct the pointer to the function evaluation ;  ; template<class FuncType > ; void SetFunction (const FuncType &f);  fill the GSL C struct from a generic C++ callable object implementing operator() ;  ; void SetParams (void *p);  set in the GSL C struct the extra-object pointer ;  . Private Attributes; gsl_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLFunctionWrapper(). ROOT::Math::GSLFunctionWrapper::GSLFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLFunctionWrapper.h. Member Function Documentation. ◆ FunctionPtr(). GSLFuncPointer ROOT::Math::GSLFunctionWrapper::FunctionPtr ; (; ). inline . Definition at line 85 of file GSLFunctionWrapper.h. ◆ GetFunc(). gsl_function * ROOT::Math::GSLFunctionWrapper::GetFunc ; (; ). inline . Definition at line 83 of file GSLFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLFunctionWrapper::IsValid ; (; ). inline . check if function is valid (has been set) ; Definition at line 91 of file GSLFunctionWrapper.h.,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:440,Deployability,integrat,integration,440,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:508,Deployability,integrat,integration,508,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:607,Deployability,integrat,integration,607,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:691,Deployability,integrat,integration,691,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:732,Deployability,integrat,integration,732,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:812,Deployability,integrat,integration,812,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:936,Deployability,integrat,integration,936,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1053,Deployability,integrat,integration,1053,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1105,Deployability,integrat,integration,1105,"o Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, do",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1220,Deployability,integrat,integration,1220,"Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructo",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1627,Deployability,integrat,integration,1627,"ten in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructor of GSL Integrator for Adaptive Singular integration. ;  ;  ~GSLIntegrator () override;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; IntegrationOneDim::Type GetType () const;  get type name ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:2332,Deployability,integrat,integration,2332," is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructor of GSL Integrator for Adaptive Singular integration. ;  ;  ~GSLIntegrator () override;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; IntegrationOneDim::Type GetType () const;  get type name ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral () override;  evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double Integral (const IGenFunction &f);  evaluate the Integral of a function f over the infinite interval (-inf,+inf) ;  ; double Integral (const IGenFunction &f, const std::vector< double > &pts);  evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ;  ; double Integral (const IGenFunction &f, double a, double b);  evaluate the Integral of a function f over the defined interval (a,b) ;  ; double Integral (const std::vector< double > &pts) override;  e",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:5750,Deployability,integrat,integration,5750," interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralLow (GSLFuncPointer f, void *p, double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6027,Deployability,integrat,integration,6027," interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralLow (GSLFuncPointer f, void *p, double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6216,Deployability,integrat,integration,6216,"double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6762,Deployability,integrat,integrator,6762,"de;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:7821,Deployability,integrat,integration,7821,"ctions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:8238,Deployability,integrat,integration,8238," Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:8317,Deployability,integrat,integration,8317,";  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:8834,Deployability,integrat,integration,8834," ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:9433,Deployability,integrat,integration,9433,"tervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 of file GSLIntegrator.cxx. ◆ ~GSLIntegrator(). ROOT::Math::GSLIntegrator::~GSLIntegrator ; (; ). override . Definition at line 151 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [5/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const GSLIntegrator & ; ). private . Definition at line 158 of file GSLIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLIntegrator::CheckFunction ; (; ). protected . Definition at line 408 of file GSLIntegrator.cxx. ◆ Error(). double ROOT::Math::GSLIntegrator::Error ; (; ); const. overridevirtual . return the estimate of the absolute Error of the last Integral calculation ; Implements ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:9588,Deployability,integrat,integration,9588,"SLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 of file GSLIntegrator.cxx. ◆ ~GSLIntegrator(). ROOT::Math::GSLIntegrator::~GSLIntegrator ; (; ). override . Definition at line 151 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [5/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const GSLIntegrator & ; ). private . Definition at line 158 of file GSLIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLIntegrator::CheckFunction ; (; ). protected . Definition at line 408 of file GSLIntegrator.cxx. ◆ Error(). double ROOT::Math::GSLIntegrator::Error ; (; ); const. overridevirtual . return the estimate of the absolute Error of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 390 of file GSLIntegrator.cxx. ◆ GetType(). Integr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12036,Deployability,integrat,integration,12036,"g the function previously set with GSLIntegrator::SetFunction method. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 274 of file GSLIntegrator.cxx. ◆ Integral() [2/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f). evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the l",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12472,Deployability,integrat,integration,12472,"b::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12515,Deployability,integrat,integration,12515,"b::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13052,Deployability,integrat,integration,13052,"egral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13490,Deployability,integrat,integration,13490,"he integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13533,Deployability,integrat,integration,13533,"he integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14538,Deployability,integrat,integration,14538,"e integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14807,Deployability,integrat,integration,14807,"inition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular va",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14895,Deployability,integrat,integration,14895,"inition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular va",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14938,Deployability,integrat,integration,14938,"inition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular va",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:16319,Deployability,integrat,integration,16319," c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular value of f . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 230 of file GSLIntegrator.cxx. ◆ IntegralLow() [1/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 341 of file GSLIntegrator.cxx. ◆ IntegralLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-inf",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:16693,Deployability,integrat,integration,16693," of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular value of f . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 230 of file GSLIntegrator.cxx. ◆ IntegralLow() [1/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 341 of file GSLIntegrator.cxx. ◆ IntegralLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) usi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:17436,Deployability,integrat,integration,17436,"lLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. alower value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::Virtual",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:17799,Deployability,integrat,integration,17799,"Integrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. alower value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 333 of file GSLIntegrator.h. ◆ operator=(). GSLIntegrator & ROOT::Math::GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:18770,Deployability,integrat,integration,18770,"value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 333 of file GSLIntegrator.h. ◆ operator=(). GSLIntegrator & ROOT::Math::GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 442 of file GSLIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLIntegrator::Result ; (; ); const. overridevirtual . return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 388 of file GSLIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Ma",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:19502,Deployability,integrat,integration,19502,":GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 442 of file GSLIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLIntegrator::Result ; (; ); const. overridevirtual . return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 388 of file GSLIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20086,Deployability,integrat,integration,20086,"ntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20202,Deployability,integrat,integration,20202,"rror ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLIntegrator::fAbsTol. private . Definition at line 380 of file GSLIntegrator.h. ◆ fError. double ROOT::Math::GSLIntegrator::fError. private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20258,Deployability,integrat,integrations,20258,"rror ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLIntegrator::fAbsTol. private . Definition at line 380 of file GSLIntegrator.h. ◆ fError. double ROOT::Math::GSLIntegrator::fError. private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:665,Energy Efficiency,adapt,adaptive,665,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:682,Energy Efficiency,adapt,adaptive,682,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:927,Energy Efficiency,adapt,adaptive,927,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14715,Energy Efficiency,efficient,efficient,14715,"inter ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously define",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14743,Energy Efficiency,adapt,adapter,14743,"inter ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously define",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:440,Integrability,integrat,integration,440,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:508,Integrability,integrat,integration,508,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:607,Integrability,integrat,integration,607,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:691,Integrability,integrat,integration,691,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:732,Integrability,integrat,integration,732,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:812,Integrability,integrat,integration,812,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:936,Integrability,integrat,integration,936,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1053,Integrability,integrat,integration,1053,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1105,Integrability,integrat,integration,1105,"o Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, do",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1220,Integrability,integrat,integration,1220,"Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructo",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1627,Integrability,integrat,integration,1627,"ten in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructor of GSL Integrator for Adaptive Singular integration. ;  ;  ~GSLIntegrator () override;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; IntegrationOneDim::Type GetType () const;  get type name ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:2332,Integrability,integrat,integration,2332," is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructor of GSL Integrator for Adaptive Singular integration. ;  ;  ~GSLIntegrator () override;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; IntegrationOneDim::Type GetType () const;  get type name ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral () override;  evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double Integral (const IGenFunction &f);  evaluate the Integral of a function f over the infinite interval (-inf,+inf) ;  ; double Integral (const IGenFunction &f, const std::vector< double > &pts);  evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ;  ; double Integral (const IGenFunction &f, double a, double b);  evaluate the Integral of a function f over the defined interval (a,b) ;  ; double Integral (const std::vector< double > &pts) override;  e",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:5750,Integrability,integrat,integration,5750," interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralLow (GSLFuncPointer f, void *p, double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6027,Integrability,integrat,integration,6027," interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralLow (GSLFuncPointer f, void *p, double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6216,Integrability,integrat,integration,6216,"double a) override;  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ;  ; double IntegralUp (GSLFuncPointer f, void *p, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ;  ; int NEval () const override;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6762,Integrability,integrat,integrator,6762,"de;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:7821,Integrability,integrat,integration,7821,"ctions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:8238,Integrability,integrat,integration,8238," Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:8317,Integrability,integrat,integration,8317,";  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLIntegrator() [1/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). Default constructor of GSL Integrator for Adaptive Singular integration. ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:8834,Integrability,integrat,integration,8834," ; Parameters. absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 77 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [2/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:9433,Integrability,integrat,integration,9433,"tervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 of file GSLIntegrator.cxx. ◆ ~GSLIntegrator(). ROOT::Math::GSLIntegrator::~GSLIntegrator ; (; ). override . Definition at line 151 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [5/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const GSLIntegrator & ; ). private . Definition at line 158 of file GSLIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLIntegrator::CheckFunction ; (; ). protected . Definition at line 408 of file GSLIntegrator.cxx. ◆ Error(). double ROOT::Math::GSLIntegrator::Error ; (; ); const. overridevirtual . return the estimate of the absolute Error of the last Integral calculation ; Implements ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:9588,Integrability,integrat,integration,9588,"SLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 of file GSLIntegrator.cxx. ◆ ~GSLIntegrator(). ROOT::Math::GSLIntegrator::~GSLIntegrator ; (; ). override . Definition at line 151 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [5/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const GSLIntegrator & ; ). private . Definition at line 158 of file GSLIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLIntegrator::CheckFunction ; (; ). protected . Definition at line 408 of file GSLIntegrator.cxx. ◆ Error(). double ROOT::Math::GSLIntegrator::Error ; (; ); const. overridevirtual . return the estimate of the absolute Error of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 390 of file GSLIntegrator.cxx. ◆ GetType(). Integr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:11474,Integrability,interface,interface,11474,"ast Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 390 of file GSLIntegrator.cxx. ◆ GetType(). IntegrationOneDim::Type ROOT::Math::GSLIntegrator::GetType ; (; ); const. inline . get type name ; Definition at line 362 of file GSLIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 459 of file GSLIntegrator.cxx. ◆ Integral() [1/9]. double ROOT::Math::GSLIntegrator::Integral ; (; ). overridevirtual . evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 274 of file GSLIntegrator.cxx. ◆ Integral() [2/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f). evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:11866,Integrability,interface,interface,11866,"l() [1/9]. double ROOT::Math::GSLIntegrator::Integral ; (; ). overridevirtual . evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 274 of file GSLIntegrator.cxx. ◆ Integral() [2/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f). evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameter",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12036,Integrability,integrat,integration,12036,"g the function previously set with GSLIntegrator::SetFunction method. ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 274 of file GSLIntegrator.cxx. ◆ Integral() [2/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f). evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the l",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12440,Integrability,interface,interface,12440,"b::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12472,Integrability,integrat,integration,12472,"b::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:12515,Integrability,integrat,integration,12515,"b::IGenFunction interface . Definition at line 329 of file GSLIntegrator.cxx. ◆ Integral() [3/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13052,Integrability,integrat,integration,13052,"egral ( a) and last element the upper value. . Definition at line 347 of file GSLIntegrator.cxx. ◆ Integral() [4/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13490,Integrability,integrat,integration,13490,"he integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:13533,Integrability,integrat,integration,13533,"he integration interval . Definition at line 323 of file GSLIntegrator.cxx. ◆ Integral() [5/9]. double ROOT::Math::GSLIntegrator::Integral ; (; const std::vector< double > & ; pts). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 252 of file GSLIntegrator.cxx. ◆ Integral() [6/9]. double ROOT::Math::GSLIntegrator::Integral ; (; double ; a, . double ; b . ). overridevirtual . evaluate the Integral over the defined interval (a,b) using the function previously set with GSLIntegrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14538,Integrability,integrat,integration,14538,"e integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 190 of file GSLIntegrator.cxx. ◆ Integral() [7/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14743,Integrability,adapter,adapter,14743,"inter ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously define",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14807,Integrability,integrat,integration,14807,"inition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular va",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14895,Integrability,integrat,integration,14895,"inition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular va",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14938,Integrability,integrat,integration,14938,"inition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular va",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:15383,Integrability,interface,interface,15383,"or function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular value of f . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 230 of file GSLIntegrator.cxx. ◆ IntegralLow() [1/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 341 of file GSLIntegrator.cxx. ◆ ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:16287,Integrability,interface,interface,16287," c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular value of f . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 230 of file GSLIntegrator.cxx. ◆ IntegralLow() [1/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 341 of file GSLIntegrator.cxx. ◆ IntegralLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-inf",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:16319,Integrability,integrat,integration,16319," c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular value of f . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 230 of file GSLIntegrator.cxx. ◆ IntegralLow() [1/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 341 of file GSLIntegrator.cxx. ◆ IntegralLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-inf",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:16693,Integrability,integrat,integration,16693," of the integral of a previously defined function f over the defined interval (a,b) with a singularity at c ; Parameters. alower interval value ; blower interval value ; csingular value of f . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 230 of file GSLIntegrator.cxx. ◆ IntegralLow() [1/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 341 of file GSLIntegrator.cxx. ◆ IntegralLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) usi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:17404,Integrability,interface,interface,17404,"lLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. alower value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::Virtual",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:17436,Integrability,integrat,integration,17436,"lLow() [2/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; double ; b). overridevirtual . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 306 of file GSLIntegrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. alower value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::Virtual",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:17799,Integrability,integrat,integration,17799,"Integrator.cxx. ◆ IntegralLow() [3/3]. double ROOT::Math::GSLIntegrator::IntegralLow ; (; GSLFuncPointer ; f, . void * ; p, . double ; b . ). evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) passing a free function pointer ; Definition at line 374 of file GSLIntegrator.cxx. ◆ IntegralUp() [1/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 335 of file GSLIntegrator.cxx. ◆ IntegralUp() [2/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; double ; a). overridevirtual . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with GSLIntegrator::SetFunction method. ; Parameters. alower value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 333 of file GSLIntegrator.h. ◆ operator=(). GSLIntegrator & ROOT::Math::GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:18770,Integrability,integrat,integration,18770,"value of the integration interval . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 290 of file GSLIntegrator.cxx. ◆ IntegralUp() [3/3]. double ROOT::Math::GSLIntegrator::IntegralUp ; (; GSLFuncPointer ; f, . void * ; p, . double ; a . ). evaluate the Integral of a function f over the semi-infinite interval (a,+inf) passing a free function pointer ; Definition at line 368 of file GSLIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 333 of file GSLIntegrator.h. ◆ operator=(). GSLIntegrator & ROOT::Math::GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 442 of file GSLIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLIntegrator::Result ; (; ); const. overridevirtual . return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 388 of file GSLIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Ma",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:19502,Integrability,integrat,integration,19502,":GSLIntegrator::operator= ; (; const GSLIntegrator & ; rhs). private . Definition at line 164 of file GSLIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::GSLIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 442 of file GSLIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLIntegrator::Result ; (; ); const. overridevirtual . return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 388 of file GSLIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20086,Integrability,integrat,integration,20086,"ntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20202,Integrability,integrat,integration,20202,"rror ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLIntegrator::fAbsTol. private . Definition at line 380 of file GSLIntegrator.h. ◆ fError. double ROOT::Math::GSLIntegrator::fError. private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:20258,Integrability,integrat,integrations,20258,"rror ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 399 of file GSLIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; const IGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorOneDim.; Definition at line 182 of file GSLIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLIntegrator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set function from a GSL pointer function type. ; Definition at line 175 of file GSLIntegrator.cxx. ◆ SetIntegrationRule(). void ROOT::Math::GSLIntegrator::SetIntegrationRule ; (; Integration::GKRule ; rule). set the integration rule (Gauss-Kronrod rule). ; The possible rules are defined in the Integration::GKRule enumeration. The integration rule can be modified only for ADAPTIVE type integrations ; Definition at line 406 of file GSLIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLIntegrator::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Definition at line 416 of file GSLIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 403 of file GSLIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 392 of file GSLIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLIntegrator::fAbsTol. private . Definition at line 380 of file GSLIntegrator.h. ◆ fError. double ROOT::Math::GSLIntegrator::fError. private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:665,Modifiability,adapt,adaptive,665,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:682,Modifiability,adapt,adaptive,682,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:927,Modifiability,adapt,adaptive,927,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6565,Modifiability,inherit,inherited,6565,"de;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:6803,Modifiability,inherit,inherited,6803,"de;  return number of function evaluations in calculating the integral ;  ; ROOT::Math::IntegratorOneDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLFuncPointer f, void *p=nullptr);  Set function from a GSL pointer function type. ;  ; void SetIntegrationRule (Integration::GKRule);  set the integration rule (Gauss-Kronrod rule). ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt) override;  set the options ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  . Private Member Functions;  GSLIntegrator (const GSLIntegrator &);  ; GSLIntegrator & operator= (const GSLIntegrator &);  . Private Attributes; double fAbsTol;  ; double fError;  ; GSLFunctionWrapper * fFunction;  ; size_t fMaxIntervals;  ; int fNEval;  ; double fRelTol;  ; double fResult;  ; Integration::GKRule fRule;  ; size_t fSize;  ; int fStatus;  ; Integration::Type fType;  ; GSLIntegrationWorkspace * fWorkspace;  . #include <Math/GSLIntegrator.h>. Inheritance diagram for ROOT::Math::GSLIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:9507,Modifiability,plug-in,plug-in,9507,"tervals . Definition at line 95 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [3/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const Integration::Type ; type, . const Integration::GKRule ; rule, . double ; absTol = 1.E-9, . double ; relTol = 1E-6, . size_t ; size = 1000 . ). generic constructor for GSL Integrator ; Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 56 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [4/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const char * ; type, . int ; rule, . double ; absTol, . double ; relTol, . size_t ; size . ). constructor of GSL Integrator. ; In the case of Adaptive integration the Gauss-Krond rule of 31 points is used This is used by the plug-in manager (need a char * instead of enumerations); Parameters. typetype of integration. The possible types are defined in the Integration::Type enumeration ; ruleGauss-Kronrod rule (from 1 to 6) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals . Definition at line 114 of file GSLIntegrator.cxx. ◆ ~GSLIntegrator(). ROOT::Math::GSLIntegrator::~GSLIntegrator ; (; ). override . Definition at line 151 of file GSLIntegrator.cxx. ◆ GSLIntegrator() [5/5]. ROOT::Math::GSLIntegrator::GSLIntegrator ; (; const GSLIntegrator & ; ). private . Definition at line 158 of file GSLIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLIntegrator::CheckFunction ; (; ). protected . Definition at line 408 of file GSLIntegrator.cxx. ◆ Error(). double ROOT::Math::GSLIntegrator::Error ; (; ); const. overridevirtual . return the estimate of the absolute Error of the last Integral calculation ; Implements ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14743,Modifiability,adapt,adapter,14743,"inter ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously define",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:419,Performance,perform,performing,419,". ROOT: ROOT::Math::GSLIntegrator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLIntegrator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Class for performing numerical integration of a function in one dimension. ; It uses the numerical integration algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:1442,Performance,perform,performances,1442,"ation algorithms of GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophicticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 90 of file GSLIntegrator.h. Public Member Functions;  GSLIntegrator (const char *type, int rule, double absTol, double relTol, size_t size);  constructor of GSL Integrator. ;  ;  GSLIntegrator (const Integration::Type type, const Integration::GKRule rule, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  generic constructor for GSL Integrator ;  ;  GSLIntegrator (const Integration::Type type, double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  constructor of GSL Integrator. ;  ;  GSLIntegrator (double absTol=1.E-9, double relTol=1E-6, size_t size=1000);  Default constructor of GSL Integrator for Adaptive Singular integration. ;  ;  ~GSLIntegrator () override;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; IntegrationOneDim::T",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:5558,Availability,toler,tolerance,5558,"y Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer) (double *, size_t, void *). Definition at line 141 of file GSLMCIntegrator.h. ◆ Type. typedef MCIntegration::Type ROOT::Math::GSLMCIntegrator::Type. Definition at line 78 of file GSLMCIntegrator.h. Constructor & Destructor Documentation. ◆ GSLMCIntegrator() [1/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; MCIntegration::Type ; type = MCIntegration::kVEGAS, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:5702,Availability,toler,tolerance,5702,"uble(* ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer) (double *, size_t, void *). Definition at line 141 of file GSLMCIntegrator.h. ◆ Type. typedef MCIntegration::Type ROOT::Math::GSLMCIntegrator::Type. Definition at line 78 of file GSLMCIntegrator.h. Constructor & Destructor Documentation. ◆ GSLMCIntegrator() [1/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; MCIntegration::Type ; type = MCIntegration::kVEGAS, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:13260,Availability,error,error,13260, line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typeName). set integration method using a name instead of an enumeration ; Definition at line 306 of file GSLMCIntegrator.cxx. ◆ Sigma(). double ROOT::Math::GSLMCIntegrator::Sigma ; (; ). set parameters for PLAIN method ; returns the error sigma from the last iteration of the Vegas algorithm ; Definition at line 419 of file GSLMCIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLMCIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::Math::GSLMCIntegrator::fDim. private . Definition at line 313 of file GSLMCIntegrator.h. ◆ fError. double ROOT::Math::GSLMCIntegrator::fError. private . Definition at line 321 of file GSLMCIntegrator.h. ◆ fExtGen. bool ROOT::Math::GSLMCIntegrator::fExtGen. private . Definition at line 323 of file GSLMCIntegrator.h. ◆ fFunction. GSLMonteFunctionWrapper* ROOT::Math::GSLMCIntegrator::fFunc,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:1969,Deployability,integrat,integration,1969," double relTol=-1, unsigned int calls=0);  constructor of GSL MCIntegrator. ;  ;  ~GSLMCIntegrator () override;  destructor ;  ; double ChiSqr ();  returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; std::unique_ptr< ROOT::Math::IOptions > ExtraOptions () const;  get the specific options (for Vegas or Miser) in term of string- name. ;  ; MCIntegration::Type GetType () const;  return the type (need to be called GetType to avoid a conflict with typedef) ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (const double *a, const double *b) override;  evaluate the integral using the previously defined function ;  ; double Integral (const GSLMonteFuncPointer &f, unsigned int dim, double *a, double *b, void *p=nullptr);  evaluate the Integral of a function f over the defined hypercube (a,b) ;  ; int NEval () const override;  return number of function evaluations in calculating the integral (This is an fixed by the user) ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the type of the integration used ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use strat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2043,Deployability,integrat,integration,2043," double relTol=-1, unsigned int calls=0);  constructor of GSL MCIntegrator. ;  ;  ~GSLMCIntegrator () override;  destructor ;  ; double ChiSqr ();  returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; std::unique_ptr< ROOT::Math::IOptions > ExtraOptions () const;  get the specific options (for Vegas or Miser) in term of string- name. ;  ; MCIntegration::Type GetType () const;  return the type (need to be called GetType to avoid a conflict with typedef) ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (const double *a, const double *b) override;  evaluate the integral using the previously defined function ;  ; double Integral (const GSLMonteFuncPointer &f, unsigned int dim, double *a, double *b, void *p=nullptr);  evaluate the Integral of a function f over the defined hypercube (a,b) ;  ; int NEval () const override;  return number of function evaluations in calculating the integral (This is an fixed by the user) ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the type of the integration used ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use strat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2345,Deployability,integrat,integration,2345,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2571,Deployability,integrat,integration,2571,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2969,Deployability,integrat,integration,2969,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3316,Deployability,integrat,integration,3316,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3386,Deployability,integrat,integration,3386,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3825,Deployability,integrat,integrator,3825,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:5321,Deployability,integrat,integration,5321,"Wrapper * fFunction;  ; double fRelTol;  ; double fResult;  ; GSLRngWrapper * fRng;  ; int fStatus;  ; MCIntegration::Type fType;  ; GSLMCIntegrationWorkspace * fWorkspace;  . #include <Math/GSLMCIntegrator.h>. Inheritance diagram for ROOT::Math::GSLMCIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer) (double *, size_t, void *). Definition at line 141 of file GSLMCIntegrator.h. ◆ Type. typedef MCIntegration::Type ROOT::Math::GSLMCIntegrator::Type. Definition at line 78 of file GSLMCIntegrator.h. Constructor & Destructor Documentation. ◆ GSLMCIntegrator() [1/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; MCIntegration::Type ; type = MCIntegration::kVEGAS, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:5363,Deployability,integrat,integration,5363," double fResult;  ; GSLRngWrapper * fRng;  ; int fStatus;  ; MCIntegration::Type fType;  ; GSLMCIntegrationWorkspace * fWorkspace;  . #include <Math/GSLMCIntegrator.h>. Inheritance diagram for ROOT::Math::GSLMCIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer) (double *, size_t, void *). Definition at line 141 of file GSLMCIntegrator.h. ◆ Type. typedef MCIntegration::Type ROOT::Math::GSLMCIntegrator::Type. Definition at line 78 of file GSLMCIntegrator.h. Constructor & Destructor Documentation. ◆ GSLMCIntegrator() [1/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; MCIntegration::Type ; type = MCIntegration::kVEGAS, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; ca",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6198,Deployability,integrat,integration,6198,"ble ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMC",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6240,Deployability,integrat,integration,6240,"default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMCIntegrator::DoInitialize ; (; ). protected . Definition at line 401 of file GSLMCIntegrator.cxx. ◆ Error(). double R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9008,Deployability,integrat,integration,9008,"; ); const. inline . return the type (need to be called GetType to avoid a conflict with typedef) ; Definition at line 273 of file GSLMCIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLMCIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 466 of file GSLMCIntegrator.cxx. ◆ Integral() [1/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const double * ; a, . const double * ; b . ). overridevirtual . evaluate the integral using the previously defined function ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 182 of file GSLMCIntegrator.cxx. ◆ Integral() [2/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const GSLMonteFuncPointer & ; f, . unsigned int ; dim, . double * ; a, . double * ; b, . void * ; p = nullptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integratio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9051,Deployability,integrat,integration,9051,"; ); const. inline . return the type (need to be called GetType to avoid a conflict with typedef) ; Definition at line 273 of file GSLMCIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLMCIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 466 of file GSLMCIntegrator.cxx. ◆ Integral() [1/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const double * ; a, . const double * ; b . ). overridevirtual . evaluate the integral using the previously defined function ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 182 of file GSLMCIntegrator.cxx. ◆ Integral() [2/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const GSLMonteFuncPointer & ; f, . unsigned int ; dim, . double * ; a, . double * ; b, . void * ; p = nullptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integratio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9762,Deployability,integrat,integration,9762,"llptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integration used ; return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 248 of file GSLMCIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLMCIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 271 of file GSLMCIntegrator.cxx. ◆ SetExtraOptions(). void ROOT::Math::GSLMCIntegrator::SetExtraOptions ; (; const ROOT::Math::IOptions & ; opt). Set the extra options for Vegas and Miser. ; Definition at line 489 of file GSLMCIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9990,Deployability,integrat,integration,9990,"per value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integration used ; return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 248 of file GSLMCIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLMCIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 271 of file GSLMCIntegrator.cxx. ◆ SetExtraOptions(). void ROOT::Math::GSLMCIntegrator::SetExtraOptions ; (; const ROOT::Math::IOptions & ; opt). Set the extra options for Vegas and Miser. ; Definition at line 489 of file GSLMCIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 157 of file GSLMCIntegrator.cxx. ◆ SetFunction() [2",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:10765,Deployability,integrat,integration,10765,"ration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integration used ; return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 248 of file GSLMCIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLMCIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 271 of file GSLMCIntegrator.cxx. ◆ SetExtraOptions(). void ROOT::Math::GSLMCIntegrator::SetExtraOptions ; (; const ROOT::Math::IOptions & ; opt). Set the extra options for Vegas and Miser. ; Definition at line 489 of file GSLMCIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 157 of file GSLMCIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; GSLMonteFuncPointer ; f, . unsigned int ; dim, . void * ; p = nullptr . ). Definition at line 168 of file GSLMCIntegrator.cxx. ◆ SetGenerator(). void ROOT::Math::GSLMCIntegrator::SetGenerator ; (; GSLRandomEngine & ; r). set random number generator ; Definition at line 273 of file GSLMCIntegrator.cxx. ◆ SetMode(). void ROOT::Math::GSLMCIntegrator::SetMode ; (; MCIntegration::Mode ; mode). set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will alway",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:11487,Deployability,integrat,integration,11487,"grator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 157 of file GSLMCIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; GSLMonteFuncPointer ; f, . unsigned int ; dim, . void * ; p = nullptr . ). Definition at line 168 of file GSLMCIntegrator.cxx. ◆ SetGenerator(). void ROOT::Math::GSLMCIntegrator::SetGenerator ; (; GSLRandomEngine & ; r). set random number generator ; Definition at line 273 of file GSLMCIntegrator.cxx. ◆ SetMode(). void ROOT::Math::GSLMCIntegrator::SetMode ; (; MCIntegration::Mode ; mode). set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ; Definition at line 331 of file GSLMCIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLMCIntegrator::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the integration options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desire",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:11994,Deployability,integrat,integration,11994,"n() [2/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; GSLMonteFuncPointer ; f, . unsigned int ; dim, . void * ; p = nullptr . ). Definition at line 168 of file GSLMCIntegrator.cxx. ◆ SetGenerator(). void ROOT::Math::GSLMCIntegrator::SetGenerator ; (; GSLRandomEngine & ; r). set random number generator ; Definition at line 273 of file GSLMCIntegrator.cxx. ◆ SetMode(). void ROOT::Math::GSLMCIntegrator::SetMode ; (; MCIntegration::Mode ; mode). set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ; Definition at line 331 of file GSLMCIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLMCIntegrator::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the integration options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:12870,Deployability,integrat,integration,12870,Options ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the integration options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typeName). set integration method using a name instead of an enumeration ; Definition at line 306 of file GSLMCIntegrator.cxx. ◆ Sigma(). double ROOT::Math::GSLMCIntegrator::Sigma ; (; ). set parameters for PLAIN method ; returns the error sigma from the last iteration of the Vegas algorithm ; Definition at line 419 of file GSLMCIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLMCIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:13041,Deployability,integrat,integration,13041,e 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typeName). set integration method using a name instead of an enumeration ; Definition at line 306 of file GSLMCIntegrator.cxx. ◆ Sigma(). double ROOT::Math::GSLMCIntegrator::Sigma ; (; ). set parameters for PLAIN method ; returns the error sigma from the last iteration of the Vegas algorithm ; Definition at line 419 of file GSLMCIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLMCIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::Math::GSLMCIntegrator::fDim. private . Definition at line 313 of file GSLMCIntegrator.h. ◆ fError. double ROOT::Math::GSLMCIntegrator::fError. private . Definition at line 321 of file GSLMCI,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:1969,Integrability,integrat,integration,1969," double relTol=-1, unsigned int calls=0);  constructor of GSL MCIntegrator. ;  ;  ~GSLMCIntegrator () override;  destructor ;  ; double ChiSqr ();  returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; std::unique_ptr< ROOT::Math::IOptions > ExtraOptions () const;  get the specific options (for Vegas or Miser) in term of string- name. ;  ; MCIntegration::Type GetType () const;  return the type (need to be called GetType to avoid a conflict with typedef) ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (const double *a, const double *b) override;  evaluate the integral using the previously defined function ;  ; double Integral (const GSLMonteFuncPointer &f, unsigned int dim, double *a, double *b, void *p=nullptr);  evaluate the Integral of a function f over the defined hypercube (a,b) ;  ; int NEval () const override;  return number of function evaluations in calculating the integral (This is an fixed by the user) ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the type of the integration used ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use strat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2043,Integrability,integrat,integration,2043," double relTol=-1, unsigned int calls=0);  constructor of GSL MCIntegrator. ;  ;  ~GSLMCIntegrator () override;  destructor ;  ; double ChiSqr ();  returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; std::unique_ptr< ROOT::Math::IOptions > ExtraOptions () const;  get the specific options (for Vegas or Miser) in term of string- name. ;  ; MCIntegration::Type GetType () const;  return the type (need to be called GetType to avoid a conflict with typedef) ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (const double *a, const double *b) override;  evaluate the integral using the previously defined function ;  ; double Integral (const GSLMonteFuncPointer &f, unsigned int dim, double *a, double *b, void *p=nullptr);  evaluate the Integral of a function f over the defined hypercube (a,b) ;  ; int NEval () const override;  return number of function evaluations in calculating the integral (This is an fixed by the user) ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the type of the integration used ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use strat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2345,Integrability,integrat,integration,2345,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2571,Integrability,integrat,integration,2571,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:2969,Integrability,integrat,integration,2969,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3316,Integrability,integrat,integration,3316,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3386,Integrability,integrat,integration,3386,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3825,Integrability,integrat,integrator,3825,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:5321,Integrability,integrat,integration,5321,"Wrapper * fFunction;  ; double fRelTol;  ; double fResult;  ; GSLRngWrapper * fRng;  ; int fStatus;  ; MCIntegration::Type fType;  ; GSLMCIntegrationWorkspace * fWorkspace;  . #include <Math/GSLMCIntegrator.h>. Inheritance diagram for ROOT::Math::GSLMCIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer) (double *, size_t, void *). Definition at line 141 of file GSLMCIntegrator.h. ◆ Type. typedef MCIntegration::Type ROOT::Math::GSLMCIntegrator::Type. Definition at line 78 of file GSLMCIntegrator.h. Constructor & Destructor Documentation. ◆ GSLMCIntegrator() [1/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; MCIntegration::Type ; type = MCIntegration::kVEGAS, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:5363,Integrability,integrat,integration,5363," double fResult;  ; GSLRngWrapper * fRng;  ; int fStatus;  ; MCIntegration::Type fType;  ; GSLMCIntegrationWorkspace * fWorkspace;  . #include <Math/GSLMCIntegrator.h>. Inheritance diagram for ROOT::Math::GSLMCIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMCIntegrator::GSLMonteFuncPointer) (double *, size_t, void *). Definition at line 141 of file GSLMCIntegrator.h. ◆ Type. typedef MCIntegration::Type ROOT::Math::GSLMCIntegrator::Type. Definition at line 78 of file GSLMCIntegrator.h. Constructor & Destructor Documentation. ◆ GSLMCIntegrator() [1/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; MCIntegration::Type ; type = MCIntegration::kVEGAS, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; ca",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6198,Integrability,integrat,integration,6198,"ble ; relTol = -1, . unsigned int ; calls = 0 . ). explicit . constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMC",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6240,Integrability,integrat,integration,6240,"default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMCIntegrator::DoInitialize ; (; ). protected . Definition at line 401 of file GSLMCIntegrator.cxx. ◆ Error(). double R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:8957,Integrability,interface,interface,8957,"; ); const. inline . return the type (need to be called GetType to avoid a conflict with typedef) ; Definition at line 273 of file GSLMCIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLMCIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 466 of file GSLMCIntegrator.cxx. ◆ Integral() [1/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const double * ; a, . const double * ; b . ). overridevirtual . evaluate the integral using the previously defined function ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 182 of file GSLMCIntegrator.cxx. ◆ Integral() [2/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const GSLMonteFuncPointer & ; f, . unsigned int ; dim, . double * ; a, . double * ; b, . void * ; p = nullptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integratio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9008,Integrability,integrat,integration,9008,"; ); const. inline . return the type (need to be called GetType to avoid a conflict with typedef) ; Definition at line 273 of file GSLMCIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLMCIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 466 of file GSLMCIntegrator.cxx. ◆ Integral() [1/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const double * ; a, . const double * ; b . ). overridevirtual . evaluate the integral using the previously defined function ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 182 of file GSLMCIntegrator.cxx. ◆ Integral() [2/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const GSLMonteFuncPointer & ; f, . unsigned int ; dim, . double * ; a, . double * ; b, . void * ; p = nullptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integratio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9051,Integrability,integrat,integration,9051,"; ); const. inline . return the type (need to be called GetType to avoid a conflict with typedef) ; Definition at line 273 of file GSLMCIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLMCIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 466 of file GSLMCIntegrator.cxx. ◆ Integral() [1/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const double * ; a, . const double * ; b . ). overridevirtual . evaluate the integral using the previously defined function ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 182 of file GSLMCIntegrator.cxx. ◆ Integral() [2/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const GSLMonteFuncPointer & ; f, . unsigned int ; dim, . double * ; a, . double * ; b, . void * ; p = nullptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integratio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9762,Integrability,integrat,integration,9762,"llptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integration used ; return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 248 of file GSLMCIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLMCIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 271 of file GSLMCIntegrator.cxx. ◆ SetExtraOptions(). void ROOT::Math::GSLMCIntegrator::SetExtraOptions ; (; const ROOT::Math::IOptions & ; opt). Set the extra options for Vegas and Miser. ; Definition at line 489 of file GSLMCIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:9990,Integrability,integrat,integration,9990,"per value of the integration interval ; ppointer to parameter array . Definition at line 228 of file GSLMCIntegrator.cxx. ◆ NEval(). int ROOT::Math::GSLMCIntegrator::NEval ; (; ); const. inlineoverridevirtual . return number of function evaluations in calculating the integral (This is an fixed by the user) ; Reimplemented from ROOT::Math::VirtualIntegrator.; Definition at line 195 of file GSLMCIntegrator.h. ◆ operator=(). GSLMCIntegrator & ROOT::Math::GSLMCIntegrator::operator= ; (; const GSLMCIntegrator & ; ). private . Definition at line 151 of file GSLMCIntegrator.cxx. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::GSLMCIntegrator::Options ; (; ); const. overridevirtual . get the option used for the integration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integration used ; return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 248 of file GSLMCIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLMCIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 271 of file GSLMCIntegrator.cxx. ◆ SetExtraOptions(). void ROOT::Math::GSLMCIntegrator::SetExtraOptions ; (; const ROOT::Math::IOptions & ; opt). Set the extra options for Vegas and Miser. ; Definition at line 489 of file GSLMCIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 157 of file GSLMCIntegrator.cxx. ◆ SetFunction() [2",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:10765,Integrability,integrat,integration,10765,"ration ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 473 of file GSLMCIntegrator.cxx. ◆ Result(). double ROOT::Math::GSLMCIntegrator::Result ; (; ); const. overridevirtual . return the type of the integration used ; return the Result of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 248 of file GSLMCIntegrator.cxx. ◆ SetAbsTolerance(). void ROOT::Math::GSLMCIntegrator::SetAbsTolerance ; (; double ; absTolerance). overridevirtual . set the desired absolute Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 271 of file GSLMCIntegrator.cxx. ◆ SetExtraOptions(). void ROOT::Math::GSLMCIntegrator::SetExtraOptions ; (; const ROOT::Math::IOptions & ; opt). Set the extra options for Vegas and Miser. ; Definition at line 489 of file GSLMCIntegrator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 157 of file GSLMCIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; GSLMonteFuncPointer ; f, . unsigned int ; dim, . void * ; p = nullptr . ). Definition at line 168 of file GSLMCIntegrator.cxx. ◆ SetGenerator(). void ROOT::Math::GSLMCIntegrator::SetGenerator ; (; GSLRandomEngine & ; r). set random number generator ; Definition at line 273 of file GSLMCIntegrator.cxx. ◆ SetMode(). void ROOT::Math::GSLMCIntegrator::SetMode ; (; MCIntegration::Mode ; mode). set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will alway",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:11487,Integrability,integrat,integration,11487,"grator::SetFunction ; (; const IMultiGenFunction & ; f). overridevirtual . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 157 of file GSLMCIntegrator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; GSLMonteFuncPointer ; f, . unsigned int ; dim, . void * ; p = nullptr . ). Definition at line 168 of file GSLMCIntegrator.cxx. ◆ SetGenerator(). void ROOT::Math::GSLMCIntegrator::SetGenerator ; (; GSLRandomEngine & ; r). set random number generator ; Definition at line 273 of file GSLMCIntegrator.cxx. ◆ SetMode(). void ROOT::Math::GSLMCIntegrator::SetMode ; (; MCIntegration::Mode ; mode). set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ; Definition at line 331 of file GSLMCIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLMCIntegrator::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the integration options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desire",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:11994,Integrability,integrat,integration,11994,"n() [2/2]. void ROOT::Math::GSLMCIntegrator::SetFunction ; (; GSLMonteFuncPointer ; f, . unsigned int ; dim, . void * ; p = nullptr . ). Definition at line 168 of file GSLMCIntegrator.cxx. ◆ SetGenerator(). void ROOT::Math::GSLMCIntegrator::SetGenerator ; (; GSLRandomEngine & ; r). set random number generator ; Definition at line 273 of file GSLMCIntegrator.cxx. ◆ SetMode(). void ROOT::Math::GSLMCIntegrator::SetMode ; (; MCIntegration::Mode ; mode). set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ; Definition at line 331 of file GSLMCIntegrator.cxx. ◆ SetOptions(). void ROOT::Math::GSLMCIntegrator::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the integration options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:12870,Integrability,integrat,integration,12870,Options ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). overridevirtual . set the integration options ; Reimplemented from ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typeName). set integration method using a name instead of an enumeration ; Definition at line 306 of file GSLMCIntegrator.cxx. ◆ Sigma(). double ROOT::Math::GSLMCIntegrator::Sigma ; (; ). set parameters for PLAIN method ; returns the error sigma from the last iteration of the Vegas algorithm ; Definition at line 419 of file GSLMCIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLMCIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:13041,Integrability,integrat,integration,13041,e 347 of file GSLMCIntegrator.cxx. ◆ SetParameters() [1/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const MiserParameters & ; p). set default parameters for MISER method ; Definition at line 387 of file GSLMCIntegrator.cxx. ◆ SetParameters() [2/2]. void ROOT::Math::GSLMCIntegrator::SetParameters ; (; const VegasParameters & ; p). set default parameters for VEGAS method ; Definition at line 374 of file GSLMCIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GSLMCIntegrator::SetRelTolerance ; (; double ; relTolerance). overridevirtual . set the desired relative Error ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 266 of file GSLMCIntegrator.cxx. ◆ SetType(). void ROOT::Math::GSLMCIntegrator::SetType ; (; MCIntegration::Type ; type). set integration method ; Definition at line 280 of file GSLMCIntegrator.cxx. ◆ SetTypeName(). void ROOT::Math::GSLMCIntegrator::SetTypeName ; (; const char * ; typeName). set integration method using a name instead of an enumeration ; Definition at line 306 of file GSLMCIntegrator.cxx. ◆ Sigma(). double ROOT::Math::GSLMCIntegrator::Sigma ; (; ). set parameters for PLAIN method ; returns the error sigma from the last iteration of the Vegas algorithm ; Definition at line 419 of file GSLMCIntegrator.cxx. ◆ Status(). int ROOT::Math::GSLMCIntegrator::Status ; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::Math::GSLMCIntegrator::fDim. private . Definition at line 313 of file GSLMCIntegrator.h. ◆ fError. double ROOT::Math::GSLMCIntegrator::fError. private . Definition at line 321 of file GSLMCI,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3622,Modifiability,inherit,inherited,3622,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:3866,Modifiability,inherit,inherited,3866,"ide;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use stratified sampling if certain condition are satisfied MCIntegration::kIMPORTANCE_ONLY : VEGAS will always use importance sampling ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt) override;  set the integration options ;  ; void SetParameters (const MiserParameters &p);  set default parameters for MISER method ;  ; void SetParameters (const VegasParameters &p);  set default parameters for VEGAS method ;  ; void SetRelTolerance (double relTolerance) override;  set the desired relative Error ;  ; void SetType (MCIntegration::Type type);  set integration method ;  ; void SetTypeName (const char *typeName);  set integration method using a name instead of an enumeration ;  ; double Sigma ();  set parameters for PLAIN method ;  ; int Status () const override;  return the Error Status of the last Integral calculation ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorMultiDim;  ~VirtualIntegratorMultiDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationMultiDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Member Functions; bool CheckFunction ();  ; void DoInitialize ();  . Private Member Functions;  GSLMCIntegrator (const GSLMCIntegr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:6280,Modifiability,plug-in,plug-in,6280,"default integration type; Parameters. typetype of integration. The possible types are defined in the MCIntegration::Type enumeration Default is VEGAS ; absToldesired absolute Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; relToldesired relative Error (this parameter is actually not used and it can be ignored. The tolerance is fixed by the number of given calls) ; callsmaximum number of function calls. NOTE: When the default values are used , the options are taken from the static method of ROOT::Math::IntegratorMultiDimOptions ; Definition at line 73 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [2/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const char * ; type, . double ; absTol, . double ; relTol, . unsigned int ; calls . ). constructor of GSL MCIntegrator. ; VEGAS MC is set as default integration type; Parameters. typetype of integration using a char * (required by plug-in manager) ; absToldesired absolute Error ; relToldesired relative Error ; callsmaximum number of function calls . Definition at line 102 of file GSLMCIntegrator.cxx. ◆ ~GSLMCIntegrator(). ROOT::Math::GSLMCIntegrator::~GSLMCIntegrator ; (; ). override . destructor ; Definition at line 133 of file GSLMCIntegrator.cxx. ◆ GSLMCIntegrator() [3/3]. ROOT::Math::GSLMCIntegrator::GSLMCIntegrator ; (; const GSLMCIntegrator & ; ). private . Definition at line 147 of file GSLMCIntegrator.cxx. Member Function Documentation. ◆ CheckFunction(). bool ROOT::Math::GSLMCIntegrator::CheckFunction ; (; ). protected . Definition at line 457 of file GSLMCIntegrator.cxx. ◆ ChiSqr(). double ROOT::Math::GSLMCIntegrator::ChiSqr ; (; ). returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMCIntegrator::DoInitialize ; (; ). protected . Definition at line 401 of file GSLMCIntegrator.cxx. ◆ Error(). double R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:1341,Safety,avoid,avoid,1341," double relTol=-1, unsigned int calls=0);  constructor of GSL MCIntegrator. ;  ;  ~GSLMCIntegrator () override;  destructor ;  ; double ChiSqr ();  returns chi-squared per degree of freedom for the estimate of the integral in the Vegas algorithm ;  ; double Error () const override;  return the estimate of the absolute Error of the last Integral calculation ;  ; std::unique_ptr< ROOT::Math::IOptions > ExtraOptions () const;  get the specific options (for Vegas or Miser) in term of string- name. ;  ; MCIntegration::Type GetType () const;  return the type (need to be called GetType to avoid a conflict with typedef) ;  ; const char * GetTypeName () const;  return the name ;  ; double Integral (const double *a, const double *b) override;  evaluate the integral using the previously defined function ;  ; double Integral (const GSLMonteFuncPointer &f, unsigned int dim, double *a, double *b, void *p=nullptr);  evaluate the Integral of a function f over the defined hypercube (a,b) ;  ; int NEval () const override;  return number of function evaluations in calculating the integral (This is an fixed by the user) ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const override;  get the option used for the integration ;  ; double Result () const override;  return the type of the integration used ;  ; void SetAbsTolerance (double absTolerance) override;  set the desired absolute Error ;  ; void SetExtraOptions (const ROOT::Math::IOptions &opt);  Set the extra options for Vegas and Miser. ;  ; void SetFunction (const IMultiGenFunction &f) override;  method to set the a generic integration function ;  ; void SetFunction (GSLMonteFuncPointer f, unsigned int dim, void *p=nullptr);  ; void SetGenerator (GSLRandomEngine &r);  set random number generator ;  ; void SetMode (MCIntegration::Mode mode);  set integration mode for VEGAS method The possible MODE are : MCIntegration::kIMPORTANCE (default) : VEGAS will use importance sampling MCIntegration::kSTRATIFIED : VEGAS will use strat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:8067,Safety,avoid,avoid,8067," the Vegas algorithm ; Definition at line 439 of file GSLMCIntegrator.cxx. ◆ DoInitialize(). void ROOT::Math::GSLMCIntegrator::DoInitialize ; (; ). protected . Definition at line 401 of file GSLMCIntegrator.cxx. ◆ Error(). double ROOT::Math::GSLMCIntegrator::Error ; (; ); const. overridevirtual . return the estimate of the absolute Error of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 253 of file GSLMCIntegrator.cxx. ◆ ExtraOptions(). std::unique_ptr< ROOT::Math::IOptions > ROOT::Math::GSLMCIntegrator::ExtraOptions ; (; ); const. get the specific options (for Vegas or Miser) in term of string- name. ; return a new option object which is managed by user; This is for querying existing options and return object is managed by the user ; Definition at line 484 of file GSLMCIntegrator.cxx. ◆ GetType(). MCIntegration::Type ROOT::Math::GSLMCIntegrator::GetType ; (; ); const. inline . return the type (need to be called GetType to avoid a conflict with typedef) ; Definition at line 273 of file GSLMCIntegrator.h. ◆ GetTypeName(). const char * ROOT::Math::GSLMCIntegrator::GetTypeName ; (; ); const. return the name ; Definition at line 466 of file GSLMCIntegrator.cxx. ◆ Integral() [1/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const double * ; a, . const double * ; b . ). overridevirtual . evaluate the integral using the previously defined function ; Implements ROOT::Math::VirtualIntegratorMultiDim.; Definition at line 182 of file GSLMCIntegrator.cxx. ◆ Integral() [2/2]. double ROOT::Math::GSLMCIntegrator::Integral ; (; const GSLMonteFuncPointer & ; f, . unsigned int ; dim, . double * ; a, . double * ; b, . void * ; p = nullptr . ). evaluate the Integral of a function f over the defined hypercube (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; dimthe dimension ; alower value of the integration interval ; bupper value of the integration interval ; ppointer t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1418,Availability,error,errors,1418,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1565,Availability,error,errors,1565,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1910,Availability,error,error,1910,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1920,Availability,error,error,1920,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6442,Availability,error,error,6442,"const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calcul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7070,Availability,error,error,7070," who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7162,Availability,error,errors,7162," who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7281,Availability,error,error,7281," who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7685,Availability,error,error,7685,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7787,Availability,error,error,7787,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:9317,Availability,error,errors,9317,"lue <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10230,Availability,toler,tolerance,10230,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10329,Availability,error,error,10329,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10808,Availability,toler,tolerance,10808,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:11545,Availability,error,errors,11545,"bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:12665,Availability,error,errors,12665,"<Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GSLMinimizer::~GSLMinimizer ; (; ). override . Destructor. ; Definition at line 92 of file GSLMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLMinimizer::CovMatrix ; (; unsigned int ; , . unsigned int ;  . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 127 of file GSLMinimizer.h. ◆ Edm(). double ROOT::Math::GSLMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file GSLMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Defi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:13097,Availability,error,errors,13097,"pe). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GSLMinimizer::~GSLMinimizer ; (; ). override . Destructor. ; Definition at line 92 of file GSLMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLMinimizer::CovMatrix ; (; unsigned int ; , . unsigned int ;  . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 127 of file GSLMinimizer.h. ◆ Edm(). double ROOT::Math::GSLMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file GSLMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 125 of file GSLMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 111 of file GSLMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GSLMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 118 of file GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:14024,Availability,error,error,14024,le * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 125 of file GSLMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 111 of file GSLMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GSLMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 118 of file GSLMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 99 of file GSLMinimizer.cxx. Member Data Documentation. ◆ fGSLMultiMin. ROOT::Math::GSLMultiMinimizer* ROOT::Math::GSLMinimizer::fGSLMultiMin. private . Definition at line 137 of file GSLMinimizer.h. ◆ fLSTolerance. double ROOT::Math::GSLMinimizer::fLSTolerance. private . Definition at line 139 of file GSLMinimizer.h. Libraries for ROOT::Math::GSLMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLMinimizer.h; math/mathmore/src/GSLMinimizer.cxx. ROOTMathGSLMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:14034,Availability,error,error,14034,le * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 125 of file GSLMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 111 of file GSLMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GSLMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 118 of file GSLMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 99 of file GSLMinimizer.cxx. Member Data Documentation. ◆ fGSLMultiMin. ROOT::Math::GSLMultiMinimizer* ROOT::Math::GSLMinimizer::fGSLMultiMin. private . Definition at line 137 of file GSLMinimizer.h. ◆ fLSTolerance. double ROOT::Math::GSLMinimizer::fLSTolerance. private . Definition at line 139 of file GSLMinimizer.h. Libraries for ROOT::Math::GSLMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLMinimizer.h; math/mathmore/src/GSLMinimizer.cxx. ROOTMathGSLMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:3263,Deployability,release,release,3263,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:8608,Deployability,configurat,configuration,8608," global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &ext",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:424,Integrability,interface,interface,424,". ROOT: ROOT::Math::GSLMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMinimizer class. ; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional minimization algorithms.; See GSL doc from more info on the GSL minimization algorithms.; The class implements the ROOT::Math::Minimizer interface and can be instantiated using the ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) ov",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:603,Integrability,interface,interface,603,". ROOT: ROOT::Math::GSLMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMinimizer class. ; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional minimization algorithms.; See GSL doc from more info on the GSL minimization algorithms.; The class implements the ROOT::Math::Minimizer interface and can be instantiated using the ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) ov",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:652,Modifiability,plugin,plugin,652,". ROOT: ROOT::Math::GSLMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMinimizer class. ; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional minimization algorithms.; See GSL doc from more info on the GSL minimization algorithms.; The class implements the ROOT::Math::Minimizer interface and can be instantiated using the ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) ov",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:668,Modifiability,plugin,plugin,668,". ROOT: ROOT::Math::GSLMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMinimizer class. ; Implementation of the ROOT::Math::Minimizer interface using the GSL multi-dimensional minimization algorithms.; See GSL doc from more info on the GSL minimization algorithms.; The class implements the ROOT::Math::Minimizer interface and can be instantiated using the ROOT plugin manager (plugin name is ""GSLMultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) ov",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1333,Modifiability,variab,variable,1333,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1390,Modifiability,variab,variables,1390,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:2069,Modifiability,inherit,inherited,2069,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:2271,Modifiability,variab,variable,2271,"return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:2389,Modifiability,variab,variable,2389,"return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:2412,Modifiability,variab,variable,2412,"return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:2700,Modifiability,variab,variable,2700,"return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:2918,Modifiability,variab,variables,2918,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:3283,Modifiability,variab,variable,3283,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:3384,Modifiability,variab,variable,3384,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:3582,Modifiability,variab,variable,3582,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:3775,Modifiability,variab,variable,3775," function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:3968,Modifiability,variab,variable,3968," unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  ac",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4128,Modifiability,variab,variable,4128,"ve function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is no",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4262,Modifiability,variab,variable,4262,"ease an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4391,Modifiability,variab,variable,4391,"verride if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Func",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4515,Modifiability,variab,variable,4515,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4644,Modifiability,variab,variable,4644,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4752,Modifiability,variab,variable,4752,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4849,Modifiability,variab,variables,4849,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5067,Modifiability,variab,variable,5067,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5084,Modifiability,variab,variable,5084,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5119,Modifiability,variab,variable,5119,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5220,Modifiability,variab,variables,5220,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5272,Modifiability,variab,variable,5272,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:5402,Modifiability,inherit,inherited,5402,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6091,Modifiability,variab,variable,6091,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6629,Modifiability,variab,variable,6629,"zer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most s",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6898,Modifiability,variab,variable,6898,"he contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:6945,Modifiability,variab,variables,6945,"he contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7080,Modifiability,variab,variable,7080," who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7405,Modifiability,variab,variable,7405," who implements covariance matrix calculation will re-implement the method ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:8608,Modifiability,config,configuration,8608," global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &ext",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:8919,Modifiability,variab,variable,8919," global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &ext",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10484,Modifiability,variab,variable,10484,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10618,Modifiability,variab,variables,10618,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10647,Modifiability,variab,variables,10647,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10974,Modifiability,inherit,inherited,10974,"bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:11366,Modifiability,inherit,inherited,11366,"bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:12580,Modifiability,variab,variable,12580,"<Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GSLMinimizer::~GSLMinimizer ; (; ). override . Destructor. ; Definition at line 92 of file GSLMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLMinimizer::CovMatrix ; (; unsigned int ; , . unsigned int ;  . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 127 of file GSLMinimizer.h. ◆ Edm(). double ROOT::Math::GSLMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file GSLMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Defi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:12637,Modifiability,variab,variables,12637,"<Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GSLMinimizer::~GSLMinimizer ; (; ). override . Destructor. ; Definition at line 92 of file GSLMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLMinimizer::CovMatrix ; (; unsigned int ; , . unsigned int ;  . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 127 of file GSLMinimizer.h. ◆ Edm(). double ROOT::Math::GSLMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file GSLMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Defi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:1731,Performance,perform,perform,1731,"MultiMin""). The various minimization algorithms (conjugatefr, conjugatepr, bfgs, etc..) can be passed as enumerations and also as a string. The default algorithm is conjugatefr (Fletcher-Reeves conjugate gradient algorithm). ; Definition at line 79 of file GSLMinimizer.h. Public Member Functions;  GSLMinimizer (const char *type);  Constructor with a string giving name of algorithm. ;  ;  GSLMinimizer (ROOT::Math::EGSLMinimizerType type=ROOT::Math::kConjugateFR);  Default constructor. ;  ;  ~GSLMinimizer () override;  Destructor. ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7632,Performance,perform,perform,7632,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7766,Performance,perform,performed,7766,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:10312,Performance,perform,perform,10312,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:13547,Performance,perform,perform,13547,e variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 127 of file GSLMinimizer.h. ◆ Edm(). double ROOT::Math::GSLMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file GSLMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 125 of file GSLMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 111 of file GSLMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GSLMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 118 of file GSLMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 99 of file GSLMinimizer.cxx. Member Data Documentation. ◆ fGSLMultiMin. ROOT::Math::GSLMultiMinimizer* ROOT::Math::GSLMinimizer::fGSLMultiMin. private . Definition at line 137 of file GSLMinimizer.h. ◆ fLSTolera,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:4971,Security,access,accessor,4971,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:7793,Security,validat,validation,7793,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:11562,Security,validat,validated,11562,"bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Private Attributes; ROOT::Math::GSLMultiMinimizer * fGSLMultiMin;  ; double fLSTolerance;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  ;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLMinimizer.h>. Inheritance diagram for ROOT::Math::GSLMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer() [1/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type = ROOT::Math::kConjugateFR). Default constructor. ; Definition at line 51 of file GSLMinimizer.cxx. ◆ GSLMinimizer() [2/2]. ROOT::Math::GSLMinimizer::GSLMinimizer ; (; const char * ; type). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:1692,Availability,error,error,1692,"uction time are GOLDENSECTION, which is the simplest method but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation.; This class does not support copying ; Definition at line 81 of file GSLMinimizer1D.h. Public Member Functions;  GSLMinimizer1D (const GSLMinimizer1D &)=delete;  ;  GSLMinimizer1D (GSLMinimizer1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; const char * Name () const override;  Return name of minimization algorithm. ;  ; GSLMinimizer1D & operator= (const GSLMinimizer1D &)=delete;  ; GSLMinimizer1D & operator= (GSLMinimizer1D &&)=delete;  ; template<class UserFunc > ; void SetFunction (const UserFunc &f, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the l",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:1973,Availability,toler,tolerance,1973,"r1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; const char * Name () const override;  Return name of minimization algorithm. ;  ; GSLMinimizer1D & operator= (const GSLMinimizer1D &)=delete;  ; GSLMinimizer1D & operator= (GSLMinimizer1D &&)=delete;  ; template<class UserFunc > ; void SetFunction (const UserFunc &f, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; void SetFunction (GSLFuncPointer f, void *params, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; int Status () const override;  Return status of last minimization. ;  ; double XLower () c",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:2139,Availability,error,error,2139,"r1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; const char * Name () const override;  Return name of minimization algorithm. ;  ; GSLMinimizer1D & operator= (const GSLMinimizer1D &)=delete;  ; GSLMinimizer1D & operator= (GSLMinimizer1D &&)=delete;  ; template<class UserFunc > ; void SetFunction (const UserFunc &f, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; void SetFunction (GSLFuncPointer f, void *params, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; int Status () const override;  Return status of last minimization. ;  ; double XLower () c",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:2200,Availability,error,error,2200,"r1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; const char * Name () const override;  Return name of minimization algorithm. ;  ; GSLMinimizer1D & operator= (const GSLMinimizer1D &)=delete;  ; GSLMinimizer1D & operator= (GSLMinimizer1D &&)=delete;  ; template<class UserFunc > ; void SetFunction (const UserFunc &f, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; void SetFunction (GSLFuncPointer f, void *params, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; int Status () const override;  Return status of last minimization. ;  ; double XLower () c",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:5612,Availability,error,error,5612,"er1D() [3/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; GSLMinimizer1D && ; ). delete . Member Function Documentation. ◆ FValLower(). double ROOT::Math::GSLMinimizer1D::FValLower ; (; ); const. overridevirtual . Return function value at current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 149 of file GSLMinimizer1D.cxx. ◆ FValMinimum(). double ROOT::Math::GSLMinimizer1D::FValMinimum ; (; ); const. overridevirtual . Return function value at current estimate of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 144 of file GSLMinimizer1D.cxx. ◆ FValUpper(). double ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 154 of file GSLMinimizer1D.cxx. ◆ Iterate(). int ROOT::Math::GSLMinimizer1D::Iterate ; (; ). Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ; Definition at line 110 of file GSLMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::GSLMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 173 of file GSLMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::GSLMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 164 of file GSLMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::GSLMinimizer1D::Name ; (; ); const. overridevirtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:6155,Availability,toler,tolerance,6155,"e ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 154 of file GSLMinimizer1D.cxx. ◆ Iterate(). int ROOT::Math::GSLMinimizer1D::Iterate ; (; ). Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ; Definition at line 110 of file GSLMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::GSLMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 173 of file GSLMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::GSLMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 164 of file GSLMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::GSLMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 159 of file GSLMinimizer1D.cxx. ◆ operator=() [1/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; const GSLMinimizer1D & ; ). delete . ◆ operator=() [2/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; GSLMinimizer1D && ; ). delete . ◆ SetFunction() [1/2]. template<class UserFunc > . void ROOT::Math::GSLMinimizer1D::SetFunction ; (; const UserFunc & ; f, . double ; xmin, . double ; xlow, . double ; xup . ). inline . Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:6321,Availability,error,error,6321,"e ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 154 of file GSLMinimizer1D.cxx. ◆ Iterate(). int ROOT::Math::GSLMinimizer1D::Iterate ; (; ). Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ; Definition at line 110 of file GSLMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::GSLMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 173 of file GSLMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::GSLMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 164 of file GSLMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::GSLMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 159 of file GSLMinimizer1D.cxx. ◆ operator=() [1/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; const GSLMinimizer1D & ; ). delete . ◆ operator=() [2/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; GSLMinimizer1D && ; ). delete . ◆ SetFunction() [1/2]. template<class UserFunc > . void ROOT::Math::GSLMinimizer1D::SetFunction ; (; const UserFunc & ; f, . double ; xmin, . double ; xlow, . double ; xup . ). inline . Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:6382,Availability,error,error,6382,"e ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 154 of file GSLMinimizer1D.cxx. ◆ Iterate(). int ROOT::Math::GSLMinimizer1D::Iterate ; (; ). Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ; Definition at line 110 of file GSLMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::GSLMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 173 of file GSLMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::GSLMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 164 of file GSLMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::GSLMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 159 of file GSLMinimizer1D.cxx. ◆ operator=() [1/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; const GSLMinimizer1D & ; ). delete . ◆ operator=() [2/2]. GSLMinimizer1D & ROOT::Math::GSLMinimizer1D::operator= ; (; GSLMinimizer1D && ; ). delete . ◆ SetFunction() [1/2]. template<class UserFunc > . void ROOT::Math::GSLMinimizer1D::SetFunction ; (; const UserFunc & ; f, . double ; xmin, . double ; xlow, . double ; xup . ). inline . Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:1239,Energy Efficiency,allocate,allocated,1239,"te Attributes |; List of all members ; ROOT::Math::GSLMinimizer1D Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Minimizer for arbitrary one dimensional functions. ; Implemented using GSL, for detailed description see: GSL online doc; The algorithms uspported are only bracketing algorithm which do not use derivatives information. The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation.; This class does not support copying ; Definition at line 81 of file GSLMinimizer1D.h. Public Member Functions;  GSLMinimizer1D (const GSLMinimizer1D &)=delete;  ;  GSLMinimizer1D (GSLMinimizer1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum p",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:4392,Energy Efficiency,allocate,allocated,4392,"izer1D ();  . Static Public Member Functions; static int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  Test convergence of the interval. ;  . Private Attributes; GSLFunctionWrapper * fFunction;  ; bool fIsSet;  ; int fIter;  ; double fLow;  ; double fMin;  ; GSL1DMinimizerWrapper * fMinimizer;  ; int fStatus;  ; double fUp;  ; double fXlow;  ; double fXmin;  ; double fXup;  . #include <Math/GSLMinimizer1D.h>. Inheritance diagram for ROOT::Math::GSLMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer1D() [1/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; Minim1D::Type ; type = Minim1D::kBRENT). explicit . Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ; Definition at line 51 of file GSLMinimizer1D.cxx. ◆ ~GSLMinimizer1D(). ROOT::Math::GSLMinimizer1D::~GSLMinimizer1D ; (; ). override . Destructor: free allocated resources. ; Definition at line 78 of file GSLMinimizer1D.cxx. ◆ GSLMinimizer1D() [2/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; const GSLMinimizer1D & ; ). delete . ◆ GSLMinimizer1D() [3/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; GSLMinimizer1D && ; ). delete . Member Function Documentation. ◆ FValLower(). double ROOT::Math::GSLMinimizer1D::FValLower ; (; ); const. overridevirtual . Return function value at current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 149 of file GSLMinimizer1D.cxx. ◆ FValMinimum(). double ROOT::Math::GSLMinimizer1D::FValMinimum ; (; ); const. overridevirtual . Return function value at current estimate of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 144 of file GSLMinimizer1D.cxx. ◆ FValUpper(). double ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Imple",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:3316,Modifiability,inherit,inherited,3316,"(const GSLMinimizer1D &)=delete;  ; GSLMinimizer1D & operator= (GSLMinimizer1D &&)=delete;  ; template<class UserFunc > ; void SetFunction (const UserFunc &f, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; void SetFunction (GSLFuncPointer f, void *params, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; int Status () const override;  Return status of last minimization. ;  ; double XLower () const override;  Return current lower bound of the minimization interval. ;  ; double XMinimum () const override;  Return current estimate of the position of the minimum. ;  ; double XUpper () const override;  Return current upper bound of the minimization interval. ;  ;  Public Member Functions inherited from ROOT::Math::IMinimizer1D;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  . Static Public Member Functions; static int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  Test convergence of the interval. ;  . Private Attributes; GSLFunctionWrapper * fFunction;  ; bool fIsSet;  ; int fIter;  ; double fLow;  ; double fMin;  ; GSL1DMinimizerWrapper * fMinimizer;  ; int fStatus;  ; double fUp;  ; double fXlow;  ; double fXmin;  ; double fXup;  . #include <Math/GSLMinimizer1D.h>. Inheritance diagram for ROOT::Math::GSLMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer1D() [1/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; Minim1D::Type ; type = Minim1D::kBRENT). explicit . Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ; Definition at line 51 of file GSLMinimizer1D.cxx. ◆ ~GSLMinimizer1D(). ROOT::Math::GSLMinimizer1D::~GSLMi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:8282,Testability,test,test,8282,"< f(xup)\) must be satisfied ; Definition at line 108 of file GSLMinimizer1D.h. ◆ SetFunction() [2/2]. void ROOT::Math::GSLMinimizer1D::SetFunction ; (; GSLFuncPointer ; f, . void * ; params, . double ; xmin, . double ; xlow, . double ; xup . ). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ; The condition : \( f(xlow) > f(xmin) < f(xup) \) must be satisfied; Method specialized on the GSL function type ; Definition at line 86 of file GSLMinimizer1D.cxx. ◆ Status(). int ROOT::Math::GSLMinimizer1D::Status ; (; ); const. inlineoverridevirtual . Return status of last minimization. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 180 of file GSLMinimizer1D.h. ◆ TestInterval(). int ROOT::Math::GSLMinimizer1D::TestInterval ; (; double ; xlow, . double ; xup, . double ; epsAbs, . double ; epsRel . ). static . Test convergence of the interval. ; The test returns success if ; \[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \]. Definition at line 202 of file GSLMinimizer1D.cxx. ◆ XLower(). double ROOT::Math::GSLMinimizer1D::XLower ; (; ); const. overridevirtual . Return current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 134 of file GSLMinimizer1D.cxx. ◆ XMinimum(). double ROOT::Math::GSLMinimizer1D::XMinimum ; (; ); const. overridevirtual . Return current estimate of the position of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 129 of file GSLMinimizer1D.cxx. ◆ XUpper(). double ROOT::Math::GSLMinimizer1D::XUpper ; (; ); const. overridevirtual . Return current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 139 of file GSLMinimizer1D.cxx. Member Data Documentation. ◆ fFunction. GSLFunctionWrapper* ROOT::Math::GSLMinimizer1D::fFunction. private . Definition at line 214 of file GSLMinimizer1D.h. ◆ fIsSet. bool ROOT::Math::GSLMinim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:701,Usability,simpl,simplest,701,". ROOT: ROOT::Math::GSLMinimizer1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMinimizer1D Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Minimizer for arbitrary one dimensional functions. ; Implemented using GSL, for detailed description see: GSL online doc; The algorithms uspported are only bracketing algorithm which do not use derivatives information. The algorithms which can be chosen at construction time are GOLDENSECTION, which is the simplest method but the slowest and BRENT (the default one) which combines the golden section with a parabolic interpolation.; This class does not support copying ; Definition at line 81 of file GSLMinimizer1D.h. Public Member Functions;  GSLMinimizer1D (const GSLMinimizer1D &)=delete;  ;  GSLMinimizer1D (GSLMinimizer1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum num",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html:1273,Modifiability,inherit,inherited,1273,". ROOT: ROOT::Math::GSLMiserIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMiserIntegrationWorkspace Class Reference. ; Workspace for MISER. ; Definition at line 162 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLMiserIntegrationWorkspace (size_t dim=0);  ; void Clear () override;  free the workspace deleting the GSL pointer ;  ; gsl_monte_miser_state * GetWS ();  ; bool Init (size_t dim) override;  initialize the workspace creating the GSL pointer if it is not there ;  ; size_t NDim () const override;  ; std::unique_ptr< ROOT::Math::IOptions > Options () const override;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; MiserParameters & Parameters ();  ; const MiserParameters & Parameters () const;  ; bool ReInit () override;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &opt) override;  set options ;  ; void SetParameters (const MiserParameters &p);  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Member Functions; void SetMiserParameters ();  . Private Attributes; bool fHaveNewParams;  ; MiserParameters fParams;  ; gsl_monte_miser_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLMiserIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMiserIntegrationWorkspace(). ROOT::Math::GSLMiserIntegrationWorkspace::GSLMiserIntegrationWorksp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMiserIntegrationWorkspace.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html:502,Deployability,integrat,integration,502,. ROOT: ROOT::Math::GSLMonteFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMonteFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration » Numerical Monte Carlo Integration Classes. ; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ; Definition at line 57 of file GSLMonteFunctionWrapper.h. Public Member Functions;  GSLMonteFunctionWrapper ();  ; gsl_monte_function * GetFunc ();  ; double operator() (const double *x);  evaluate the function and derivatives ;  ; void SetDim (unsigned int n);  ; void SetFuncPointer (GSLMonteFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_monte_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMonteFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMonteFunctionWrapper(). ROOT::Math::GSLMonteFunctionWrapper::GSLMonteFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMonteFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_monte_function * ROOT::Math::GSLMonteFunctionWrapper::GetFunc ; (; ). inline . Definition at line 82 of file GSLMonteFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLMonteFunctionWrapper::operator() ; (; const double * ; x). inline . evaluate the function and derivatives ; Definition at line 85 of file GSLMonteFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMonteFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 69 of file GSLMonteFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMonteFunctionWrapper::SetFuncPointer ; (; GSL,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html:415,Integrability,wrap,wrapper,415,. ROOT: ROOT::Math::GSLMonteFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMonteFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration » Numerical Monte Carlo Integration Classes. ; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ; Definition at line 57 of file GSLMonteFunctionWrapper.h. Public Member Functions;  GSLMonteFunctionWrapper ();  ; gsl_monte_function * GetFunc ();  ; double operator() (const double *x);  evaluate the function and derivatives ;  ; void SetDim (unsigned int n);  ; void SetFuncPointer (GSLMonteFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_monte_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMonteFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMonteFunctionWrapper(). ROOT::Math::GSLMonteFunctionWrapper::GSLMonteFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMonteFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_monte_function * ROOT::Math::GSLMonteFunctionWrapper::GetFunc ; (; ). inline . Definition at line 82 of file GSLMonteFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLMonteFunctionWrapper::operator() ; (; const double * ; x). inline . evaluate the function and derivatives ; Definition at line 85 of file GSLMonteFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMonteFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 69 of file GSLMonteFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMonteFunctionWrapper::SetFuncPointer ; (; GSL,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html:502,Integrability,integrat,integration,502,. ROOT: ROOT::Math::GSLMonteFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMonteFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration » Numerical Monte Carlo Integration Classes. ; wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ; Definition at line 57 of file GSLMonteFunctionWrapper.h. Public Member Functions;  GSLMonteFunctionWrapper ();  ; gsl_monte_function * GetFunc ();  ; double operator() (const double *x);  evaluate the function and derivatives ;  ; void SetDim (unsigned int n);  ; void SetFuncPointer (GSLMonteFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_monte_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMonteFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMonteFunctionWrapper(). ROOT::Math::GSLMonteFunctionWrapper::GSLMonteFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMonteFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_monte_function * ROOT::Math::GSLMonteFunctionWrapper::GetFunc ; (; ). inline . Definition at line 82 of file GSLMonteFunctionWrapper.h. ◆ operator()(). double ROOT::Math::GSLMonteFunctionWrapper::operator() ; (; const double * ; x). inline . evaluate the function and derivatives ; Definition at line 85 of file GSLMonteFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMonteFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 69 of file GSLMonteFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMonteFunctionWrapper::SetFuncPointer ; (; GSL,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMonteFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:1522,Availability,toler,tolerance,1522," of all members ; ROOT::Math::GSLMultiFit Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. ; Definition at line 53 of file GSLMultiFit.h. Public Member Functions;  GSLMultiFit (const gsl_multifit_fdfsolver_type *type=nullptr);  Default constructor No need to specify the type so far since only one solver exists so far. ;  ;  GSLMultiFit (const GSLMultiFit &)=delete;  ;  GSLMultiFit (GSLMultiFit &&)=delete;  ;  ~GSLMultiFit ();  Destructor (no operations) ;  ; const double * CovarMatrix () const;  return covariance matrix of the parameters ;  ; void CreateSolver (unsigned int npoints, unsigned int npar);  create the minimizer from the type and size of number of fitting points and number of parameters ;  ; double Edm () const;  ; const double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; std::string Name () const;  ; GSLMultiFit & operator= (const GSLMultiFit &rhs)=delete;  ; GSLMultiFit & operator= (GSLMultiFit &&rhs)=delete;  ; template<class Func > ; int Set (const std::vector< Func > &funcVec, const double *x);  set the solver parameters ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestGradient (double absTol) const;  test gradient (ask from solver gradient vector) ;  ; const double * X () const;  parameter values at the minimum ;  . Private Attributes; gsl_matrix * fCov;  ; GSLMultiFitFunctionWrapper fFunc;  ; gsl_multifit_fdfsolver * fSolver;  ; gsl_vector * fTmp;  ; const gsl_multifit_fdfsolver_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFit.h>; Constructor & Destructor Documentation. ◆ GSLMultiFit() [1/3]. ROOT::Math::GSLMultiFit::GSLMultiFit ; (; const gsl_multifit_fdfsolver_type",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:4297,Availability,toler,tolerance,4297,"st double * ROOT::Math::GSLMultiFit::Gradient ; (; ); const. inline . gradient value at the minimum ; Definition at line 158 of file GSLMultiFit.h. ◆ Iterate(). int ROOT::Math::GSLMultiFit::Iterate ; (; ). inline . Definition at line 145 of file GSLMultiFit.h. ◆ Name(). std::string ROOT::Math::GSLMultiFit::Name ; (; ); const. inline . Definition at line 140 of file GSLMultiFit.h. ◆ operator=() [1/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; const GSLMultiFit & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; GSLMultiFit && ; rhs). delete . ◆ Set(). template<class Func > . int ROOT::Math::GSLMultiFit::Set ; (; const std::vector< Func > & ; funcVec, . const double * ; x . ). inline . set the solver parameters ; Definition at line 111 of file GSLMultiFit.h. ◆ TestDelta(). int ROOT::Math::GSLMultiFit::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 191 of file GSLMultiFit.h. ◆ TestGradient(). int ROOT::Math::GSLMultiFit::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from solver gradient vector) ; Definition at line 183 of file GSLMultiFit.h. ◆ X(). const double * ROOT::Math::GSLMultiFit::X ; (; ); const. inline . parameter values at the minimum ; Definition at line 151 of file GSLMultiFit.h. Member Data Documentation. ◆ fCov. gsl_matrix* ROOT::Math::GSLMultiFit::fCov. mutableprivate . Definition at line 221 of file GSLMultiFit.h. ◆ fFunc. GSLMultiFitFunctionWrapper ROOT::Math::GSLMultiFit::fFunc. private . Definition at line 216 of file GSLMultiFit.h. ◆ fSolver. gsl_multifit_fdfsolver* ROOT::Math::GSLMultiFit::fSolver. private . Definition at line 217 of file GSLMultiFit.h. ◆ fTmp. gsl_vector* ROOT::Math::GSLMultiFit::fTmp. mutableprivate . Definition at line 220 of file GSLMultiFit.h. ◆ fType. const gsl_multifit_fdfsolver_type* ROOT::Math::GSLMultiFit::fType. priv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:1494,Testability,test,test,1494," of all members ; ROOT::Math::GSLMultiFit Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. ; Definition at line 53 of file GSLMultiFit.h. Public Member Functions;  GSLMultiFit (const gsl_multifit_fdfsolver_type *type=nullptr);  Default constructor No need to specify the type so far since only one solver exists so far. ;  ;  GSLMultiFit (const GSLMultiFit &)=delete;  ;  GSLMultiFit (GSLMultiFit &&)=delete;  ;  ~GSLMultiFit ();  Destructor (no operations) ;  ; const double * CovarMatrix () const;  return covariance matrix of the parameters ;  ; void CreateSolver (unsigned int npoints, unsigned int npar);  create the minimizer from the type and size of number of fitting points and number of parameters ;  ; double Edm () const;  ; const double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; std::string Name () const;  ; GSLMultiFit & operator= (const GSLMultiFit &rhs)=delete;  ; GSLMultiFit & operator= (GSLMultiFit &&rhs)=delete;  ; template<class Func > ; int Set (const std::vector< Func > &funcVec, const double *x);  set the solver parameters ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestGradient (double absTol) const;  test gradient (ask from solver gradient vector) ;  ; const double * X () const;  parameter values at the minimum ;  . Private Attributes; gsl_matrix * fCov;  ; GSLMultiFitFunctionWrapper fFunc;  ; gsl_multifit_fdfsolver * fSolver;  ; gsl_vector * fTmp;  ; const gsl_multifit_fdfsolver_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFit.h>; Constructor & Destructor Documentation. ◆ GSLMultiFit() [1/3]. ROOT::Math::GSLMultiFit::GSLMultiFit ; (; const gsl_multifit_fdfsolver_type",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:1625,Testability,test,test,1625," of all members ; ROOT::Math::GSLMultiFit Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. ; Definition at line 53 of file GSLMultiFit.h. Public Member Functions;  GSLMultiFit (const gsl_multifit_fdfsolver_type *type=nullptr);  Default constructor No need to specify the type so far since only one solver exists so far. ;  ;  GSLMultiFit (const GSLMultiFit &)=delete;  ;  GSLMultiFit (GSLMultiFit &&)=delete;  ;  ~GSLMultiFit ();  Destructor (no operations) ;  ; const double * CovarMatrix () const;  return covariance matrix of the parameters ;  ; void CreateSolver (unsigned int npoints, unsigned int npar);  create the minimizer from the type and size of number of fitting points and number of parameters ;  ; double Edm () const;  ; const double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; std::string Name () const;  ; GSLMultiFit & operator= (const GSLMultiFit &rhs)=delete;  ; GSLMultiFit & operator= (GSLMultiFit &&rhs)=delete;  ; template<class Func > ; int Set (const std::vector< Func > &funcVec, const double *x);  set the solver parameters ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestGradient (double absTol) const;  test gradient (ask from solver gradient vector) ;  ; const double * X () const;  parameter values at the minimum ;  . Private Attributes; gsl_matrix * fCov;  ; GSLMultiFitFunctionWrapper fFunc;  ; gsl_multifit_fdfsolver * fSolver;  ; gsl_vector * fTmp;  ; const gsl_multifit_fdfsolver_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFit.h>; Constructor & Destructor Documentation. ◆ GSLMultiFit() [1/3]. ROOT::Math::GSLMultiFit::GSLMultiFit ; (; const gsl_multifit_fdfsolver_type",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:4269,Testability,test,test,4269,"st double * ROOT::Math::GSLMultiFit::Gradient ; (; ); const. inline . gradient value at the minimum ; Definition at line 158 of file GSLMultiFit.h. ◆ Iterate(). int ROOT::Math::GSLMultiFit::Iterate ; (; ). inline . Definition at line 145 of file GSLMultiFit.h. ◆ Name(). std::string ROOT::Math::GSLMultiFit::Name ; (; ); const. inline . Definition at line 140 of file GSLMultiFit.h. ◆ operator=() [1/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; const GSLMultiFit & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; GSLMultiFit && ; rhs). delete . ◆ Set(). template<class Func > . int ROOT::Math::GSLMultiFit::Set ; (; const std::vector< Func > & ; funcVec, . const double * ; x . ). inline . set the solver parameters ; Definition at line 111 of file GSLMultiFit.h. ◆ TestDelta(). int ROOT::Math::GSLMultiFit::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 191 of file GSLMultiFit.h. ◆ TestGradient(). int ROOT::Math::GSLMultiFit::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from solver gradient vector) ; Definition at line 183 of file GSLMultiFit.h. ◆ X(). const double * ROOT::Math::GSLMultiFit::X ; (; ); const. inline . parameter values at the minimum ; Definition at line 151 of file GSLMultiFit.h. Member Data Documentation. ◆ fCov. gsl_matrix* ROOT::Math::GSLMultiFit::fCov. mutableprivate . Definition at line 221 of file GSLMultiFit.h. ◆ fFunc. GSLMultiFitFunctionWrapper ROOT::Math::GSLMultiFit::fFunc. private . Definition at line 216 of file GSLMultiFit.h. ◆ fSolver. gsl_multifit_fdfsolver* ROOT::Math::GSLMultiFit::fSolver. private . Definition at line 217 of file GSLMultiFit.h. ◆ fTmp. gsl_vector* ROOT::Math::GSLMultiFit::fTmp. mutableprivate . Definition at line 220 of file GSLMultiFit.h. ◆ fType. const gsl_multifit_fdfsolver_type* ROOT::Math::GSLMultiFit::fType. priv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:4501,Testability,test,test,4501," Definition at line 145 of file GSLMultiFit.h. ◆ Name(). std::string ROOT::Math::GSLMultiFit::Name ; (; ); const. inline . Definition at line 140 of file GSLMultiFit.h. ◆ operator=() [1/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; const GSLMultiFit & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiFit & ROOT::Math::GSLMultiFit::operator= ; (; GSLMultiFit && ; rhs). delete . ◆ Set(). template<class Func > . int ROOT::Math::GSLMultiFit::Set ; (; const std::vector< Func > & ; funcVec, . const double * ; x . ). inline . set the solver parameters ; Definition at line 111 of file GSLMultiFit.h. ◆ TestDelta(). int ROOT::Math::GSLMultiFit::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 191 of file GSLMultiFit.h. ◆ TestGradient(). int ROOT::Math::GSLMultiFit::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from solver gradient vector) ; Definition at line 183 of file GSLMultiFit.h. ◆ X(). const double * ROOT::Math::GSLMultiFit::X ; (; ); const. inline . parameter values at the minimum ; Definition at line 151 of file GSLMultiFit.h. Member Data Documentation. ◆ fCov. gsl_matrix* ROOT::Math::GSLMultiFit::fCov. mutableprivate . Definition at line 221 of file GSLMultiFit.h. ◆ fFunc. GSLMultiFitFunctionWrapper ROOT::Math::GSLMultiFit::fFunc. private . Definition at line 216 of file GSLMultiFit.h. ◆ fSolver. gsl_multifit_fdfsolver* ROOT::Math::GSLMultiFit::fSolver. private . Definition at line 217 of file GSLMultiFit.h. ◆ fTmp. gsl_vector* ROOT::Math::GSLMultiFit::fTmp. mutableprivate . Definition at line 220 of file GSLMultiFit.h. ◆ fType. const gsl_multifit_fdfsolver_type* ROOT::Math::GSLMultiFit::fType. private . Definition at line 225 of file GSLMultiFit.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiFit::fVec. mutableprivate . Definition at line 219 of file GSLMultiFit.h. math/mathmore/src/GSLMultiFit.h. ROOTMathGSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html:513,Energy Efficiency,adapt,adapting,513,". ROOT: ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class FuncVector>; class ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g); This class defines static methods with will be used to fill the gsl_multimin_function and gsl_multimin_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 69 of file GSLMultiFitFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 86 of file GSLMultiFitFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 73 of file GSLMultiFitFunctionAda",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html:513,Modifiability,adapt,adapting,513,". ROOT: ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class FuncVector>; class ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g); This class defines static methods with will be used to fill the gsl_multimin_function and gsl_multimin_function_fdf structs used by GSL. See for examples the GSL online manual ; Definition at line 69 of file GSLMultiFitFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 86 of file GSLMultiFitFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiFitFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 73 of file GSLMultiFitFunctionAda",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionAdapter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html:386,Integrability,wrap,wrapper,386,". ROOT: ROOT::Math::GSLMultiFitFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiFitFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ; Definition at line 58 of file GSLMultiFitFunctionWrapper.h. Public Member Functions;  GSLMultiFitFunctionWrapper ();  ; gsl_multifit_function_fdf * GetFunc ();  ; template<class FuncVector > ; void SetFunction (const FuncVector &f, unsigned int nres, unsigned int npar);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multifit_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFitFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiFitFunctionWrapper(). ROOT::Math::GSLMultiFitFunctionWrapper::GSLMultiFitFunctionWrapper ; (; ). inline . Definition at line 62 of file GSLMultiFitFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_multifit_function_fdf * ROOT::Math::GSLMultiFitFunctionWrapper::GetFunc ; (; ). inline . Definition at line 90 of file GSLMultiFitFunctionWrapper.h. ◆ SetFunction(). template<class FuncVector > . void ROOT::Math::GSLMultiFitFunctionWrapper::SetFunction ; (; const FuncVector & ; f, . unsigned int ; nres, . unsigned int ; npar . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 79 of file GSLMultiFitFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multifit_function_fdf ROOT::Math::GSLMultiFitFunctionWrapper::fFunc. private . Definition at line 95 of file GSLMultiFitFunctionWrapper.h. math/mathmore/src/GS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFitFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinFunctionWrapper.html:386,Integrability,wrap,wrapper,386,. ROOT: ROOT::Math::GSLMultiMinFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiMinFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ; Definition at line 58 of file GSLMultiMinFunctionWrapper.h. Public Member Functions;  GSLMultiMinFunctionWrapper ();  ; gsl_multimin_function * GetFunc ();  ; bool IsValid ();  ; void SetDim (unsigned int n);  ; void SetFuncPointer (GSLMultiMinFuncPointer f);  ; template<class FuncType > ; void SetFunction (const FuncType &f);  Fill gsl function structure from a C++ Function class. ;  ; void SetParams (void *p);  . Private Attributes; gsl_multimin_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinFunctionWrapper(). ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapper ; (; ). inline . Definition at line 62 of file GSLMultiMinFunctionWrapper.h. Member Function Documentation. ◆ GetFunc(). gsl_multimin_function * ROOT::Math::GSLMultiMinFunctionWrapper::GetFunc ; (; ). inline . Definition at line 83 of file GSLMultiMinFunctionWrapper.h. ◆ IsValid(). bool ROOT::Math::GSLMultiMinFunctionWrapper::IsValid ; (; ). inline . Definition at line 85 of file GSLMultiMinFunctionWrapper.h. ◆ SetDim(). void ROOT::Math::GSLMultiMinFunctionWrapper::SetDim ; (; unsigned int ; n). inline . Definition at line 70 of file GSLMultiMinFunctionWrapper.h. ◆ SetFuncPointer(). void ROOT::Math::GSLMultiMinFunctionWrapper::SetFuncPointer ; (; GSLMultiMinFuncPointer ; f). inline . Definition at line 69 of file GSLMultiMinFunctionWrapper.h. ◆ SetFunction(). t,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:1415,Availability,toler,tolerance,1415,"OT::Math::GSLMultiMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. ; Definition at line 54 of file GSLMultiMinimizer.h. Public Member Functions;  GSLMultiMinimizer (const GSLMultiMinimizer &)=delete;  ;  GSLMultiMinimizer (GSLMultiMinimizer &&)=delete;  ;  GSLMultiMinimizer (ROOT::Math::EGSLMinimizerType type);  Default constructor. ;  ;  ~GSLMultiMinimizer ();  Destructor. ;  ; void CreateMinimizer (unsigned int n);  create the minimizer from the type and size ;  ; double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; double Minimum () const;  function value at the minimum ;  ; std::string Name () const;  ; GSLMultiMinimizer & operator= (const GSLMultiMinimizer &rhs)=delete;  ; GSLMultiMinimizer & operator= (GSLMultiMinimizer &&rhs)=delete;  ; int Restart ();  restart minimization from current point ;  ; int Set (const ROOT::Math::IMultiGradFunction &func, const double *x, double stepSize, double tol);  set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ;  ; int TestGradient (const double *g, double absTol) const;  test gradient (require a vector gradient) ;  ; int TestGradient (double absTol) const;  test gradient (ask from minimizer gradient vector) ;  ; double * X () const;  x values at the minimum ;  . Private Attributes; GSLMultiMinDerivFunctionWrapper fFunc;  ; gsl_multimin_fdfminimizer * fMinimizer;  ; const gsl_multimin_fdfminimizer_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinimizer.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinimizer() [1/3]. ROOT::Math::GSLMultiMinimizer::GSLMultiMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type). inline . Default constructor. ; Definition at line 61 of file GSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:4151,Availability,toler,tolerance,4151,"file GSLMultiMinimizer.h. ◆ Minimum(). double ROOT::Math::GSLMultiMinimizer::Minimum ; (; ); const. inline . function value at the minimum ; Definition at line 153 of file GSLMultiMinimizer.h. ◆ Name(). std::string ROOT::Math::GSLMultiMinimizer::Name ; (; ); const. inline . Definition at line 135 of file GSLMultiMinimizer.h. ◆ operator=() [1/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; const GSLMultiMinimizer & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; GSLMultiMinimizer && ; rhs). delete . ◆ Restart(). int ROOT::Math::GSLMultiMinimizer::Restart ; (; ). inline . restart minimization from current point ; Definition at line 166 of file GSLMultiMinimizer.h. ◆ Set(). int ROOT::Math::GSLMultiMinimizer::Set ; (; const ROOT::Math::IMultiGradFunction & ; func, . const double * ; x, . double ; stepSize, . double ; tol . ). inline . set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ; Definition at line 115 of file GSLMultiMinimizer.h. ◆ TestGradient() [1/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; const double * ; g, . double ; absTol . ); const. inline . test gradient (require a vector gradient) ; Definition at line 179 of file GSLMultiMinimizer.h. ◆ TestGradient() [2/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from minimizer gradient vector) ; Definition at line 172 of file GSLMultiMinimizer.h. ◆ X(). double * ROOT::Math::GSLMultiMinimizer::X ; (; ); const. inline . x values at the minimum ; Definition at line 146 of file GSLMultiMinimizer.h. Member Data Documentation. ◆ fFunc. GSLMultiMinDerivFunctionWrapper ROOT::Math::GSLMultiMinimizer::fFunc. private . Definition at line 191 of file GSLMultiMinimizer.h. ◆ fMinimizer. gsl_multimin_fdfminimizer* ROOT::Math::GSLMultiMinimizer::fMinimizer. private . Definition at line 190 of file GSLMultiMinimizer.h. ◆ fT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:1507,Testability,test,test,1507,"OT::Math::GSLMultiMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. ; Definition at line 54 of file GSLMultiMinimizer.h. Public Member Functions;  GSLMultiMinimizer (const GSLMultiMinimizer &)=delete;  ;  GSLMultiMinimizer (GSLMultiMinimizer &&)=delete;  ;  GSLMultiMinimizer (ROOT::Math::EGSLMinimizerType type);  Default constructor. ;  ;  ~GSLMultiMinimizer ();  Destructor. ;  ; void CreateMinimizer (unsigned int n);  create the minimizer from the type and size ;  ; double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; double Minimum () const;  function value at the minimum ;  ; std::string Name () const;  ; GSLMultiMinimizer & operator= (const GSLMultiMinimizer &rhs)=delete;  ; GSLMultiMinimizer & operator= (GSLMultiMinimizer &&rhs)=delete;  ; int Restart ();  restart minimization from current point ;  ; int Set (const ROOT::Math::IMultiGradFunction &func, const double *x, double stepSize, double tol);  set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ;  ; int TestGradient (const double *g, double absTol) const;  test gradient (require a vector gradient) ;  ; int TestGradient (double absTol) const;  test gradient (ask from minimizer gradient vector) ;  ; double * X () const;  x values at the minimum ;  . Private Attributes; GSLMultiMinDerivFunctionWrapper fFunc;  ; gsl_multimin_fdfminimizer * fMinimizer;  ; const gsl_multimin_fdfminimizer_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinimizer.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinimizer() [1/3]. ROOT::Math::GSLMultiMinimizer::GSLMultiMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type). inline . Default constructor. ; Definition at line 61 of file GSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:1595,Testability,test,test,1595,"OT::Math::GSLMultiMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. ; Definition at line 54 of file GSLMultiMinimizer.h. Public Member Functions;  GSLMultiMinimizer (const GSLMultiMinimizer &)=delete;  ;  GSLMultiMinimizer (GSLMultiMinimizer &&)=delete;  ;  GSLMultiMinimizer (ROOT::Math::EGSLMinimizerType type);  Default constructor. ;  ;  ~GSLMultiMinimizer ();  Destructor. ;  ; void CreateMinimizer (unsigned int n);  create the minimizer from the type and size ;  ; double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; double Minimum () const;  function value at the minimum ;  ; std::string Name () const;  ; GSLMultiMinimizer & operator= (const GSLMultiMinimizer &rhs)=delete;  ; GSLMultiMinimizer & operator= (GSLMultiMinimizer &&rhs)=delete;  ; int Restart ();  restart minimization from current point ;  ; int Set (const ROOT::Math::IMultiGradFunction &func, const double *x, double stepSize, double tol);  set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ;  ; int TestGradient (const double *g, double absTol) const;  test gradient (require a vector gradient) ;  ; int TestGradient (double absTol) const;  test gradient (ask from minimizer gradient vector) ;  ; double * X () const;  x values at the minimum ;  . Private Attributes; GSLMultiMinDerivFunctionWrapper fFunc;  ; gsl_multimin_fdfminimizer * fMinimizer;  ; const gsl_multimin_fdfminimizer_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiMinimizer.h>; Constructor & Destructor Documentation. ◆ GSLMultiMinimizer() [1/3]. ROOT::Math::GSLMultiMinimizer::GSLMultiMinimizer ; (; ROOT::Math::EGSLMinimizerType ; type). inline . Default constructor. ; Definition at line 61 of file GSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:4370,Testability,test,test,4370,"inline . Definition at line 135 of file GSLMultiMinimizer.h. ◆ operator=() [1/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; const GSLMultiMinimizer & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; GSLMultiMinimizer && ; rhs). delete . ◆ Restart(). int ROOT::Math::GSLMultiMinimizer::Restart ; (; ). inline . restart minimization from current point ; Definition at line 166 of file GSLMultiMinimizer.h. ◆ Set(). int ROOT::Math::GSLMultiMinimizer::Set ; (; const ROOT::Math::IMultiGradFunction & ; func, . const double * ; x, . double ; stepSize, . double ; tol . ). inline . set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ; Definition at line 115 of file GSLMultiMinimizer.h. ◆ TestGradient() [1/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; const double * ; g, . double ; absTol . ); const. inline . test gradient (require a vector gradient) ; Definition at line 179 of file GSLMultiMinimizer.h. ◆ TestGradient() [2/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from minimizer gradient vector) ; Definition at line 172 of file GSLMultiMinimizer.h. ◆ X(). double * ROOT::Math::GSLMultiMinimizer::X ; (; ); const. inline . x values at the minimum ; Definition at line 146 of file GSLMultiMinimizer.h. Member Data Documentation. ◆ fFunc. GSLMultiMinDerivFunctionWrapper ROOT::Math::GSLMultiMinimizer::fFunc. private . Definition at line 191 of file GSLMultiMinimizer.h. ◆ fMinimizer. gsl_multimin_fdfminimizer* ROOT::Math::GSLMultiMinimizer::fMinimizer. private . Definition at line 190 of file GSLMultiMinimizer.h. ◆ fType. const gsl_multimin_fdfminimizer_type* ROOT::Math::GSLMultiMinimizer::fType. private . Definition at line 192 of file GSLMultiMinimizer.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiMinimizer::fVec. mutableprivate . Definition at line 194 of file GSLMultiMinimizer",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:4577,Testability,test,test,4577,"; rhs). delete . ◆ operator=() [2/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; GSLMultiMinimizer && ; rhs). delete . ◆ Restart(). int ROOT::Math::GSLMultiMinimizer::Restart ; (; ). inline . restart minimization from current point ; Definition at line 166 of file GSLMultiMinimizer.h. ◆ Set(). int ROOT::Math::GSLMultiMinimizer::Set ; (; const ROOT::Math::IMultiGradFunction & ; func, . const double * ; x, . double ; stepSize, . double ; tol . ). inline . set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ; Definition at line 115 of file GSLMultiMinimizer.h. ◆ TestGradient() [1/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; const double * ; g, . double ; absTol . ); const. inline . test gradient (require a vector gradient) ; Definition at line 179 of file GSLMultiMinimizer.h. ◆ TestGradient() [2/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from minimizer gradient vector) ; Definition at line 172 of file GSLMultiMinimizer.h. ◆ X(). double * ROOT::Math::GSLMultiMinimizer::X ; (; ); const. inline . x values at the minimum ; Definition at line 146 of file GSLMultiMinimizer.h. Member Data Documentation. ◆ fFunc. GSLMultiMinDerivFunctionWrapper ROOT::Math::GSLMultiMinimizer::fFunc. private . Definition at line 191 of file GSLMultiMinimizer.h. ◆ fMinimizer. gsl_multimin_fdfminimizer* ROOT::Math::GSLMultiMinimizer::fMinimizer. private . Definition at line 190 of file GSLMultiMinimizer.h. ◆ fType. const gsl_multimin_fdfminimizer_type* ROOT::Math::GSLMultiMinimizer::fType. private . Definition at line 192 of file GSLMultiMinimizer.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiMinimizer::fVec. mutableprivate . Definition at line 194 of file GSLMultiMinimizer.h. math/mathmore/src/GSLMultiMinimizer.h. ROOTMathGSLMultiMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:1213,Availability,toler,tolerance,1213,"ss Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::GSLMultiRootBaseSolver Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ; Definition at line 57 of file GSLMultiRootSolver.h. Public Member Functions; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; virtual int Iterate ()=0;  perform an iteration ;  ; virtual const std::string & Name () const =0;  return name ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Member Functions; virtual gsl_vector * GetDx () const =0;  ; virtual gsl_vector * GetF () const =0;  ; virtual gsl_vector * GetRoot () const =0;  ; virtual int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootSolver.h>. Inheritance diagram for ROOT::Math::GSLMultiRootBaseSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GSLMultiRootBaseS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:1331,Availability,toler,tolerance,1331,"ss Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::GSLMultiRootBaseSolver Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ; Definition at line 57 of file GSLMultiRootSolver.h. Public Member Functions; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; virtual int Iterate ()=0;  perform an iteration ;  ; virtual const std::string & Name () const =0;  return name ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Member Functions; virtual gsl_vector * GetDx () const =0;  ; virtual gsl_vector * GetF () const =0;  ; virtual gsl_vector * GetRoot () const =0;  ; virtual int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootSolver.h>. Inheritance diagram for ROOT::Math::GSLMultiRootBaseSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GSLMultiRootBaseS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:4312,Availability,toler,tolerance,4312," ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ InitSolver(). bool ROOT::Math::GSLMultiRootBaseSolver::InitSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inline . init the solver with function list and initial values ; Definition at line 71 of file GSLMultiRootSolver.h. ◆ Iterate(). virtual int ROOT::Math::GSLMultiRootBaseSolver::Iterate ; (; ). pure virtual . perform an iteration ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ Name(). virtual const std::string & ROOT::Math::GSLMultiRootBaseSolver::Name ; (; ); const. pure virtual . return name ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ SetSolver(). virtual int ROOT::Math::GSLMultiRootBaseSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ TestDelta(). int ROOT::Math::GSLMultiRootBaseSolver::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 117 of file GSLMultiRootSolver.h. ◆ TestResidual(). int ROOT::Math::GSLMultiRootBaseSolver::TestResidual ; (; double ; absTol); const. inline . test using abs tolerance Sum |f|_i < absTol ; Definition at line 126 of file GSLMultiRootSolver.h. ◆ X(). const double * ROOT::Math::GSLMultiRootBaseSolver::X ; (; ); const. inline . solution values at the current iteration ; Definition at line 98 of file GSLMultiRootSolver.h. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMultiRootSolver.h. ROOTMathGSLMultiRootBaseSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:4549,Availability,toler,tolerance,4549," ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ InitSolver(). bool ROOT::Math::GSLMultiRootBaseSolver::InitSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inline . init the solver with function list and initial values ; Definition at line 71 of file GSLMultiRootSolver.h. ◆ Iterate(). virtual int ROOT::Math::GSLMultiRootBaseSolver::Iterate ; (; ). pure virtual . perform an iteration ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ Name(). virtual const std::string & ROOT::Math::GSLMultiRootBaseSolver::Name ; (; ); const. pure virtual . return name ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ SetSolver(). virtual int ROOT::Math::GSLMultiRootBaseSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ TestDelta(). int ROOT::Math::GSLMultiRootBaseSolver::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 117 of file GSLMultiRootSolver.h. ◆ TestResidual(). int ROOT::Math::GSLMultiRootBaseSolver::TestResidual ; (; double ; absTol); const. inline . test using abs tolerance Sum |f|_i < absTol ; Definition at line 126 of file GSLMultiRootSolver.h. ◆ X(). const double * ROOT::Math::GSLMultiRootBaseSolver::X ; (; ); const. inline . solution values at the current iteration ; Definition at line 98 of file GSLMultiRootSolver.h. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMultiRootSolver.h. ROOTMathGSLMultiRootBaseSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:1042,Performance,perform,perform,1042,"ss Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::GSLMultiRootBaseSolver Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ; Definition at line 57 of file GSLMultiRootSolver.h. Public Member Functions; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; virtual int Iterate ()=0;  perform an iteration ;  ; virtual const std::string & Name () const =0;  return name ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Member Functions; virtual gsl_vector * GetDx () const =0;  ; virtual gsl_vector * GetF () const =0;  ; virtual gsl_vector * GetRoot () const =0;  ; virtual int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootSolver.h>. Inheritance diagram for ROOT::Math::GSLMultiRootBaseSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GSLMultiRootBaseS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:3556,Performance,perform,perform,3556,"or * ROOT::Math::GSLMultiRootBaseSolver::GetDx ; (; ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ GetF(). virtual gsl_vector * ROOT::Math::GSLMultiRootBaseSolver::GetF ; (; ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ GetRoot(). virtual gsl_vector * ROOT::Math::GSLMultiRootBaseSolver::GetRoot ; (; ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ InitSolver(). bool ROOT::Math::GSLMultiRootBaseSolver::InitSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inline . init the solver with function list and initial values ; Definition at line 71 of file GSLMultiRootSolver.h. ◆ Iterate(). virtual int ROOT::Math::GSLMultiRootBaseSolver::Iterate ; (; ). pure virtual . perform an iteration ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ Name(). virtual const std::string & ROOT::Math::GSLMultiRootBaseSolver::Name ; (; ); const. pure virtual . return name ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ SetSolver(). virtual int ROOT::Math::GSLMultiRootBaseSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ TestDelta(). int ROOT::Math::GSLMultiRootBaseSolver::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 117 of file GSLMultiRootSolver.h. ◆ TestResidual(). int ROOT::Math::GSLMultiRootBaseSolver::TestResidual ; (; double ; absTol); const. inline . test using abs tolerance Sum |f|_i < absTol ; Definition at line 126 of file ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:1185,Testability,test,test,1185,"ss Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::GSLMultiRootBaseSolver Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ; Definition at line 57 of file GSLMultiRootSolver.h. Public Member Functions; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; virtual int Iterate ()=0;  perform an iteration ;  ; virtual const std::string & Name () const =0;  return name ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Member Functions; virtual gsl_vector * GetDx () const =0;  ; virtual gsl_vector * GetF () const =0;  ; virtual gsl_vector * GetRoot () const =0;  ; virtual int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootSolver.h>. Inheritance diagram for ROOT::Math::GSLMultiRootBaseSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GSLMultiRootBaseS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:1316,Testability,test,test,1316,"ss Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::GSLMultiRootBaseSolver Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ; Definition at line 57 of file GSLMultiRootSolver.h. Public Member Functions; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; virtual int Iterate ()=0;  perform an iteration ;  ; virtual const std::string & Name () const =0;  return name ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Member Functions; virtual gsl_vector * GetDx () const =0;  ; virtual gsl_vector * GetF () const =0;  ; virtual gsl_vector * GetRoot () const =0;  ; virtual int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x)=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootSolver.h>. Inheritance diagram for ROOT::Math::GSLMultiRootBaseSolver:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~GSLMultiRootBaseS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:4284,Testability,test,test,4284," ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ InitSolver(). bool ROOT::Math::GSLMultiRootBaseSolver::InitSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inline . init the solver with function list and initial values ; Definition at line 71 of file GSLMultiRootSolver.h. ◆ Iterate(). virtual int ROOT::Math::GSLMultiRootBaseSolver::Iterate ; (; ). pure virtual . perform an iteration ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ Name(). virtual const std::string & ROOT::Math::GSLMultiRootBaseSolver::Name ; (; ); const. pure virtual . return name ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ SetSolver(). virtual int ROOT::Math::GSLMultiRootBaseSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ TestDelta(). int ROOT::Math::GSLMultiRootBaseSolver::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 117 of file GSLMultiRootSolver.h. ◆ TestResidual(). int ROOT::Math::GSLMultiRootBaseSolver::TestResidual ; (; double ; absTol); const. inline . test using abs tolerance Sum |f|_i < absTol ; Definition at line 126 of file GSLMultiRootSolver.h. ◆ X(). const double * ROOT::Math::GSLMultiRootBaseSolver::X ; (; ); const. inline . solution values at the current iteration ; Definition at line 98 of file GSLMultiRootSolver.h. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMultiRootSolver.h. ROOTMathGSLMultiRootBaseSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html:4534,Testability,test,test,4534," ); const. privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ InitSolver(). bool ROOT::Math::GSLMultiRootBaseSolver::InitSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inline . init the solver with function list and initial values ; Definition at line 71 of file GSLMultiRootSolver.h. ◆ Iterate(). virtual int ROOT::Math::GSLMultiRootBaseSolver::Iterate ; (; ). pure virtual . perform an iteration ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ Name(). virtual const std::string & ROOT::Math::GSLMultiRootBaseSolver::Name ; (; ); const. pure virtual . return name ; Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ SetSolver(). virtual int ROOT::Math::GSLMultiRootBaseSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). privatepure virtual . Implemented in ROOT::Math::GSLMultiRootSolver, and ROOT::Math::GSLMultiRootDerivSolver. ◆ TestDelta(). int ROOT::Math::GSLMultiRootBaseSolver::TestDelta ; (; double ; absTol, . double ; relTol . ); const. inline . test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ; Definition at line 117 of file GSLMultiRootSolver.h. ◆ TestResidual(). int ROOT::Math::GSLMultiRootBaseSolver::TestResidual ; (; double ; absTol); const. inline . test using abs tolerance Sum |f|_i < absTol ; Definition at line 126 of file GSLMultiRootSolver.h. ◆ X(). const double * ROOT::Math::GSLMultiRootBaseSolver::X ; (; ); const. inline . solution values at the current iteration ; Definition at line 98 of file GSLMultiRootSolver.h. The documentation for this class was generated from the following file:; math/mathmore/src/GSLMultiRootSolver.h. ROOTMathGSLMultiRootBaseSolver. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootBaseSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivFunctionWrapper.html:397,Integrability,wrap,wrapper,397,". ROOT: ROOT::Math::GSLMultiRootDerivFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootDerivFunctionWrapper Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; wrapper to a multi-dim function with derivatives for multi roots algorithm ; Definition at line 96 of file GSLMultiRootFunctionWrapper.h. Public Member Functions;  GSLMultiRootDerivFunctionWrapper ();  ; gsl_multiroot_function_fdf * GetFunctions ();  ; template<class FuncVector > ; void SetFunctions (const FuncVector &f, unsigned int n);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multiroot_function_fdf fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiRootDerivFunctionWrapper(). ROOT::Math::GSLMultiRootDerivFunctionWrapper::GSLMultiRootDerivFunctionWrapper ; (; ). inline . Definition at line 100 of file GSLMultiRootFunctionWrapper.h. Member Function Documentation. ◆ GetFunctions(). gsl_multiroot_function_fdf * ROOT::Math::GSLMultiRootDerivFunctionWrapper::GetFunctions ; (; ). inline . Definition at line 122 of file GSLMultiRootFunctionWrapper.h. ◆ SetFunctions(). template<class FuncVector > . void ROOT::Math::GSLMultiRootDerivFunctionWrapper::SetFunctions ; (; const FuncVector & ; f, . unsigned int ; n . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 112 of file GSLMultiRootFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multiroot_function_fdf ROOT::Math::GSLMultiRootDerivFunctionWrapper::fFunc. private . Definition at line 127 of file GSLMultiRootFunctionWrapper.h. math/m",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:2189,Availability,toler,tolerance,2189,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:2307,Availability,toler,tolerance,2307,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:1723,Modifiability,inherit,inherited,1723,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:1283,Performance,perform,perform,1283,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:4835,Performance,perform,perform,4835,"nline . create the solver from the type and size of number of fitting points and number of parameters ; Definition at line 285 of file GSLMultiRootSolver.h. ◆ GetDx(). gsl_vector * ROOT::Math::GSLMultiRootDerivSolver::GetDx ; (; ); const. inlineoverridevirtual . return function steps ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 343 of file GSLMultiRootSolver.h. ◆ GetF(). gsl_vector * ROOT::Math::GSLMultiRootDerivSolver::GetF ; (; ); const. inlineoverridevirtual . return function values ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 337 of file GSLMultiRootSolver.h. ◆ GetRoot(). gsl_vector * ROOT::Math::GSLMultiRootDerivSolver::GetRoot ; (; ); const. inlineoverridevirtual . solution values at the current iteration ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 331 of file GSLMultiRootSolver.h. ◆ Iterate(). int ROOT::Math::GSLMultiRootDerivSolver::Iterate ; (; ). inlineoverridevirtual . perform an iteration ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 325 of file GSLMultiRootSolver.h. ◆ Name(). const std::string & ROOT::Math::GSLMultiRootDerivSolver::Name ; (; ); const. inlineoverridevirtual . return name ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 321 of file GSLMultiRootSolver.h. ◆ operator=() [1/2]. GSLMultiRootDerivSolver & ROOT::Math::GSLMultiRootDerivSolver::operator= ; (; const GSLMultiRootDerivSolver & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiRootDerivSolver & ROOT::Math::GSLMultiRootDerivSolver::operator= ; (; GSLMultiRootDerivSolver && ; rhs). delete . ◆ SetSolver(). int ROOT::Math::GSLMultiRootDerivSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inlineoverridevirtual . set the solver parameters for the case of derivative ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 296 of file GSLMultiRootSolver.h. Member Data Documentation. ◆ fDerivFunctions. GSLM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:2161,Testability,test,test,2161,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html:2292,Testability,test,test,2292,"h. Public Member Functions;  GSLMultiRootDerivSolver (const gsl_multiroot_fdfsolver_type *type, int n);  Constructor. ;  ;  GSLMultiRootDerivSolver (const GSLMultiRootDerivSolver &)=delete;  ;  GSLMultiRootDerivSolver (GSLMultiRootDerivSolver &&)=delete;  ;  ~GSLMultiRootDerivSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fdfsolver_type *type, unsigned int n);  create the solver from the type and size of number of fitting points and number of parameters ;  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootDerivSolver & operator= (const GSLMultiRootDerivSolver &rhs)=delete;  ; GSLMultiRootDerivSolver & operator= (GSLMultiRootDerivSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters for the case of derivative ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootDerivFunctionWrapper fDerivFunctions;  ; gsl_multiroot_fdfsolver * fDerivSolver;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootDerivSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:741,Availability,avail,available,741,". ROOT: ROOT::Math::GSLMultiRootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; Class for Multidimensional root finding algorithms bassed on GSL. ; This class is used to solve a non-linear system of equations:; f1(x1,....xn) = 0 f2(x1,....xn) = 0 .................. fn(x1,....xn) = 0; See the GSL online manual for information on the GSL MultiRoot finding algorithms; The available GSL algorithms require the derivatives of the supplied functions or not (they are computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of functions impelmenting the ROOT::Math::IMultiGenFunction interface. The available algorithms requiring derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid method as implemented in HYBRJ in MINPACK . ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method . ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using finate difference approximation for the derivatives . ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the previous algorithm . ROOT::Math::GSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:1142,Availability,avail,available,1142,"r Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; Class for Multidimensional root finding algorithms bassed on GSL. ; This class is used to solve a non-linear system of equations:; f1(x1,....xn) = 0 f2(x1,....xn) = 0 .................. fn(x1,....xn) = 0; See the GSL online manual for information on the GSL MultiRoot finding algorithms; The available GSL algorithms require the derivatives of the supplied functions or not (they are computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of functions impelmenting the ROOT::Math::IMultiGenFunction interface. The available algorithms requiring derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid method as implemented in HYBRJ in MINPACK . ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method . ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using finate difference approximation for the derivatives . ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm . ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Definition at line 95 of file GSLM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:3737,Availability,avail,available,3737,");  create a multi-root finder based on an algorithm requiring function derivative ;  ;  GSLMultiRootFinder (EType type);  create a multi-root finder based on an algorithm not requiring function derivative ;  ;  GSLMultiRootFinder (GSLMultiRootFinder &&)=delete;  ; virtual ~GSLMultiRootFinder ();  destructor ;  ; int AddFunction (const ROOT::Math::IMultiGenFunction &func);  ; template<class Function > ; int AddFunction (Function &f, int ndim);  same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return the print level ;  ; void PrintState (std::ostream &os=std::cout);  print iteration state ;  ; template<class FuncIterator > ; bool SetFunctionList (FuncIterator begin, FuncIterator end);  ; void SetPrintLevel (int level);  ; void SetType (const char *name);  set the type using a string ;  ; void SetType (EDerivType type);  set the type of algorithm using derivatives ;  ; void SetType (EType type);  set the type for an algorithm without derivatives ;  ; bool Solve (const double *x, int maxIter=0, double absTol=0, double relTol=0);  Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ;  ; int St",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:4605,Availability,toler,tolerance,4605,"ped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return the print level ;  ; void PrintState (std::ostream &os=std::cout);  print iteration state ;  ; template<class FuncIterator > ; bool SetFunctionList (FuncIterator begin, FuncIterator end);  ; void SetPrintLevel (int level);  ; void SetType (const char *name);  set the type using a string ;  ; void SetType (EDerivType type);  set the type of algorithm using derivatives ;  ; void SetType (EType type);  set the type for an algorithm without derivatives ;  ; bool Solve (const double *x, int maxIter=0, double absTol=0, double relTol=0);  Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ;  ; int Status () const;  Return the status of last root finding. ;  ; const double * X () const;  return the root X values solving the system ;  . Static Public Member Functions; static void SetDefaultMaxIterations (int maxiter);  set maximum number of iterations ;  ; static void SetDefaultTolerance (double abstol, double reltol=0);  set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ;  . Protected Member Functions; void ClearFunctions ();  ; std::pair< bool, int > GetTy",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:5061,Availability,toler,tolerance,5061,"State (std::ostream &os=std::cout);  print iteration state ;  ; template<class FuncIterator > ; bool SetFunctionList (FuncIterator begin, FuncIterator end);  ; void SetPrintLevel (int level);  ; void SetType (const char *name);  set the type using a string ;  ; void SetType (EDerivType type);  set the type of algorithm using derivatives ;  ; void SetType (EType type);  set the type for an algorithm without derivatives ;  ; bool Solve (const double *x, int maxIter=0, double absTol=0, double relTol=0);  Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ;  ; int Status () const;  Return the status of last root finding. ;  ; const double * X () const;  return the root X values solving the system ;  . Static Public Member Functions; static void SetDefaultMaxIterations (int maxiter);  set maximum number of iterations ;  ; static void SetDefaultTolerance (double abstol, double reltol=0);  set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ;  . Protected Member Functions; void ClearFunctions ();  ; std::pair< bool, int > GetType (const char *name);  . Private Attributes; std::vector< ROOT::Math::IMultiGenFunction * > fFunctions;  ; int fIter;  ; int fPrintLevel;  ; GSLMultiRootBaseSolver * fSolver;  ; int fStatus;  ; int fType;  ; bool fUseDerivAlgo;  . #include <Math/GSLMultiRootFinder.h>; Member Enumeration Documentation. ◆ EDerivType. enum ROOT::Math::GSLMultiRootFinder::EDerivType. enumeration specifying the types of GSL multi root finders requiring the derivatives . EnumeratorkHybridSJ ; kHybridJ ; kNewton ; kGNewton . Definition at line 104 of file GSLMultiRootFinder.h. ◆ EType. enum ROOT::Math::GSLMultiRootFinder::EType. enumeration specifying the types of GSL multi root finders which do not require the derivatives . EnumeratorkHybridS ; kHybrid ; kDNewton ; kBro",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:5104,Availability,toler,tolerance,5104,"State (std::ostream &os=std::cout);  print iteration state ;  ; template<class FuncIterator > ; bool SetFunctionList (FuncIterator begin, FuncIterator end);  ; void SetPrintLevel (int level);  ; void SetType (const char *name);  set the type using a string ;  ; void SetType (EDerivType type);  set the type of algorithm using derivatives ;  ; void SetType (EType type);  set the type for an algorithm without derivatives ;  ; bool Solve (const double *x, int maxIter=0, double absTol=0, double relTol=0);  Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ;  ; int Status () const;  Return the status of last root finding. ;  ; const double * X () const;  return the root X values solving the system ;  . Static Public Member Functions; static void SetDefaultMaxIterations (int maxiter);  set maximum number of iterations ;  ; static void SetDefaultTolerance (double abstol, double reltol=0);  set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ;  . Protected Member Functions; void ClearFunctions ();  ; std::pair< bool, int > GetType (const char *name);  . Private Attributes; std::vector< ROOT::Math::IMultiGenFunction * > fFunctions;  ; int fIter;  ; int fPrintLevel;  ; GSLMultiRootBaseSolver * fSolver;  ; int fStatus;  ; int fType;  ; bool fUseDerivAlgo;  . #include <Math/GSLMultiRootFinder.h>; Member Enumeration Documentation. ◆ EDerivType. enum ROOT::Math::GSLMultiRootFinder::EDerivType. enumeration specifying the types of GSL multi root finders requiring the derivatives . EnumeratorkHybridSJ ; kHybridJ ; kNewton ; kGNewton . Definition at line 104 of file GSLMultiRootFinder.h. ◆ EType. enum ROOT::Math::GSLMultiRootFinder::EType. enumeration specifying the types of GSL multi root finders which do not require the derivatives . EnumeratorkHybridS ; kHybrid ; kDNewton ; kBro",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:9129,Availability,avail,available,9129,"class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLMultiRootFinder.cxx. ◆ GetType(). std::pair< bool, int > ROOT::Math::GSLMultiRootFinder::GetType ; (; const char * ; name). protected . Definition at line 207 of file GSLMultiRootFinder.cxx. ◆ Iterations(). int ROOT::Math::GSLMultiRootFinder::Iterations ; (; ); const. inline . Return number of iterations. ; Definition at line 228 of file GSLMultiRootFinder.h. ◆ Name(). const char * ROOT::Math::GSLMultiRootFinder::Name ; (; ); const. Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ; Definition at line 147 of file GSLMultiRootFinder.cxx. ◆ operator=() [1/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; const GSLMultiRootFinder & ; ). delete . ◆ operator=() [2/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; GSLMultiRootFinder && ; ). delete . ◆ PrintLevel(). int ROOT::Math::GSLMultiRootFinder::PrintLevel ; (; ); const. inline . return the print level ; Definition at line 249 of file GSLMultiRootFinder.h. ◆ PrintState(). void ROOT::Math::GSLMultiRootFinder::PrintState ; (; std::ostream & ; os = std::cout). print iteration state ; Definition at line 321 of file GSLMultiRootFinder.cxx. ◆ SetDefaultMaxIterations(). void ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterations ; (; int ; maxiter). static . set maximum number of iterations ; Definition at line 62 of file GSLMultiRootFinder.cxx. ◆ SetDefaultTolerance(). void ROOT::Math::GSLMultiRootFinder",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:10223,Availability,toler,tolerance,10223,"er & ROOT::Math::GSLMultiRootFinder::operator= ; (; const GSLMultiRootFinder & ; ). delete . ◆ operator=() [2/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; GSLMultiRootFinder && ; ). delete . ◆ PrintLevel(). int ROOT::Math::GSLMultiRootFinder::PrintLevel ; (; ); const. inline . return the print level ; Definition at line 249 of file GSLMultiRootFinder.h. ◆ PrintState(). void ROOT::Math::GSLMultiRootFinder::PrintState ; (; std::ostream & ; os = std::cout). print iteration state ; Definition at line 321 of file GSLMultiRootFinder.cxx. ◆ SetDefaultMaxIterations(). void ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterations ; (; int ; maxiter). static . set maximum number of iterations ; Definition at line 62 of file GSLMultiRootFinder.cxx. ◆ SetDefaultTolerance(). void ROOT::Math::GSLMultiRootFinder::SetDefaultTolerance ; (; double ; abstol, . double ; reltol = 0 . ). static . set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ; Definition at line 57 of file GSLMultiRootFinder.cxx. ◆ SetFunctionList(). template<class FuncIterator > . bool ROOT::Math::GSLMultiRootFinder::SetFunctionList ; (; FuncIterator ; begin, . FuncIterator ; end . ). inline . Definition at line 170 of file GSLMultiRootFinder.h. ◆ SetPrintLevel(). void ROOT::Math::GSLMultiRootFinder::SetPrintLevel ; (; int ; level). inline . Definition at line 246 of file GSLMultiRootFinder.h. ◆ SetType() [1/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; const char * ; name). set the type using a string ; Definition at line 102 of file GSLMultiRootFinder.cxx. ◆ SetType() [2/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EDerivType ; type). inline . set the type of algorithm using derivatives ; Definition at line 153 of file GSLMultiRootFinder.h. ◆ SetType() [3/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EType ; type). inline . set the type for an algorithm without derivatives ; Definition at line",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:10266,Availability,toler,tolerance,10266,"er & ROOT::Math::GSLMultiRootFinder::operator= ; (; const GSLMultiRootFinder & ; ). delete . ◆ operator=() [2/2]. GSLMultiRootFinder & ROOT::Math::GSLMultiRootFinder::operator= ; (; GSLMultiRootFinder && ; ). delete . ◆ PrintLevel(). int ROOT::Math::GSLMultiRootFinder::PrintLevel ; (; ); const. inline . return the print level ; Definition at line 249 of file GSLMultiRootFinder.h. ◆ PrintState(). void ROOT::Math::GSLMultiRootFinder::PrintState ; (; std::ostream & ; os = std::cout). print iteration state ; Definition at line 321 of file GSLMultiRootFinder.cxx. ◆ SetDefaultMaxIterations(). void ROOT::Math::GSLMultiRootFinder::SetDefaultMaxIterations ; (; int ; maxiter). static . set maximum number of iterations ; Definition at line 62 of file GSLMultiRootFinder.cxx. ◆ SetDefaultTolerance(). void ROOT::Math::GSLMultiRootFinder::SetDefaultTolerance ; (; double ; abstol, . double ; reltol = 0 . ). static . set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ; Definition at line 57 of file GSLMultiRootFinder.cxx. ◆ SetFunctionList(). template<class FuncIterator > . bool ROOT::Math::GSLMultiRootFinder::SetFunctionList ; (; FuncIterator ; begin, . FuncIterator ; end . ). inline . Definition at line 170 of file GSLMultiRootFinder.h. ◆ SetPrintLevel(). void ROOT::Math::GSLMultiRootFinder::SetPrintLevel ; (; int ; level). inline . Definition at line 246 of file GSLMultiRootFinder.h. ◆ SetType() [1/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; const char * ; name). set the type using a string ; Definition at line 102 of file GSLMultiRootFinder.cxx. ◆ SetType() [2/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EDerivType ; type). inline . set the type of algorithm using derivatives ; Definition at line 153 of file GSLMultiRootFinder.h. ◆ SetType() [3/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EType ; type). inline . set the type for an algorithm without derivatives ; Definition at line",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:11563,Availability,toler,tolerance,11563,"ne 170 of file GSLMultiRootFinder.h. ◆ SetPrintLevel(). void ROOT::Math::GSLMultiRootFinder::SetPrintLevel ; (; int ; level). inline . Definition at line 246 of file GSLMultiRootFinder.h. ◆ SetType() [1/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; const char * ; name). set the type using a string ; Definition at line 102 of file GSLMultiRootFinder.cxx. ◆ SetType() [2/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EDerivType ; type). inline . set the type of algorithm using derivatives ; Definition at line 153 of file GSLMultiRootFinder.h. ◆ SetType() [3/3]. void ROOT::Math::GSLMultiRootFinder::SetType ; (; EType ; type). inline . set the type for an algorithm without derivatives ; Definition at line 148 of file GSLMultiRootFinder.h. ◆ Solve(). bool ROOT::Math::GSLMultiRootFinder::Solve ; (; const double * ; x, . int ; maxIter = 0, . double ; absTol = 0, . double ; relTol = 0 . ). Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ; Definition at line 224 of file GSLMultiRootFinder.cxx. ◆ Status(). int ROOT::Math::GSLMultiRootFinder::Status ; (; ); const. inline . Return the status of last root finding. ; Definition at line 233 of file GSLMultiRootFinder.h. ◆ X(). const double * ROOT::Math::GSLMultiRootFinder::X ; (; ); const. return the root X values solving the system ; Definition at line 135 of file GSLMultiRootFinder.cxx. Member Data Documentation. ◆ fFunctions. std::vector<ROOT::Math::IMultiGenFunction *> ROOT::Math::GSLMultiRootFinder::fFunctions. private . Definition at line 287 of file GSLMultiRootFinder.h. ◆ fIter. int ROOT::Math::GSLMultiRootFinder::fIter. private . Definition at line 276 of file GSLMultiRootFinder.h. ◆ fPrintLevel. int ROOT::Math::GSLMultiRootFinder::fPrintLevel. private . Definition at line 278 of file GSLMultiRootFinder.h. ◆ fSolver. GSLMultiRootBaseSolver* ROOT::Math::GSLMultiRootFinder::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:969,Integrability,interface,interface,969,". ROOT: ROOT::Math::GSLMultiRootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; Class for Multidimensional root finding algorithms bassed on GSL. ; This class is used to solve a non-linear system of equations:; f1(x1,....xn) = 0 f2(x1,....xn) = 0 .................. fn(x1,....xn) = 0; See the GSL online manual for information on the GSL MultiRoot finding algorithms; The available GSL algorithms require the derivatives of the supplied functions or not (they are computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of functions impelmenting the ROOT::Math::IMultiGenFunction interface. The available algorithms requiring derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid method as implemented in HYBRJ in MINPACK . ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method . ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using finate difference approximation for the derivatives . ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the previous algorithm . ROOT::Math::GSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:1127,Integrability,interface,interface,1127,". ROOT: ROOT::Math::GSLMultiRootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; Class for Multidimensional root finding algorithms bassed on GSL. ; This class is used to solve a non-linear system of equations:; f1(x1,....xn) = 0 f2(x1,....xn) = 0 .................. fn(x1,....xn) = 0; See the GSL online manual for information on the GSL MultiRoot finding algorithms; The available GSL algorithms require the derivatives of the supplied functions or not (they are computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of functions impelmenting the ROOT::Math::IMultiGenFunction interface. The available algorithms requiring derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid method as implemented in HYBRJ in MINPACK . ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method . ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using finate difference approximation for the derivatives . ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the previous algorithm . ROOT::Math::GSLMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:3263,Integrability,wrap,wrapped,3263,"::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm . ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Definition at line 95 of file GSLMultiRootFinder.h. Public Types; enum  EDerivType { kHybridSJ; , kHybridJ; , kNewton; , kGNewton; };  enumeration specifying the types of GSL multi root finders requiring the derivatives More...;  ; enum  EType { kHybridS; , kHybrid; , kDNewton; , kBroyden; };  enumeration specifying the types of GSL multi root finders which do not require the derivatives More...;  . Public Member Functions;  GSLMultiRootFinder (const char *name=nullptr);  ;  GSLMultiRootFinder (const GSLMultiRootFinder &)=delete;  ;  GSLMultiRootFinder (EDerivType type);  create a multi-root finder based on an algorithm requiring function derivative ;  ;  GSLMultiRootFinder (EType type);  create a multi-root finder based on an algorithm not requiring function derivative ;  ;  GSLMultiRootFinder (GSLMultiRootFinder &&)=delete;  ; virtual ~GSLMultiRootFinder ();  destructor ;  ; int AddFunction (const ROOT::Math::IMultiGenFunction &func);  ; template<class Function > ; int AddFunction (Function &f, int ndim);  same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:3294,Integrability,interface,interface,3294,"::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm . ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Definition at line 95 of file GSLMultiRootFinder.h. Public Types; enum  EDerivType { kHybridSJ; , kHybridJ; , kNewton; , kGNewton; };  enumeration specifying the types of GSL multi root finders requiring the derivatives More...;  ; enum  EType { kHybridS; , kHybrid; , kDNewton; , kBroyden; };  enumeration specifying the types of GSL multi root finders which do not require the derivatives More...;  . Public Member Functions;  GSLMultiRootFinder (const char *name=nullptr);  ;  GSLMultiRootFinder (const GSLMultiRootFinder &)=delete;  ;  GSLMultiRootFinder (EDerivType type);  create a multi-root finder based on an algorithm requiring function derivative ;  ;  GSLMultiRootFinder (EType type);  create a multi-root finder based on an algorithm not requiring function derivative ;  ;  GSLMultiRootFinder (GSLMultiRootFinder &&)=delete;  ; virtual ~GSLMultiRootFinder ();  destructor ;  ; int AddFunction (const ROOT::Math::IMultiGenFunction &func);  ; template<class Function > ; int AddFunction (Function &f, int ndim);  same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:7629,Integrability,wrap,wrapped,7629,"]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const char * ; name = nullptr). Definition at line 85 of file GSLMultiRootFinder.cxx. ◆ ~GSLMultiRootFinder(). ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFinder ; (; ). virtual . destructor ; Definition at line 95 of file GSLMultiRootFinder.cxx. ◆ GSLMultiRootFinder() [4/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const GSLMultiRootFinder & ; ). delete . ◆ GSLMultiRootFinder() [5/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; GSLMultiRootFinder && ; ). delete . Member Function Documentation. ◆ AddFunction() [1/2]. int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). Definition at line 110 of file GSLMultiRootFinder.cxx. ◆ AddFunction() [2/2]. template<class Function > . int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; Function & ; f, . int ; ndim . ). inline . same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ; Definition at line 193 of file GSLMultiRootFinder.h. ◆ Clear(). void ROOT::Math::GSLMultiRootFinder::Clear ; (; ). clear list of functions ; Definition at line 127 of file GSLMultiRootFinder.cxx. ◆ ClearFunctions(). void ROOT::Math::GSLMultiRootFinder::ClearFunctions ; (; ). protected . Definition at line 118 of file GSLMultiRootFinder.cxx. ◆ Dim(). unsigned int ROOT::Math::GSLMultiRootFinder::Dim ; (; ); const. inline . return the number of sunctions set in the class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:7660,Integrability,interface,interface,7660,"]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const char * ; name = nullptr). Definition at line 85 of file GSLMultiRootFinder.cxx. ◆ ~GSLMultiRootFinder(). ROOT::Math::GSLMultiRootFinder::~GSLMultiRootFinder ; (; ). virtual . destructor ; Definition at line 95 of file GSLMultiRootFinder.cxx. ◆ GSLMultiRootFinder() [4/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const GSLMultiRootFinder & ; ). delete . ◆ GSLMultiRootFinder() [5/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; GSLMultiRootFinder && ; ). delete . Member Function Documentation. ◆ AddFunction() [1/2]. int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). Definition at line 110 of file GSLMultiRootFinder.cxx. ◆ AddFunction() [2/2]. template<class Function > . int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; Function & ; f, . int ; ndim . ). inline . same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ; Definition at line 193 of file GSLMultiRootFinder.h. ◆ Clear(). void ROOT::Math::GSLMultiRootFinder::Clear ; (; ). clear list of functions ; Definition at line 127 of file GSLMultiRootFinder.cxx. ◆ ClearFunctions(). void ROOT::Math::GSLMultiRootFinder::ClearFunctions ; (; ). protected . Definition at line 118 of file GSLMultiRootFinder.cxx. ◆ Dim(). unsigned int ROOT::Math::GSLMultiRootFinder::Dim ; (; ); const. inline . return the number of sunctions set in the class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLM",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:3325,Usability,clear,clear,3325,"::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm . ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Definition at line 95 of file GSLMultiRootFinder.h. Public Types; enum  EDerivType { kHybridSJ; , kHybridJ; , kNewton; , kGNewton; };  enumeration specifying the types of GSL multi root finders requiring the derivatives More...;  ; enum  EType { kHybridS; , kHybrid; , kDNewton; , kBroyden; };  enumeration specifying the types of GSL multi root finders which do not require the derivatives More...;  . Public Member Functions;  GSLMultiRootFinder (const char *name=nullptr);  ;  GSLMultiRootFinder (const GSLMultiRootFinder &)=delete;  ;  GSLMultiRootFinder (EDerivType type);  create a multi-root finder based on an algorithm requiring function derivative ;  ;  GSLMultiRootFinder (EType type);  create a multi-root finder based on an algorithm not requiring function derivative ;  ;  GSLMultiRootFinder (GSLMultiRootFinder &&)=delete;  ; virtual ~GSLMultiRootFinder ();  destructor ;  ; int AddFunction (const ROOT::Math::IMultiGenFunction &func);  ; template<class Function > ; int AddFunction (Function &f, int ndim);  same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:7787,Usability,clear,clear,7787,"ootFinder::~GSLMultiRootFinder ; (; ). virtual . destructor ; Definition at line 95 of file GSLMultiRootFinder.cxx. ◆ GSLMultiRootFinder() [4/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; const GSLMultiRootFinder & ; ). delete . ◆ GSLMultiRootFinder() [5/5]. ROOT::Math::GSLMultiRootFinder::GSLMultiRootFinder ; (; GSLMultiRootFinder && ; ). delete . Member Function Documentation. ◆ AddFunction() [1/2]. int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). Definition at line 110 of file GSLMultiRootFinder.cxx. ◆ AddFunction() [2/2]. template<class Function > . int ROOT::Math::GSLMultiRootFinder::AddFunction ; (; Function & ; f, . int ; ndim . ). inline . same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ; Definition at line 193 of file GSLMultiRootFinder.h. ◆ Clear(). void ROOT::Math::GSLMultiRootFinder::Clear ; (; ). clear list of functions ; Definition at line 127 of file GSLMultiRootFinder.cxx. ◆ ClearFunctions(). void ROOT::Math::GSLMultiRootFinder::ClearFunctions ; (; ). protected . Definition at line 118 of file GSLMultiRootFinder.cxx. ◆ Dim(). unsigned int ROOT::Math::GSLMultiRootFinder::Dim ; (; ); const. inline . return the number of sunctions set in the class. ; The number must be equal to the dimension of the functions ; Definition at line 203 of file GSLMultiRootFinder.h. ◆ Dx(). const double * ROOT::Math::GSLMultiRootFinder::Dx ; (; ); const. return the last step size ; Definition at line 139 of file GSLMultiRootFinder.cxx. ◆ FVal(). const double * ROOT::Math::GSLMultiRootFinder::FVal ; (; ); const. return the function values f(X) solving the system i.e. ; they must be close to zero at the solution ; Definition at line 143 of file GSLMultiRootFinder.cxx. ◆ GetType(). std::pair< bool, int > ROOT::Math::GSLMultiRootFinder::GetType ; (; const char * ; name). protected . Definition at line 207 of file GSLMultiRootFinder.cxx. ◆ ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html:515,Energy Efficiency,adapt,adapting,515,". ROOT: ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; template<class FuncVector>; class ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g) ; Definition at line 68 of file GSLMultiRootFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 87 of file GSLMultiRootFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 74 of file GSLMultiRootFunctionAdapter.h. ◆ FDf(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::FDf ; (; const gsl_vector * ; x, . void * ; p, . gsl_ve",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html:515,Modifiability,adapt,adapting,515,". ROOT: ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; template<class FuncVector>; class ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >Class for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ; double operator( const double * x) and if the derivatives are required: void Gradient( const double * x, double * g) and void FdF( const double * x, double &f, double * g) ; Definition at line 68 of file GSLMultiRootFunctionAdapter.h. Static Public Member Functions; static int Df (const gsl_vector *x, void *p, gsl_matrix *h);  ; static int F (const gsl_vector *x, void *p, gsl_vector *f);  ; static int FDf (const gsl_vector *x, void *p, gsl_vector *f, gsl_matrix *h);  evaluate derivative and function at the same time ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionAdapter.h>; Member Function Documentation. ◆ Df(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::Df ; (; const gsl_vector * ; x, . void * ; p, . gsl_matrix * ; h . ). inlinestatic . Definition at line 87 of file GSLMultiRootFunctionAdapter.h. ◆ F(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::F ; (; const gsl_vector * ; x, . void * ; p, . gsl_vector * ; f . ). inlinestatic . Definition at line 74 of file GSLMultiRootFunctionAdapter.h. ◆ FDf(). template<class FuncVector > . static int ROOT::Math::GSLMultiRootFunctionAdapter< FuncVector >::FDf ; (; const gsl_vector * ; x, . void * ; p, . gsl_ve",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionAdapter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html:299,Integrability,wrap,wrapper,299,". ROOT: ROOT::Math::GSLMultiRootFunctionWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFunctionWrapper Class Reference. ; wrapper to a multi-dim function without derivatives for multi roots algorithm ; Definition at line 57 of file GSLMultiRootFunctionWrapper.h. Public Member Functions;  GSLMultiRootFunctionWrapper ();  ; gsl_multiroot_function * GetFunctions ();  ; template<class FuncVector > ; void SetFunctions (const FuncVector &f, unsigned int n);  Fill gsl function structure from a C++ function iterator and size and number of residuals. ;  . Private Attributes; gsl_multiroot_function fFunc;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiRootFunctionWrapper.h>; Constructor & Destructor Documentation. ◆ GSLMultiRootFunctionWrapper(). ROOT::Math::GSLMultiRootFunctionWrapper::GSLMultiRootFunctionWrapper ; (; ). inline . Definition at line 61 of file GSLMultiRootFunctionWrapper.h. Member Function Documentation. ◆ GetFunctions(). gsl_multiroot_function * ROOT::Math::GSLMultiRootFunctionWrapper::GetFunctions ; (; ). inline . Definition at line 79 of file GSLMultiRootFunctionWrapper.h. ◆ SetFunctions(). template<class FuncVector > . void ROOT::Math::GSLMultiRootFunctionWrapper::SetFunctions ; (; const FuncVector & ; f, . unsigned int ; n . ). inline . Fill gsl function structure from a C++ function iterator and size and number of residuals. ; Definition at line 71 of file GSLMultiRootFunctionWrapper.h. Member Data Documentation. ◆ fFunc. gsl_multiroot_function ROOT::Math::GSLMultiRootFunctionWrapper::fFunc. private . Definition at line 84 of file GSLMultiRootFunctionWrapper.h. math/mathmore/src/GSLMultiRootFunctionWrapper.h. ROOTMathGSLMultiRootFunctionWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GV",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFunctionWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:2055,Availability,toler,tolerance,2055,"ass for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootFunctionWrapper fFunctions;  ; std::string fName;  ; gsl_multiroot_fsolver * fSolver;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:2173,Availability,toler,tolerance,2173,"ass for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootFunctionWrapper fFunctions;  ; std::string fName;  ; gsl_multiroot_fsolver * fSolver;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:1589,Modifiability,inherit,inherited,1589,"ass for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootFunctionWrapper fFunctions;  ; std::string fName;  ; gsl_multiroot_fsolver * fSolver;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:1196,Performance,perform,perform,1196,"ass for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootFunctionWrapper fFunctions;  ; std::string fName;  ; gsl_multiroot_fsolver * fSolver;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:4474,Performance,perform,perform,4474,"OT::Math::GSLMultiRootSolver::CreateSolver ; (; const gsl_multiroot_fsolver_type * ; type, . unsigned int ; n . ). inline . Definition at line 185 of file GSLMultiRootSolver.h. ◆ GetDx(). gsl_vector * ROOT::Math::GSLMultiRootSolver::GetDx ; (; ); const. inlineoverridevirtual . return function steps ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 233 of file GSLMultiRootSolver.h. ◆ GetF(). gsl_vector * ROOT::Math::GSLMultiRootSolver::GetF ; (; ); const. inlineoverridevirtual . return function values ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 227 of file GSLMultiRootSolver.h. ◆ GetRoot(). gsl_vector * ROOT::Math::GSLMultiRootSolver::GetRoot ; (; ); const. inlineoverridevirtual . solution values at the current iteration ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 221 of file GSLMultiRootSolver.h. ◆ Iterate(). int ROOT::Math::GSLMultiRootSolver::Iterate ; (; ). inlineoverridevirtual . perform an iteration ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 215 of file GSLMultiRootSolver.h. ◆ Name(). const std::string & ROOT::Math::GSLMultiRootSolver::Name ; (; ); const. inlineoverridevirtual . return name ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 211 of file GSLMultiRootSolver.h. ◆ operator=() [1/2]. GSLMultiRootSolver & ROOT::Math::GSLMultiRootSolver::operator= ; (; const GSLMultiRootSolver & ; rhs). delete . ◆ operator=() [2/2]. GSLMultiRootSolver & ROOT::Math::GSLMultiRootSolver::operator= ; (; GSLMultiRootSolver && ; rhs). delete . ◆ SetSolver(). int ROOT::Math::GSLMultiRootSolver::SetSolver ; (; const std::vector< ROOT::Math::IMultiGenFunction * > & ; funcVec, . const double * ; x . ). inlineoverridevirtual . set the solver parameters ; Implements ROOT::Math::GSLMultiRootBaseSolver.; Definition at line 195 of file GSLMultiRootSolver.h. Member Data Documentation. ◆ fFunctions. GSLMultiRootFunctionWrapper ROOT::Math::GSLMultiRootSolver::fFunctions. priv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:2027,Testability,test,test,2027,"ass for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootFunctionWrapper fFunctions;  ; std::string fName;  ; gsl_multiroot_fsolver * fSolver;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html:2158,Testability,test,test,2158,"ass for implementing GSL multi-root finders not using derivatives. ; Definition at line 155 of file GSLMultiRootSolver.h. Public Member Functions;  GSLMultiRootSolver (const gsl_multiroot_fsolver_type *type, int n);  Constructor from type and simension of system (number of functions) ;  ;  GSLMultiRootSolver (const GSLMultiRootSolver &)=delete;  ;  GSLMultiRootSolver (GSLMultiRootSolver &&)=delete;  ;  ~GSLMultiRootSolver () override;  Destructor (no operations) ;  ; void CreateSolver (const gsl_multiroot_fsolver_type *type, unsigned int n);  ; gsl_vector * GetDx () const override;  return function steps ;  ; gsl_vector * GetF () const override;  return function values ;  ; gsl_vector * GetRoot () const override;  solution values at the current iteration ;  ; int Iterate () override;  perform an iteration ;  ; const std::string & Name () const override;  return name ;  ; GSLMultiRootSolver & operator= (const GSLMultiRootSolver &rhs)=delete;  ; GSLMultiRootSolver & operator= (GSLMultiRootSolver &&rhs)=delete;  ; int SetSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x) override;  set the solver parameters ;  ;  Public Member Functions inherited from ROOT::Math::GSLMultiRootBaseSolver; virtual ~GSLMultiRootBaseSolver ();  virtual Destructor ;  ; const double * Dx () const;  return function steps ;  ; const double * FVal () const;  return function values ;  ; bool InitSolver (const std::vector< ROOT::Math::IMultiGenFunction * > &funcVec, const double *x);  init the solver with function list and initial values ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestResidual (double absTol) const;  test using abs tolerance Sum |f|_i < absTol ;  ; const double * X () const;  solution values at the current iteration ;  . Private Attributes; GSLMultiRootFunctionWrapper fFunctions;  ; std::string fName;  ; gsl_multiroot_fsolver * fSolver;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootSolver.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:925,Availability,error,errors,925,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:1149,Availability,error,errors,1149,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:5840,Availability,error,error,5840,"me (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i Th",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6468,Availability,error,error,6468,"ed int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6560,Availability,error,errors,6560,"ed int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6679,Availability,error,error,6679,"ed int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:7083,Availability,error,error,7083,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:7185,Availability,error,error,7185,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:8715,Availability,error,errors,8715,"lue <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:9628,Availability,toler,tolerance,9628,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &star",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:9727,Availability,error,error,9727,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &star",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:10206,Availability,toler,tolerance,10206,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Mat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:11279,Availability,error,errors,11279,"bsolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:12198,Availability,error,errors,12198,"tions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 456 of file GSLNLSMinimizer.cxx. ◆ CovMatrixStatus(). int ROOT::Math::GSLNLSMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return covariance matrix status ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 464 of file GSLNLSMinimizer.cxx. ◆ DoMinimize(). template<class Func > . bool ROOT::Math::GSLNLSMinimizer::DoMinimize ; (; const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:13131,Availability,error,errors,13131,ing of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 456 of file GSLNLSMinimizer.cxx. ◆ CovMatrixStatus(). int ROOT::Math::GSLNLSMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return covariance matrix status ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 464 of file GSLNLSMinimizer.cxx. ◆ DoMinimize(). template<class Func > . bool ROOT::Math::GSLNLSMinimizer::DoMinimize ; (; const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:14191,Availability,error,error,14191,finition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 96 of file GSLNLSMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLNLSMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 235 of file GSLNLSMinimizer.cxx. Member Data Documentation. ◆ fCovMatrix. std::vector<double> ROOT::Math::GSLNLSMinimizer::fCovMatrix. private . Definition at line 134 of file GSLNLSMinimizer.h. ◆ fEdm. double ROOT::Math::GSLNLSMinimizer::fEdm. private . Definition at line 131 of file GSLNLSMinimizer.h. ◆ fErrors. std::vector<double> ROOT::Math::GSLNLSMinimizer::fErrors. private . Definition at line 133 of file GSLNLSMinimizer.h. ◆ fGSLMultiFit. ROOT::Math::GSLMultiFit* ROOT::Math::GSLNLSMinimizer::fGSLMultiFit. private . Definition at line 129 of file GSLNLSMinimizer.h. ◆ fLSTolerance. double ROOT::Math::GSLNLSMinimizer::fLSTolerance. private . Definiti,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:14201,Availability,error,error,14201,finition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 96 of file GSLNLSMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLNLSMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 235 of file GSLNLSMinimizer.cxx. Member Data Documentation. ◆ fCovMatrix. std::vector<double> ROOT::Math::GSLNLSMinimizer::fCovMatrix. private . Definition at line 134 of file GSLNLSMinimizer.h. ◆ fEdm. double ROOT::Math::GSLNLSMinimizer::fEdm. private . Definition at line 131 of file GSLNLSMinimizer.h. ◆ fErrors. std::vector<double> ROOT::Math::GSLNLSMinimizer::fErrors. private . Definition at line 133 of file GSLNLSMinimizer.h. ◆ fGSLMultiFit. ROOT::Math::GSLMultiFit* ROOT::Math::GSLNLSMinimizer::fGSLMultiFit. private . Definition at line 129 of file GSLNLSMinimizer.h. ◆ fLSTolerance. double ROOT::Math::GSLNLSMinimizer::fLSTolerance. private . Definiti,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:2910,Deployability,release,release,2910,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:8006,Deployability,configurat,configuration,8006," global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &ext",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:840,Modifiability,variab,variable,840,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:897,Modifiability,variab,variables,897,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:1490,Modifiability,variab,variables,1490,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:1716,Modifiability,inherit,inherited,1716,"SMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter de",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:1918,Modifiability,variab,variable,1918,"uble * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:2036,Modifiability,variab,variable,2036,"uble * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:2059,Modifiability,variab,variable,2059,"uble * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:2347,Modifiability,variab,variable,2347,"uble * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:2565,Modifiability,variab,variables,2565,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:2930,Modifiability,variab,variable,2930,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:3031,Modifiability,variab,variable,3031,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:3229,Modifiability,variab,variable,3229,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:3422,Modifiability,variab,variable,3422," function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:3615,Modifiability,variab,variable,3615," unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  ac",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:3775,Modifiability,variab,variable,3775,"ve function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is no",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:3909,Modifiability,variab,variable,3909,"ease an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4038,Modifiability,variab,variable,4038,"verride if minimizer supports them ) ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Func",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4162,Modifiability,variab,variable,4162,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4291,Modifiability,variab,variable,4291,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4399,Modifiability,variab,variable,4399,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4496,Modifiability,variab,variables,4496,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4714,Modifiability,variab,variable,4714,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4731,Modifiability,variab,variable,4731,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4766,Modifiability,variab,variable,4766,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4867,Modifiability,variab,variables,4867,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4919,Modifiability,variab,variable,4919,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:5049,Modifiability,inherit,inherited,5049,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:5738,Modifiability,variab,variable,5738,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if M",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6027,Modifiability,variab,variable,6027,";  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most s",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6296,Modifiability,variab,variable,6296,"Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6343,Modifiability,variab,variables,6343,"Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6478,Modifiability,variab,variable,6478,"ed int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:6803,Modifiability,variab,variable,6803,"ed int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:8006,Modifiability,config,configuration,8006," global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &ext",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:8317,Modifiability,variab,variable,8317," global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &ext",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:9882,Modifiability,variab,variable,9882,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:10016,Modifiability,variab,variables,10016,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:10045,Modifiability,variab,variables,10045,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Mat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:10421,Modifiability,inherit,inherited,10421,"oid SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:11100,Modifiability,inherit,inherited,11100,"bsolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:12113,Modifiability,variab,variable,12113,"tions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 456 of file GSLNLSMinimizer.cxx. ◆ CovMatrixStatus(). int ROOT::Math::GSLNLSMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return covariance matrix status ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 464 of file GSLNLSMinimizer.cxx. ◆ DoMinimize(). template<class Func > . bool ROOT::Math::GSLNLSMinimizer::DoMinimize ; (; const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:12170,Modifiability,variab,variables,12170,"tions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 456 of file GSLNLSMinimizer.cxx. ◆ CovMatrixStatus(). int ROOT::Math::GSLNLSMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return covariance matrix status ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 464 of file GSLNLSMinimizer.cxx. ◆ DoMinimize(). template<class Func > . bool ROOT::Math::GSLNLSMinimizer::DoMinimize ; (; const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:14080,Modifiability,variab,variables,14080,neoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 96 of file GSLNLSMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLNLSMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 235 of file GSLNLSMinimizer.cxx. Member Data Documentation. ◆ fCovMatrix. std::vector<double> ROOT::Math::GSLNLSMinimizer::fCovMatrix. private . Definition at line 134 of file GSLNLSMinimizer.h. ◆ fEdm. double ROOT::Math::GSLNLSMinimizer::fEdm. private . Definition at line 131 of file GSLNLSMinimizer.h. ◆ fErrors. std::vector<double> ROOT::Math::GSLNLSMinimizer::fErrors. private . Definition at line 133 of file GSLNLSMinimizer.h. ◆ fGSLMultiFit. ROOT::Math::GSLMultiFit* ROOT::Math::GSLNLSMinimizer::fGSLMultiFit. private . Definition at line 129 of file GSLNLS,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:1315,Performance,perform,perform,1315,"earching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLNLSMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting. ; Definition at line 59 of file GSLNLSMinimizer.h. Public Member Functions;  GSLNLSMinimizer (int type=0);  Default constructor. ;  ;  ~GSLNLSMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int, unsigned int) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; bool ProvidesError () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:7030,Performance,perform,perform,7030,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:7164,Performance,perform,performed,7164,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:9710,Performance,perform,perform,9710,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &star",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:10326,Performance,perform,perform,10326,"double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validate",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:12674,Performance,perform,perform,12674,"on at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 456 of file GSLNLSMinimizer.cxx. ◆ CovMatrixStatus(). int ROOT::Math::GSLNLSMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return covariance matrix status ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 464 of file GSLNLSMinimizer.cxx. ◆ DoMinimize(). template<class Func > . bool ROOT::Math::GSLNLSMinimizer::DoMinimize ; (; const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of fi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:13592,Performance,perform,perform,13592, const Func & ; f). protected . Internal method to perform minimization template on the type of method function. ; Definition at line 268 of file GSLNLSMinimizer.cxx. ◆ Edm(). double ROOT::Math::GSLNLSMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 82 of file GSLNLSMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLNLSMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 99 of file GSLNLSMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLNLSMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 450 of file GSLNLSMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLNLSMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 247 of file GSLNLSMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLNLSMinimizer::NCalls ; (; ); const. inlineoverridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 89 of file GSLNLSMinimizer.h. ◆ ProvidesError(). bool ROOT::Math::GSLNLSMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 96 of file GSLNLSMinimizer.h. ◆ SetFunction(). void ROOT::Math::GSLNLSMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 235 of file GSLNLSMinimizer.cxx. Member Data Documentation. ◆ fCovMatrix. std::vecto,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:4618,Security,access,accessor,4618,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:7191,Security,validat,validation,7191,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective fu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html:11296,Security,validat,validated,11296,"bsolute tolerance ;  . Protected Member Functions; template<class Func > ; bool DoMinimize (const Func &f);  Internal method to perform minimization template on the type of method function. ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; std::vector< double > fCovMatrix;  ; double fEdm;  ; std::vector< double > fErrors;  ; ROOT::Math::GSLMultiFit * fGSLMultiFit;  ; double fLSTolerance;  ; unsigned int fNCalls;  ; unsigned int fNFree;  ; bool fUseGradFunction = false;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLNLSMinimizer.h>. Inheritance diagram for ROOT::Math::GSLNLSMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::GSLNLSMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 206 of file GSLNLSMinimizer.cxx. ◆ ~GSLNLSMinimizer(). ROOT::Math::GSLNLSMinimizer::~GSLNLSMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 228 of file GSLNLSMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLNLSMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. overridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLNLSMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html:1073,Modifiability,inherit,inherited,1073,". ROOT: ROOT::Math::GSLPlainIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLPlainIntegrationWorkspace Class Reference. . Definition at line 239 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLPlainIntegrationWorkspace ();  ; void Clear () override;  free the workspace deleting the GSL pointer ;  ; gsl_monte_plain_state * GetWS ();  ; bool Init (size_t dim) override;  initialize the workspace creating the GSL pointer if it is not there ;  ; size_t NDim () const override;  ; std::unique_ptr< ROOT::Math::IOptions > Options () const override;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; bool ReInit () override;  re-initialize an existing the workspace ;  ; virtual void SetOptions (const ROOT::Math::IOptions &) override;  set options ;  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Attributes; gsl_monte_plain_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLPlainIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLPlainIntegrationWorkspace(). ROOT::Math::GSLPlainIntegrationWorkspace::GSLPlainIntegrationWorkspace ; (; ). inline . Definition at line 243 of file GSLMCIntegrationWorkspace.h. Member Function Documentation. ◆ Clear(). void ROOT::Math::GSLPlainIntegrationWorkspace::Clear ; (; ). inlineoverridevirtual . free the workspace deleting the GSL pointer ; Reimplemented from ROOT::Math::GSLMCIntegrationWorkspac",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLPlainIntegrationWorkspace.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html:514,Modifiability,inherit,inherited,514,". ROOT: ROOT::Math::GSLQRngNiederreiter2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLQRngNiederreiter2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Niederreiter generator gsl_qrng_niederreiter_2 from here ; Definition at line 169 of file GSLQuasiRandom.h. Public Member Functions;  GSLQRngNiederreiter2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine;  GSLQuasiRandomEngine ();  default constructor. ;  ;  GSLQuasiRandomEngine (const GSLQuasiRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLQuasiRandomEngine (GSLQRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine; void SetType (GSLQRngWrapper *r);  internal method used b",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html:1895,Modifiability,inherit,inherited,1895,"*rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine; void SetType (GSLQRngWrapper *r);  internal method used by the derived class to set the type of generators ;  . #include <Math/GSLQuasiRandom.h>. Inheritance diagram for ROOT::Math::GSLQRngNiederreiter2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLQRngNiederreiter2(). ROOT::Math::GSLQRngNiederreiter2::GSLQRngNiederreiter2 ; (; ). Definition at line 175 of file GSLQuasiRandom.cxx. Libraries for ROOT::Math::GSLQRngNiederreiter2:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLQuasiRandom.h; math/mathmore/src/GSLQuasiRandom.cxx. ROOTMathGSLQRngNiederreiter2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngNiederreiter2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html:474,Modifiability,inherit,inherited,474,". ROOT: ROOT::Math::GSLQRngSobol Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::GSLQRngSobol Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Sobol generator gsl_qrng_sobol from here ; Definition at line 156 of file GSLQuasiRandom.h. Public Member Functions;  GSLQRngSobol ();  ;  Public Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine;  GSLQuasiRandomEngine ();  default constructor. ;  ;  GSLQuasiRandomEngine (const GSLQuasiRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLQuasiRandomEngine (GSLQRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine; void SetType (GSLQRngWrapper *r);  internal method used by the derived class to set the type of g",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html:1855,Modifiability,inherit,inherited,1855,"tor. ;  ;  GSLQuasiRandomEngine (GSLQRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLQuasiRandomEngine ();  call Terminate() ;  ; bool GenerateArray (double *begin, double *end) const;  Generate an array of quasi random numbers The iterators points to the random numbers. ;  ; void Initialize (unsigned int dimension);  initialize the generator giving the dimension of the sequence If no rng is present the default one based on Mersenne and Twister is created ;  ; std::string Name () const;  return name of generator ;  ; unsigned int NDim () const;  return the dimension of generator ;  ; double operator() () const;  Generate a random number between ]0,1[. ;  ; bool operator() (double *x) const;  Fill array x with random numbers between ]0,1[. ;  ; GSLQuasiRandomEngine & operator= (const GSLQuasiRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; unsigned int Size () const;  return the state size of generator ;  ; bool Skip (unsigned int n) const;  Skip the next n random numbers. ;  ; void Terminate ();  delete pointer to contained rng ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLQuasiRandomEngine; void SetType (GSLQRngWrapper *r);  internal method used by the derived class to set the type of generators ;  . #include <Math/GSLQuasiRandom.h>. Inheritance diagram for ROOT::Math::GSLQRngSobol:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLQRngSobol(). ROOT::Math::GSLQRngSobol::GSLQRngSobol ; (; ). Definition at line 168 of file GSLQuasiRandom.cxx. Libraries for ROOT::Math::GSLQRngSobol:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLQuasiRandom.h; math/mathmore/src/GSLQuasiRandom.cxx. ROOTMathGSLQRngSobol. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngSobol.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngWrapper.html:297,Integrability,wrap,wrap,297,. ROOT: ROOT::Math::GSLQRngWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLQRngWrapper Class Reference. ; GSLQRngWrapper class to wrap gsl_qrng structure. ; Definition at line 26 of file GSLQRngWrapper.h. Public Member Functions;  GSLQRngWrapper ();  Default constructor. ;  ;  GSLQRngWrapper (const gsl_qrng *r);  construct from an existing gsl_qrng it is managed externally - so will not be deleted at the end ;  ;  GSLQRngWrapper (const gsl_qrng_type *type);  Constructor with type. ;  ;  GSLQRngWrapper (GSLQRngWrapper &r);  Copy constructor - clone the GSL object and manage it. ;  ;  ~GSLQRngWrapper ();  Destructor (free the rng if not done before) ;  ; void Allocate (unsigned int dimension);  ; unsigned int Dimension () const;  ; void Free ();  ; GSLQRngWrapper & operator= (const GSLQRngWrapper &rhs);  Assignment operator. ;  ; gsl_qrng * Rng ();  ; const gsl_qrng * Rng () const;  ; void SetDefaultType ();  ; void SetType (const gsl_qrng_type *type);  . Private Attributes; bool fOwn;  ; gsl_qrng * fRng;  ; const gsl_qrng_type * fRngType;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLQRngWrapper.h>; Constructor & Destructor Documentation. ◆ GSLQRngWrapper() [1/4]. ROOT::Math::GSLQRngWrapper::GSLQRngWrapper ; (; ). inline . Default constructor. ; Definition at line 34 of file GSLQRngWrapper.h. ◆ GSLQRngWrapper() [2/4]. ROOT::Math::GSLQRngWrapper::GSLQRngWrapper ; (; const gsl_qrng_type * ; type). inline . Constructor with type. ; Definition at line 44 of file GSLQRngWrapper.h. ◆ GSLQRngWrapper() [3/4]. ROOT::Math::GSLQRngWrapper::GSLQRngWrapper ; (; const gsl_qrng * ; r). inline . construct from an existing gsl_qrng it is managed externally - so will not be deleted at the end ; Definition at line 55 of file GSLQRngWrapper.h. ◆ GSLQRngWrapper(),MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLQRngWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLQRngWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:510,Availability,avail,available,510,". ROOT: ROOT::Math::GSLRandomEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Friends |; List of all members ; ROOT::Math::GSLRandomEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. ; The main GSL generators (see here) are available as derived classes In addition to generate uniform numbers it provides method for generating numbers according to pre-defined distributions using the GSL functions from GSL random number distributions. ; Definition at line 65 of file GSLRndmEngines.h. Public Member Functions;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:1341,Availability,avail,available,1341,"OT::Math::GSLRandomEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. ; The main GSL generators (see here) are available as derived classes In addition to generate uniform numbers it provides method for generating numbers according to pre-defined distributions using the GSL functions from GSL random number distributions. ; Definition at line 65 of file GSLRndmEngines.h. Public Member Functions;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:1373,Availability,error,error,1373,"OT::Math::GSLRandomEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. ; The main GSL generators (see here) are available as derived classes In addition to generate uniform numbers it provides method for generating numbers according to pre-defined distributions using the GSL functions from GSL random number distributions. ; Definition at line 65 of file GSLRndmEngines.h. Public Member Functions;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:2433,Availability,avail,available,2433,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  . Friends; class GSLMCIntegrator;  . Random Distributions; Implemented using the GSL Random number Distributions . GSLRngWrapper * fRng;  ; unsigned int fCurTime;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:2465,Availability,error,error,2465,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  . Friends; class GSLMCIntegrator;  . Random Distributions; Implemented using the GSL Random number Distributions . GSLRngWrapper * fRng;  ; unsigned int fCurTime;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:9897,Availability,avail,available,9897,"f file GSLRndmEngines.cxx. ◆ GaussianRatio(). double ROOT::Math::GSLRandomEngine::GaussianRatio ; (; double ; sigma); const. Gaussian distribution - Ratio method. ; Definition at line 221 of file GSLRndmEngines.cxx. ◆ GaussianTail(). double ROOT::Math::GSLRandomEngine::GaussianTail ; (; double ; a, . double ; sigma . ); const. Gaussian Tail distribution. ; Definition at line 228 of file GSLRndmEngines.cxx. ◆ GaussianZig(). double ROOT::Math::GSLRandomEngine::GaussianZig ; (; double ; sigma); const. Gaussian distribution - Ziggurat method. ; Definition at line 209 of file GSLRndmEngines.cxx. ◆ Initialize(). void ROOT::Math::GSLRandomEngine::Initialize ; (; ). initialize the generator If no rng is present the default one based on Mersenne and Twister is created ; Definition at line 124 of file GSLRndmEngines.cxx. ◆ IntRndm(). unsigned long ROOT::Math::GSLRandomEngine::IntRndm ; (; ); const. inline . Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 133 of file GSLRndmEngines.h. ◆ Landau(). double ROOT::Math::GSLRandomEngine::Landau ; (; ); const. Landau distribution. ; Definition at line 287 of file GSLRndmEngines.cxx. ◆ Logistic(). double ROOT::Math::GSLRandomEngine::Logistic ; (; double ; a); const. Logistic distribution. ; Definition at line 336 of file GSLRndmEngines.cxx. ◆ LogNormal(). double ROOT::Math::GSLRandomEngine::LogNormal ; (; double ; zeta, . double ; sigma . ); const. Log Normal distribution. ; Definition at line 305 of file GSLRndmEngines.cxx. ◆ MaxInt(). unsigned long ROOT::Math::GSLRandomEngine::MaxInt ; (; ); const. return the maximum integer +1 a generator can handle ; Definition at line 157 of file GSLRndmEngines.cxx. ◆ MinInt(). unsigned long ROOT::Math::GSLRandomEngine::MinInt ; (; ); const. return the minimum integer a generator can handle typically this value is 0 ; Definition at line 152 of fi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:9929,Availability,error,error,9929,"f file GSLRndmEngines.cxx. ◆ GaussianRatio(). double ROOT::Math::GSLRandomEngine::GaussianRatio ; (; double ; sigma); const. Gaussian distribution - Ratio method. ; Definition at line 221 of file GSLRndmEngines.cxx. ◆ GaussianTail(). double ROOT::Math::GSLRandomEngine::GaussianTail ; (; double ; a, . double ; sigma . ); const. Gaussian Tail distribution. ; Definition at line 228 of file GSLRndmEngines.cxx. ◆ GaussianZig(). double ROOT::Math::GSLRandomEngine::GaussianZig ; (; double ; sigma); const. Gaussian distribution - Ziggurat method. ; Definition at line 209 of file GSLRndmEngines.cxx. ◆ Initialize(). void ROOT::Math::GSLRandomEngine::Initialize ; (; ). initialize the generator If no rng is present the default one based on Mersenne and Twister is created ; Definition at line 124 of file GSLRndmEngines.cxx. ◆ IntRndm(). unsigned long ROOT::Math::GSLRandomEngine::IntRndm ; (; ); const. inline . Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 133 of file GSLRndmEngines.h. ◆ Landau(). double ROOT::Math::GSLRandomEngine::Landau ; (; ); const. Landau distribution. ; Definition at line 287 of file GSLRndmEngines.cxx. ◆ Logistic(). double ROOT::Math::GSLRandomEngine::Logistic ; (; double ; a); const. Logistic distribution. ; Definition at line 336 of file GSLRndmEngines.cxx. ◆ LogNormal(). double ROOT::Math::GSLRandomEngine::LogNormal ; (; double ; zeta, . double ; sigma . ); const. Log Normal distribution. ; Definition at line 305 of file GSLRndmEngines.cxx. ◆ MaxInt(). unsigned long ROOT::Math::GSLRandomEngine::MaxInt ; (; ); const. return the maximum integer +1 a generator can handle ; Definition at line 157 of file GSLRndmEngines.cxx. ◆ MinInt(). unsigned long ROOT::Math::GSLRandomEngine::MinInt ; (; ); const. return the minimum integer a generator can handle typically this value is 0 ; Definition at line 152 of fi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:13371,Availability,avail,available,13371,"n, . double * ; end . ); const. Generate an array of random numbers The iterators points to the random numbers. ; Definition at line 162 of file GSLRndmEngines.cxx. ◆ RandomArray() [2/2]. template<class Iterator > . void ROOT::Math::GSLRandomEngine::RandomArray ; (; Iterator ; begin, . Iterator ; end . ); const. inline . Generate an array of random numbers. ; The iterators points to the random numbers ; Definition at line 142 of file GSLRndmEngines.h. ◆ Rayleigh(). double ROOT::Math::GSLRandomEngine::Rayleigh ; (; double ; sigma); const. Rayleigh distribution. ; Definition at line 330 of file GSLRndmEngines.cxx. ◆ Rndm(). double ROOT::Math::GSLRandomEngine::Rndm ; (; ); const. inline . Generate a random number between ]0,1] 0 is excluded and 1 is included. ; Definition at line 120 of file GSLRndmEngines.h. ◆ RndmInt(). unsigned long ROOT::Math::GSLRandomEngine::RndmInt ; (; unsigned long ; max); const. Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 147 of file GSLRndmEngines.cxx. ◆ SetSeed(). void ROOT::Math::GSLRandomEngine::SetSeed ; (; unsigned int ; seed); const. set the random generator seed ; Definition at line 170 of file GSLRndmEngines.cxx. ◆ SetType(). void ROOT::Math::GSLRandomEngine::SetType ; (; GSLRngWrapper * ; r). inlineprotected . internal method used by the derived class to set the type of generators ; Definition at line 315 of file GSLRndmEngines.h. ◆ Size(). unsigned int ROOT::Math::GSLRandomEngine::Size ; (; ); const. return the state size of generator ; Definition at line 199 of file GSLRndmEngines.cxx. ◆ tDist(). double ROOT::Math::GSLRandomEngine::tDist ; (; double ; nu); const. t student distribution ; Definition at line 324 of file GSLRndmEngines.cxx. ◆ Terminate(). void ROOT::Math::GSLRandomEngine::Terminate ; (; ). delete pointer to contained rng ; Definition at line 131 of file GSLRndmEngines.cxx.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:13403,Availability,error,error,13403,"n, . double * ; end . ); const. Generate an array of random numbers The iterators points to the random numbers. ; Definition at line 162 of file GSLRndmEngines.cxx. ◆ RandomArray() [2/2]. template<class Iterator > . void ROOT::Math::GSLRandomEngine::RandomArray ; (; Iterator ; begin, . Iterator ; end . ); const. inline . Generate an array of random numbers. ; The iterators points to the random numbers ; Definition at line 142 of file GSLRndmEngines.h. ◆ Rayleigh(). double ROOT::Math::GSLRandomEngine::Rayleigh ; (; double ; sigma); const. Rayleigh distribution. ; Definition at line 330 of file GSLRndmEngines.cxx. ◆ Rndm(). double ROOT::Math::GSLRandomEngine::Rndm ; (; ); const. inline . Generate a random number between ]0,1] 0 is excluded and 1 is included. ; Definition at line 120 of file GSLRndmEngines.h. ◆ RndmInt(). unsigned long ROOT::Math::GSLRandomEngine::RndmInt ; (; unsigned long ; max); const. Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 147 of file GSLRndmEngines.cxx. ◆ SetSeed(). void ROOT::Math::GSLRandomEngine::SetSeed ; (; unsigned int ; seed); const. set the random generator seed ; Definition at line 170 of file GSLRndmEngines.cxx. ◆ SetType(). void ROOT::Math::GSLRandomEngine::SetType ; (; GSLRngWrapper * ; r). inlineprotected . internal method used by the derived class to set the type of generators ; Definition at line 315 of file GSLRndmEngines.h. ◆ Size(). unsigned int ROOT::Math::GSLRandomEngine::Size ; (; ); const. return the state size of generator ; Definition at line 199 of file GSLRndmEngines.cxx. ◆ tDist(). double ROOT::Math::GSLRandomEngine::tDist ; (; double ; nu); const. t student distribution ; Definition at line 324 of file GSLRndmEngines.cxx. ◆ Terminate(). void ROOT::Math::GSLRandomEngine::Terminate ; (; ). delete pointer to contained rng ; Definition at line 131 of file GSLRndmEngines.cxx.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:1379,Integrability,message,message,1379,"OT::Math::GSLRandomEngine Class ReferenceMath » MathCore » Interface classes for Random number generation. ; GSLRandomEngine Base class for all GSL random engines, normally user instantiate the derived classes which creates internally the generator. ; The main GSL generators (see here) are available as derived classes In addition to generate uniform numbers it provides method for generating numbers according to pre-defined distributions using the GSL functions from GSL random number distributions. ; Definition at line 65 of file GSLRndmEngines.h. Public Member Functions;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:2471,Integrability,message,message,2471,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  . Friends; class GSLMCIntegrator;  . Random Distributions; Implemented using the GSL Random number Distributions . GSLRngWrapper * fRng;  ; unsigned int fCurTime;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:9935,Integrability,message,message,9935,"f file GSLRndmEngines.cxx. ◆ GaussianRatio(). double ROOT::Math::GSLRandomEngine::GaussianRatio ; (; double ; sigma); const. Gaussian distribution - Ratio method. ; Definition at line 221 of file GSLRndmEngines.cxx. ◆ GaussianTail(). double ROOT::Math::GSLRandomEngine::GaussianTail ; (; double ; a, . double ; sigma . ); const. Gaussian Tail distribution. ; Definition at line 228 of file GSLRndmEngines.cxx. ◆ GaussianZig(). double ROOT::Math::GSLRandomEngine::GaussianZig ; (; double ; sigma); const. Gaussian distribution - Ziggurat method. ; Definition at line 209 of file GSLRndmEngines.cxx. ◆ Initialize(). void ROOT::Math::GSLRandomEngine::Initialize ; (; ). initialize the generator If no rng is present the default one based on Mersenne and Twister is created ; Definition at line 124 of file GSLRndmEngines.cxx. ◆ IntRndm(). unsigned long ROOT::Math::GSLRandomEngine::IntRndm ; (; ); const. inline . Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 133 of file GSLRndmEngines.h. ◆ Landau(). double ROOT::Math::GSLRandomEngine::Landau ; (; ); const. Landau distribution. ; Definition at line 287 of file GSLRndmEngines.cxx. ◆ Logistic(). double ROOT::Math::GSLRandomEngine::Logistic ; (; double ; a); const. Logistic distribution. ; Definition at line 336 of file GSLRndmEngines.cxx. ◆ LogNormal(). double ROOT::Math::GSLRandomEngine::LogNormal ; (; double ; zeta, . double ; sigma . ); const. Log Normal distribution. ; Definition at line 305 of file GSLRndmEngines.cxx. ◆ MaxInt(). unsigned long ROOT::Math::GSLRandomEngine::MaxInt ; (; ); const. return the maximum integer +1 a generator can handle ; Definition at line 157 of file GSLRndmEngines.cxx. ◆ MinInt(). unsigned long ROOT::Math::GSLRandomEngine::MinInt ; (; ); const. return the minimum integer a generator can handle typically this value is 0 ; Definition at line 152 of fi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:13409,Integrability,message,message,13409,"n, . double * ; end . ); const. Generate an array of random numbers The iterators points to the random numbers. ; Definition at line 162 of file GSLRndmEngines.cxx. ◆ RandomArray() [2/2]. template<class Iterator > . void ROOT::Math::GSLRandomEngine::RandomArray ; (; Iterator ; begin, . Iterator ; end . ); const. inline . Generate an array of random numbers. ; The iterators points to the random numbers ; Definition at line 142 of file GSLRndmEngines.h. ◆ Rayleigh(). double ROOT::Math::GSLRandomEngine::Rayleigh ; (; double ; sigma); const. Rayleigh distribution. ; Definition at line 330 of file GSLRndmEngines.cxx. ◆ Rndm(). double ROOT::Math::GSLRandomEngine::Rndm ; (; ); const. inline . Generate a random number between ]0,1] 0 is excluded and 1 is included. ; Definition at line 120 of file GSLRndmEngines.h. ◆ RndmInt(). unsigned long ROOT::Math::GSLRandomEngine::RndmInt ; (; unsigned long ; max); const. Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ; Definition at line 147 of file GSLRndmEngines.cxx. ◆ SetSeed(). void ROOT::Math::GSLRandomEngine::SetSeed ; (; unsigned int ; seed); const. set the random generator seed ; Definition at line 170 of file GSLRndmEngines.cxx. ◆ SetType(). void ROOT::Math::GSLRandomEngine::SetType ; (; GSLRngWrapper * ; r). inlineprotected . internal method used by the derived class to set the type of generators ; Definition at line 315 of file GSLRndmEngines.h. ◆ Size(). unsigned int ROOT::Math::GSLRandomEngine::Size ; (; ); const. return the state size of generator ; Definition at line 199 of file GSLRndmEngines.cxx. ◆ tDist(). double ROOT::Math::GSLRandomEngine::tDist ; (; double ; nu); const. t student distribution ; Definition at line 324 of file GSLRndmEngines.cxx. ◆ Terminate(). void ROOT::Math::GSLRandomEngine::Terminate ; (; ). delete pointer to contained rng ; Definition at line 131 of file GSLRndmEngines.cxx.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:1140,Availability,avail,available,1140,"::GSLRngCMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngCMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Combined multiple recursive generator (L'Ecuyer) see here ; Definition at line 454 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngCMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:1172,Availability,error,error,1172,"::GSLRngCMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngCMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Combined multiple recursive generator (L'Ecuyer) see here ; Definition at line 454 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngCMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:2232,Availability,avail,available,2232,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:2264,Availability,error,error,2264,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:1178,Integrability,message,message,1178,"::GSLRngCMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngCMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Combined multiple recursive generator (L'Ecuyer) see here ; Definition at line 454 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngCMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:2270,Integrability,message,message,2270,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:552,Modifiability,inherit,inherited,552,". ROOT: ROOT::Math::GSLRngCMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngCMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Combined multiple recursive generator (L'Ecuyer) see here ; Definition at line 454 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngCMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rnd",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html:4630,Modifiability,inherit,inherited,4630,"tion. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngCMRG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngCMRG::BaseType. Definition at line 456 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngCMRG(). ROOT::Math::GSLRngCMRG::GSLRngCMRG ; (; ). Definition at line 455 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngCMRG:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngCMRG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngCMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:1129,Availability,avail,available,1129," ROOT::Math::GSLRngGFSR4 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngGFSR4 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Lagged Fibonacci generator by Ziff see here ; Definition at line 441 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngGFSR4 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:1161,Availability,error,error,1161," ROOT::Math::GSLRngGFSR4 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngGFSR4 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Lagged Fibonacci generator by Ziff see here ; Definition at line 441 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngGFSR4 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:2221,Availability,avail,available,2221,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:2253,Availability,error,error,2253,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:1167,Integrability,message,message,1167," ROOT::Math::GSLRngGFSR4 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngGFSR4 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Lagged Fibonacci generator by Ziff see here ; Definition at line 441 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngGFSR4 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:2259,Integrability,message,message,2259,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:541,Modifiability,inherit,inherited,541,". ROOT: ROOT::Math::GSLRngGFSR4 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngGFSR4 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Lagged Fibonacci generator by Ziff see here ; Definition at line 441 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngGFSR4 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html:4619,Modifiability,inherit,inherited,4619,"  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngGFSR4:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngGFSR4::BaseType. Definition at line 443 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngGFSR4(). ROOT::Math::GSLRngGFSR4::GSLRngGFSR4 ; (; ). Definition at line 447 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngGFSR4:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngGFSR4. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngGFSR4.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:1132,Availability,avail,available,1132,"OT::Math::GSLRngMinStd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMinStd Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MINSTD generator (Park and Miller) see here ; Definition at line 507 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMinStd ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:1164,Availability,error,error,1164,"OT::Math::GSLRngMinStd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMinStd Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MINSTD generator (Park and Miller) see here ; Definition at line 507 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMinStd ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:2224,Availability,avail,available,2224,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:2256,Availability,error,error,2256,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:1170,Integrability,message,message,1170,"OT::Math::GSLRngMinStd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMinStd Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MINSTD generator (Park and Miller) see here ; Definition at line 507 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMinStd ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:2262,Integrability,message,message,2262,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:544,Modifiability,inherit,inherited,544,". ROOT: ROOT::Math::GSLRngMinStd Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMinStd Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MINSTD generator (Park and Miller) see here ; Definition at line 507 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMinStd ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () con",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html:4622,Modifiability,inherit,inherited,4622,"ble tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngMinStd:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngMinStd::BaseType. Definition at line 509 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngMinStd(). ROOT::Math::GSLRngMinStd::GSLRngMinStd ; (; ). Definition at line 488 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngMinStd:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngMinStd. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMinStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:1180,Availability,avail,available,1180,"; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMixMax Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MixMax generator based on ROOT::Math::MixMaxEngine of N=240. ; Definition at line 517 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMixMax ();  ;  ~GSLRngMixMax () override;  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:1212,Availability,error,error,1212,"; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMixMax Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MixMax generator based on ROOT::Math::MixMaxEngine of N=240. ; Definition at line 517 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMixMax ();  ;  ~GSLRngMixMax () override;  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:2272,Availability,avail,available,2272,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:2304,Availability,error,error,2304,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:1218,Integrability,message,message,1218,"; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMixMax Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MixMax generator based on ROOT::Math::MixMaxEngine of N=240. ; Definition at line 517 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMixMax ();  ;  ~GSLRngMixMax () override;  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:2310,Integrability,message,message,2310,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:592,Modifiability,inherit,inherited,592,". ROOT: ROOT::Math::GSLRngMixMax Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMixMax Class ReferenceMath » MathCore » Interface classes for Random number generation. ; MixMax generator based on ROOT::Math::MixMaxEngine of N=240. ; Definition at line 517 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMixMax ();  ;  ~GSLRngMixMax () override;  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html:4670,Modifiability,inherit,inherited,4670,"uble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngMixMax:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngMixMax::BaseType. Definition at line 519 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngMixMax(). ROOT::Math::GSLRngMixMax::GSLRngMixMax ; (; ). Definition at line 496 of file GSLRndmEngines.cxx. ◆ ~GSLRngMixMax(). ROOT::Math::GSLRngMixMax::~GSLRngMixMax ; (; ). override . Definition at line 505 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngMixMax:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGS",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMixMax.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:1158,Availability,avail,available,1158,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; 5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ; Definition at line 467 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:1190,Availability,error,error,1190,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; 5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ; Definition at line 467 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:2250,Availability,avail,available,2250,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:2282,Availability,error,error,2282,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:1196,Integrability,message,message,1196,"Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; 5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ; Definition at line 467 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:2288,Integrability,message,message,2288,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:570,Modifiability,inherit,inherited,570,". ROOT: ROOT::Math::GSLRngMRG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMRG Class ReferenceMath » MathCore » Interface classes for Random number generation. ; 5-th order multiple recursive generator (L'Ecuyer, Blouin and Coutre) see here ; Definition at line 467 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMRG ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random number",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html:4648,Modifiability,inherit,inherited,4648,"istribution. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngMRG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngMRG::BaseType. Definition at line 469 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngMRG(). ROOT::Math::GSLRngMRG::GSLRngMRG ; (; ). Definition at line 463 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngMRG:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngMRG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMRG.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMRG.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:1129,Availability,avail,available,1129," ROOT::Math::GSLRngMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMT Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Mersenne-Twister generator gsl_rng_mt19937 from here ; Definition at line 341 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMT ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:1161,Availability,error,error,1161," ROOT::Math::GSLRngMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMT Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Mersenne-Twister generator gsl_rng_mt19937 from here ; Definition at line 341 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMT ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:2221,Availability,avail,available,2221,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:2253,Availability,error,error,2253,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:1167,Integrability,message,message,1167," ROOT::Math::GSLRngMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMT Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Mersenne-Twister generator gsl_rng_mt19937 from here ; Definition at line 341 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMT ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:2259,Integrability,message,message,2259,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:541,Modifiability,inherit,inherited,541,". ROOT: ROOT::Math::GSLRngMT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngMT Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Mersenne-Twister generator gsl_rng_mt19937 from here ; Definition at line 341 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngMT ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html:4619,Modifiability,inherit,inherited,4619,"t;  F distribution. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngMT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngMT::BaseType. Definition at line 343 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngMT(). ROOT::Math::GSLRngMT::GSLRngMT ; (; ). Definition at line 395 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngMT:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngMT. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngMT.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:1126,Availability,avail,available,1126,"OT: ROOT::Math::GSLRngRand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRand Class ReferenceMath » MathCore » Interface classes for Random number generation. ; BSD rand() generator gsl_rmg_rand from here ; Definition at line 481 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRand ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:1158,Availability,error,error,1158,"OT: ROOT::Math::GSLRngRand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRand Class ReferenceMath » MathCore » Interface classes for Random number generation. ; BSD rand() generator gsl_rmg_rand from here ; Definition at line 481 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRand ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:2218,Availability,avail,available,2218,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:2250,Availability,error,error,2250,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:1164,Integrability,message,message,1164,"OT: ROOT::Math::GSLRngRand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRand Class ReferenceMath » MathCore » Interface classes for Random number generation. ; BSD rand() generator gsl_rmg_rand from here ; Definition at line 481 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRand ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:2256,Integrability,message,message,2256,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:538,Modifiability,inherit,inherited,538,". ROOT: ROOT::Math::GSLRngRand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRand Class ReferenceMath » MathCore » Interface classes for Random number generation. ; BSD rand() generator gsl_rmg_rand from here ; Definition at line 481 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRand ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html:4616,Modifiability,inherit,inherited,4616,"tion. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRand:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRand::BaseType. Definition at line 483 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRand(). ROOT::Math::GSLRngRand::GSLRngRand ; (; ). Definition at line 472 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRand:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRand. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRand.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRand.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:1227,Availability,avail,available,1227,"Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLux Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Old Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ; Definition at line 355 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLux ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:1259,Availability,error,error,1259,"Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLux Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Old Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ; Definition at line 355 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLux ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:2319,Availability,avail,available,2319,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:2351,Availability,error,error,2351,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:1265,Integrability,message,message,1265,"Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLux Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Old Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ; Definition at line 355 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLux ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:2357,Integrability,message,message,2357,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:639,Modifiability,inherit,inherited,639,". ROOT: ROOT::Math::GSLRngRanLux Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLux Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Old Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom1 with default luxury level) see here ; Definition at line 355 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLux ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Ite",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html:4717,Modifiability,inherit,inherited,4717,"ble tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLux:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLux::BaseType. Definition at line 357 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLux(). ROOT::Math::GSLRngRanLux::GSLRngRanLux ; (; ). Definition at line 403 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLux:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLux. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLux.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:1247,Availability,avail,available,1247,"atches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ; Definition at line 399 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:1279,Availability,error,error,1279,"atches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ; Definition at line 399 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:2339,Availability,avail,available,2339,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:2371,Availability,error,error,2371,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:1285,Integrability,message,message,1285,"atches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ; Definition at line 399 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:2377,Integrability,message,message,2377,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:659,Modifiability,inherit,inherited,659,". ROOT: ROOT::Math::GSLRngRanLuxD1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 1 (It throws away 202 value for every 12 used) see here ; Definition at line 399 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; v",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html:4737,Modifiability,inherit,inherited,4737,"uble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxD1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxD1::BaseType. Definition at line 401 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxD1(). ROOT::Math::GSLRngRanLuxD1::GSLRngRanLuxD1 ; (; ). Definition at line 424 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxD1:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxD1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:1247,Availability,avail,available,1247,"atches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 413 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:1279,Availability,error,error,1279,"atches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 413 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:2339,Availability,avail,available,2339,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:2371,Availability,error,error,2371,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:1285,Integrability,message,message,1285,"atches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 413 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:2377,Integrability,message,message,2377,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:659,Modifiability,inherit,inherited,659,". ROOT: ROOT::Math::GSLRngRanLuxD2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxD2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Double precision (48 bits) version of Second generation of Ranlux generator with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 413 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxD2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; v",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html:4737,Modifiability,inherit,inherited,4737,"uble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxD2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxD2::BaseType. Definition at line 415 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxD2(). ROOT::Math::GSLRngRanLuxD2::GSLRngRanLuxD2 ; (; ). Definition at line 431 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxD2:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxD2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxD2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:1231,Availability,avail,available,1231,"arching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ; Definition at line 369 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:1263,Availability,error,error,1263,"arching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ; Definition at line 369 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:2323,Availability,avail,available,2323,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:2355,Availability,error,error,2355,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:1269,Integrability,message,message,1269,"arching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ; Definition at line 369 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:2361,Integrability,message,message,2361,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:643,Modifiability,inherit,inherited,643,". ROOT: ROOT::Math::GSLRngRanLuxS1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for single precision with luxury level of 1 (It throws away 202 values for every 12 used) see here ; Definition at line 369 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS1 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html:4721,Modifiability,inherit,inherited,4721,"uble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxS1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxS1::BaseType. Definition at line 371 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxS1(). ROOT::Math::GSLRngRanLuxS1::GSLRngRanLuxS1 ; (; ). Definition at line 410 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxS1:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxS1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS1.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:1230,Availability,avail,available,1230,"earching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:1262,Availability,error,error,1262,"earching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:2322,Availability,avail,available,2322,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:2354,Availability,error,error,2354,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:1268,Integrability,message,message,1268,"earching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:2360,Integrability,message,message,2360,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:642,Modifiability,inherit,inherited,642,". ROOT: ROOT::Math::GSLRngRanLuxS2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanLuxS2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Second generation of Ranlux generator for Single precision with luxury level of 2 (It throws away 397 value for every 12 used) see here ; Definition at line 384 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanLuxS2 ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html:4720,Modifiability,inherit,inherited,4720,"uble nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanLuxS2:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanLuxS2::BaseType. Definition at line 386 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanLuxS2(). ROOT::Math::GSLRngRanLuxS2::GSLRngRanLuxS2 ; (; ). Definition at line 417 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanLuxS2:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanLuxS2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanLuxS2.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:1114,Availability,avail,available,1114,". ROOT: ROOT::Math::GSLRngRanMar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanMar Class ReferenceMath » MathCore » Interface classes for Random number generation. ; RANMAR generator see here ; Definition at line 494 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanMar ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a ra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:1146,Availability,error,error,1146,". ROOT: ROOT::Math::GSLRngRanMar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanMar Class ReferenceMath » MathCore » Interface classes for Random number generation. ; RANMAR generator see here ; Definition at line 494 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanMar ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a ra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:2206,Availability,avail,available,2206,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:2238,Availability,error,error,2238,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:1152,Integrability,message,message,1152,". ROOT: ROOT::Math::GSLRngRanMar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanMar Class ReferenceMath » MathCore » Interface classes for Random number generation. ; RANMAR generator see here ; Definition at line 494 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanMar ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a ra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:2244,Integrability,message,message,2244,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:526,Modifiability,inherit,inherited,526,". ROOT: ROOT::Math::GSLRngRanMar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngRanMar Class ReferenceMath » MathCore » Interface classes for Random number generation. ; RANMAR generator see here ; Definition at line 494 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngRanMar ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a ra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html:4604,Modifiability,inherit,inherited,4604,"ble tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngRanMar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngRanMar::BaseType. Definition at line 496 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngRanMar(). ROOT::Math::GSLRngRanMar::GSLRngRanMar ; (; ). Definition at line 480 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngRanMar:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngRanMar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngRanMar.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:1124,Availability,avail,available,1124,"ROOT: ROOT::Math::GSLRngTaus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngTaus Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Tausworthe generator by L'Ecuyer see here ; Definition at line 428 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngTaus ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:1156,Availability,error,error,1156,"ROOT: ROOT::Math::GSLRngTaus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngTaus Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Tausworthe generator by L'Ecuyer see here ; Definition at line 428 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngTaus ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:2216,Availability,avail,available,2216,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:2248,Availability,error,error,2248,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:1162,Integrability,message,message,1162,"ROOT: ROOT::Math::GSLRngTaus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngTaus Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Tausworthe generator by L'Ecuyer see here ; Definition at line 428 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngTaus ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gener",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:2254,Integrability,message,message,2254,"and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; unsigned long RndmInt (unsigned long max) const;  Generate an integer number between [0,max-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; void SetSeed (unsigned int seed) const;  set the random generator seed ;  ; unsigned int Size () const;  return the state size of generator ;  ; void Terminate ();  delete pointer to contained rng ;  ; double Gaussian (double sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; doub",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:536,Modifiability,inherit,inherited,536,". ROOT: ROOT::Math::GSLRngTaus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; ROOT::Math::GSLRngTaus Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Tausworthe generator by L'Ecuyer see here ; Definition at line 428 of file GSLRndmEngines.h. Public Types; typedef GSLRandomEngine BaseType;  . Public Member Functions;  GSLRngTaus ();  ;  Public Member Functions inherited from ROOT::Math::GSLRandomEngine;  GSLRandomEngine ();  default constructor. ;  ;  GSLRandomEngine (const GSLRandomEngine &eng);  Copy constructor : clone the contained GSL generator. ;  ;  GSLRandomEngine (GSLRngWrapper *rng);  create from an existing rng. ;  ; virtual ~GSLRandomEngine ();  call Terminate() ;  ; void Initialize ();  initialize the generator If no rng is present the default one based on Mersenne and Twister is created ;  ; unsigned long IntRndm () const;  Generate an integer number between [0,max_generator-1] (including 0 and max-1) if max is larger than available range of algorithm an error message is printed and zero is returned. ;  ; unsigned long MaxInt () const;  return the maximum integer +1 a generator can handle ;  ; unsigned long MinInt () const;  return the minimum integer a generator can handle typically this value is 0 ;  ; std::string Name () const;  return name of generator ;  ; double operator() () const;  Generate a random number between ]0,1] 0 is excluded and 1 is included. ;  ; GSLRandomEngine & operator= (const GSLRandomEngine &eng);  Assignment operator : make a deep copy of the contained GSL generator. ;  ; void RandomArray (double *begin, double *end) const;  Generate an array of random numbers The iterators points to the random numbers. ;  ; template<class Iterator > ; void RandomArray (Iterator begin, Iterator end) const;  Generate an array of random numbers. ;  ; double Rndm () const;  Gen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html:4614,Modifiability,inherit,inherited,4614,"tion. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  Multinomial distribution. ;  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::GSLRandomEngine; void SetType (GSLRngWrapper *r);  internal method used by the derived class to set the type of generators ;  ; GSLRngWrapper * Engine ();  internal method to return the engine Used by class like GSLMCIntegrator to set the engine ;  . #include <Math/GSLRndmEngines.h>. Inheritance diagram for ROOT::Math::GSLRngTaus:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef GSLRandomEngine ROOT::Math::GSLRngTaus::BaseType. Definition at line 430 of file GSLRndmEngines.h. Constructor & Destructor Documentation. ◆ GSLRngTaus(). ROOT::Math::GSLRngTaus::GSLRngTaus ; (; ). Definition at line 439 of file GSLRndmEngines.cxx. Libraries for ROOT::Math::GSLRngTaus:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLRndmEngines.h; math/mathmore/src/GSLRndmEngines.cxx. ROOTMathGSLRngTaus. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngTaus.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngTaus.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html:294,Integrability,wrap,wrap,294,. ROOT: ROOT::Math::GSLRngWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLRngWrapper Class Reference. ; GSLRngWrapper class to wrap gsl_rng structure. ; Definition at line 25 of file GSLRngWrapper.h. Public Member Functions;  GSLRngWrapper ();  Default constructor. ;  ;  GSLRngWrapper (const gsl_rng *r);  construct from an existing gsl_rng it is managed externally - so will not be deleted at the end ;  ;  GSLRngWrapper (const gsl_rng_type *type);  Constructor with type. ;  ;  GSLRngWrapper (GSLRngWrapper &r);  Copy constructor - clone the GSL object and manage it. ;  ;  ~GSLRngWrapper ();  Destructor (free the rng if not done before) ;  ; void Allocate ();  ; void Free ();  ; GSLRngWrapper & operator= (const GSLRngWrapper &rhs);  Assignment operator. ;  ; void PrintState () const;  ; gsl_rng * Rng ();  ; const gsl_rng * Rng () const;  ; void SetDefaultType ();  ; void SetType (const gsl_rng_type *type);  . Private Attributes; bool fOwn;  ; gsl_rng * fRng;  ; const gsl_rng_type * fRngType;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLRngWrapper.h>; Constructor & Destructor Documentation. ◆ GSLRngWrapper() [1/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; ). inline . Default constructor. ; Definition at line 33 of file GSLRngWrapper.h. ◆ GSLRngWrapper() [2/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; const gsl_rng_type * ; type). inline . Constructor with type. ; Definition at line 43 of file GSLRngWrapper.h. ◆ GSLRngWrapper() [3/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; const gsl_rng * ; r). inline . construct from an existing gsl_rng it is managed externally - so will not be deleted at the end ; Definition at line 54 of file GSLRngWrapper.h. ◆ GSLRngWrapper() [4/4]. ROOT::Math::GSLRngWrapper::GSLRngWrapper ; (; GSLRngWrapper,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRngWrapper.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html:1531,Availability,error,error,1531,"inding. ; Base class for GSL Root-Finding algorithms for one dimensional functions which do not use function derivatives. ; For finding the roots users should not use this class directly but instantiate the derived classes, for example ROOT::Math::Roots::Brent for using the Brent algorithm. All the classes defining the alhorithms are defined in the header Math/RootFinderAlgorithm.h They possible types implementing root bracketing algorithms which they do not require function derivatives are: . ROOT::Math::Roots::Bisection . ROOT::Math::Roots::FalsePos . ROOT::Math::Roots::Brent . See also the specific classes for the documentation. See the GSL online manual for information on the GSL Root-Finding algorithms ; Definition at line 73 of file GSLRootFinder.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  . Public Member Functions;  GSLRootFinder ();  ;  GSLRootFinder (const GSLRootFinder &)=delete;  ;  GSLRootFinder (GSLRootFinder &&)=delete;  ;  ~GSLRootFinder () override;  ; int Iterate () override;  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  ; int Iterations () const override;  Return number of iterations. ;  ; const char * Name () const override;  double GSLRootFinder::XLower() const { return fXlow; } ;  ; GSLRootFinder & operator= (const GSLRootFinder &)=delete;  ; GSLRootFinder & operator= (GSLRootFinder &&)=delete;  ; double Root () const override;  Returns the previously calculated root. ;  ; bool SetFunction (const IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Sets the function for algorithms using derivatives. ;  ; bool SetFunction (GSLFuncPointer f, void *params, double xlow, double xup",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html:4225,Availability,error,error,4225," instead.; [legend]; Member Typedef Documentation. ◆ GSLFuncPointer. typedef double(* ROOT::Math::GSLRootFinder::GSLFuncPointer) (double, void *). Definition at line 94 of file GSLRootFinder.h. Constructor & Destructor Documentation. ◆ GSLRootFinder() [1/3]. ROOT::Math::GSLRootFinder::GSLRootFinder ; (; ). Definition at line 49 of file GSLRootFinder.cxx. ◆ ~GSLRootFinder(). ROOT::Math::GSLRootFinder::~GSLRootFinder ; (; ). override . Definition at line 59 of file GSLRootFinder.cxx. ◆ GSLRootFinder() [2/3]. ROOT::Math::GSLRootFinder::GSLRootFinder ; (; const GSLRootFinder & ; ). delete . ◆ GSLRootFinder() [3/3]. ROOT::Math::GSLRootFinder::GSLRootFinder ; (; GSLRootFinder && ; ). delete . Member Function Documentation. ◆ FreeSolver(). void ROOT::Math::GSLRootFinder::FreeSolver ; (; ). protected . Definition at line 101 of file GSLRootFinder.cxx. ◆ Iterate(). int ROOT::Math::GSLRootFinder::Iterate ; (; ). overridevirtual . This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ; Reimplemented from ROOT::Math::IRootFinderMethod.; Definition at line 106 of file GSLRootFinder.cxx. ◆ Iterations(). int ROOT::Math::GSLRootFinder::Iterations ; (; ); const. inlineoverridevirtual . Return number of iterations. ; Reimplemented from ROOT::Math::IRootFinderMethod.; Definition at line 112 of file GSLRootFinder.h. ◆ Name(). const char * ROOT::Math::GSLRootFinder::Name ; (; ); const. overridevirtual . double GSLRootFinder::XLower() const { return fXlow; } ; double GSLRootFinder::XUpper() const { return fXup; } ; Implements ROOT::Math::IRootFinderMethod.; Definition at line 147 of file GSLRootFinder.cxx. ◆ operator=() [1/2]. GSLRootFinder & ROOT::Math::GSLRootFinder::operator= ; (; const GSLRootFinder & ; ). delete . ◆ operator=() [2/2]. GSLRootFinder & ROOT::Math::GSLRootFinder::operator= ; (; GSLRootFinder && ; ). delete . ◆ Root(). double ROOT::Math::GSLRootFinder::Root ; (; ); const. overridevirtual . R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html:2602,Modifiability,inherit,inherited,2602,";  ; const char * Name () const override;  double GSLRootFinder::XLower() const { return fXlow; } ;  ; GSLRootFinder & operator= (const GSLRootFinder &)=delete;  ; GSLRootFinder & operator= (GSLRootFinder &&)=delete;  ; double Root () const override;  Returns the previously calculated root. ;  ; bool SetFunction (const IGenFunction &f, double xlow, double xup) override;  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Sets the function for algorithms using derivatives. ;  ; bool SetFunction (GSLFuncPointer f, void *params, double xlow, double xup);  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10) override;  Find the root. ;  ; int Status () const override;  Return the status of last root finding. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  . Protected Member Functions; void FreeSolver ();  ; void SetSolver (GSLRootFSolver *s);  . Private Attributes; GSLFunctionWrapper * fFunction;  ; int fIter;  ; double fRoot;  ; GSLRootFSolver * fS;  ; int fStatus;  ; bool fValidInterval;  ; double fXlow;  ; double fXup;  . #include <Math/GSLRootFinder.h>. Inheritance diagram for ROOT::Math::GSLRootFinder:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLFuncPointer. typedef double(* ROOT::Math::GSLRootFinder::GSLFuncPointer) (double, void *). Definition at line 94 of file GSLRootFinder.h. Constructor & Destructor Documentation. ◆ GSLRootFinder() [1/3]. ROOT::Math::GSLRootFinder::GSLRootFinder ; (; ). Definition at line 49 of file GSLRootFinder.cxx. ◆ ~GSLRootFinder(). ROOT::Math::GSLRootFinder::~GSLRootFinder ; (; ). override . Defini",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRootFinder.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinder.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html:2658,Modifiability,inherit,inherited,2658,"  Return name of root finder algorithm. ;  ; GSLRootFinderDeriv & operator= (const GSLRootFinderDeriv &)=delete;  ; GSLRootFinderDeriv & operator= (GSLRootFinderDeriv &&)=delete;  ; double Root () const override;  Returns the previously calculated root. ;  ; bool SetFunction (const IGradFunction &f, double xstart) override;  Sets the function for algorithms using derivatives. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Sets the function for algorithms using derivatives. ;  ; bool SetFunction (GSLFuncPointer f, GSLFuncPointer df, GSLFdFPointer fdf, void *p, double Root);  ; bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10) override;  Find the root (return false if failed) ;  ; int Status () const override;  Return the status of last root finding. ;  ;  Public Member Functions inherited from ROOT::Math::IRootFinderMethod;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  . Protected Member Functions; void FreeSolver ();  ; void SetSolver (GSLRootFdFSolver *s);  . Private Attributes; GSLFunctionDerivWrapper * fFunction;  ; int fIter;  ; double fPrevRoot;  ; double fRoot;  ; GSLRootFdFSolver * fS;  ; int fStatus;  ; bool fValidPoint;  . #include <Math/GSLRootFinderDeriv.h>. Inheritance diagram for ROOT::Math::GSLRootFinderDeriv:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ GSLFdFPointer. typedef void(* ROOT::Math::GSLRootFinderDeriv::GSLFdFPointer) (double, void *, double *, double *). Definition at line 100 of file GSLRootFinderDeriv.h. ◆ GSLFuncPointer. typedef double(* ROOT::Math::GSLRootFinderDeriv::GSLFuncPointer) (double, void *). Definition at line 99 of file GSLRootFinderDeriv.h. Constructor & Destructor Documentation. ◆ GSLRootFinderDeriv() [1/",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRootFinderDeriv.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:1559,Deployability,configurat,configuration,1559,"lement some of the methods (like the one defining the metric) which are used by the the simulated annealing algorithm must build a user derived class. NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class ; Definition at line 50 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x);  construct from an interface of a multi-dimensional function ;  ;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x, const double *scale);  construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim () const;  ; virtual void Print ();  print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ;  ; double Scale (unsigned int i) const;  ; void SetX (const double *x);  change the x values (used by sim annealing to take a step) ;  ; template<class IT > ; void SetX (IT begin, IT end);  ; void SetX (unsigned int i, double x);  ; virtual void Step (const GSLRandomEngine &r, double maxstep);  change the ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:4567,Deployability,configurat,configuration,4567,ionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ; Definition at line 43 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [3/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; ). inlineprotected . derived classes might need to re-define completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone method. ; Needs to be re-implemented by the derived classes for deep copying ; Definition at line 92 of file GSLSimAnnealing.h. ◆ Distance(). double ROOT::Math::GSLSimAnFunc::Distance ; (; const GSLSimAnFunc & ; func); const. virtual . calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ; re-implement by derived classes if needed to be modified ; Definition at line 66 of file GSLSimAnnealing.cxx. ◆ Energy(). double ROOT::Math::GSLSimAnFunc::Energy ; (; ); const. virtual . evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ; Definition at line 50 of file GSLSimAnnealing.cxx. ◆ FastCopy(). GSLSimAnFunc & ROOT::Math::GSLSimAnFunc::FastCopy ; (; const GSLSimAnFunc & ; f). virtual . fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ; Definition at line 96 of file GSLSimAnnealing.cxx. ◆ NDim(). unsigned int ROOT::Math::GSLSimAnFunc::NDim ; (; ); const. inline . Definition at line 135 of file GSLSimAnnealing.h. ◆ Print(). void ROOT::Math::GSLSimAnFunc::Print ; (; ). virtual . print the position in the standard output std::ostream GSL prints in addition n iter,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:1662,Energy Efficiency,energy,energy,1662,"tor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim () const;  ; virtual void Print ();  print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ;  ; double Scale (unsigned int i) const;  ; void SetX (const double *x);  change the x values (used by sim annealing to take a step) ;  ; template<class IT > ; void SetX (IT begin, IT end);  ; void SetX (unsigned int i, double x);  ; virtual void Step (const GSLRandomEngine &r, double maxstep);  change the x[i] value using a random value urndm generated between [0,1] up to a maximum value maxstep re-implement by derived classes if needed to be modified ;  ; const std::vector< double > & X () const;  ; double X (unsigned int i) const;  . Protected Member Functions;  GSLSimAnFunc ();  derived classes might need to re-define completely the class ;  . Private Attributes; const ROOT::Math::IMultiGenFunction * fFunc;  ; std::vector< double > fScale;  ; std::vector< double > fX;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnFunc() [1/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:2161,Energy Efficiency,energy,energy,2161,"tor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim () const;  ; virtual void Print ();  print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ;  ; double Scale (unsigned int i) const;  ; void SetX (const double *x);  change the x values (used by sim annealing to take a step) ;  ; template<class IT > ; void SetX (IT begin, IT end);  ; void SetX (unsigned int i, double x);  ; virtual void Step (const GSLRandomEngine &r, double maxstep);  change the x[i] value using a random value urndm generated between [0,1] up to a maximum value maxstep re-implement by derived classes if needed to be modified ;  ; const std::vector< double > & X () const;  ; double X (unsigned int i) const;  . Protected Member Functions;  GSLSimAnFunc ();  derived classes might need to re-define completely the class ;  . Private Attributes; const ROOT::Math::IMultiGenFunction * fFunc;  ; std::vector< double > fScale;  ; std::vector< double > fX;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnFunc() [1/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:4821,Energy Efficiency,energy,energy,4821,"ne completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone method. ; Needs to be re-implemented by the derived classes for deep copying ; Definition at line 92 of file GSLSimAnnealing.h. ◆ Distance(). double ROOT::Math::GSLSimAnFunc::Distance ; (; const GSLSimAnFunc & ; func); const. virtual . calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ; re-implement by derived classes if needed to be modified ; Definition at line 66 of file GSLSimAnnealing.cxx. ◆ Energy(). double ROOT::Math::GSLSimAnFunc::Energy ; (; ); const. virtual . evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ; Definition at line 50 of file GSLSimAnnealing.cxx. ◆ FastCopy(). GSLSimAnFunc & ROOT::Math::GSLSimAnFunc::FastCopy ; (; const GSLSimAnFunc & ; f). virtual . fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ; Definition at line 96 of file GSLSimAnnealing.cxx. ◆ NDim(). unsigned int ROOT::Math::GSLSimAnFunc::NDim ; (; ); const. inline . Definition at line 135 of file GSLSimAnnealing.h. ◆ Print(). void ROOT::Math::GSLSimAnFunc::Print ; (; ). virtual . print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ; Definition at line 83 of file GSLSimAnnealing.cxx. ◆ Scale(). double ROOT::Math::GSLSimAnFunc::Scale ; (; unsigned int ; i); const. inline . Definition at line 141 of file GSLSimAnnealing.h. ◆ SetX() [1/3]. void ROOT::Math::GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:5603,Energy Efficiency,energy,energy,5603," a cartesian metric is used. ; re-implement by derived classes if needed to be modified ; Definition at line 66 of file GSLSimAnnealing.cxx. ◆ Energy(). double ROOT::Math::GSLSimAnFunc::Energy ; (; ); const. virtual . evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ; Definition at line 50 of file GSLSimAnnealing.cxx. ◆ FastCopy(). GSLSimAnFunc & ROOT::Math::GSLSimAnFunc::FastCopy ; (; const GSLSimAnFunc & ; f). virtual . fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ; Definition at line 96 of file GSLSimAnnealing.cxx. ◆ NDim(). unsigned int ROOT::Math::GSLSimAnFunc::NDim ; (; ); const. inline . Definition at line 135 of file GSLSimAnnealing.h. ◆ Print(). void ROOT::Math::GSLSimAnFunc::Print ; (; ). virtual . print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ; Definition at line 83 of file GSLSimAnnealing.cxx. ◆ Scale(). double ROOT::Math::GSLSimAnFunc::Scale ; (; unsigned int ; i); const. inline . Definition at line 141 of file GSLSimAnnealing.h. ◆ SetX() [1/3]. void ROOT::Math::GSLSimAnFunc::SetX ; (; const double * ; x). inline . change the x values (used by sim annealing to take a step) ; Definition at line 126 of file GSLSimAnnealing.h. ◆ SetX() [2/3]. template<class IT > . void ROOT::Math::GSLSimAnFunc::SetX ; (; IT ; begin, . IT ; end . ). inline . Definition at line 131 of file GSLSimAnnealing.h. ◆ SetX() [3/3]. void ROOT::Math::GSLSimAnFunc::SetX ; (; unsigned int ; i, . double ; x . ). inline . Definition at line 143 of file GSLSimAnnealing.h. ◆ Step(). void ROOT::Math::GSLSimAnFunc::Step ; (; const GSLRandomEngine & ; r, . double ; maxstep . ). virtual . change the x[i] value using a random value urndm generated between [0,1] up to a maximum value maxstep re-implem",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:952,Integrability,interface,interface,952,"ist of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnFunc Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnFunc class description. ; Interface class for the objetive function to be used in simulated annealing If user wants to re-implement some of the methods (like the one defining the metric) which are used by the the simulated annealing algorithm must build a user derived class. NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class ; Definition at line 50 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x);  construct from an interface of a multi-dimensional function ;  ;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x, const double *scale);  construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim () const;  ; virtual void Print ();  print the position in the standard output std::ostream GSL prints in addition n iteration, n fun",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:1115,Integrability,interface,interface,1115,"ist of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnFunc Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnFunc class description. ; Interface class for the objetive function to be used in simulated annealing If user wants to re-implement some of the methods (like the one defining the metric) which are used by the the simulated annealing algorithm must build a user derived class. NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class ; Definition at line 50 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x);  construct from an interface of a multi-dimensional function ;  ;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x, const double *scale);  construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim () const;  ; virtual void Print ();  print the position in the standard output std::ostream GSL prints in addition n iteration, n fun",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:3233,Integrability,interface,interface,3233,"(const double *x);  change the x values (used by sim annealing to take a step) ;  ; template<class IT > ; void SetX (IT begin, IT end);  ; void SetX (unsigned int i, double x);  ; virtual void Step (const GSLRandomEngine &r, double maxstep);  change the x[i] value using a random value urndm generated between [0,1] up to a maximum value maxstep re-implement by derived classes if needed to be modified ;  ; const std::vector< double > & X () const;  ; double X (unsigned int i) const;  . Protected Member Functions;  GSLSimAnFunc ();  derived classes might need to re-define completely the class ;  . Private Attributes; const ROOT::Math::IMultiGenFunction * fFunc;  ; std::vector< double > fScale;  ; std::vector< double > fX;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnFunc() [1/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x . ). construct from an interface of a multi-dimensional function ; Definition at line 34 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [2/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x, . const double * ; scale . ). construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ; Definition at line 43 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [3/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; ). inlineprotected . derived classes might need to re-define completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:3512,Integrability,interface,interface,3512,"ent by derived classes if needed to be modified ;  ; const std::vector< double > & X () const;  ; double X (unsigned int i) const;  . Protected Member Functions;  GSLSimAnFunc ();  derived classes might need to re-define completely the class ;  . Private Attributes; const ROOT::Math::IMultiGenFunction * fFunc;  ; std::vector< double > fScale;  ; std::vector< double > fX;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnFunc() [1/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x . ). construct from an interface of a multi-dimensional function ; Definition at line 34 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [2/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; const ROOT::Math::IMultiGenFunction & ; func, . const double * ; x, . const double * ; scale . ). construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ; Definition at line 43 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [3/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; ). inlineprotected . derived classes might need to re-define completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone method. ; Needs to be re-implemented by the derived classes for deep copying ; Definition at line 92 of file GSLSimAnnealing.h. ◆ Distance(). double ROOT::Math::GSLSimAnFunc::Distance ; (; const GSLSimAnFunc & ; func); const. virtual . calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ; re",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:1559,Modifiability,config,configuration,1559,"lement some of the methods (like the one defining the metric) which are used by the the simulated annealing algorithm must build a user derived class. NOTE: Derived classes must re-implement the assignment and copy constructor to call them of the parent class ; Definition at line 50 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x);  construct from an interface of a multi-dimensional function ;  ;  GSLSimAnFunc (const ROOT::Math::IMultiGenFunction &func, const double *x, const double *scale);  construct from an interface of a multi-dimensional function Use optionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ;  ; virtual ~GSLSimAnFunc ();  virtual destructor (no operations) ;  ; virtual GSLSimAnFunc * Clone () const;  clone method. ;  ; virtual double Distance (const GSLSimAnFunc &func) const;  calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ;  ; virtual double Energy () const;  evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ;  ; virtual GSLSimAnFunc & FastCopy (const GSLSimAnFunc &f);  fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ;  ; unsigned int NDim () const;  ; virtual void Print ();  print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ;  ; double Scale (unsigned int i) const;  ; void SetX (const double *x);  change the x values (used by sim annealing to take a step) ;  ; template<class IT > ; void SetX (IT begin, IT end);  ; void SetX (unsigned int i, double x);  ; virtual void Step (const GSLRandomEngine &r, double maxstep);  change the ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:4567,Modifiability,config,configuration,4567,ionally a scale factor (for each coordinate) which can be used to scale the step sizes (this is used for example by the minimization algorithm) ; Definition at line 43 of file GSLSimAnnealing.cxx. ◆ GSLSimAnFunc() [3/3]. ROOT::Math::GSLSimAnFunc::GSLSimAnFunc ; (; ). inlineprotected . derived classes might need to re-define completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone method. ; Needs to be re-implemented by the derived classes for deep copying ; Definition at line 92 of file GSLSimAnnealing.h. ◆ Distance(). double ROOT::Math::GSLSimAnFunc::Distance ; (; const GSLSimAnFunc & ; func); const. virtual . calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ; re-implement by derived classes if needed to be modified ; Definition at line 66 of file GSLSimAnnealing.cxx. ◆ Energy(). double ROOT::Math::GSLSimAnFunc::Energy ; (; ); const. virtual . evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ; Definition at line 50 of file GSLSimAnnealing.cxx. ◆ FastCopy(). GSLSimAnFunc & ROOT::Math::GSLSimAnFunc::FastCopy ; (; const GSLSimAnFunc & ; f). virtual . fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ; Definition at line 96 of file GSLSimAnnealing.cxx. ◆ NDim(). unsigned int ROOT::Math::GSLSimAnFunc::NDim ; (; ); const. inline . Definition at line 135 of file GSLSimAnnealing.h. ◆ Print(). void ROOT::Math::GSLSimAnFunc::Print ; (; ). virtual . print the position in the standard output std::ostream GSL prints in addition n iter,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:6649,Availability,error,errors,6649,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7121,Availability,error,error,7121,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7240,Availability,error,errors,7240,"lation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7824,Availability,error,error,7824,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Min",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7916,Availability,error,errors,7916,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Min",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8035,Availability,error,error,8035,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Min",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8439,Availability,error,error,8439,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8541,Availability,error,error,8541,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:9691,Availability,error,error,9691,"ves the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (dou",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:9701,Availability,error,error,9701,"ves the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (dou",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:10256,Availability,error,errors,10256,"vel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11169,Availability,toler,tolerance,11169,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11268,Availability,error,error,11268,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11747,Availability,toler,tolerance,11747,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; ROOT::Math::GSLSimAnnealing fSolver;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:12750,Availability,error,errors,12750," ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; ROOT::Math::GSLSimAnnealing fSolver;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLSimAnMinimizer.h>. Inheritance diagram for ROOT::Math::GSLSimAnMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 33 of file GSLSimAnMinimizer.cxx. ◆ ~GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::~GSLSimAnMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:3445,Deployability,release,release,3445,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:9462,Deployability,configurat,configuration,9462,"ves the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (dou",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:531,Integrability,interface,interface,531,". ROOT: ROOT::Math::GSLSimAnMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. ; It implements the ROOT::Minimizer interface and a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager Configuration (Setting/getting) the options is done through the methods defined in the ROOT::Math::Minimizer class. The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the corresponding options. Here is some code example for increasing n_tries from 200 (default) to 1000 ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:547,Modifiability,plug-in,plug-in,547,". ROOT: ROOT::Math::GSLSimAnMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. ; It implements the ROOT::Minimizer interface and a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager Configuration (Setting/getting) the options is done through the methods defined in the ROOT::Math::Minimizer class. The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the corresponding options. Here is some code example for increasing n_tries from 200 (default) to 1000 ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:614,Modifiability,plug-in,plug-in,614,". ROOT: ROOT::Math::GSLSimAnMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnMinimizer Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnMinimizer class for minimization using simulated annealing using the algorithm from GSL. ; It implements the ROOT::Minimizer interface and a plug-in (name ""GSLSimAn"") exists to instantiate this class via the plug-in manager Configuration (Setting/getting) the options is done through the methods defined in the ROOT::Math::Minimizer class. The user needs to call the base class method ROOT::Math::Minimizer::SetOptions to set the corresponding options. Here is some code example for increasing n_tries from 200 (default) to 1000 ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:2251,Modifiability,inherit,inherited,2251,"ical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () con",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:2453,Modifiability,variab,variable,2453,"tions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:2571,Modifiability,variab,variable,2571,"tions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:2594,Modifiability,variab,variable,2594,"tions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:2882,Modifiability,variab,variable,2882,"tions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e. ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NDim () const override;  number of dimensions ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:3100,Modifiability,variab,variables,3100,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:3465,Modifiability,variab,variable,3465,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:3566,Modifiability,variab,variable,3566,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:3870,Modifiability,variab,variable,3870,,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4063,Modifiability,variab,variable,4063," const override;  number of free variables (real dimension of the problem) ;  ; virtual unsigned int NPar () const;  total number of parameter defined ;  ; const ROOT::Math::IMultiGenFunction * ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4256,Modifiability,variab,variable,4256," ObjFunction () const;  return pointer to used objective function ;  ; void PrintResult () const;  print result of minimization ;  ; bool ReleaseVariable (unsigned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  ac",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4416,Modifiability,variab,variable,4416,"ned int ivar) override;  release an existing variable ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is no",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4550,Modifiability,variab,variable,4550,"  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4679,Modifiability,variab,variable,4679,"rride;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Func",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4803,Modifiability,variab,variable,4803,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:4932,Modifiability,variab,variable,4932,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5040,Modifiability,variab,variable,5040,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5137,Modifiability,variab,variables,5137,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5355,Modifiability,variab,variable,5355,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5372,Modifiability,variab,variable,5372,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5407,Modifiability,variab,variable,5407,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5508,Modifiability,variab,variables,5508,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5560,Modifiability,variab,variable,5560,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5690,Modifiability,inherit,inherited,5690,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:6379,Modifiability,variab,variable,6379,"array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Ch",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:6513,Modifiability,variab,variables,6513,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:6540,Modifiability,variab,variable,6540,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:6603,Modifiability,variab,variables,6603,"izer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual bool Contour (unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj);  find the contour points (xi, xj) of the function for parameter ivar and jvar around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7383,Modifiability,variab,variable,7383,"lation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; virtual double CovMatrix (unsigned int ivar, unsigned int jvar) const;  return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7652,Modifiability,variab,variable,7652,"e is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7699,Modifiability,variab,variables,7699,"e is zero The ordering of the variables is the same as in the parameter and errors vectors ;  ; virtual int CovMatrixStatus () const;  return status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made pos def , 3 accurate} Minimizer who implements covariance matrix calculation will re-implement the method ;  ; virtual double Edm () const;  return expected distance reached from the minimum (re-implement if minimizer provides it ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:7834,Modifiability,variab,variable,7834,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Min",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8159,Modifiability,variab,variable,8159,";  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; virtual const double * Errors () const;  return errors at the minimum ;  ; virtual bool GetCovMatrix (double *covMat) const;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; virtual bool GetHessianMatrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Min",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:9462,Modifiability,config,configuration,9462,"ves the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (dou",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:9858,Modifiability,variab,variable,9858,"ves the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (dou",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11423,Modifiability,variab,variable,11423,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; voi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11557,Modifiability,variab,variables,11557,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; voi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11586,Modifiability,variab,variables,11586,"xiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; ROOT::Math::GSLSimAnnealing fSolver;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:12089,Modifiability,inherit,inherited,12089,"oid SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; ROOT::Math::GSLSimAnnealing fSolver;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLSimAnMinimizer.h>. Inheritance diagram for ROOT::Math::GSLSimAnMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:12571,Modifiability,inherit,inherited,12571," ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; ROOT::Math::GSLSimAnnealing fSolver;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLSimAnMinimizer.h>. Inheritance diagram for ROOT::Math::GSLSimAnMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 33 of file GSLSimAnMinimizer.cxx. ◆ ~GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::~GSLSimAnMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:1898,Performance,perform,perform,1898,"es from 200 (default) to 1000 ROOT::Math::GenAlgoOptions simanOpt;; simanOpt.SetValue(""n_tries"", 1000);; ROOT::Math::MinimizerOptions opt;; opt.SetExtraOptions(simanOpt);; minimizer->SetOptions(opt);; ROOT::Math::GenAlgoOptionsclass implementing generic options for a numerical algorithm Just store the options in a map of strin...Definition GenAlgoOptions.h:32; ROOT::Math::IOptions::SetValuevoid SetValue(const char *name, double val)generic methods for retrieving optionsDefinition IOptions.h:42; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)set extra options (in this case pointer is cloned)Definition MinimizerOptions.cxx:210. Definition at line 75 of file GSLSimAnMinimizer.h. Public Member Functions;  GSLSimAnMinimizer (int type=0);  Default constructor. ;  ;  ~GSLSimAnMinimizer () override;  Destructor (no operations) ;  ; bool Minimize () override;  method to perform the minimization ;  ; const GSLSimAnParams & MinimizerParameters () const;  Get current minimizer option parameters. ;  ; unsigned int NCalls () const override;  number of calls ;  ; void SetParameters (const GSLSimAnParams &params);  set new minimizer option parameters using directly the GSLSimAnParams structure ;  ;  Public Member Functions inherited from ROOT::Math::BasicMinimizer;  BasicMinimizer ();  Default constructor. ;  ;  ~BasicMinimizer () override;  Destructor. ;  ; bool FixVariable (unsigned int ivar) override;  fix an existing variable ;  ; bool GetVariableSettings (unsigned int ivar, ROOT::Fit::ParameterSettings &varObj) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; const ROOT::Math::IMultiGradFunction * GradObjFunction () const;  return pointer to used gradient object function (NULL if gradient is not supported) ;  ; bool IsFixedVariable (unsigned int ivar) const override;  query if an existing variable is fixed (i.e.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8386,Performance,perform,perform,8386,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8520,Performance,perform,performed,8520,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:11251,Performance,perform,perform,11251,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:14041,Performance,perform,perform,14041, ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 33 of file GSLSimAnMinimizer.cxx. ◆ ~GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::~GSLSimAnMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimizer.cxx. ◆ DoSetSimAnParameters(). void ROOT::Math::GSLSimAnMinimizer::DoSetSimAnParameters ; (; const MinimizerOptions & ; opt). protected . set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ; Definition at line 164 of file GSLSimAnMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLSimAnMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 56 of file GSLSimAnMinimizer.cxx. ◆ MinimizerParameters(). const GSLSimAnParams & ROOT::Math::GSLSimAnMinimizer::MinimizerParameters ; (; ); const. inline . Get current minimizer option parameters. ; Definition at line 95 of file GSLSimAnMinimizer.h. ◆ NCalls(). unsigned int ROOT::Math::GSLSimAnMinimizer::NCalls ; (; ); const. overridevirtual . number of calls ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 138 of file GSLSimAnMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GSLSimAnMinimizer::SetParameters ; (; const GSLSimAnParams & ; params). inline . set new minimizer option parameters using directly the GSLSimAnParams structure ; Definition at line 98 of file GSLSimAnMinimizer.h. Member Data Documentation. ◆ fSolver. ROOT::Math::GSLSimAnnealing ROOT::Math::GSLSimAnMinimizer::fSolver. private . Definition at line 112 of file GSLSimAnMinimizer.h. Libraries for ROOT::Math::GSLSimAnMinimizer:. [legend]; T,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:5259,Security,access,accessor,5259,"ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an already existing variable ;  ; bool SetVariableLowerLimit (unsigned int ivar, double lower) override;  set the lower-limit of an already existing variable ;  ; bool SetVariableStepSize (unsigned int ivar, double step) override;  set the step size of an already existing variable ;  ; bool SetVariableUpperLimit (unsigned int ivar, double upper) override;  set the upper-limit of an already existing variable ;  ; bool SetVariableValue (unsigned int ivar, double val) override;  set the value of an existing variable ;  ; bool SetVariableValues (const double *x) override;  set the values of all existing variables (array must be dimensioned to the size of existing parameters) ;  ; virtual const double * StepSizes () const;  accessor methods ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return -1 if variable is not found ;  ; std::string VariableName (unsigned int ivar) const override;  get name of variables (override if minimizer support storing of variable names) ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:8547,Security,validat,validation,8547,"atrix (double *hMat) const;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; virtual bool GetMinosError (unsigned int ivar, double &errLow, double &errUp, int option=0);  minos error for variable i, return false if Minos failed or not supported and the lower and upper errors are returned in errLow and errUp An extra flag specifies if only the lower (option=-1) or the upper (option=+1) error calculation is run ;  ; virtual double GlobalCC (unsigned int ivar) const;  return global correlation coefficient for variable i This is a number between zero and one which gives the correlation between the i-th parameter and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:12767,Security,validat,validated,12767," ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Protected Member Functions; void DoSetMinimOptions (const GSLSimAnParams &params);  Set the Minimizer options from the simulated annealing parameters. ;  ; void DoSetSimAnParameters (const MinimizerOptions &opt);  set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ;  ;  Protected Member Functions inherited from ROOT::Math::BasicMinimizer; bool CheckDimension () const;  ; bool CheckObjFunction () const;  ; MinimTransformFunction * CreateTransformation (std::vector< double > &startValues, const ROOT::Math::IMultiGradFunction *func=nullptr);  ; void SetFinalValues (const double *x, const MinimTransformFunction *func=nullptr);  ; void SetMinValue (double val);  . Private Attributes; ROOT::Math::GSLSimAnnealing fSolver;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <Math/GSLSimAnMinimizer.h>. Inheritance diagram for ROOT::Math::GSLSimAnMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::GSLSimAnMinimizer ; (; int ; type = 0). Default constructor. ; Definition at line 33 of file GSLSimAnMinimizer.cxx. ◆ ~GSLSimAnMinimizer(). ROOT::Math::GSLSimAnMinimizer::~GSLSimAnMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimiz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html:390,Performance,perform,performing,390,". ROOT: ROOT::Math::GSLSimAnnealing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLSimAnnealing Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLSimAnnealing class for performing a simulated annealing search of a multidimensional function. ; Definition at line 193 of file GSLSimAnnealing.h. Public Member Functions;  GSLSimAnnealing ();  Default constructor. ;  ;  GSLSimAnnealing (const GSLSimAnnealing &)=delete;  ;  GSLSimAnnealing (GSLSimAnnealing &&)=delete;  ;  ~GSLSimAnnealing ();  Destructor (no operations) ;  ; GSLSimAnnealing & operator= (const GSLSimAnnealing &rhs)=delete;  ; GSLSimAnnealing & operator= (GSLSimAnnealing &&rhs)=delete;  ; GSLSimAnParams & Params ();  ; const GSLSimAnParams & Params () const;  ; void SetParams (const GSLSimAnParams &params);  ; int Solve (const ROOT::Math::IMultiGenFunction &func, const double *x0, const double *scale, double *xmin, bool debug=false);  solve the simulated annealing given a multi-dim function, the initial vector parameters and a vector containing the scaling factors for the parameters ;  ; int Solve (GSLSimAnFunc &func, bool debug=false);  solve the simulated annealing given a GSLSimAnFunc object The object will contain the initial state at the beginning and the final minimum state at the end ;  . Private Attributes; GSLSimAnParams fParams;  . #include <Math/GSLSimAnnealing.h>; Constructor & Destructor Documentation. ◆ GSLSimAnnealing() [1/3]. ROOT::Math::GSLSimAnnealing::GSLSimAnnealing ; (; ). Default constructor. ; Definition at line 174 of file GSLSimAnnealing.cxx. ◆ ~GSLSimAnnealing(). ROOT::Math::GSLSimAnnealing::~GSLSimAnnealing ; (; ). inline . Destructor (no operations) ; Definition at line 205 of file GSLSimAnnealing.h. ◆ GSLSimAnnealing() [2/3]. ROOT::Math::GSLSimAnnealing::GSLSimAnn",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnnealing.html
https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html:1345,Modifiability,inherit,inherited,1345,". ROOT: ROOT::Math::GSLVegasIntegrationWorkspace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLVegasIntegrationWorkspace Class Reference. ; workspace for VEGAS ; Definition at line 85 of file GSLMCIntegrationWorkspace.h. Public Member Functions;  GSLVegasIntegrationWorkspace (size_t dim=0);  ; double Chisq () const;  ; void Clear () override;  free the workspace deleting the GSL pointer ;  ; gsl_monte_vegas_state * GetWS ();  ; bool Init (size_t dim) override;  initialize the workspace creating the GSL pointer if it is not there ;  ; size_t NDim () const override;  ; std::unique_ptr< IOptions > Options () const override;  retrieve option pointer corresponding to parameters create a new object to be managed by the user ;  ; VegasParameters & Parameters ();  ; const VegasParameters & Parameters () const;  ; bool ReInit () override;  re-initialize an existing the workspace ;  ; double Result () const;  ; virtual void SetOptions (const ROOT::Math::IOptions &opt) override;  set options ;  ; void SetParameters (const struct VegasParameters &p);  ; double Sigma () const;  ; MCIntegration::Type Type () const override;  ;  Public Member Functions inherited from ROOT::Math::GSLMCIntegrationWorkspace;  GSLMCIntegrationWorkspace ();  ; virtual ~GSLMCIntegrationWorkspace ();  . Private Member Functions; void SetVegasParameters ();  . Private Attributes; VegasParameters fParams;  ; gsl_monte_vegas_state * fWs;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMCIntegrationWorkspace.h>. Inheritance diagram for ROOT::Math::GSLVegasIntegrationWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLVegasIntegrationWorkspace(). ROOT::Math::GSLVega",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLVegasIntegrationWorkspace.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html:803,Integrability,interface,interface,803,". ROOT: ROOT::Math::IBaseFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IBaseFunctionMultiDimTempl< T >Documentation for the abstract class IBaseFunctionMultiDim. ; Interface (abstract class) for generic functions objects of multi-dimension Provides a method to evaluate the function given a vector of coordinate values, by implementing operator() (const double *). In addition it defines the interface for copying functions via the pure virtual method Clone() and the interface for getting the function dimension via the NDim() method. Derived classes must implement the pure private virtual method DoEval(const double *) for the function evaluation in addition to NDim() and Clone(). ; Definition at line 61 of file IFunction.h. Public Types; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; virtual T DoEval (const T *x) const =0;  Implementation of the evaluation function. Must be implemented by derived classes. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BackendType. template<cl",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html:879,Integrability,interface,interface,879,". ROOT: ROOT::Math::IBaseFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IBaseFunctionMultiDimTempl< T >Documentation for the abstract class IBaseFunctionMultiDim. ; Interface (abstract class) for generic functions objects of multi-dimension Provides a method to evaluate the function given a vector of coordinate values, by implementing operator() (const double *). In addition it defines the interface for copying functions via the pure virtual method Clone() and the interface for getting the function dimension via the NDim() method. Derived classes must implement the pure private virtual method DoEval(const double *) for the function evaluation in addition to NDim() and Clone(). ; Definition at line 61 of file IFunction.h. Public Types; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; virtual T DoEval (const T *x) const =0;  Implementation of the evaluation function. Must be implemented by derived classes. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BackendType. template<cl",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html:623,Integrability,interface,interface,623,". ROOT: ROOT::Math::IBaseFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). ; In addition it defines the interface for copying functions via the pure virtual method Clone(). Derived classes must implement the pure virtual private method DoEval(double ) for the function evaluation in addition to Clone(). An interface for evaluating the function passing a vector (like for multidim functions) is also provided ; Definition at line 112 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoEval (double x) const =0;  implementation of the evaluation function. Must be implemented by derived classes ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IBaseFunctionOneDim::BaseFunc. Definition at line 116 of file IFunction.h. Constructor & Destructor Documentation. ◆ ~IBaseFunctionOneDim(). virtual ROOT::Math::IBaseFunctionOneDim::~IBaseFunctionOneDim ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html:826,Integrability,interface,interface,826,". ROOT: ROOT::Math::IBaseFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). ; In addition it defines the interface for copying functions via the pure virtual method Clone(). Derived classes must implement the pure virtual private method DoEval(double ) for the function evaluation in addition to Clone(). An interface for evaluating the function passing a vector (like for multidim functions) is also provided ; Definition at line 112 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoEval (double x) const =0;  implementation of the evaluation function. Must be implemented by derived classes ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IBaseFunctionOneDim::BaseFunc. Definition at line 116 of file IFunction.h. Constructor & Destructor Documentation. ◆ ~IBaseFunctionOneDim(). virtual ROOT::Math::IBaseFunctionOneDim::~IBaseFunctionOneDim ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html:535,Usability,simpl,simple,535,". ROOT: ROOT::Math::IBaseFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IBaseFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for generic functions objects of one-dimension Provides a method to evaluate the function given a value (simple double) by implementing operator() (const double ). ; In addition it defines the interface for copying functions via the pure virtual method Clone(). Derived classes must implement the pure virtual private method DoEval(double ) for the function evaluation in addition to Clone(). An interface for evaluating the function passing a vector (like for multidim functions) is also provided ; Definition at line 112 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoEval (double x) const =0;  implementation of the evaluation function. Must be implemented by derived classes ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IBaseFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IBaseFunctionOneDim::BaseFunc. Definition at line 116 of file IFunction.h. Constructor & Destructor Documentation. ◆ ~IBaseFunctionOneDim(). virtual ROOT::Math::IBaseFunctionOneDim::~IBaseFunctionOneDim ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html:410,Integrability,interface,interface,410,". ROOT: ROOT::Math::IBaseParam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IBaseParam Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Documentation for the abstract class IBaseParam. ; It defines the interface for dealing with the function parameters This is used only for internal convenience, to avoid redefining the Parameter API for the one and the multi-dim functions. Concrete class should derive from ROOT::Math::IParamFunction and not from this class. ; Definition at line 51 of file IParamFunction.h. Public Member Functions; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IBaseParam:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IBaseParam(). virtual ROOT::Math::IBaseParam::~IBaseParam ; (; ). inlinevirtual . Virtual Destructor (no operations) ; Definition at line 59 of file IParamFunction.h. Member Function Documentation. ◆ NPar(). virtual unsigned int ROOT::Math::IBaseParam::NPar ; (; ); const. pure virtual . Return the number of Parameters. ; Implemented in ROOT::Math::ParamFunction< IParamGradFunction >, ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::MultiDimParamGradFunctionAdapter, RO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html:508,Safety,avoid,avoid,508,". ROOT: ROOT::Math::IBaseParam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IBaseParam Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Documentation for the abstract class IBaseParam. ; It defines the interface for dealing with the function parameters This is used only for internal convenience, to avoid redefining the Parameter API for the one and the multi-dim functions. Concrete class should derive from ROOT::Math::IParamFunction and not from this class. ; Definition at line 51 of file IParamFunction.h. Public Member Functions; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IBaseParam:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IBaseParam(). virtual ROOT::Math::IBaseParam::~IBaseParam ; (; ). inlinevirtual . Virtual Destructor (no operations) ; Definition at line 59 of file IParamFunction.h. Member Function Documentation. ◆ NPar(). virtual unsigned int ROOT::Math::IBaseParam::NPar ; (; ); const. pure virtual . Return the number of Parameters. ; Implemented in ROOT::Math::ParamFunction< IParamGradFunction >, ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::MultiDimParamGradFunctionAdapter, RO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html:1027,Safety,avoid,avoid,1027,". ROOT: ROOT::Math::IBaseParam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IBaseParam Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Documentation for the abstract class IBaseParam. ; It defines the interface for dealing with the function parameters This is used only for internal convenience, to avoid redefining the Parameter API for the one and the multi-dim functions. Concrete class should derive from ROOT::Math::IParamFunction and not from this class. ; Definition at line 51 of file IParamFunction.h. Public Member Functions; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IBaseParam:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IBaseParam(). virtual ROOT::Math::IBaseParam::~IBaseParam ; (; ). inlinevirtual . Virtual Destructor (no operations) ; Definition at line 59 of file IParamFunction.h. Member Function Documentation. ◆ NPar(). virtual unsigned int ROOT::Math::IBaseParam::NPar ; (; ); const. pure virtual . Return the number of Parameters. ; Implemented in ROOT::Math::ParamFunction< IParamGradFunction >, ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::MultiDimParamGradFunctionAdapter, RO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html:2401,Safety,avoid,avoid,2401," Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IBaseParam(). virtual ROOT::Math::IBaseParam::~IBaseParam ; (; ). inlinevirtual . Virtual Destructor (no operations) ; Definition at line 59 of file IParamFunction.h. Member Function Documentation. ◆ NPar(). virtual unsigned int ROOT::Math::IBaseParam::NPar ; (; ); const. pure virtual . Return the number of Parameters. ; Implemented in ROOT::Math::ParamFunction< IParamGradFunction >, ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::MultiDimParamGradFunctionAdapter, ROOT::Math::WrappedParamFunction< FuncPtr >, ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile. ◆ ParameterName(). virtual std::string ROOT::Math::IBaseParam::ParameterName ; (; unsigned int ; i); const. inlinevirtual . Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile.; Definition at line 86 of file IParamFunction.h. ◆ Parameters(). virtual const double * ROOT::Math::IBaseParam::Parameters ; (; ); const. pure virtual . Access the parameter values. ; Implemented in ROOT::Math::ParamFunction< IParamGradFunction >, ROOT::Math::WrappedMultiTF1Templ< T >, ROOT::Math::WrappedTF1, ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::MultiDimParamGradFunctionAdapter, ROOT::Math::WrappedParamFunction< FuncPtr >, ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile. ◆ SetParameters(). virtual void ROOT::Math::IBaseParam::SetParameters ; (; const double * ; p). pure virtual . Set the parameter values. ; Parameters. ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IBaseParam.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IBaseParam.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:6422,Energy Efficiency,efficient,efficient,6422,"to evaluate the derivative with respect each coordinate. To be implemented by the derived class. . ◆ DoDerivativeWithPrevResult(). template<class T > . virtual T ROOT::Math::IGradientFunctionMultiDimTempl< T >::DoDerivativeWithPrevResult ; (; const T * ; x, . unsigned int ; icoord, . T * ; , . T * ; , . T * ;  . ); const. inlineprivatevirtual . In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ; The previous_* arrays can also be used to return second derivative and step size so that these can be passed forward again as well at the call site, if necessary. ; Definition at line 231 of file IFunction.h. ◆ FdF(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::FdF ; (; const T * ; x, . T & ; f, . T * ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time ; Definition at line 202 of file IFunction.h. ◆ Gradient(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::Gradient ; (; const T * ; x, . T * ; grad . ); const. inlinevirtual . Evaluate all the vector of function derivatives (gradient) at a point x. ; Derived classes must re-implement it if more efficient than evaluating one at a time ; Definition at line 177 of file IFunction.h. ◆ GradientWithPrevResult(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::GradientWithPrevResult ; (; const T * ; x, . T * ; grad, . T * ; previous_grad, . T * ; previous_g2, . T * ; previous_gstep . ); const. inlinevirtual . In some cases, the gradient algorithm will use information from the previous step, these can be passed in with",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:6951,Energy Efficiency,efficient,efficient,6951,"o that these can be passed forward again as well at the call site, if necessary. ; Definition at line 231 of file IFunction.h. ◆ FdF(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::FdF ; (; const T * ; x, . T & ; f, . T * ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time ; Definition at line 202 of file IFunction.h. ◆ Gradient(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::Gradient ; (; const T * ; x, . T * ; grad . ); const. inlinevirtual . Evaluate all the vector of function derivatives (gradient) at a point x. ; Derived classes must re-implement it if more efficient than evaluating one at a time ; Definition at line 177 of file IFunction.h. ◆ GradientWithPrevResult(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::GradientWithPrevResult ; (; const T * ; x, . T * ; grad, . T * ; previous_grad, . T * ; previous_g2, . T * ; previous_gstep . ); const. inlinevirtual . In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ; The previous_* arrays can also be used to return second derivative and step size so that these can be passed forward again as well at the call site, if necessary. ; Definition at line 188 of file IFunction.h. ◆ HasGradient(). template<class T > . bool ROOT::Math::IGradientFunctionMultiDimTempl< T >::HasGradient ; (; ); const. inlinevirtual . Reimplemented from ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 220 of file IFunction.h. ◆ NDim(). template<class T > . virtual unsigned int ROOT::Math::IBaseFunctionMultiDimTem",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:1150,Integrability,interface,interface,1150,"; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IGradientFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IGradientFunctionMultiDimTempl< T >Interface (abstract class) for multi-dimensional functions providing a gradient calculation. ; The method ROOT::Math::IFunction::Gradient calculates the full gradient vector, ROOT::Math::IFunction::Derivative calculates the partial derivative for each coordinate and ROOT::Math::Fdf calculates the gradient and the function value at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while Gradient and FdF are by default implemented using DoDerivative, butthey can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Gradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function. Three methods are provided:; Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/ . Definition at line 168 of file IFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, uns",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:1766,Modifiability,inherit,inherited,1766,"ve for each coordinate and ROOT::Math::Fdf calculates the gradient and the function value at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while Gradient and FdF are by default implemented using DoDerivative, butthey can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Gradient interface (abstract class) defining the signature for calculating the gradient of a multi-dimensional function. Three methods are provided:; Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/ . Definition at line 168 of file IFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:3028,Modifiability,inherit,inherited,3028,"ill use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual unsigned int NDim () const=0;  Retrieve the dimension of the function. ;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; virtual T DoDerivative (const T *x, unsigned int icoord) const =0;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  ; virtual T DoDerivativeWithPrevResult (const T *x, unsigned int icoord, T *, T *, T *) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IGradientFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef IBaseFunctionMultiDimTempl<T> ROOT::Math::IGradientFunctionMultiDimTempl< T ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html:6512,Performance,perform,performances,6512,"rtual T ROOT::Math::IGradientFunctionMultiDimTempl< T >::DoDerivativeWithPrevResult ; (; const T * ; x, . unsigned int ; icoord, . T * ; , . T * ; , . T * ;  . ); const. inlineprivatevirtual . In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ; The previous_* arrays can also be used to return second derivative and step size so that these can be passed forward again as well at the call site, if necessary. ; Definition at line 231 of file IFunction.h. ◆ FdF(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::FdF ; (; const T * ; x, . T & ; f, . T * ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time ; Definition at line 202 of file IFunction.h. ◆ Gradient(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::Gradient ; (; const T * ; x, . T * ; grad . ); const. inlinevirtual . Evaluate all the vector of function derivatives (gradient) at a point x. ; Derived classes must re-implement it if more efficient than evaluating one at a time ; Definition at line 177 of file IFunction.h. ◆ GradientWithPrevResult(). template<class T > . virtual void ROOT::Math::IGradientFunctionMultiDimTempl< T >::GradientWithPrevResult ; (; const T * ; x, . T * ; grad, . T * ; previous_grad, . T * ; previous_g2, . T * ; previous_gstep . ); const. inlinevirtual . In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ; The previous_* arrays can also be used to return second derivative and step size so that these can be passed forward again as well at t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:4614,Energy Efficiency,efficient,efficient,4614," at a point x Use the private method DoDerivative. ; Definition at line 263 of file IFunction.h. ◆ DoDerivative(). virtual double ROOT::Math::IGradientFunctionOneDim::DoDerivative ; (; double ; x); const. privatepure virtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::GradFunctor1D, and ROOT::Math::Polynomial. ◆ FdF() [1/2]. void ROOT::Math::IGradientFunctionOneDim::FdF ; (; const double * ; x, . double & ; f, . double * ; df . ); const. inline . Compatibility method with multi-dimensional interface for Gradient and function evaluation. ; Definition at line 282 of file IFunction.h. ◆ FdF() [2/2]. virtual void ROOT::Math::IGradientFunctionOneDim::FdF ; (; double ; x, . double & ; f, . double & ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time. ; Reimplemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial.; Definition at line 275 of file IFunction.h. ◆ Gradient(). void ROOT::Math::IGradientFunctionOneDim::Gradient ; (; const double * ; x, . double * ; g . ); const. inline . Compatibility method with multi-dimensional interface for Gradient. ; Definition at line 269 of file IFunction.h. ◆ HasGradient(). bool ROOT::Math::IGradientFunctionOneDim::HasGradient ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::IBaseFunctionOneDim.; Definition at line 284 of file IFunction.h. Libraries for ROOT::Math::IGradientFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IFunction.h. ROOTMathIGradientFunctionOneDim. ROOT master - Reference ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:937,Integrability,interface,interface,937,"ference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IGradientFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for one-dimensional functions providing a gradient calculation. ; The method ROOT::Math::IFunction::Derivative calculates the derivative and ROOT::Math::Fdf calculates the derivative and the function values at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while FdF is by default implemented using DoDerivative, but it can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Specialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ; Definition at line 254 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:1509,Integrability,interface,interface,1509,"providing a gradient calculation. ; The method ROOT::Math::IFunction::Derivative calculates the derivative and ROOT::Math::Fdf calculates the derivative and the function values at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while FdF is by default implemented using DoDerivative, but it can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Specialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ; Definition at line 254 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  E",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:1780,Integrability,interface,interface,1780,"ses, while FdF is by default implemented using DoDerivative, but it can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Specialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ; Definition at line 254 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoDerivative (double x) const =0;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  . #include <Math/IFunction.h>. Inheritance diagram for R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:2086,Integrability,interface,interface,2086," function, Derivative and a method to evaluate at the same time the function and the derivative FdF ; Definition at line 254 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoDerivative (double x) const =0;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IGradientFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IGradientFunctionOneDim::BaseFunc. Definition at line 258 of file IFunction.h. ◆ B",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:3373,Integrability,interface,interface,3373,"t double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoDerivative (double x) const =0;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IGradientFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IGradientFunctionOneDim::BaseFunc. Definition at line 258 of file IFunction.h. ◆ BaseGrad. typedef IGradientFunctionOneDim ROOT::Math::IGradientFunctionOneDim::BaseGrad. Definition at line 259 of file IFunction.h. Member Function Documentation. ◆ Derivative() [1/2]. double ROOT::Math::IGradientFunctionOneDim::Derivative ; (; const double * ; x); const. inline . Compatibility method with multi-dimensional interface for partial derivative. ; Definition at line 266 of file IFunction.h. ◆ Derivative() [2/2]. double ROOT::Math::IGradientFunctionOneDim::Derivative ; (; double ; x); const. inline . Return the derivative of the function at a point x Use the private method DoDerivative. ; Definition at line 263 of file IFunction.h. ◆ DoDerivative(). virtual double ROOT::Math::IGradientFunctionOneDim::DoDerivative ; (; double ; x); const. privatepure virtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::GradFunctor1D, and ROOT::Math::Polynomial. ◆ FdF() [1/2]. void ROOT::Math::IGradientFunctionOneDim::FdF ; (; const double * ; x, . double & ; f, . double * ; df . ); const. inline . Compatibility method with multi-dimensional interface for Gradient and function evaluation. ; Definition at line 282 of file IFunction.h. ◆ FdF() [2/2]. virtual void ROOT::Math::IGradientFunctionOne",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:4213,Integrability,interface,interface,4213,"rivative() [1/2]. double ROOT::Math::IGradientFunctionOneDim::Derivative ; (; const double * ; x); const. inline . Compatibility method with multi-dimensional interface for partial derivative. ; Definition at line 266 of file IFunction.h. ◆ Derivative() [2/2]. double ROOT::Math::IGradientFunctionOneDim::Derivative ; (; double ; x); const. inline . Return the derivative of the function at a point x Use the private method DoDerivative. ; Definition at line 263 of file IFunction.h. ◆ DoDerivative(). virtual double ROOT::Math::IGradientFunctionOneDim::DoDerivative ; (; double ; x); const. privatepure virtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::GradFunctor1D, and ROOT::Math::Polynomial. ◆ FdF() [1/2]. void ROOT::Math::IGradientFunctionOneDim::FdF ; (; const double * ; x, . double & ; f, . double * ; df . ); const. inline . Compatibility method with multi-dimensional interface for Gradient and function evaluation. ; Definition at line 282 of file IFunction.h. ◆ FdF() [2/2]. virtual void ROOT::Math::IGradientFunctionOneDim::FdF ; (; double ; x, . double & ; f, . double & ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time. ; Reimplemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial.; Definition at line 275 of file IFunction.h. ◆ Gradient(). void ROOT::Math::IGradientFunctionOneDim::Gradient ; (; const double * ; x, . double * ; g . ); const. inline . Compatibility method with multi-dimensional interface for Gradient. ; Definition at line 269 of file IFunction.h. ◆ HasGradient(). bool ROOT::Math::IGradientFunc",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:5097,Integrability,interface,interface,5097,"le IFunction.h. ◆ DoDerivative(). virtual double ROOT::Math::IGradientFunctionOneDim::DoDerivative ; (; double ; x); const. privatepure virtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::GradFunctor1D, and ROOT::Math::Polynomial. ◆ FdF() [1/2]. void ROOT::Math::IGradientFunctionOneDim::FdF ; (; const double * ; x, . double & ; f, . double * ; df . ); const. inline . Compatibility method with multi-dimensional interface for Gradient and function evaluation. ; Definition at line 282 of file IFunction.h. ◆ FdF() [2/2]. virtual void ROOT::Math::IGradientFunctionOneDim::FdF ; (; double ; x, . double & ; f, . double & ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time. ; Reimplemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial.; Definition at line 275 of file IFunction.h. ◆ Gradient(). void ROOT::Math::IGradientFunctionOneDim::Gradient ; (; const double * ; x, . double * ; g . ); const. inline . Compatibility method with multi-dimensional interface for Gradient. ; Definition at line 269 of file IFunction.h. ◆ HasGradient(). bool ROOT::Math::IGradientFunctionOneDim::HasGradient ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::IBaseFunctionOneDim.; Definition at line 284 of file IFunction.h. Libraries for ROOT::Math::IGradientFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IFunction.h. ROOTMathIGradientFunctionOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:1307,Modifiability,inherit,inherited,1307," Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Generic Function Evaluation Interfaces. ; Interface (abstract class) for one-dimensional functions providing a gradient calculation. ; The method ROOT::Math::IFunction::Derivative calculates the derivative and ROOT::Math::Fdf calculates the derivative and the function values at the same time. The pure private virtual method DoDerivative() must be implemented by the derived classes, while FdF is by default implemented using DoDerivative, but it can be overloaded by the derived classes to improve the efficiency in the derivative calculation.; Specialized Gradient interface(abstract class) for one dimensional functions It provides a method to evaluate the derivative of the function, Derivative and a method to evaluate at the same time the function and the derivative FdF ; Definition at line 254 of file IFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOn",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:2179,Modifiability,inherit,inherited,2179,"ctionOneDim BaseFunc;  ; typedef IGradientFunctionOneDim BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double Derivative (const double *x) const;  Compatibility method with multi-dimensional interface for partial derivative. ;  ; double Derivative (double x) const;  Return the derivative of the function at a point x Use the private method DoDerivative. ;  ; void FdF (const double *x, double &f, double *df) const;  Compatibility method with multi-dimensional interface for Gradient and function evaluation. ;  ; virtual void FdF (double x, double &f, double &df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; void Gradient (const double *x, double *g) const;  Compatibility method with multi-dimensional interface for Gradient. ;  ; bool HasGradient () const override;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; virtual double DoDerivative (double x) const =0;  Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ;  . #include <Math/IFunction.h>. Inheritance diagram for ROOT::Math::IGradientFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IGradientFunctionOneDim::BaseFunc. Definition at line 258 of file IFunction.h. ◆ BaseGrad. typedef IGradientFunctionOneDim ROOT::Math::IGradientFunctionOneDim::BaseGrad. Definition at line 259 of file IFunction.h. Member Function Documentation. ◆ Derivative()",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html:4704,Performance,perform,performances,4704,"le IFunction.h. ◆ DoDerivative(). virtual double ROOT::Math::IGradientFunctionOneDim::DoDerivative ; (; double ; x); const. privatepure virtual . Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class. ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::GradFunctor1D, and ROOT::Math::Polynomial. ◆ FdF() [1/2]. void ROOT::Math::IGradientFunctionOneDim::FdF ; (; const double * ; x, . double & ; f, . double * ; df . ); const. inline . Compatibility method with multi-dimensional interface for Gradient and function evaluation. ; Definition at line 282 of file IFunction.h. ◆ FdF() [2/2]. virtual void ROOT::Math::IGradientFunctionOneDim::FdF ; (; double ; x, . double & ; f, . double & ; df . ); const. inlinevirtual . Optimized method to evaluate at the same time the function value and derivative at a point x. ; Often both value and derivatives are needed and it is often more efficient to compute them at the same time. Derived class should implement this method if performances play an important role and if it is faster to evaluate value and derivative at the same time. ; Reimplemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial.; Definition at line 275 of file IFunction.h. ◆ Gradient(). void ROOT::Math::IGradientFunctionOneDim::Gradient ; (; const double * ; x, . double * ; g . ); const. inline . Compatibility method with multi-dimensional interface for Gradient. ; Definition at line 269 of file IFunction.h. ◆ HasGradient(). bool ROOT::Math::IGradientFunctionOneDim::HasGradient ; (; ); const. inlineoverridevirtual . Reimplemented from ROOT::Math::IBaseFunctionOneDim.; Definition at line 284 of file IFunction.h. Libraries for ROOT::Math::IGradientFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IFunction.h. ROOTMathIGradientFunctionOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IGradientFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:1129,Availability,toler,tolerance,1129,"List of all members ; ROOT::Math::IMinimizer1D Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Interface class for numerical methods for one-dimensional minimization. ; Definition at line 39 of file IMinimizer1D.h. Public Member Functions;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  ; virtual double FValLower () const =0;  Return function value at current lower bound of the minimization interval. ;  ; virtual double FValMinimum () const =0;  Return function value at current estimate of the minimum. ;  ; virtual double FValUpper () const =0;  Return function value at current upper bound of the minimization interval. ;  ; virtual int Iterations () const =0;  Return number of iteration used to find minimum. ;  ; virtual bool Minimize (int maxIter, double absTol, double relTol)=0;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; virtual const char * Name () const =0;  Return name of minimization algorithm. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  ; virtual double XLower () const =0;  Return current lower bound of the minimization interval. ;  ; virtual double XMinimum () const =0;  Return current estimate of the position of the minimum. ;  ; virtual double XUpper () const =0;  Return current upper bound of the minimization interval. ;  . #include <Math/IMinimizer1D.h>. Inheritance diagram for ROOT::Math::IMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IMinimizer1D(). ROOT::Math::IMinimizer1D::IMinimizer1D ; (; ). inline . Definition at line 43 ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:1308,Availability,error,error,1308,"List of all members ; ROOT::Math::IMinimizer1D Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Interface class for numerical methods for one-dimensional minimization. ; Definition at line 39 of file IMinimizer1D.h. Public Member Functions;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  ; virtual double FValLower () const =0;  Return function value at current lower bound of the minimization interval. ;  ; virtual double FValMinimum () const =0;  Return function value at current estimate of the minimum. ;  ; virtual double FValUpper () const =0;  Return function value at current upper bound of the minimization interval. ;  ; virtual int Iterations () const =0;  Return number of iteration used to find minimum. ;  ; virtual bool Minimize (int maxIter, double absTol, double relTol)=0;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; virtual const char * Name () const =0;  Return name of minimization algorithm. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  ; virtual double XLower () const =0;  Return current lower bound of the minimization interval. ;  ; virtual double XMinimum () const =0;  Return current estimate of the position of the minimum. ;  ; virtual double XUpper () const =0;  Return current upper bound of the minimization interval. ;  . #include <Math/IMinimizer1D.h>. Inheritance diagram for ROOT::Math::IMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IMinimizer1D(). ROOT::Math::IMinimizer1D::IMinimizer1D ; (; ). inline . Definition at line 43 ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:1369,Availability,error,error,1369,"List of all members ; ROOT::Math::IMinimizer1D Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Minimization. ; Interface class for numerical methods for one-dimensional minimization. ; Definition at line 39 of file IMinimizer1D.h. Public Member Functions;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  ; virtual double FValLower () const =0;  Return function value at current lower bound of the minimization interval. ;  ; virtual double FValMinimum () const =0;  Return function value at current estimate of the minimum. ;  ; virtual double FValUpper () const =0;  Return function value at current upper bound of the minimization interval. ;  ; virtual int Iterations () const =0;  Return number of iteration used to find minimum. ;  ; virtual bool Minimize (int maxIter, double absTol, double relTol)=0;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; virtual const char * Name () const =0;  Return name of minimization algorithm. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  ; virtual double XLower () const =0;  Return current lower bound of the minimization interval. ;  ; virtual double XMinimum () const =0;  Return current estimate of the position of the minimum. ;  ; virtual double XUpper () const =0;  Return current upper bound of the minimization interval. ;  . #include <Math/IMinimizer1D.h>. Inheritance diagram for ROOT::Math::IMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IMinimizer1D(). ROOT::Math::IMinimizer1D::IMinimizer1D ; (; ). inline . Definition at line 43 ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:3562,Availability,toler,tolerance,3562,"ble ROOT::Math::IMinimizer1D::FValMinimum ; (; ); const. pure virtual . Return function value at current estimate of the minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ FValUpper(). virtual double ROOT::Math::IMinimizer1D::FValUpper ; (; ); const. pure virtual . Return function value at current upper bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Iterations(). virtual int ROOT::Math::IMinimizer1D::Iterations ; (; ); const. pure virtual . Return number of iteration used to find minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Minimize(). virtual bool ROOT::Math::IMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). pure virtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::GSLMinimizer1D, and ROOT::Math::BrentMinimizer1D. ◆ Name(). virtual const char * ROOT::Math::IMinimizer1D::Name ; (; ); const. pure virtual . Return name of minimization algorithm. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Status(). virtual int ROOT::Math::IMinimizer1D::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XLower(). virtual double ROOT::Math::IMinimizer1D::XLower ; (; ); const. pure virtual . Return current lower bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XMinimum(). virtual double ROOT::Math::IMinimizer1D::XMinimum ; (; ); const. pure virtual .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:3741,Availability,error,error,3741,"ble ROOT::Math::IMinimizer1D::FValMinimum ; (; ); const. pure virtual . Return function value at current estimate of the minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ FValUpper(). virtual double ROOT::Math::IMinimizer1D::FValUpper ; (; ); const. pure virtual . Return function value at current upper bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Iterations(). virtual int ROOT::Math::IMinimizer1D::Iterations ; (; ); const. pure virtual . Return number of iteration used to find minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Minimize(). virtual bool ROOT::Math::IMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). pure virtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::GSLMinimizer1D, and ROOT::Math::BrentMinimizer1D. ◆ Name(). virtual const char * ROOT::Math::IMinimizer1D::Name ; (; ); const. pure virtual . Return name of minimization algorithm. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Status(). virtual int ROOT::Math::IMinimizer1D::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XLower(). virtual double ROOT::Math::IMinimizer1D::XLower ; (; ); const. pure virtual . Return current lower bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XMinimum(). virtual double ROOT::Math::IMinimizer1D::XMinimum ; (; ); const. pure virtual .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html:3802,Availability,error,error,3802,"ble ROOT::Math::IMinimizer1D::FValMinimum ; (; ); const. pure virtual . Return function value at current estimate of the minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ FValUpper(). virtual double ROOT::Math::IMinimizer1D::FValUpper ; (; ); const. pure virtual . Return function value at current upper bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Iterations(). virtual int ROOT::Math::IMinimizer1D::Iterations ; (; ); const. pure virtual . Return number of iteration used to find minimum. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Minimize(). virtual bool ROOT::Math::IMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol, . double ; relTol . ). pure virtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true if iterations converged successfully @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::GSLMinimizer1D, and ROOT::Math::BrentMinimizer1D. ◆ Name(). virtual const char * ROOT::Math::IMinimizer1D::Name ; (; ); const. pure virtual . Return name of minimization algorithm. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ Status(). virtual int ROOT::Math::IMinimizer1D::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XLower(). virtual double ROOT::Math::IMinimizer1D::XLower ; (; ); const. pure virtual . Return current lower bound of the minimization interval. ; Implemented in ROOT::Math::BrentMinimizer1D, and ROOT::Math::GSLMinimizer1D. ◆ XMinimum(). virtual double ROOT::Math::IMinimizer1D::XMinimum ; (; ); const. pure virtual .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IMinimizer1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IMinimizer1D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Plane3D.html:885,Availability,avail,available,885,". ROOT: ROOT::Math::Impl::Plane3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Impl::Plane3D< T > Class Template ReferenceMath » Physics Vectors. ; template<typename T = double>; class ROOT::Math::Impl::Plane3D< T >Class describing a geometrical plane in 3 dimensions. ; A Plane3D is a 2 dimensional surface spanned by two linearly independent vectors. The plane is described by the equation \( a*x + b*y + c*z + d = 0 \) where (a,b,c) are the components of the normal vector to the plane \( n = (a,b,c) \) and \( d = - n \dot x \), where x is any point belonging to plane. More information on the mathematics describing a plane in 3D is available on MathWord. The Plane3D class contains the 4 scalar values in T which represent the four coefficients, fA, fB, fC, fD. fA, fB, fC are the normal components normalized to 1, i.e. fA**2 + fB**2 + fC**2 = 1; See alsoOverview of the physics vector library ; Definition at line 53 of file Plane3D.h. Public Types; typedef PositionVector3D< Cartesian3D< T >, DefaultCoordinateSystemTag > Point;  ; typedef T Scalar;  ; typedef DisplacementVector3D< Cartesian3D< T >, DefaultCoordinateSystemTag > Vector;  . Public Member Functions;  Plane3D ();  default constructor create plane z = 0 ;  ; template<class T1 , class T2 , class U > ;  Plane3D (const DisplacementVector3D< T1, U > &n, const PositionVector3D< T2, U > &p);  Construct from a generic DisplacementVector3D (normal vector) and PositionVector3D (point coplanar to the plane) ;  ;  Plane3D (const Plane3D &)=default;  ;  Plane3D (const Point &p1, const Point &p2, const Point &p3);  constructor from three Cartesian point belonging to the plane ;  ; template<class T1 , class T2 , class T3 , class U > ;  Plane3D (const PositionVector3D< T1, U > &p1, co",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Plane3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Plane3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:12961,Availability,mask,mask,12961," CoordSystem , class Tag1 , class Tag2 > ; void Transform (const DisplacementVector3D< CoordSystem, Tag1 > &v1, DisplacementVector3D< CoordSystem, Tag2 > &v2) const;  Transformation operation for Displacement Vector of different coordinate systems. ;  ; template<class CoordSystem , class Tag1 , class Tag2 > ; void Transform (const PositionVector3D< CoordSystem, Tag1 > &p1, PositionVector3D< CoordSystem, Tag2 > &p2) const;  Transformation operation for points between different coordinate system tags. ;  ; Translation3D< T > Translation () const;  Get the translation representing the 3D transformation in a Cartesian vector. ;  . Protected Member Functions; void AssignFrom (const Rotation3D &r);  make transformation from only rotations (zero translation) ;  ; void AssignFrom (const Rotation3D &r, const Vector &v);  make transformation from first a rotation then a translation ;  ; void AssignFrom (const Vector &v);  make transformation from only translation (identity rotations) ;  ; void SetIdentity ();  Set identity transformation (identity rotation , zero translation) ;  ; template<typename SCALAR = T, typename std::enable_if<!std::is_arithmetic< SCALAR >::value >::type * = nullptr> ; void SetIdentity (const typename SCALAR::mask_type m);  Set identity transformation (identity rotation , zero translation) vectorised version that sets using a mask. ;  . Private Attributes; T fM [12];  . #include <Math/GenVector/Transform3D.h>; Member Typedef Documentation. ◆ Point. template<typename T = double> . typedef PositionVector3D<Cartesian3D<T>, DefaultCoordinateSystemTag> ROOT::Math::Impl::Transform3D< T >::Point. Definition at line 86 of file Transform3D.h. ◆ Scalar. template<typename T = double> . typedef T ROOT::Math::Impl::Transform3D< T >::Scalar. Definition at line 83 of file Transform3D.h. ◆ Vector. template<typename T = double> . typedef DisplacementVector3D<Cartesian3D<T>, DefaultCoordinateSystemTag> ROOT::Math::Impl::Transform3D< T >::Vector. Definition at line 85 of ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:28052,Availability,toler,tolerance,28052,"< T >::Inverse ; (; ); const. inline . Return the inverse of the transformation. ; Definition at line 877 of file Transform3D.h. ◆ Invert() [1/2]. template<typename T = double> . template<typename SCALAR = T, typename std::enable_if< std::is_arithmetic< SCALAR >::value >::type * = nullptr> . void ROOT::Math::Impl::Transform3D< T >::Invert ; (; ). inline . Invert the transformation in place (scalar) ; Definition at line 794 of file Transform3D.h. ◆ Invert() [2/2]. template<typename T = double> . template<typename SCALAR = T, typename std::enable_if<!std::is_arithmetic< SCALAR >::value >::type * = nullptr> . void ROOT::Math::Impl::Transform3D< T >::Invert ; (; ). inline . Invert the transformation in place (vectorised) ; Definition at line 829 of file Transform3D.h. ◆ operator!=(). template<typename T = double> . bool ROOT::Math::Impl::Transform3D< T >::operator!= ; (; const Transform3D< T > & ; rhs); const. inline . Inequality operator. ; Check equality for each element To do: use T tolerance ; Definition at line 899 of file Transform3D.h. ◆ operator()() [1/6]. template<typename T = double> . template<class CoordSystem > . DisplacementVector3D< CoordSystem > ROOT::Math::Impl::Transform3D< T >::operator() ; (; const DisplacementVector3D< CoordSystem > & ; v); const. inline . Transformation operation for Displacement Vector in any coordinate system. ; Definition at line 658 of file Transform3D.h. ◆ operator()() [2/6]. template<typename T = double> . template<class CoordSystem > . LorentzVector< CoordSystem > ROOT::Math::Impl::Transform3D< T >::operator() ; (; const LorentzVector< CoordSystem > & ; q); const. inline . Transformation operation for a Lorentz Vector in any coordinate system. ; Definition at line 743 of file Transform3D.h. ◆ operator()() [3/6]. template<typename T = double> . template<typename TYPE > . Plane3D< TYPE > ROOT::Math::Impl::Transform3D< T >::operator() ; (; const Plane3D< TYPE > & ; plane); const. inline . Transformation on a 3D plane. ; Definiti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:32665,Availability,toler,tolerance,32665,"ion at line 1037 of file Transform3D.h. ◆ operator*=(). template<class T > . Transform3D< T > & ROOT::Math::Impl::Transform3D< T >::operator*= ; (; const Transform3D< T > & ; t). inline . multiply (combine) with another transformation in place ; Definition at line 1014 of file Transform3D.h. ◆ operator=(). template<typename T = double> . template<class ForeignMatrix > . Transform3D< T > & ROOT::Math::Impl::Transform3D< T >::operator= ; (; const ForeignMatrix & ; m). inline . Construct from a linear algebra matrix of size at least 3x4, which must support operator()(i,j) to obtain elements (0,0) thru (2,3). ; The 3x3 sub-block is assumed to be the rotation part and the translations vector are described by the 4-th column ; Definition at line 458 of file Transform3D.h. ◆ operator==(). template<typename T = double> . bool ROOT::Math::Impl::Transform3D< T >::operator== ; (; const Transform3D< T > & ; rhs); const. inline . Equality operator. ; Check equality for each element To do: use T tolerance ; Definition at line 888 of file Transform3D.h. ◆ Rotation() [1/2]. template<typename T = double> . Rotation3D ROOT::Math::Impl::Transform3D< T >::Rotation ; (; ); const. inline . Get the 3D rotation representing the 3D transformation. ; Definition at line 575 of file Transform3D.h. ◆ Rotation() [2/2]. template<typename T = double> . template<class AnyRotation > . AnyRotation ROOT::Math::Impl::Transform3D< T >::Rotation ; (; ); const. inline . Get the rotation representing the 3D transformation. ; Definition at line 585 of file Transform3D.h. ◆ SetComponents() [1/2]. template<typename T = double> . template<class IT > . void ROOT::Math::Impl::Transform3D< T >::SetComponents ; (; IT ; begin, . IT ; end . ). inline . Set the 12 matrix components given an iterator to the start of the desired data, and another to the end (12 past start). ; Definition at line 473 of file Transform3D.h. ◆ SetComponents() [2/2]. template<typename T = double> . void ROOT::Math::Impl::Transform3D< T >::Se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:34538,Availability,mask,mask,34538,"ther to the end (12 past start). ; Definition at line 473 of file Transform3D.h. ◆ SetComponents() [2/2]. template<typename T = double> . void ROOT::Math::Impl::Transform3D< T >::SetComponents ; (; T ; xx, . T ; xy, . T ; xz, . T ; dx, . T ; yx, . T ; yy, . T ; yz, . T ; dy, . T ; zx, . T ; zy, . T ; zz, . T ; dz . ). inline . Set the components from 12 scalars. ; Definition at line 535 of file Transform3D.h. ◆ SetIdentity() [1/2]. template<typename T = double> . void ROOT::Math::Impl::Transform3D< T >::SetIdentity ; (; ). inlineprotected . Set identity transformation (identity rotation , zero translation) ; Definition at line 965 of file Transform3D.h. ◆ SetIdentity() [2/2]. template<typename T = double> . template<typename SCALAR = T, typename std::enable_if<!std::is_arithmetic< SCALAR >::value >::type * = nullptr> . void ROOT::Math::Impl::Transform3D< T >::SetIdentity ; (; const typename SCALAR::mask_type ; m). inlineprotected . Set identity transformation (identity rotation , zero translation) vectorised version that sets using a mask. ; Definition at line 987 of file Transform3D.h. ◆ SetTransformMatrix(). template<typename T = double> . template<class ForeignMatrix > . void ROOT::Math::Impl::Transform3D< T >::SetTransformMatrix ; (; const ForeignMatrix & ; m). inline . Set components from a linear algebra matrix of size at least 3x4, which must support operator()(i,j) to obtain elements (0,0) thru (2,3). ; The 3x3 sub-block is assumed to be the rotation part and the translations vector are described by the 4-th column ; Definition at line 512 of file Transform3D.h. ◆ Transform() [1/2]. template<typename T = double> . template<class CoordSystem , class Tag1 , class Tag2 > . void ROOT::Math::Impl::Transform3D< T >::Transform ; (; const DisplacementVector3D< CoordSystem, Tag1 > & ; v1, . DisplacementVector3D< CoordSystem, Tag2 > & ; v2 . ); const. inline . Transformation operation for Displacement Vector of different coordinate systems. ; Definition at line 733 of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:7671,Security,access,access,7671,"  ; template<class IT > ; void GetComponents (IT begin, IT end) const;  Get the 12 matrix components into data specified by an iterator begin and another to the end of the desired data (12 past start). ;  ; void GetComponents (T &xx, T &xy, T &xz, T &dx, T &yx, T &yy, T &yz, T &dy, T &zx, T &zy, T &zz, T &dz) const;  Get the components into 12 scalars. ;  ; template<class AnyRotation , class V > ; void GetDecomposition (AnyRotation &r, V &v) const;  Get the rotation and translation vector representing the 3D transformation in any rotation and any vector (the Translation class could also be used) ;  ; void GetDecomposition (Rotation3D &r, Vector &v) const;  Get the rotation and translation vector representing the 3D transformation. ;  ; template<class AnyRotation > ; void GetRotation (AnyRotation &r) const;  Get the rotation (any type) representing the 3D transformation. ;  ; template<class ForeignMatrix > ; void GetTransformMatrix (ForeignMatrix &m) const;  Get components into a linear algebra matrix of size at least 3x4, which must support operator()(i,j) for write access to elements (0,0) thru (2,3). ;  ; template<class AnyVector > ; void GetTranslation (AnyVector &v) const;  Get the translation representing the 3D transformation in any vector which implements the SetXYZ method. ;  ; Transform3D< T > Inverse () const;  Return the inverse of the transformation. ;  ; template<typename SCALAR = T, typename std::enable_if< std::is_arithmetic< SCALAR >::value >::type * = nullptr> ; void Invert ();  Invert the transformation in place (scalar) ;  ; template<typename SCALAR = T, typename std::enable_if<!std::is_arithmetic< SCALAR >::value >::type * = nullptr> ; void Invert ();  Invert the transformation in place (vectorised) ;  ; bool operator!= (const Transform3D< T > &rhs) const;  Inequality operator. ;  ; template<class CoordSystem > ; DisplacementVector3D< CoordSystem > operator() (const DisplacementVector3D< CoordSystem > &v) const;  Transformation operation for Displ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:26550,Security,access,access,26550,"ing the 3D transformation in any rotation and any vector (the Translation class could also be used) ; Definition at line 558 of file Transform3D.h. ◆ GetDecomposition() [2/2]. template<typename T = double> . void ROOT::Math::Impl::Transform3D< T >::GetDecomposition ; (; Rotation3D & ; r, . Vector & ; v . ); const. inline . Get the rotation and translation vector representing the 3D transformation. ; Definition at line 567 of file Transform3D.h. ◆ GetRotation(). template<typename T = double> . template<class AnyRotation > . void ROOT::Math::Impl::Transform3D< T >::GetRotation ; (; AnyRotation & ; r); const. inline . Get the rotation (any type) representing the 3D transformation. ; Definition at line 593 of file Transform3D.h. ◆ GetTransformMatrix(). template<typename T = double> . template<class ForeignMatrix > . void ROOT::Math::Impl::Transform3D< T >::GetTransformMatrix ; (; ForeignMatrix & ; m); const. inline . Get components into a linear algebra matrix of size at least 3x4, which must support operator()(i,j) for write access to elements (0,0) thru (2,3). ; Definition at line 525 of file Transform3D.h. ◆ GetTranslation(). template<typename T = double> . template<class AnyVector > . void ROOT::Math::Impl::Transform3D< T >::GetTranslation ; (; AnyVector & ; v); const. inline . Get the translation representing the 3D transformation in any vector which implements the SetXYZ method. ; Definition at line 607 of file Transform3D.h. ◆ Inverse(). template<typename T = double> . Transform3D< T > ROOT::Math::Impl::Transform3D< T >::Inverse ; (; ); const. inline . Return the inverse of the transformation. ; Definition at line 877 of file Transform3D.h. ◆ Invert() [1/2]. template<typename T = double> . template<typename SCALAR = T, typename std::enable_if< std::is_arithmetic< SCALAR >::value >::type * = nullptr> . void ROOT::Math::Impl::Transform3D< T >::Invert ; (; ). inline . Invert the transformation in place (scalar) ; Definition at line 794 of file Transform3D.h. ◆ Inver",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html:681,Usability,simpl,simple,681,". ROOT: ROOT::Math::Impl::Transform3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Impl::Transform3D< T > Class Template ReferenceMath » Physics Vectors. ; template<typename T = double>; class ROOT::Math::Impl::Transform3D< T >Basic 3D Transformation class describing a rotation and then a translation The internal data are a 3D rotation data (represented as a 3x3 matrix) and a 3D vector data. ; They are represented and held in this class like a 3x4 matrix (a simple array of 12 numbers).; The class can be constructed from any 3D rotation object (ROOT::Math::Rotation3D, ROOT::Math::AxisAngle, ROOT::Math::Quaternion, etc...) and/or a 3D Vector (ROOT::Math::DislacementVector3D or via ROOT::Math::Translation ) representing a Translation. The Transformation is defined by applying first the rotation and then the translation. A transformation defined by applying first a translation and then a rotation is equivalent to the transformation obtained applying first the rotation and then a translation equivalent to the rotated vector. The operator * can be used to obtain directly such transformations, in addition to combine various transformations. Keep in mind that the operator * (like in the case of rotations ) is not commutative. The operator * is used (in addition to operator() ) to apply a transformations on the vector (DisplacementVector3D and LorentzVector classes) and point (PositionVector3D) classes. In the case of Vector objects the transformation only rotates them and does not translate them. Only Point objects are able to be both rotated and translated.; See alsoOverview of the physics vector library ; Definition at line 80 of file Transform3D.h. Public Types; enum  ETransform3DMatrixIndex { ;   kXX = 0; , kXY = 1; , kXZ = 2; , kDX = 3; , ;   kYX = 4; , k",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Transform3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Translation3D.html:759,Performance,perform,performs,759,". ROOT: ROOT::Math::Impl::Translation3D< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Impl::Translation3D< T > Class Template ReferenceMath » Physics Vectors. ; template<typename T = double>; class ROOT::Math::Impl::Translation3D< T >Class describing a 3 dimensional translation. ; It can be combined (using the operator *) with the ROOT::Math::Rotation3D classes and ROOT::Math::Transform3D to obtained combined transformations and to operate on points and vectors. Note that a the translation applied to a Vector object (DisplacementVector3D and LorentzVector classes) performs a noop, i.e. it returns the same vector. A translation can be applied only to the Point objects (PositionVector3D classes).; See alsoOverview of the physics vector library ; Definition at line 53 of file Translation3D.h. Public Types; typedef T Scalar;  ; typedef DisplacementVector3D< Cartesian3D< T >, DefaultCoordinateSystemTag > Vector;  . Public Member Functions;  Translation3D ();  Default constructor ( zero translation ) ;  ; template<class CoordSystem , class Tag > ; constexpr Translation3D (const DisplacementVector3D< CoordSystem, Tag > &v);  Construct from any Displacement vector in ant tag and coordinate system. ;  ; template<class CoordSystem , class Tag > ;  Translation3D (const PositionVector3D< CoordSystem, Tag > &p1, const PositionVector3D< CoordSystem, Tag > &p2);  Construct transformation from one coordinate system defined one point (the origin) to a new coordinate system defined by other point (origin ) ;  ; template<class IT > ;  Translation3D (IT begin, IT end);  Construct given a pair of pointers or iterators defining the beginning and end of an array of 3 Scalars representing the z,y,z of the translation vector. ;  ;  Translation3D (T dx, T dy, T dz);  Construct from x,y,z values representing ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Impl_1_1Translation3D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Impl_1_1Translation3D.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html:536,Modifiability,inherit,inherited,536,". ROOT: ROOT::Math::IntegrandTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegrandTransform Class Reference. ; Auxiliary inner class for mapping infinite and semi-infinite integrals. ; Definition at line 234 of file GaussIntegrator.h. Public Types; enum  ESemiInfinitySign { kMinus = -1; , kPlus = +1; };  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  IntegrandTransform (const double boundary, ESemiInfinitySign sign, const IGenFunction *integrand);  ;  IntegrandTransform (const IGenFunction *integrand);  ; IGenFunction * Clone () const override;  Clone a function. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  ; double operator() (double x) const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x, double boundary, int sign) const;  . Private Attributes; double fBoundary;  ; bool fInfiniteInterval;  ; const IGenFunction * fIntegrand;  ; ESemiInfinitySign fSign;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::IntegrandTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESemiInfinitySign. enum ROOT::Math::IntegrandTransform::ESemiInfinitySign. EnumeratorkMinus ; kPlus . Definition at line 236 of file GaussIntegrator.h. Constructor & Destructor Documentation. ◆ In",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegrandTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html:1066,Modifiability,inherit,inherited,1066,"ing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegrandTransform Class Reference. ; Auxiliary inner class for mapping infinite and semi-infinite integrals. ; Definition at line 234 of file GaussIntegrator.h. Public Types; enum  ESemiInfinitySign { kMinus = -1; , kPlus = +1; };  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  IntegrandTransform (const double boundary, ESemiInfinitySign sign, const IGenFunction *integrand);  ;  IntegrandTransform (const IGenFunction *integrand);  ; IGenFunction * Clone () const override;  Clone a function. ;  ; double DoEval (double x) const override;  implementation of the evaluation function. Must be implemented by derived classes ;  ; double operator() (double x) const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  . Private Member Functions; double DoEval (double x, double boundary, int sign) const;  . Private Attributes; double fBoundary;  ; bool fInfiniteInterval;  ; const IGenFunction * fIntegrand;  ; ESemiInfinitySign fSign;  . #include <Math/GaussIntegrator.h>. Inheritance diagram for ROOT::Math::IntegrandTransform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESemiInfinitySign. enum ROOT::Math::IntegrandTransform::ESemiInfinitySign. EnumeratorkMinus ; kPlus . Definition at line 236 of file GaussIntegrator.h. Constructor & Destructor Documentation. ◆ IntegrandTransform() [1/2]. ROOT::Math::IntegrandTransform::IntegrandTransform ; (; const IGenFunction * ; integrand).",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegrandTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegrandTransform.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:1547,Availability,error,error,1547,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2366,Availability,toler,tolerance,2366,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2805,Availability,toler,tolerance,2805,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:6501,Availability,error,error,6501,"the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT::Math::IntegratorMultiDim::GetName ; (; IntegrationMultiDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 90 of file Integrator.cxx. ◆ GetType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:8874,Availability,toler,tolerance,8874," . const double * ; xmax . ). inline . evaluate the integral passing a new generic function ; Definition at line 134 of file IntegratorMultiDim.h. ◆ Name(). std::string ROOT::Math::IntegratorMultiDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 183 of file IntegratorMultiDim.h. ◆ operator=(). IntegratorMultiDim & ROOT::Math::IntegratorMultiDim::operator= ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 114 of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMult",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:9791,Availability,toler,tolerance,9791,"IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-dimensional integrator base class ; Definition at line 197 of file IntegratorMultiDim.h. Libraries for ROOT::Math::IntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorMultiDim.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:512,Deployability,integrat,integration,512,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:570,Deployability,integrat,integration,570,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:736,Deployability,integrat,integration,736,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:1535,Deployability,integrat,integration,1535,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:1625,Deployability,integrat,integrator,1625,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2151,Deployability,integrat,integrator,2151,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2297,Deployability,integrat,integration,2297,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2514,Deployability,integrat,integration,2514,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:3641,Deployability,integrat,integrator,3641,"ng the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorMultiDim * CreateIntegrator (IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4241,Deployability,integrat,integration,4241,"tor (IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4436,Deployability,integrat,integration,4436,"ratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4996,Deployability,integrat,integration,4996,"ntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5237,Deployability,integrat,integration,5237,"sional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * RO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5533,Deployability,integrat,integration,5533,"MultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5834,Deployability,integrat,integration,5834,"T, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:6489,Deployability,integrat,integration,6489,"the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT::Math::IntegratorMultiDim::GetName ; (; IntegrationMultiDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 90 of file Integrator.cxx. ◆ GetType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:6692,Deployability,integrat,integrator,6692,"tc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT::Math::IntegratorMultiDim::GetName ; (; IntegrationMultiDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 90 of file Integrator.cxx. ◆ GetType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new function ; Definition at line 127 of file Inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:8143,Deployability,integrat,integrator,8143,"ne 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new function ; Definition at line 127 of file IntegratorMultiDim.h. ◆ Integral() [3/3]. template<class Function > . double ROOT::Math::IntegratorMultiDim::Integral ; (; Function & ; f, . unsigned int ; dim, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new generic function ; Definition at line 134 of file IntegratorMultiDim.h. ◆ Name(). std::string ROOT::Math::IntegratorMultiDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 183 of file IntegratorMultiDim.h. ◆ operator=(). IntegratorMultiDim & ROOT::Math::IntegratorMultiDim::operator= ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 114 of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:8688,Deployability,integrat,integration,8688,"file IntegratorMultiDim.h. ◆ Integral() [3/3]. template<class Function > . double ROOT::Math::IntegratorMultiDim::Integral ; (; Function & ; f, . unsigned int ; dim, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new generic function ; Definition at line 134 of file IntegratorMultiDim.h. ◆ Name(). std::string ROOT::Math::IntegratorMultiDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 183 of file IntegratorMultiDim.h. ◆ operator=(). IntegratorMultiDim & ROOT::Math::IntegratorMultiDim::operator= ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 114 of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::Int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:9270,Deployability,integrat,integration,9270,"of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:10374,Deployability,integrat,integrator,10374,"IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-dimensional integrator base class ; Definition at line 197 of file IntegratorMultiDim.h. Libraries for ROOT::Math::IntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorMultiDim.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:543,Energy Efficiency,adapt,adaptive,543,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4295,Energy Efficiency,adapt,adaptive,4295,"le relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file Integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4987,Energy Efficiency,adapt,adaptive,4987,"ntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5096,Energy Efficiency,adapt,adaptive,5096,"Tol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5524,Energy Efficiency,adapt,adaptive,5524,"MultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5693,Energy Efficiency,adapt,adaptive,5693,"ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:512,Integrability,integrat,integration,512,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:570,Integrability,integrat,integration,570,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:736,Integrability,integrat,integration,736,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:1535,Integrability,integrat,integration,1535,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:1625,Integrability,integrat,integrator,1625,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2151,Integrability,integrat,integrator,2151,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2297,Integrability,integrat,integration,2297,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:2514,Integrability,integrat,integration,2514,"Dim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned int dim, const double *xmin, const double *xmax);  evaluate the integral passing a new generic function ;  ; std::string Name () const;  return name of integrator ;  ; ROOT::Math::IntegratorMultiDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return result of last integration ;  ; void SetAbsTolerance (double absTol);  set absolute tolerance ;  ; void SetFunction (const IMultiGenFunction &f);  ; template<class Function > ; void SetFunction (Function &f, unsigned int dim);  set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; Vi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:3641,Integrability,integrat,integrator,3641,"ng the operator()(double *x) The dimension of the function is in this case required ;  ; void SetOptions (const ROOT::Math::IntegratorMultiDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTol);  set the relative tolerance ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationMultiDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationMultiDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorMultiDim * CreateIntegrator (IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4241,Integrability,integrat,integration,4241,"tor (IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4436,Integrability,integrat,integration,4436,"ratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4996,Integrability,integrat,integration,4996,"ntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5061,Integrability,interface,interface,5061,"Tol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5237,Integrability,integrat,integration,5237,"sional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * RO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5533,Integrability,integrat,integration,5533,"MultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5834,Integrability,integrat,integration,5834,"T, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:6489,Integrability,integrat,integration,6489,"the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT::Math::IntegratorMultiDim::GetName ; (; IntegrationMultiDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 90 of file Integrator.cxx. ◆ GetType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:6692,Integrability,integrat,integrator,6692,"tc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 180 of file IntegratorMultiDim.h. ◆ GetName(). std::string ROOT::Math::IntegratorMultiDim::GetName ; (; IntegrationMultiDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 90 of file Integrator.cxx. ◆ GetType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new function ; Definition at line 127 of file Inte",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:8143,Integrability,integrat,integrator,8143,"ne 78 of file Integrator.cxx. ◆ Integral() [1/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral with the previously given function between xmin[] and xmax[] ; Definition at line 122 of file IntegratorMultiDim.h. ◆ Integral() [2/3]. double ROOT::Math::IntegratorMultiDim::Integral ; (; const IMultiGenFunction & ; f, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new function ; Definition at line 127 of file IntegratorMultiDim.h. ◆ Integral() [3/3]. template<class Function > . double ROOT::Math::IntegratorMultiDim::Integral ; (; Function & ; f, . unsigned int ; dim, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new generic function ; Definition at line 134 of file IntegratorMultiDim.h. ◆ Name(). std::string ROOT::Math::IntegratorMultiDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 183 of file IntegratorMultiDim.h. ◆ operator=(). IntegratorMultiDim & ROOT::Math::IntegratorMultiDim::operator= ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 114 of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:8688,Integrability,integrat,integration,8688,"file IntegratorMultiDim.h. ◆ Integral() [3/3]. template<class Function > . double ROOT::Math::IntegratorMultiDim::Integral ; (; Function & ; f, . unsigned int ; dim, . const double * ; xmin, . const double * ; xmax . ). inline . evaluate the integral passing a new generic function ; Definition at line 134 of file IntegratorMultiDim.h. ◆ Name(). std::string ROOT::Math::IntegratorMultiDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 183 of file IntegratorMultiDim.h. ◆ operator=(). IntegratorMultiDim & ROOT::Math::IntegratorMultiDim::operator= ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 114 of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::Int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:9270,Integrability,integrat,integration,9270,"of file IntegratorMultiDim.h. ◆ Options(). ROOT::Math::IntegratorMultiDimOptions ROOT::Math::IntegratorMultiDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 177 of file IntegratorMultiDim.h. ◆ Result(). double ROOT::Math::IntegratorMultiDim::Result ; (; ); const. inline . return result of last integration ; Definition at line 156 of file IntegratorMultiDim.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:10374,Integrability,integrat,integrator,10374,"IntegratorMultiDim::SetAbsTolerance ; (; double ; absTol). inline . set absolute tolerance ; Definition at line 171 of file IntegratorMultiDim.h. ◆ SetFunction() [1/2]. void ROOT::Math::IntegratorMultiDim::SetFunction ; (; const IMultiGenFunction & ; f). inline . Definition at line 151 of file IntegratorMultiDim.h. ◆ SetFunction() [2/2]. template<class Function > . void ROOT::Math::IntegratorMultiDim::SetFunction ; (; Function & ; f, . unsigned int ; dim . ). inline . set integration function using a generic function implementing the operator()(double *x) The dimension of the function is in this case required ; Definition at line 145 of file IntegratorMultiDim.h. ◆ SetOptions(). void ROOT::Math::IntegratorMultiDim::SetOptions ; (; const ROOT::Math::IntegratorMultiDimOptions & ; opt). inline . set the options ; Definition at line 174 of file IntegratorMultiDim.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorMultiDim::SetRelTolerance ; (; double ; relTol). inline . set the relative tolerance ; Definition at line 168 of file IntegratorMultiDim.h. ◆ Status(). int ROOT::Math::IntegratorMultiDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 162 of file IntegratorMultiDim.h. Member Data Documentation. ◆ fFunc. std::unique_ptr<IMultiGenFunction> ROOT::Math::IntegratorMultiDim::fFunc. private . pointer to owned function ; Definition at line 198 of file IntegratorMultiDim.h. ◆ fIntegrator. VirtualIntegratorMultiDim* ROOT::Math::IntegratorMultiDim::fIntegrator. private . pointer to multi-dimensional integrator base class ; Definition at line 197 of file IntegratorMultiDim.h. Libraries for ROOT::Math::IntegratorMultiDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorMultiDim.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorMultiDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:543,Modifiability,adapt,adaptive,543,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:713,Modifiability,plug-in,plug-in,713,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4295,Modifiability,adapt,adaptive,4295,"le relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file Integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4987,Modifiability,adapt,adaptive,4987,"ntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMul",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5096,Modifiability,adapt,adaptive,5096,"Tol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 1",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5524,Modifiability,adapt,adaptive,5524,"MultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:5693,Modifiability,adapt,adaptive,5693,"ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file IntegratorMultiDim.h. ◆ ~IntegratorMultiDim(). virtual ROOT::Math::IntegratorMultiDim::~IntegratorMultiDim ; (; ). inlinevirtual . Template Constructor of multi dimensional Integrator passing a generic function. ; By default uses the adaptive integration method; Parameters. fintegration function (generic function implementing operator()(const double *) ; dimfunction dimension ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) destructor . Definition at line 105 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [3/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IntegratorMultiDim & ; ). inlineprivate . Definition at line 113 of file IntegratorMultiDim.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::CreateIntegrator ; (; IntegrationMultiDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; ncall . ). protected . Definition at line 178 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorMultiDim::Error ; (; ); const. inline . return integration error ; Definition at line 159 of file IntegratorMultiDim.h. ◆ GetIntegrator(). VirtualIntegratorMultiDim * ROOT::Math::IntegratorMultiDim::G",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:484,Performance,perform,performing,484,". ROOT: ROOT::Math::IntegratorMultiDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorMultiDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User class for performing multidimensional integration. ; By default uses adaptive multi-dimensional integration using the algorithm from Genz Mallik implemented in the class ROOT::Math::AdaptiveIntegratorMultiDim otherwise it can uses via the plug-in manager the MC integration class (ROOT::Math::GSLMCIntegration) from MathMore. ; Definition at line 47 of file IntegratorMultiDim.h. Public Types; typedef IntegrationMultiDim::Type Type;  . Public Member Functions;  IntegratorMultiDim (const IMultiGenFunction &f, IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic Constructor of multi dimensional Integrator passing a function. ;  ;  IntegratorMultiDim (IntegrationMultiDim::Type type=IntegrationMultiDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int ncall=0);  Generic constructor of multi dimensional Integrator. ;  ; virtual ~IntegratorMultiDim ();  Template Constructor of multi dimensional Integrator passing a generic function. ;  ; double Error () const;  return integration error ;  ; VirtualIntegratorMultiDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral (const double *xmin, const double *xmax);  evaluate the integral with the previously given function between xmin[] and xmax[] ;  ; double Integral (const IMultiGenFunction &f, const double *xmin, const double *xmax);  evaluate the integral passing a new function ;  ; template<class Function > ; double Integral (Function &f, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:1893,Availability,toler,tolerance,1893,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:2142,Availability,toler,tolerance,2142,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:3504,Availability,toler,tolerance,3504,"ator ();  ; static IntegrationMultiDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNCalls ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNCalls (unsigned int ncall);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorMultiDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorMultiDimOptions() [1/2]. ROOT::Math::IntegratorMultiDimOptions::IntegratorMultiDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 285 of file IntegratorOptions.cxx. ◆ ~IntegratorMultiDimOptions(). ROOT::Math::IntegratorMultiDimOptions::~IntegratorMultiDimOptions ; (; ). inlineoverride . Definition at line 203 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:3707,Availability,toler,tolerance,3707,"ator ();  ; static IntegrationMultiDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNCalls ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNCalls (unsigned int ncall);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorMultiDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorMultiDimOptions() [1/2]. ROOT::Math::IntegratorMultiDimOptions::IntegratorMultiDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 285 of file IntegratorOptions.cxx. ◆ ~IntegratorMultiDimOptions(). ROOT::Math::IntegratorMultiDimOptions::~IntegratorMultiDimOptions ; (; ). inlineoverride . Definition at line 203 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:415,Deployability,integrat,integration,415,. ROOT: ROOT::Math::IntegratorMultiDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorMultiDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical multi dimensional integration options. ; Definition at line 194 of file IntegratorOptions.h. Public Member Functions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtra,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:854,Deployability,integrat,integrator,854,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:934,Deployability,integrat,integrator,934,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:1282,Deployability,integrat,integrator,1282,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:6276,Deployability,integrat,integrator,6276, IntegratorMultiDim::Type ROOT::Math::IntegratorMultiDimOptions::DefaultIntegratorType ; (; ). static . Definition at line 341 of file IntegratorOptions.cxx. ◆ DefaultNCalls(). unsigned int ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls ; (; ). static . Definition at line 370 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorMultiDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 368 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorMultiDimOptions::DefaultWKSize ; (; ). static . Definition at line 369 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorMultiDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 378 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorMultiDimOptions::Integrator ; (; ); const. overridevirtual . name of multi-dim integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 308 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 228 of file IntegratorOptions.h. ◆ NCalls(). unsigned int ROOT::Math::IntegratorMultiDimOptions::NCalls ; (; ); const. inline . maximum number of function calls ; Definition at line 222 of file IntegratorOptions.h. ◆ operator=(). IntegratorMultiDimOptions & ROOT::Math::IntegratorMultiDimOptions::operator= ; (; const IntegratorMultiDimOptions & ; rhs). inline . assignment operator ; Definition at line 211 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorMultiDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:6526,Deployability,integrat,integrator,6526," at line 370 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorMultiDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 368 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorMultiDimOptions::DefaultWKSize ; (; ). static . Definition at line 369 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorMultiDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 378 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorMultiDimOptions::Integrator ; (; ); const. overridevirtual . name of multi-dim integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 308 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 228 of file IntegratorOptions.h. ◆ NCalls(). unsigned int ROOT::Math::IntegratorMultiDimOptions::NCalls ; (; ); const. inline . maximum number of function calls ; Definition at line 222 of file IntegratorOptions.h. ◆ operator=(). IntegratorMultiDimOptions & ROOT::Math::IntegratorMultiDimOptions::operator= ; (; const IntegratorMultiDimOptions & ; rhs). inline . assignment operator ; Definition at line 211 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorMultiDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 320 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetD",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:8492,Deployability,integrat,integrator,8492,"; const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 320 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 347 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 326 of file IntegratorOptions.cxx. ◆ SetDefaultNCalls(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultNCalls ; (; unsigned int ; ncall). static . Definition at line 361 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 352 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 357 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorMultiDimOptions::SetIntegrator ; (; const char * ; name). set multi-dim integrator name ; Definition at line 302 of file IntegratorOptions.cxx. ◆ SetNCalls(). void ROOT::Math::IntegratorMultiDimOptions::SetNCalls ; (; unsigned int ; calls). inline . set maximum number of function calls ; Definition at line 219 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorMultiDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorMultiDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:415,Integrability,integrat,integration,415,. ROOT: ROOT::Math::IntegratorMultiDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorMultiDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical multi dimensional integration options. ; Definition at line 194 of file IntegratorOptions.h. Public Member Functions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtra,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:854,Integrability,integrat,integrator,854,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:934,Integrability,integrat,integrator,934,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:1282,Integrability,integrat,integrator,1282,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:6276,Integrability,integrat,integrator,6276, IntegratorMultiDim::Type ROOT::Math::IntegratorMultiDimOptions::DefaultIntegratorType ; (; ). static . Definition at line 341 of file IntegratorOptions.cxx. ◆ DefaultNCalls(). unsigned int ROOT::Math::IntegratorMultiDimOptions::DefaultNCalls ; (; ). static . Definition at line 370 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorMultiDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 368 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorMultiDimOptions::DefaultWKSize ; (; ). static . Definition at line 369 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorMultiDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 378 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorMultiDimOptions::Integrator ; (; ); const. overridevirtual . name of multi-dim integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 308 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 228 of file IntegratorOptions.h. ◆ NCalls(). unsigned int ROOT::Math::IntegratorMultiDimOptions::NCalls ; (; ); const. inline . maximum number of function calls ; Definition at line 222 of file IntegratorOptions.h. ◆ operator=(). IntegratorMultiDimOptions & ROOT::Math::IntegratorMultiDimOptions::operator= ; (; const IntegratorMultiDimOptions & ; rhs). inline . assignment operator ; Definition at line 211 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorMultiDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const ,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:6526,Integrability,integrat,integrator,6526," at line 370 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorMultiDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 368 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorMultiDimOptions::DefaultWKSize ; (; ). static . Definition at line 369 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorMultiDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 378 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorMultiDimOptions::Integrator ; (; ); const. overridevirtual . name of multi-dim integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 308 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 228 of file IntegratorOptions.h. ◆ NCalls(). unsigned int ROOT::Math::IntegratorMultiDimOptions::NCalls ; (; ); const. inline . maximum number of function calls ; Definition at line 222 of file IntegratorOptions.h. ◆ operator=(). IntegratorMultiDimOptions & ROOT::Math::IntegratorMultiDimOptions::operator= ; (; const IntegratorMultiDimOptions & ; rhs). inline . assignment operator ; Definition at line 211 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorMultiDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 320 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetD",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:8492,Integrability,integrat,integrator,8492,"; const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 320 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 347 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 326 of file IntegratorOptions.cxx. ◆ SetDefaultNCalls(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultNCalls ; (; unsigned int ; ncall). static . Definition at line 361 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 352 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 357 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorMultiDimOptions::SetIntegrator ; (; const char * ; name). set multi-dim integrator name ; Definition at line 302 of file IntegratorOptions.cxx. ◆ SetNCalls(). void ROOT::Math::IntegratorMultiDimOptions::SetNCalls ; (; unsigned int ; calls). inline . set maximum number of function calls ; Definition at line 219 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorMultiDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorMultiDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:1408,Modifiability,inherit,inherited,1408,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:3238,Modifiability,inherit,inherited,3238,"ator ();  ; static IntegrationMultiDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNCalls ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNCalls (unsigned int ncall);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorMultiDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorMultiDimOptions() [1/2]. ROOT::Math::IntegratorMultiDimOptions::IntegratorMultiDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 285 of file IntegratorOptions.cxx. ◆ ~IntegratorMultiDimOptions(). ROOT::Math::IntegratorMultiDimOptions::~IntegratorMultiDimOptions ; (; ). inlineoverride . Definition at line 203 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:3422,Modifiability,inherit,inherited,3422,"ator ();  ; static IntegrationMultiDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNCalls ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNCalls (unsigned int ncall);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorMultiDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorMultiDimOptions() [1/2]. ROOT::Math::IntegratorMultiDimOptions::IntegratorMultiDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 285 of file IntegratorOptions.cxx. ◆ ~IntegratorMultiDimOptions(). ROOT::Math::IntegratorMultiDimOptions::~IntegratorMultiDimOptions ; (; ). inlineoverride . Definition at line 203 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:1581,Safety,avoid,avoid,1581,ions;  IntegratorMultiDimOptions (const IntegratorMultiDimOptions &rhs);  copy constructor ;  ;  IntegratorMultiDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorMultiDimOptions () override;  ; std::string Integrator () const override;  name of multi-dim integrator ;  ; IntegrationMultiDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NCalls () const;  maximum number of function calls ;  ; IntegratorMultiDimOptions & operator= (const IntegratorMultiDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set multi-dim integrator name ;  ; void SetNCalls (unsigned int calls);  set maximum number of function calls ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationMultiDim,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:3341,Safety,avoid,avoid,3341,"ator ();  ; static IntegrationMultiDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNCalls ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNCalls (unsigned int ncall);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorMultiDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorMultiDimOptions() [1/2]. ROOT::Math::IntegratorMultiDimOptions::IntegratorMultiDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 285 of file IntegratorOptions.cxx. ◆ ~IntegratorMultiDimOptions(). ROOT::Math::IntegratorMultiDimOptions::~IntegratorMultiDimOptions ; (; ). inlineoverride . Definition at line 203 of fil",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9233,Availability,toler,tolerance,9233,"kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The alg",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9309,Availability,toler,tolerance,9309," (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative toler",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9359,Availability,toler,tolerance,9359,"AUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10207,Availability,toler,tolerance,10207,"e, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10283,Availability,toler,tolerance,10283," stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10333,Availability,toler,tolerance,10333,"ximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorOneDim::Error ; (; ); const. inline . return the esti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:501,Deployability,integrat,integration,501,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:602,Deployability,integrat,integration,602,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:703,Deployability,integrat,integration,703,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:787,Deployability,integrat,integration,787,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:828,Deployability,integrat,integration,828,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:908,Deployability,integrat,integration,908,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1032,Deployability,integrat,integration,1032,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1149,Deployability,integrat,integration,1149,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1201,Deployability,integrat,integration,1201,"mber Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1316,Deployability,integrat,integration,1316,"» MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1723,Deployability,integrat,integration,1723,"ten in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:2900,Deployability,integrat,integrator,2900,"pe;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;  ; double Error () const;  return the estimate of the absolute Error of the last Integral calculation ;  ; VirtualIntegratorOneDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral ();  evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ;  ; double Integral (const IGenFunction &f);  evaluate the Integral of a function f over the infinite interval (-inf,+inf) ;  ; double Integral (const IGenFunction &f, const std::vector< double > &pts);  evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ;  ; double Integral (const IGenFunction &f, double a, double b);  evaluate the Integral of a function f over the defined interval (a,b) ;  ; double Integral (const std::vector< double > &pts);  evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ;  ; double Integral (double a, double b);  evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction m",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:5549,Deployability,integrat,integrator,5549,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:5656,Deployability,integrat,integrator,5656,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:6124,Deployability,integrat,integration,6124,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:6231,Deployability,integrat,integration,6231,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:6378,Deployability,integrat,integration,6378,"Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7345,Deployability,integrat,integrator,7345,"<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:8119,Deployability,integrat,integration,8119,"  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9427,Deployability,integrat,integration,9427,"AUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10401,Deployability,integrat,integration,10401,"ximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorOneDim::Error ; (; ); const. inline . return the esti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:11610,Deployability,integrat,integrator,11610,"rOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorOneDim::Error ; (; ); const. inline . return the estimate of the absolute Error of the last Integral calculation ; Definition at line 416 of file Integrator.h. ◆ GetIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 446 of file Integrator.h. ◆ GetName(). std::string ROOT::Math::IntegratorOneDim::GetName ; (; IntegrationOneDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 66 of file Integrator.cxx. ◆ GetType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 53 of file Integrator.cxx. ◆ Integral() [1/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; ). inline . evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13209,Deployability,integrat,integration,13209,"the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower ed",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13652,Deployability,integrat,integration,13652,"n interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13695,Deployability,integrat,integration,13695,"n interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14218,Deployability,integrat,integration,14218,"ion Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14593,Deployability,integrat,integration,14593,"tion interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14636,Deployability,integrat,integration,14636,"tion interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:15238,Deployability,integrat,integration,15238,"l ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:15703,Deployability,integrat,integration,15703,"f file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ Integr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:15746,Deployability,integrat,integration,15746,"f file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ Integr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:16230,Deployability,integrat,integration,16230," of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:16273,Deployability,integrat,integration,16273," of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17113,Deployability,integrat,integration,17113,"rameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const I",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17156,Deployability,integrat,integration,17156,"rameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const I",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17597,Deployability,integrat,integration,17597,"unction f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17957,Deployability,integrat,integration,17957,"ngularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18360,Deployability,integrat,integration,18360,"(; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 38",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18709,Deployability,integrat,integration,18709,"tegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18873,Deployability,integrat,integrator,18873,"ntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:19076,Deployability,integrat,integrator,19076,"ralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. voi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20237,Deployability,integrat,integration,20237,"double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Mat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20457,Deployability,integrat,integration,20457,"tion at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20664,Deployability,integrat,integration,20664,"at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20971,Deployability,integrat,integration,20971,"e). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 421 of file Integrator.h. Member Data Documentation. ◆ fFunc. IGenFunction* ROOT::Math::IntegratorOneDim::fFunc. private . pointer to owned function ; Definition at line 475 of file Integrator.h. ◆ fIntegrator. VirtualIntegratorOneDim* ROOT::Math::IntegratorOneDim::fIntegrat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:21999,Deployability,integrat,integrator,21999," unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 421 of file Integrator.h. Member Data Documentation. ◆ fFunc. IGenFunction* ROOT::Math::IntegratorOneDim::fFunc. private . pointer to owned function ; Definition at line 475 of file Integrator.h. ◆ fIntegrator. VirtualIntegratorOneDim* ROOT::Math::IntegratorOneDim::fIntegrator. private . pointer to integrator interface class ; Definition at line 474 of file Integrator.h. Libraries for ROOT::Math::IntegratorOneDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Integrator.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:761,Energy Efficiency,adapt,adaptive,761,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:778,Energy Efficiency,adapt,adaptive,778,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1023,Energy Efficiency,adapt,adaptive,1023,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:2636,Energy Efficiency,adapt,adaptive,2636,"pe. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;  ; double Error () const;  return the estimate of the absolute Error of the last Integral calculation ;  ; VirtualIntegratorOneDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral ();  evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ;  ; double Integral (const IGenFunction &f);  evaluate the Integral of a function f over the infinite interval (-inf,+inf) ;  ; double Integral (const IGenFunction &f, const std::vector< double > &pts);  evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ;  ; double Integral (const IGenFunction &f, double a, double b);  evaluate the Integral of a function f over the defined interval (a,b) ;  ; double Int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7922,Energy Efficiency,adapt,adaptive,7922,"tion from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7968,Energy Efficiency,adapt,adaptive,7968,"m * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7982,Energy Efficiency,adapt,adaptive,7982,"m * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9177,Energy Efficiency,adapt,adaptive,9177,"ossible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adap",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9191,Energy Efficiency,adapt,adaptive,9191,"ossible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adap",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10151,Energy Efficiency,adapt,adaptive,10151,"tion (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10165,Energy Efficiency,adapt,adaptive,10165,"tion (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:501,Integrability,integrat,integration,501,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:602,Integrability,integrat,integration,602,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:703,Integrability,integrat,integration,703,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:787,Integrability,integrat,integration,787,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:828,Integrability,integrat,integration,828,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:908,Integrability,integrat,integration,908,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1032,Integrability,integrat,integration,1032,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1149,Integrability,integrat,integration,1149,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1201,Integrability,integrat,integration,1201,"mber Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1316,Integrability,integrat,integration,1316,"» MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1723,Integrability,integrat,integration,1723,"ten in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:2124,Integrability,interface,interface,2124,"r. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;  ; double Error () const;  return the estimate of the absolute Error of the last Integral calculation ;  ; VirtualIntegratorOneDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral ();  evaluate the Integral over the infinite interval (-inf,+",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:2900,Integrability,integrat,integrator,2900,"pe;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;  ; double Error () const;  return the estimate of the absolute Error of the last Integral calculation ;  ; VirtualIntegratorOneDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral ();  evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ;  ; double Integral (const IGenFunction &f);  evaluate the Integral of a function f over the infinite interval (-inf,+inf) ;  ; double Integral (const IGenFunction &f, const std::vector< double > &pts);  evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ;  ; double Integral (const IGenFunction &f, double a, double b);  evaluate the Integral of a function f over the defined interval (a,b) ;  ; double Integral (const std::vector< double > &pts);  evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ;  ; double Integral (double a, double b);  evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction m",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:5549,Integrability,integrat,integrator,5549,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:5656,Integrability,integrat,integrator,5656,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:6124,Integrability,integrat,integration,6124,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:6231,Integrability,integrat,integration,6231,"  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ;  ; double IntegralLow (double b);  evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ;  ; double IntegralUp (const IGenFunction &f, double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ;  ; double IntegralUp (double a);  evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:6378,Integrability,integrat,integration,6378,"Integrator::SetFunction method. ;  ; std::string Name () const;  return name of integrator ;  ; int NEval () const;  return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ;  ; double operator() (double x);  define operator() for IntegralLow ;  ; ROOT::Math::IntegratorOneDimOptions Options () const;  retrieve the options ;  ; double Result () const;  return the Result of the last Integral calculation ;  ; void SetAbsTolerance (double absTolerance);  set the desired absolute Error ;  ; void SetFunction (const IGenFunction &f, bool copy=false);  set one dimensional function for 1D integration ;  ; void SetFunction (const IMultiGenFunction &f, unsigned int icoord, const double *x);  Set integration function from a multi-dim function type. ;  ; template<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7345,Integrability,integrat,integrator,7345,"<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7356,Integrability,interface,interface,7356,"<class Function > ; void SetFunction (Function &f);  method to set the a generic integration function ;  ; void SetOptions (const ROOT::Math::IntegratorOneDimOptions &opt);  set the options ;  ; void SetRelTolerance (double relTolerance);  set the desired relative Error ;  ; int Status () const;  return the Error Status of the last Integral calculation ;  . Static Public Member Functions; static std::string GetName (IntegrationOneDim::Type);  static function to get a string from the enumeration ;  ; static IntegrationOneDim::Type GetType (const char *name);  static function to get the enumeration from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:8119,Integrability,integrat,integration,8119,"  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9070,Integrability,interface,interface,9070,"d relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9121,Integrability,interface,interface,9121,"onrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operato",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9427,Integrability,integrat,integration,9427,"AUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10401,Integrability,integrat,integration,10401,"ximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorOneDim::Error ; (; ); const. inline . return the esti",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:11610,Integrability,integrat,integrator,11610,"rOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (; IntegrationOneDim::Type ; type, . double ; absTol, . double ; relTol, . unsigned int ; size, . int ; rule . ). protected . Definition at line 114 of file Integrator.cxx. ◆ Error(). double ROOT::Math::IntegratorOneDim::Error ; (; ); const. inline . return the estimate of the absolute Error of the last Integral calculation ; Definition at line 416 of file Integrator.h. ◆ GetIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::GetIntegrator ; (; ). inline . return a pointer to integrator object ; Definition at line 446 of file Integrator.h. ◆ GetName(). std::string ROOT::Math::IntegratorOneDim::GetName ; (; IntegrationOneDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 66 of file Integrator.cxx. ◆ GetType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 53 of file Integrator.cxx. ◆ Integral() [1/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; ). inline . evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:12640,Integrability,interface,interface,12640,"rator object ; Definition at line 446 of file Integrator.h. ◆ GetName(). std::string ROOT::Math::IntegratorOneDim::GetName ; (; IntegrationOneDim::Type ; type). static . static function to get a string from the enumeration ; Definition at line 66 of file Integrator.cxx. ◆ GetType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::GetType ; (; const char * ; name). static . static function to get the enumeration from a string ; Definition at line 53 of file Integrator.cxx. ◆ Integral() [1/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; ). inline . evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunct",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13039,Integrability,interface,interface,13039,"at line 53 of file Integrator.cxx. ◆ Integral() [1/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; ). inline . evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13209,Integrability,integrat,integration,13209,"the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ; Definition at line 364 of file Integrator.h. ◆ Integral() [2/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f). inline . evaluate the Integral of a function f over the infinite interval (-inf,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower ed",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13620,Integrability,interface,interface,13620,"n interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13652,Integrability,integrat,integration,13652,"n interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:13695,Integrability,integrat,integration,13695,"n interface . Definition at line 258 of file Integrator.h. ◆ Integral() [3/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . const std::vector< double > & ; pts . ). inline . evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14218,Integrability,integrat,integration,14218,"ion Integral ( a) and last element the upper value. . Definition at line 316 of file Integrator.h. ◆ Integral() [4/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const IGenFunction & ; f, . double ; a, . double ; b . ). inline . evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14593,Integrability,integrat,integration,14593,"tion interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:14636,Integrability,integrat,integration,14636,"tion interface ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 241 of file Integrator.h. ◆ Integral() [5/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; const std::vector< double > & ; pts). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method. ; The function has known singular points. Parameters. ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:15238,Integrability,integrat,integration,15238,"l ( a) and last element the upper value. . Definition at line 396 of file Integrator.h. ◆ Integral() [6/8]. double ROOT::Math::IntegratorOneDim::Integral ; (; double ; a, . double ; b . ). inline . evaluate the Integral over the defined interval (a,b) using the function previously set with Integrator::SetFunction method ; Parameters. alower value of the integration interval ; bupper value of the integration interval . Definition at line 355 of file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:15703,Integrability,integrat,integration,15703,"f file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ Integr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:15746,Integrability,integrat,integration,15746,"f file Integrator.h. ◆ Integral() [7/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; ptsvector containing both the function singular points and the lower/upper edges of the interval. The vector must have as first element the lower edge of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ Integr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:16198,Integrability,interface,interface,16198," of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:16230,Integrability,integrat,integration,16230," of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:16273,Integrability,integrat,integration,16273," of the integration Integral ( a) and last element the upper value. . Definition at line 529 of file Integrator.h. ◆ Integral() [8/8]. template<class Function > . double ROOT::Math::IntegratorOneDim::Integral ; (; Function & ; f, . double ; a, . double ; b . ). evaluate the Integral of a function f over the defined interval (a,b) ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 499 of file Integrator.h. ◆ IntegralCauchy() [1/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 o",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17113,Integrability,integrat,integration,17113,"rameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const I",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17156,Integrability,integrat,integration,17156,"rameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 340 of file Integrator.h. ◆ IntegralCauchy() [2/3]. double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). inline . evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const I",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17565,Integrability,interface,interface,17565,"unction f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17597,Integrability,integrat,integration,17597,"unction f over the defined interval (a,b) with a singularity at c ; Definition at line 404 of file Integrator.h. ◆ IntegralCauchy() [3/3]. template<class Function > . double ROOT::Math::IntegratorOneDim::IntegralCauchy ; (; Function & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:17957,Integrability,integrat,integration,17957,"ngularity at c ; Parameters. fintegration function. The function type must be a C++ callable object implementing operator()(double x) ; alower value of the integration interval ; bupper value of the integration interval ; cposition of singularity . Definition at line 536 of file Integrator.h. ◆ IntegralLow() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18328,Integrability,interface,interface,18328,"(; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 38",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18360,Integrability,integrat,integration,18360,"(; const IGenFunction & ; f, . double ; b . ). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; bupper value of the integration interval . Definition at line 296 of file Integrator.h. ◆ IntegralLow() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 38",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18709,Integrability,integrat,integration,18709,"tegratorOneDim::IntegralLow ; (; double ; b). inline . evaluate the Integral of a function f over the over the semi-infinite interval (-inf,b) using the function previously set with Integrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:18873,Integrability,integrat,integrator,18873,"ntegrator::SetFunction method. ; Parameters. bupper value of the integration interval . Definition at line 380 of file Integrator.h. ◆ IntegralUp() [1/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:19076,Integrability,integrat,integrator,19076,"ralUp ; (; const IGenFunction & ; f, . double ; a . ). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower value of the integration interval . Definition at line 278 of file Integrator.h. ◆ IntegralUp() [2/2]. double ROOT::Math::IntegratorOneDim::IntegralUp ; (; double ; a). inline . evaluate the Integral of a function f over the semi-infinite interval (a,+inf) using the function previously set with Integrator::SetFunction method. ; Parameters. alower value of the integration interval . Definition at line 372 of file Integrator.h. ◆ Name(). std::string ROOT::Math::IntegratorOneDim::Name ; (; ); const. inline . return name of integrator ; Definition at line 459 of file Integrator.h. ◆ NEval(). int ROOT::Math::IntegratorOneDim::NEval ; (; ); const. inline . return number of function evaluations in calculating the integral (if integrator do not implement this function returns -1) ; Definition at line 427 of file Integrator.h. ◆ operator()(). double ROOT::Math::IntegratorOneDim::operator() ; (; double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. voi",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20237,Integrability,integrat,integration,20237,"double ; x). inline . define operator() for IntegralLow ; Definition at line 386 of file Integrator.h. ◆ operator=(). IntegratorOneDim & ROOT::Math::IntegratorOneDim::operator= ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Mat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20457,Integrability,integrat,integration,20457,"tion at line 182 of file Integrator.h. ◆ Options(). ROOT::Math::IntegratorOneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20579,Integrability,interface,interface,20579,"OneDimOptions ROOT::Math::IntegratorOneDim::Options ; (; ); const. inline . retrieve the options ; Definition at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status().",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20664,Integrability,integrat,integration,20664,"at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20971,Integrability,integrat,integration,20971,"e). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 421 of file Integrator.h. Member Data Documentation. ◆ fFunc. IGenFunction* ROOT::Math::IntegratorOneDim::fFunc. private . pointer to owned function ; Definition at line 475 of file Integrator.h. ◆ fIntegrator. VirtualIntegratorOneDim* ROOT::Math::IntegratorOneDim::fIntegrat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:21999,Integrability,integrat,integrator,21999," unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 421 of file Integrator.h. Member Data Documentation. ◆ fFunc. IGenFunction* ROOT::Math::IntegratorOneDim::fFunc. private . pointer to owned function ; Definition at line 475 of file Integrator.h. ◆ fIntegrator. VirtualIntegratorOneDim* ROOT::Math::IntegratorOneDim::fIntegrator. private . pointer to integrator interface class ; Definition at line 474 of file Integrator.h. Libraries for ROOT::Math::IntegratorOneDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Integrator.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:22010,Integrability,interface,interface,22010," unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral calculation ; Definition at line 421 of file Integrator.h. Member Data Documentation. ◆ fFunc. IGenFunction* ROOT::Math::IntegratorOneDim::fFunc. private . pointer to owned function ; Definition at line 475 of file Integrator.h. ◆ fIntegrator. VirtualIntegratorOneDim* ROOT::Math::IntegratorOneDim::fIntegrator. private . pointer to integrator interface class ; Definition at line 474 of file Integrator.h. Libraries for ROOT::Math::IntegratorOneDim:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Integrator.h; math/mathcore/src/Integrator.cxx. ROOTMathIntegratorOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:559,Modifiability,plug-in,plug-in,559,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:761,Modifiability,adapt,adaptive,761,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:778,Modifiability,adapt,adaptive,778,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1023,Modifiability,adapt,adaptive,1023,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one di",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:2636,Modifiability,adapt,adaptive,2636,"pe. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Integrator, default type is adaptive. ;  ; virtual ~IntegratorOneDim ();  destructor (will delete contained pointers) ;  ; double Error () const;  return the estimate of the absolute Error of the last Integral calculation ;  ; VirtualIntegratorOneDim * GetIntegrator ();  return a pointer to integrator object ;  ; double Integral ();  evaluate the Integral over the infinite interval (-inf,+inf) using the function previously set with Integrator::SetFunction method. ;  ; double Integral (const IGenFunction &f);  evaluate the Integral of a function f over the infinite interval (-inf,+inf) ;  ; double Integral (const IGenFunction &f, const std::vector< double > &pts);  evaluate the Integral of a function f with known singular points over the defined Integral (a,b) ;  ; double Integral (const IGenFunction &f, double a, double b);  evaluate the Integral of a function f over the defined interval (a,b) ;  ; double Int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7922,Modifiability,adapt,adaptive,7922,"tion from a string ;  . Protected Member Functions; VirtualIntegratorOneDim * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7968,Modifiability,adapt,adaptive,7968,"m * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7982,Modifiability,adapt,adaptive,7982,"m * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9177,Modifiability,adapt,adaptive,9177,"ossible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adap",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:9191,Modifiability,adapt,adaptive,9191,"ossible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adap",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10151,Modifiability,adapt,adaptive,10151,"tion (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:10165,Modifiability,adapt,adaptive,10165,"tion (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 142 of file Integrator.h. ◆ IntegratorOneDim() [3/4]. template<class Function > . ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; Function & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Template Constructor of one dimensional Integrator passing a generic function object. ; Parameters. fintegration function (any C++ callable object implementing operator()(double x) ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 165 of file Integrator.h. ◆ ~IntegratorOneDim(). virtual ROOT::Math::IntegratorOneDim::~IntegratorOneDim ; (; ). inlinevirtual . destructor (will delete contained pointers) ; Definition at line 173 of file Integrator.h. ◆ IntegratorOneDim() [4/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IntegratorOneDim & ; ). inlineprivate . Definition at line 181 of file Integrator.h. Member Function Documentation. ◆ CreateIntegrator(). VirtualIntegratorOneDim * ROOT::Math::IntegratorOneDim::CreateIntegrator ; (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20712,Modifiability,variab,variables,20712,"at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:480,Performance,perform,performing,480,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:578,Performance,load,load,578,". ROOT: ROOT::Math::IntegratorOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::IntegratorOneDim Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; User Class for performing numerical integration of a function in one dimension. ; It uses the plug-in manager to load advanced numerical integration algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double ab",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:1538,Performance,perform,performances,1538,"ion algorithms from GSL, which reimplements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Various types of adaptive and non-adaptive integration are supported. These include integration over infinite and semi-infinite ranges and singular integrals.; The integration type is selected using the Integration::type enumeration in the class constructor. The default type is adaptive integration with singularity (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule. In the case of ADAPTIVE type, the integration rule can also be specified via the Integration::GKRule. The default rule is 31 points.; In the case of integration over infinite and semi-infinite ranges, the type used is always ADAPTIVESINGULAR applying a transformation from the original interval into (0,1).; The ADAPTIVESINGULAR type is the most sophisticated type. When performances are important, it is then recommended to use the NONADAPTIVE type in case of smooth functions or ADAPTIVE with a lower Gauss-Kronrod rule.; For detailed description on GSL integration algorithms see the GSL Manual. ; Definition at line 98 of file Integrator.h. Public Types; typedef IntegrationOneDim::Type Type;  . Public Member Functions;  IntegratorOneDim (const IGenFunction &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Constructor of one dimensional Integrator passing a function interface. ;  ; template<class Function > ;  IntegratorOneDim (Function &f, IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, int rule=0);  Template Constructor of one dimensional Integrator passing a generic function object. ;  ;  IntegratorOneDim (IntegrationOneDim::Type type=IntegrationOneDim::kDEFAULT, double absTol=-1, double relTol=-1, unsigned int size=0, unsigned int rule=0);  Constructor of one dimensional Int",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:20679,Performance,perform,performed,20679,"at line 456 of file Integrator.h. ◆ Result(). double ROOT::Math::IntegratorOneDim::Result ; (; ); const. inline . return the Result of the last Integral calculation ; Definition at line 411 of file Integrator.h. ◆ SetAbsTolerance(). void ROOT::Math::IntegratorOneDim::SetAbsTolerance ; (; double ; absTolerance). inline . set the desired absolute Error ; Definition at line 441 of file Integrator.h. ◆ SetFunction() [1/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IGenFunction & ; f, . bool ; copy = false . ). inline . set one dimensional function for 1D integration ; Definition at line 202 of file Integrator.h. ◆ SetFunction() [2/3]. void ROOT::Math::IntegratorOneDim::SetFunction ; (; const IMultiGenFunction & ; f, . unsigned int ; icoord, . const double * ; x . ). Set integration function from a multi-dim function type. ; Can be used in case of having 1D function implementing the generic interface Parameters. fintegration function ; icoordindex of coordinate on which the integration is performed ; xarray of the passed variables values. In case of dim=1 a 0 can be passed . Definition at line 100 of file Integrator.cxx. ◆ SetFunction() [3/3]. template<class Function > . void ROOT::Math::IntegratorOneDim::SetFunction ; (; Function & ; f). inline . method to set the a generic integration function ; Parameters. fintegration function. The function type must implement the assignment operator, double operator() ( double x ) . Definition at line 492 of file Integrator.h. ◆ SetOptions(). void ROOT::Math::IntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inline . set the options ; Definition at line 451 of file Integrator.h. ◆ SetRelTolerance(). void ROOT::Math::IntegratorOneDim::SetRelTolerance ; (; double ; relTolerance). inline . set the desired relative Error ; Definition at line 435 of file Integrator.h. ◆ Status(). int ROOT::Math::IntegratorOneDim::Status ; (; ); const. inline . return the Error Status of the last Integral",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:8202,Usability,simpl,simple,8202," typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator passing a function interface. ; Parameters. fintegration function (1D interface). It is copied inside ; typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied. ; relToldesired relative tolerance ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1888,Availability,toler,tolerance,1888, name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options - if not existing create a IOptions ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:2137,Availability,toler,tolerance,2137, name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options - if not existing create a IOptions ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:3531,Availability,toler,tolerance,3531,"tegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNPoints (unsigned int n);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorOneDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorOneDimOptions() [1/2]. ROOT::Math::IntegratorOneDimOptions::IntegratorOneDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 179 of file IntegratorOptions.cxx. ◆ ~IntegratorOneDimOptions(). ROOT::Math::IntegratorOneDimOptions::~IntegratorOneDimOptions ; (; ). inlineoverride . Definition at line 122 of file IntegratorOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:3734,Availability,toler,tolerance,3734,"tegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNPoints (unsigned int n);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorOneDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorOneDimOptions() [1/2]. ROOT::Math::IntegratorOneDimOptions::IntegratorOneDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 179 of file IntegratorOptions.cxx. ◆ ~IntegratorOneDimOptions(). ROOT::Math::IntegratorOneDimOptions::~IntegratorOneDimOptions ; (; ). inlineoverride . Definition at line 122 of file IntegratorOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:409,Deployability,integrat,integration,409,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:833,Deployability,integrat,integrator,833,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:911,Deployability,integrat,integrator,911,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1022,Deployability,integrat,integration,1022,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1267,Deployability,integrat,integrator,1267, Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace siz,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1355,Deployability,integrat,integration,1355, Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace siz,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6292,Deployability,integrat,integrator,6292,tegratorType(). IntegratorOneDim::Type ROOT::Math::IntegratorOneDimOptions::DefaultIntegratorType ; (; ). static . Definition at line 240 of file IntegratorOptions.cxx. ◆ DefaultNPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultNPoints ; (; ). static . Definition at line 268 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorOneDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions:,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6538,Deployability,integrat,integrator,6538,"static . Definition at line 268 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorOneDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6761,Deployability,integrat,integration,6761,"tion at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8515,Deployability,integrat,integrator,8515," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8721,Deployability,integrat,integration,8721," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8762,Deployability,integrat,integrator,8762," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8832,Deployability,integrat,integration,8832," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8874,Deployability,integrat,integrator,8874," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8753,Energy Efficiency,adapt,adaptive,8753," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:409,Integrability,integrat,integration,409,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:833,Integrability,integrat,integrator,833,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:911,Integrability,integrat,integrator,911,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1022,Integrability,integrat,integration,1022,. ROOT: ROOT::Math::IntegratorOneDimOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptio,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1267,Integrability,integrat,integrator,1267, Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace siz,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1355,Integrability,integrat,integration,1355, Member Functions |; List of all members ; ROOT::Math::IntegratorOneDimOptions Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Numerical Integration. ; Numerical one dimensional integration options. ; Definition at line 113 of file IntegratorOptions.h. Public Member Functions;  IntegratorOneDimOptions (const IntegratorOneDimOptions &rhs);  copy constructor ;  ;  IntegratorOneDimOptions (IOptions *extraOpts=nullptr);  constructor using the default options can pass a pointer to extra options (N.B. ;  ;  ~IntegratorOneDimOptions () override;  ; std::string Integrator () const override;  name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace siz,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6292,Integrability,integrat,integrator,6292,tegratorType(). IntegratorOneDim::Type ROOT::Math::IntegratorOneDimOptions::DefaultIntegratorType ; (; ). static . Definition at line 240 of file IntegratorOptions.cxx. ◆ DefaultNPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultNPoints ; (; ). static . Definition at line 268 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorOneDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions:,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6538,Integrability,integrat,integrator,6538,"static . Definition at line 268 of file IntegratorOptions.cxx. ◆ DefaultRelTolerance(). double ROOT::Math::IntegratorOneDimOptions::DefaultRelTolerance ; (; ). static . Definition at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math:",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:6761,Integrability,integrat,integration,6761,"tion at line 266 of file IntegratorOptions.cxx. ◆ DefaultWKSize(). unsigned int ROOT::Math::IntegratorOneDimOptions::DefaultWKSize ; (; ). static . Definition at line 267 of file IntegratorOptions.cxx. ◆ FindDefault(). IOptions * ROOT::Math::IntegratorOneDimOptions::FindDefault ; (; const char * ; name). static . find specific options - return 0 if not existing ; Definition at line 276 of file IntegratorOptions.cxx. ◆ Integrator(). std::string ROOT::Math::IntegratorOneDimOptions::Integrator ; (; ); const. overridevirtual . name of 1D integrator ; Implements ROOT::Math::BaseIntegratorOptions.; Definition at line 203 of file IntegratorOptions.cxx. ◆ IntegratorType(). IntegrationOneDim::Type ROOT::Math::IntegratorOneDimOptions::IntegratorType ; (; ); const. inline . type of the integrator (return the enumeration type) ; Definition at line 149 of file IntegratorOptions.h. ◆ NPoints(). unsigned int ROOT::Math::IntegratorOneDimOptions::NPoints ; (; ); const. inline . Number of points used by current integration rule. ; See alsoSetNPoints(). ; Definition at line 143 of file IntegratorOptions.h. ◆ operator=(). IntegratorOneDimOptions & ROOT::Math::IntegratorOneDimOptions::operator= ; (; const IntegratorOneDimOptions & ; rhs). inline . assignment operator ; Definition at line 130 of file IntegratorOptions.h. ◆ Print(). void ROOT::Math::IntegratorOneDimOptions::Print ; (; std::ostream & ; os = std::cout); const. print all the options ; Definition at line 207 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorOneDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8515,Integrability,integrat,integrator,8515," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8721,Integrability,integrat,integration,8721," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8762,Integrability,integrat,integrator,8762," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8832,Integrability,integrat,integration,8832," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8874,Integrability,integrat,integrator,8874," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1403,Modifiability,inherit,inherited,1403, name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options - if not existing create a IOptions ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:3265,Modifiability,inherit,inherited,3265,"tegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNPoints (unsigned int n);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorOneDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorOneDimOptions() [1/2]. ROOT::Math::IntegratorOneDimOptions::IntegratorOneDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 179 of file IntegratorOptions.cxx. ◆ ~IntegratorOneDimOptions(). ROOT::Math::IntegratorOneDimOptions::~IntegratorOneDimOptions ; (; ). inlineoverride . Definition at line 122 of file IntegratorOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:3449,Modifiability,inherit,inherited,3449,"tegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNPoints (unsigned int n);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorOneDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorOneDimOptions() [1/2]. ROOT::Math::IntegratorOneDimOptions::IntegratorOneDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 179 of file IntegratorOptions.cxx. ◆ ~IntegratorOneDimOptions(). ROOT::Math::IntegratorOneDimOptions::~IntegratorOneDimOptions ; (; ). inlineoverride . Definition at line 122 of file IntegratorOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:8753,Modifiability,adapt,adaptive,8753," & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 215 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 246 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 222 of file IntegratorOptions.cxx. ◆ SetDefaultNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultNPoints ; (; unsigned int ; n). static . Definition at line 259 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 250 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorOneDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 255 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorOneDimOptions::SetIntegrator ; (; const char * ; name). set 1D integrator name ; Definition at line 197 of file IntegratorOptions.cxx. ◆ SetNPoints(). void ROOT::Math::IntegratorOneDimOptions::SetNPoints ; (; unsigned int ; n). inline . Set number of points for active integration rule. . For the GSL adaptive integrator, n = 1,2,3,4,5,6 correspond to the 15,21,31,41,51,61-point integration rules.; For the GaussLegendre integrator, use values > 6, which correspond to the actual number of points being evaluated. . Definition at line 140 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorOneDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorOneDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:1576,Safety,avoid,avoid,1576, name of 1D integrator ;  ; IntegrationOneDim::Type IntegratorType () const;  type of the integrator (return the enumeration type) ;  ; unsigned int NPoints () const;  Number of points used by current integration rule. ;  ; IntegratorOneDimOptions & operator= (const IntegratorOneDimOptions &rhs);  assignment operator ;  ; void Print (std::ostream &os=std::cout) const;  print all the options ;  ; void SetIntegrator (const char *name);  set 1D integrator name ;  ; void SetNPoints (unsigned int n);  Set number of points for active integration rule. ;  ;  Public Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Static Public Member Functions; static ROOT::Math::IOptions & Default (const char *name);  retrieve specific options - if not existing create a IOptions ;  ; static double DefaultAbsTolerance ();  ; static std::string DefaultIntegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static,MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:3368,Safety,avoid,avoid,3368,"tegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNPoints (unsigned int n);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorOneDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorOneDimOptions() [1/2]. ROOT::Math::IntegratorOneDimOptions::IntegratorOneDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 179 of file IntegratorOptions.cxx. ◆ ~IntegratorOneDimOptions(). ROOT::Math::IntegratorOneDimOptions::~IntegratorOneDimOptions ; (; ). inlineoverride . Definition at line 122 of file IntegratorOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:540,Availability,avail,available,540,". ROOT: ROOT::Math::Interpolator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Interpolator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Interpolation Classes. ; Class for performing function interpolation of points. ; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor. See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL. See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual for more information. The class provides additional methods for computing derivatives and integrals of interpolating functions.; This class does not support copying. ; Definition at line 66 of file Interpolator.h. Public Member Functions;  Interpolator (const Interpolator &)=delete;  ;  Interpolator (const std::vector< double > &x, const std::vector< double > &y, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ;  ;  Interpolator (Interpolator &&)=delete;  ;  Interpolator (unsigned int ndata=0, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from number of data points and with Interpolation::Type type. ;  ; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:3708,Deployability,continuous,continuous,3708,"const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; The data can be set later on with the SetData method. In case the data size is not known, better using the default of zero or the next constructor later on. The default interpolation type is Cubic spline ; Definition at line 40 of file Interpolator.cxx. ◆ Interpolator() [2/4]. ROOT::Math::Interpolator::Interpolator ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ; The method will compute a continuous interpolating function \( y(x) \) such that \( y_i = y ( x_i )\). The default interpolation type is Cubic spline ; Definition at line 45 of file Interpolator.cxx. ◆ ~Interpolator(). ROOT::Math::Interpolator::~Interpolator ; (; ). virtual . Definition at line 58 of file Interpolator.cxx. ◆ Interpolator() [3/4]. ROOT::Math::Interpolator::Interpolator ; (; const Interpolator & ; ). delete . ◆ Interpolator() [4/4]. ROOT::Math::Interpolator::Interpolator ; (; Interpolator && ; ). delete . Member Function Documentation. ◆ Deriv(). double ROOT::Math::Interpolator::Deriv ; (; double ; x); const. Return the derivative of the interpolated function at point x. ; Definition at line 81 of file Interpolator.cxx. ◆ Deriv2(). double ROOT::Math::Interpolator::Deriv2 ; (; double ; x); const. Return the second derivative of the interpolated function at point x. ; Definition at line 87 of file Interpolator.cxx. ◆ Eval(). double ROOT::Math::Interpolator::Eval ; (; double ; x); const. Return the interpolated value at po",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:2145,Energy Efficiency,efficient,efficient,2145,"n::kCSPLINE);  Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ;  ;  Interpolator (Interpolator &&)=delete;  ;  Interpolator (unsigned int ndata=0, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from number of data points and with Interpolation::Type type. ;  ; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interpolator &&)=delete;  ; bool SetData (const std::vector< double > &x, const std::vector< double > &y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; bool SetData (unsigned int ndata, const double *x, const double *y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; std::string Type () const;  Return the type of interpolation method. ;  ; std::string TypeGet () const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:2441,Energy Efficiency,efficient,efficient,2441,"; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interpolator &&)=delete;  ; bool SetData (const std::vector< double > &x, const std::vector< double > &y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; bool SetData (unsigned int ndata, const double *x, const double *y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; std::string Type () const;  Return the type of interpolation method. ;  ; std::string TypeGet () const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; The data can be set later on with the SetData method. In case the data size is not known, better using the default of zero or the next constructor later on. The default interpolation type is Cubic spline ; Definition at line 40 of file Interpolator.cxx. ◆ Interpolator() [2/4]. ROOT::Math::Interpolator::Interpolator ; (; const std::vector< double > & ; x, . con",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:5402,Energy Efficiency,efficient,efficient,5402,"r::Deriv2 ; (; double ; x); const. Return the second derivative of the interpolated function at point x. ; Definition at line 87 of file Interpolator.cxx. ◆ Eval(). double ROOT::Math::Interpolator::Eval ; (; double ; x); const. Return the interpolated value at point x. ; Definition at line 75 of file Interpolator.cxx. ◆ Integ(). double ROOT::Math::Interpolator::Integ ; (; double ; a, . double ; b . ); const. Return the Integral of the interpolated function over the range [a,b]. ; Definition at line 92 of file Interpolator.cxx. ◆ operator=() [1/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; const Interpolator & ; ). delete . ◆ operator=() [2/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; Interpolator && ; ). delete . ◆ SetData() [1/2]. bool ROOT::Math::Interpolator::SetData ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 68 of file Interpolator.cxx. ◆ SetData() [2/2]. bool ROOT::Math::Interpolator::SetData ; (; unsigned int ; ndata, . const double * ; x, . const double * ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 64 of file Interpolator.cxx. ◆ Type(). std::string ROOT::Math::Interpolator::Type ; (; ); const. Return the type of interpolation method. ; Definition at line 101 of file Interpolator.cxx. ◆ TypeGet(). std::string ROOT::Math::Interpolator::TypeGet ; (; ); const. Definition at line 97 of file Interpolator.cxx. Member Data Documentation. ◆ fInterp. GSLInterpolator* ROOT::Math::Interpolator::fInterp. private . Definition at line 138 of file Interpolator.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:5806,Energy Efficiency,efficient,efficient,5806," double ROOT::Math::Interpolator::Integ ; (; double ; a, . double ; b . ); const. Return the Integral of the interpolated function over the range [a,b]. ; Definition at line 92 of file Interpolator.cxx. ◆ operator=() [1/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; const Interpolator & ; ). delete . ◆ operator=() [2/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; Interpolator && ; ). delete . ◆ SetData() [1/2]. bool ROOT::Math::Interpolator::SetData ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 68 of file Interpolator.cxx. ◆ SetData() [2/2]. bool ROOT::Math::Interpolator::SetData ; (; unsigned int ; ndata, . const double * ; x, . const double * ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 64 of file Interpolator.cxx. ◆ Type(). std::string ROOT::Math::Interpolator::Type ; (; ); const. Return the type of interpolation method. ; Definition at line 101 of file Interpolator.cxx. ◆ TypeGet(). std::string ROOT::Math::Interpolator::TypeGet ; (; ); const. Definition at line 97 of file Interpolator.cxx. Member Data Documentation. ◆ fInterp. GSLInterpolator* ROOT::Math::Interpolator::fInterp. private . Definition at line 138 of file Interpolator.h. Libraries for ROOT::Math::Interpolator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Interpolator.h; math/mathmore/src/Interpolator.cxx. ROOTMathInterpolator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:359,Performance,perform,performing,359,". ROOT: ROOT::Math::Interpolator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::Interpolator Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Interpolation Classes. ; Class for performing function interpolation of points. ; The class is instantiated with an interpolation methods, passed as an enumeration in the constructor. See Interpolation::Type for the available interpolation algorithms, which are implemented using GSL. See also the <A HREF=http://www.gnu.org/software/gsl/manual/html_node/Interpolation.html"">GSL manual for more information. The class provides additional methods for computing derivatives and integrals of interpolating functions.; This class does not support copying. ; Definition at line 66 of file Interpolator.h. Public Member Functions;  Interpolator (const Interpolator &)=delete;  ;  Interpolator (const std::vector< double > &x, const std::vector< double > &y, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ;  ;  Interpolator (Interpolator &&)=delete;  ;  Interpolator (unsigned int ndata=0, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from number of data points and with Interpolation::Type type. ;  ; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:2290,Performance,perform,performed,2290,"n::kCSPLINE);  Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ;  ;  Interpolator (Interpolator &&)=delete;  ;  Interpolator (unsigned int ndata=0, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from number of data points and with Interpolation::Type type. ;  ; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interpolator &&)=delete;  ; bool SetData (const std::vector< double > &x, const std::vector< double > &y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; bool SetData (unsigned int ndata, const double *x, const double *y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; std::string Type () const;  Return the type of interpolation method. ;  ; std::string TypeGet () const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:2595,Performance,perform,performed,2595,"; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interpolator &&)=delete;  ; bool SetData (const std::vector< double > &x, const std::vector< double > &y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; bool SetData (unsigned int ndata, const double *x, const double *y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; std::string Type () const;  Return the type of interpolation method. ;  ; std::string TypeGet () const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; The data can be set later on with the SetData method. In case the data size is not known, better using the default of zero or the next constructor later on. The default interpolation type is Cubic spline ; Definition at line 40 of file Interpolator.cxx. ◆ Interpolator() [2/4]. ROOT::Math::Interpolator::Interpolator ; (; const std::vector< double > & ; x, . con",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:5547,Performance,perform,performed,5547,"r::Deriv2 ; (; double ; x); const. Return the second derivative of the interpolated function at point x. ; Definition at line 87 of file Interpolator.cxx. ◆ Eval(). double ROOT::Math::Interpolator::Eval ; (; double ; x); const. Return the interpolated value at point x. ; Definition at line 75 of file Interpolator.cxx. ◆ Integ(). double ROOT::Math::Interpolator::Integ ; (; double ; a, . double ; b . ); const. Return the Integral of the interpolated function over the range [a,b]. ; Definition at line 92 of file Interpolator.cxx. ◆ operator=() [1/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; const Interpolator & ; ). delete . ◆ operator=() [2/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; Interpolator && ; ). delete . ◆ SetData() [1/2]. bool ROOT::Math::Interpolator::SetData ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 68 of file Interpolator.cxx. ◆ SetData() [2/2]. bool ROOT::Math::Interpolator::SetData ; (; unsigned int ; ndata, . const double * ; x, . const double * ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 64 of file Interpolator.cxx. ◆ Type(). std::string ROOT::Math::Interpolator::Type ; (; ); const. Return the type of interpolation method. ; Definition at line 101 of file Interpolator.cxx. ◆ TypeGet(). std::string ROOT::Math::Interpolator::TypeGet ; (; ); const. Definition at line 97 of file Interpolator.cxx. Member Data Documentation. ◆ fInterp. GSLInterpolator* ROOT::Math::Interpolator::fInterp. private . Definition at line 138 of file Interpolator.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:5960,Performance,perform,performed,5960," double ROOT::Math::Interpolator::Integ ; (; double ; a, . double ; b . ); const. Return the Integral of the interpolated function over the range [a,b]. ; Definition at line 92 of file Interpolator.cxx. ◆ operator=() [1/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; const Interpolator & ; ). delete . ◆ operator=() [2/2]. Interpolator & ROOT::Math::Interpolator::operator= ; (; Interpolator && ; ). delete . ◆ SetData() [1/2]. bool ROOT::Math::Interpolator::SetData ; (; const std::vector< double > & ; x, . const std::vector< double > & ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 68 of file Interpolator.cxx. ◆ SetData() [2/2]. bool ROOT::Math::Interpolator::SetData ; (; unsigned int ; ndata, . const double * ; x, . const double * ; y . ). Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ; Definition at line 64 of file Interpolator.cxx. ◆ Type(). std::string ROOT::Math::Interpolator::Type ; (; ); const. Return the type of interpolation method. ; Definition at line 101 of file Interpolator.cxx. ◆ TypeGet(). std::string ROOT::Math::Interpolator::TypeGet ; (; ); const. Definition at line 97 of file Interpolator.cxx. Member Data Documentation. ◆ fInterp. GSLInterpolator* ROOT::Math::Interpolator::fInterp. private . Definition at line 138 of file Interpolator.h. Libraries for ROOT::Math::Interpolator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/Interpolator.h; math/mathmore/src/Interpolator.cxx. ROOTMathInterpolator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Interpolator.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html:720,Integrability,rout,routine,720,". ROOT: ROOT::Math::Inverter< idim, n > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; ROOT::Math::Inverter< idim, n > Class Template Reference. ; template<unsigned int idim, unsigned int n = idim>; class ROOT::Math::Inverter< idim, n >Matrix Inverter class Class to specialize calls to Dinv. ; Dinv computes the inverse of a square matrix if dimension idim and order n. The content of the matrix will be replaced by its inverse. In case the inversion fails, the matrix content is destroyed. Invert specializes Dinv by the matrix order. E.g. if the order of the matrix is two, the routine Inverter<2> is called which implements Cramers rule.; AuthorT. Glebe ; Definition at line 69 of file Dinv.h. Static Public Member Functions; template<class T > ; static int DfactMatrix (MatRepStd< T, idim, n > &rhs, T &det, unsigned int *work);  LU Factorization method for inversion of general square matrices (see implementation in Math/MatrixInversion.icc) ;  ; template<class T > ; static int DfinvMatrix (MatRepStd< T, idim, n > &rhs, unsigned int *work);  LU inversion of general square matrices. ;  ; template<class T > ; static bool Dinv (MatRepSym< T, idim > &rhs);  symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ;  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  matrix inversion for a generic square matrix using LU factorization (code originally from CERNLIB and then ported in C++ for CLHEP) implementation is in file Math/MatrixInversion.icc ;  ; template<class T > ; static void InvertBunchKaufman (MatRepSym< T, idim > &rhs, int &ifail);  Bunch-Kaufman method for inversion of symmetric matrices. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ DfactMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Inverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html:2272,Integrability,rout,routine,2272,"atic bool Dinv (MatRepSym< T, idim > &rhs);  symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ;  ; template<class MatrixRep > ; static bool Dinv (MatrixRep &rhs);  matrix inversion for a generic square matrix using LU factorization (code originally from CERNLIB and then ported in C++ for CLHEP) implementation is in file Math/MatrixInversion.icc ;  ; template<class T > ; static void InvertBunchKaufman (MatRepSym< T, idim > &rhs, int &ifail);  Bunch-Kaufman method for inversion of symmetric matrices. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ DfactMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::DfactMatrix ; (; MatRepStd< T, idim, n > & ; rhs, . T & ; det, . unsigned int * ; work . ). static . LU Factorization method for inversion of general square matrices (see implementation in Math/MatrixInversion.icc) ; LU factorization : code originally from CERNLIB dfact routine and ported in C++ for CLHEP. ; Definition at line 447 of file MatrixInversion.icc. ◆ DfinvMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::DfinvMatrix ; (; MatRepStd< T, idim, n > & ; rhs, . unsigned int * ; ir . ). static . LU inversion of general square matrices. ; Inversion for General square matrices.; To be called after DFactMatrix (see implementation in Math/MatrixInversion.icc); Code from dfinv routine from CERNLIB Assumed first the LU decomposition via DfactMatrix function; taken from CLHEP : L. Moneta May 2006 ; Definition at line 577 of file MatrixInversion.icc. ◆ Dinv() [1/2]. template<unsigned int idim, unsigned int n = idim> . template<class T > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatRepSym< T, idim > & ; rhs). inlinestatic . symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ; Definition at line 98 of file Dinv.h.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Inverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html:2750,Integrability,rout,routine,2750,"ersion of symmetric matrices. ;  . #include <Math/Dinv.h>; Member Function Documentation. ◆ DfactMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::DfactMatrix ; (; MatRepStd< T, idim, n > & ; rhs, . T & ; det, . unsigned int * ; work . ). static . LU Factorization method for inversion of general square matrices (see implementation in Math/MatrixInversion.icc) ; LU factorization : code originally from CERNLIB dfact routine and ported in C++ for CLHEP. ; Definition at line 447 of file MatrixInversion.icc. ◆ DfinvMatrix(). template<unsigned int idim, unsigned int n> . template<class T > . int ROOT::Math::Inverter< idim, n >::DfinvMatrix ; (; MatRepStd< T, idim, n > & ; rhs, . unsigned int * ; ir . ). static . LU inversion of general square matrices. ; Inversion for General square matrices.; To be called after DFactMatrix (see implementation in Math/MatrixInversion.icc); Code from dfinv routine from CERNLIB Assumed first the LU decomposition via DfactMatrix function; taken from CLHEP : L. Moneta May 2006 ; Definition at line 577 of file MatrixInversion.icc. ◆ Dinv() [1/2]. template<unsigned int idim, unsigned int n = idim> . template<class T > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatRepSym< T, idim > & ; rhs). inlinestatic . symmetric matrix inversion using Bunch-kaufman pivoting method implementation in Math/MatrixInversion.icc ; Definition at line 98 of file Dinv.h. ◆ Dinv() [2/2]. template<unsigned int idim, unsigned int n = idim> . template<class MatrixRep > . static bool ROOT::Math::Inverter< idim, n >::Dinv ; (; MatrixRep & ; rhs). inlinestatic . matrix inversion for a generic square matrix using LU factorization (code originally from CERNLIB and then ported in C++ for CLHEP) implementation is in file Math/MatrixInversion.icc ; Definition at line 75 of file Dinv.h. ◆ InvertBunchKaufman(). template<unsigned int idim, unsigned int N> . template<class T > . void ROOT::Math::Inverter< i",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Inverter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Inverter.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html:362,Deployability,configurat,configuration,362,". ROOT: ROOT::Math::IOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms. ; Generic interface for defining configuration options of a numerical algorithm. ; Definition at line 28 of file IOptions.h. Public Member Functions;  IOptions ();  ; virtual ~IOptions ();  ; virtual IOptions * Clone () const =0;  ; virtual bool GetIntValue (const char *, int &) const;  ; virtual bool GetNamedValue (const char *, std::string &) const;  ; virtual bool GetRealValue (const char *, double &) const;  ; template<typename T > ; bool GetValue (const char *name, T &t) const;  ; int IValue (const char *name) const;  ; std::string NamedValue (const char *name) const;  ; virtual void Print (std::ostream &=std::cout) const;  print options ;  ; double RValue (const char *name) const;  ; virtual void SetIntValue (const char *, int);  ; virtual void SetNamedValue (const char *, const char *);  ; virtual void SetRealValue (const char *, double);  method which need to be re-implemented by the derived classes ;  ; void SetValue (const char *name, const char *val);  ; void SetValue (const char *name, double val);  generic methods for retrieving options ;  ; void SetValue (const char *name, int val);  . Private Member Functions; bool DoGetValue (const char *name, double &val) const;  ; bool DoGetValue (const char *name, int &val) const;  ; bool DoGetValue (const char *name, std::string &val) const;  . #include <Math/IOptions.h>. Inheritance diagram for ROOT::Math::IOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IOptions(). ROOT::Math::IOptions::IOptions ; (; ). inline . Definition at line 32 of file IOptions.h. ◆ ~IOptions(). virtual ROOT::Math::IOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html:339,Integrability,interface,interface,339,". ROOT: ROOT::Math::IOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms. ; Generic interface for defining configuration options of a numerical algorithm. ; Definition at line 28 of file IOptions.h. Public Member Functions;  IOptions ();  ; virtual ~IOptions ();  ; virtual IOptions * Clone () const =0;  ; virtual bool GetIntValue (const char *, int &) const;  ; virtual bool GetNamedValue (const char *, std::string &) const;  ; virtual bool GetRealValue (const char *, double &) const;  ; template<typename T > ; bool GetValue (const char *name, T &t) const;  ; int IValue (const char *name) const;  ; std::string NamedValue (const char *name) const;  ; virtual void Print (std::ostream &=std::cout) const;  print options ;  ; double RValue (const char *name) const;  ; virtual void SetIntValue (const char *, int);  ; virtual void SetNamedValue (const char *, const char *);  ; virtual void SetRealValue (const char *, double);  method which need to be re-implemented by the derived classes ;  ; void SetValue (const char *name, const char *val);  ; void SetValue (const char *name, double val);  generic methods for retrieving options ;  ; void SetValue (const char *name, int val);  . Private Member Functions; bool DoGetValue (const char *name, double &val) const;  ; bool DoGetValue (const char *name, int &val) const;  ; bool DoGetValue (const char *name, std::string &val) const;  . #include <Math/IOptions.h>. Inheritance diagram for ROOT::Math::IOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IOptions(). ROOT::Math::IOptions::IOptions ; (; ). inline . Definition at line 32 of file IOptions.h. ◆ ~IOptions(). virtual ROOT::Math::IOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html:362,Modifiability,config,configuration,362,". ROOT: ROOT::Math::IOptions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IOptions Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms. ; Generic interface for defining configuration options of a numerical algorithm. ; Definition at line 28 of file IOptions.h. Public Member Functions;  IOptions ();  ; virtual ~IOptions ();  ; virtual IOptions * Clone () const =0;  ; virtual bool GetIntValue (const char *, int &) const;  ; virtual bool GetNamedValue (const char *, std::string &) const;  ; virtual bool GetRealValue (const char *, double &) const;  ; template<typename T > ; bool GetValue (const char *name, T &t) const;  ; int IValue (const char *name) const;  ; std::string NamedValue (const char *name) const;  ; virtual void Print (std::ostream &=std::cout) const;  print options ;  ; double RValue (const char *name) const;  ; virtual void SetIntValue (const char *, int);  ; virtual void SetNamedValue (const char *, const char *);  ; virtual void SetRealValue (const char *, double);  method which need to be re-implemented by the derived classes ;  ; void SetValue (const char *name, const char *val);  ; void SetValue (const char *name, double val);  generic methods for retrieving options ;  ; void SetValue (const char *name, int val);  . Private Member Functions; bool DoGetValue (const char *name, double &val) const;  ; bool DoGetValue (const char *name, int &val) const;  ; bool DoGetValue (const char *name, std::string &val) const;  . #include <Math/IOptions.h>. Inheritance diagram for ROOT::Math::IOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IOptions(). ROOT::Math::IOptions::IOptions ; (; ). inline . Definition at line 32 of file IOptions.h. ◆ ~IOptions(). virtual ROOT::Math::IOp",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IOptions.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IOptions.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:549,Integrability,interface,interface,549,". ROOT: ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricFunctionMultiDimTempl< T >IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. ; Provides the interface for evaluating a function passing a coordinate vector and a parameter vector. ; Definition at line 107 of file IParamFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:730,Integrability,interface,interface,730,". ROOT: ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricFunctionMultiDimTempl< T >IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. ; Provides the interface for evaluating a function passing a coordinate vector and a parameter vector. ; Definition at line 107 of file IParamFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:2356,Integrability,interface,interface,2356,"tionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; virtual T DoEvalPar (const T *x, const double *p) const =0;  Implementation of the evaluation function using the x values and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef IBaseFunctionMultiDimTempl<T> ROOT::Math::IParametricFunctionMultiDimTempl< T >::BaseFunc. Definition at line 111 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Re",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:3211,Integrability,interface,interface,3211,"Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; virtual T DoEvalPar (const T *x, const double *p) const =0;  Implementation of the evaluation function using the x values and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef IBaseFunctionMultiDimTempl<T> ROOT::Math::IParametricFunctionMultiDimTempl< T >::BaseFunc. Definition at line 111 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Reimplemented in ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::WrappedMultiTF1Templ< T >, and ROOT::Math::IParametricGradFunctionMultiDimTempl< T >.; Definition at line 143 of file IParamFunction.h. ◆ DoEvalPar(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEvalPar ; (; const T * ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x values and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::WrappedParamFunction< FuncPtr >, ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::WrappedMultiTF1Templ< T >, and ROOT::Math::IParametricGradFunctionMultiDimTempl< T >. ◆ operator()() [1/2]. template<class T > . T ROOT::Math::IParametricFunctionMultiDimTempl< T >::operator() ; (; const T * ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:950,Modifiability,inherit,inherited,950,". ROOT: ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricFunctionMultiDimTempl< T >IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. ; Provides the interface for evaluating a function passing a coordinate vector and a parameter vector. ; Definition at line 107 of file IParamFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:1290,Modifiability,inherit,inherited,1290," MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricFunctionMultiDimTempl< T >IParamFunction interface (abstract class) describing multi-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionMultiDim and ROOT::Math::IBaseParam. ; Provides the interface for evaluating a function passing a coordinate vector and a parameter vector. ; Definition at line 107 of file IParamFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEv",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:1711,Modifiability,inherit,inherited,1711,"ate vector and a parameter vector. ; Definition at line 107 of file IParamFunction.h. Public Types; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; virtual T DoEvalPar (const T *x, const double *p) const =0;  Implementation of the evaluation function using the x values and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:2386,Performance,cache,cached,2386,"tionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; virtual T DoEvalPar (const T *x, const double *p) const =0;  Implementation of the evaluation function using the x values and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef IBaseFunctionMultiDimTempl<T> ROOT::Math::IParametricFunctionMultiDimTempl< T >::BaseFunc. Definition at line 111 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Re",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:3241,Performance,cache,cached,3241,"Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; virtual T DoEvalPar (const T *x, const double *p) const =0;  Implementation of the evaluation function using the x values and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef IBaseFunctionMultiDimTempl<T> ROOT::Math::IParametricFunctionMultiDimTempl< T >::BaseFunc. Definition at line 111 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Reimplemented in ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::WrappedMultiTF1Templ< T >, and ROOT::Math::IParametricGradFunctionMultiDimTempl< T >.; Definition at line 143 of file IParamFunction.h. ◆ DoEvalPar(). template<class T > . virtual T ROOT::Math::IParametricFunctionMultiDimTempl< T >::DoEvalPar ; (; const T * ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x values and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::MultiDimParamFunctionAdapter, ROOT::Math::WrappedParamFunction< FuncPtr >, ROOT::Math::WrappedParamFunctionGen< FuncPtr >, ROOT::Math::WrappedMultiTF1Templ< T >, and ROOT::Math::IParametricGradFunctionMultiDimTempl< T >. ◆ operator()() [1/2]. template<class T > . T ROOT::Math::IParametricFunctionMultiDimTempl< T >::operator() ; (; const T * ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html:2032,Safety,avoid,avoid,2032,"aseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual T DoEval (const T *x) const;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; virtual T DoEvalPar (const T *x, const double *p) const =0;  Implementation of the evaluation function using the x values and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . typedef IBaseFunctionMultiDimTempl<T> ROOT::Math::IParametricFunctionMultiDimTempl< T >::BaseFunc. Definition at line 111 of file IParamFunction.h. ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:445,Integrability,interface,interface,445,". ROOT: ROOT::Math::IParametricFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. ; Definition at line 159 of file IParamFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:909,Integrability,interface,interface,909,". ROOT: ROOT::Math::IParametricFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. ; Definition at line 159 of file IParamFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:2107,Integrability,interface,interface,2107," from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ;  ; virtual double DoEvalPar (double x, const double *p) const =0;  Implementation of the evaluation function using the x value and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IParametricFunctionOneDim::BaseFunc. Definition at line 166 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). double ROOT::Math::IParametricFunctionOneDim::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionOneDim.; Reimplemented in ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccurat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:2876,Integrability,interface,interface,2876,"Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ;  ; virtual double DoEvalPar (double x, const double *p) const =0;  Implementation of the evaluation function using the x value and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IParametricFunctionOneDim::BaseFunc. Definition at line 166 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). double ROOT::Math::IParametricFunctionOneDim::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionOneDim.; Reimplemented in ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile.; Definition at line 203 of file IParamFunction.h. ◆ DoEvalPar(). virtual double ROOT::Math::IParametricFunctionOneDim::DoEvalPar ; (; double ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x value and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::Polynomial, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile. ◆ operator()() [1/2]. double ROOT::Math::IParametricFunctionOneDim::operator() ; (; const double * ; x, . const double * ; p . ); const. inline . multidim-like interface ; Definition at line 187 of file IParamFunction.h. ◆ operator()() [2/2]. double ROOT::Math::IP",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:3776,Integrability,interface,interface,3776,"on.h. Member Function Documentation. ◆ DoEval(). double ROOT::Math::IParametricFunctionOneDim::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionOneDim.; Reimplemented in ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile.; Definition at line 203 of file IParamFunction.h. ◆ DoEvalPar(). virtual double ROOT::Math::IParametricFunctionOneDim::DoEvalPar ; (; double ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x value and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::Polynomial, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile. ◆ operator()() [1/2]. double ROOT::Math::IParametricFunctionOneDim::operator() ; (; const double * ; x, . const double * ; p . ); const. inline . multidim-like interface ; Definition at line 187 of file IParamFunction.h. ◆ operator()() [2/2]. double ROOT::Math::IParametricFunctionOneDim::operator() ; (; double ; x, . const double * ; p . ); const. inline . Evaluate function at a point x and for given parameters p. ; This method does not change the internal status of the function (internal parameter values). If for some reason one prefers caching the parameter values, SetParameters(p) and then operator()(x) should be called. Use the pure virtual function DoEvalPar to implement it ; Definition at line 178 of file IParamFunction.h. Libraries for ROOT::Math::IParametricFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricFunctionOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:720,Modifiability,inherit,inherited,720,". ROOT: ROOT::Math::IParametricFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. ; Definition at line 159 of file IParamFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:1067,Modifiability,inherit,inherited,1067," No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. ; Definition at line 159 of file IParamFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) usin",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:1460,Modifiability,inherit,inherited,1460,"ss from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. ; Definition at line 159 of file IParamFunction.h. Public Types; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ;  ; virtual double DoEvalPar (double x, const double *p) const =0;  Implementation of the evaluation function using the x value and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Document",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:2137,Performance,cache,cached,2137," from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ;  ; virtual double DoEvalPar (double x, const double *p) const =0;  Implementation of the evaluation function using the x value and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IParametricFunctionOneDim::BaseFunc. Definition at line 166 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). double ROOT::Math::IParametricFunctionOneDim::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionOneDim.; Reimplemented in ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccurat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:2906,Performance,cache,cached,2906,"Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ;  ; virtual double DoEvalPar (double x, const double *p) const =0;  Implementation of the evaluation function using the x value and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IParametricFunctionOneDim::BaseFunc. Definition at line 166 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). double ROOT::Math::IParametricFunctionOneDim::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ; Implements ROOT::Math::IBaseFunctionOneDim.; Reimplemented in ROOT::Math::WrappedTF1, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile.; Definition at line 203 of file IParamFunction.h. ◆ DoEvalPar(). virtual double ROOT::Math::IParametricFunctionOneDim::DoEvalPar ; (; double ; x, . const double * ; p . ); const. privatepure virtual . Implementation of the evaluation function using the x value and the parameters. ; Must be implemented by derived classes ; Implemented in ROOT::Math::WrappedTF1, ROOT::Math::Polynomial, ROOT::Math::VavilovAccurateCdf, ROOT::Math::VavilovAccuratePdf, and ROOT::Math::VavilovAccurateQuantile. ◆ operator()() [1/2]. double ROOT::Math::IParametricFunctionOneDim::operator() ; (; const double * ; x, . const double * ; p . ); const. inline . multidim-like interface ; Definition at line 187 of file IParamFunction.h. ◆ operator()() [2/2]. double ROOT::Math::IP",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html:1781,Safety,avoid,avoid,1781,"d from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; double DoEval (double x) const override;  Implement the ROOT::Math::IBaseFunctionOneDim interface DoEval(x) using the cached parameter values. ;  ; virtual double DoEvalPar (double x, const double *p) const =0;  Implementation of the evaluation function using the x value and the parameters. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IBaseFunctionOneDim ROOT::Math::IParametricFunctionOneDim::BaseFunc. Definition at line 166 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). double R",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:4138,Integrability,interface,interface,4138,"ionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; T DoEval (const T *x) const override;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; T DoEvalPar (const T *x, const double *p) const override=0;  Implementation of the evaluation function using the x values and the parameters. ;  ; virtual T DoParameterDerivative (const T *x, const double *p, unsigned int ipar) const =0;  Evaluate the partial derivative w.r.t a parameter ipar , to be implemented by the derived classes. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricGradFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseFunc = typename IParametricFunctionMultiDimTempl<T>::BaseFunc. Definition at line 232 of file IParamFunction.h. ◆ BaseGradFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseGradFunc = IGra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:5932,Integrability,interface,interface,5932,"seFunc. Definition at line 232 of file IParamFunction.h. ◆ BaseGradFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseGradFunc = IGradientFunctionMultiDimTempl<T>. Definition at line 231 of file IParamFunction.h. ◆ BaseParamFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseParamFunc = IParametricFunctionMultiDimTempl<T>. Definition at line 230 of file IParamFunction.h. Constructor & Destructor Documentation. ◆ ~IParametricGradFunctionMultiDimTempl(). template<class T > . ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::~IParametricGradFunctionMultiDimTempl ; (; ). inlineoverride . Virtual Destructor (no operations) ; Definition at line 238 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Reimplemented from ROOT::Math::IParametricFunctionMultiDimTempl< T >.; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 307 of file IParamFunction.h. ◆ DoEvalPar(). template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::DoEvalPar ; (; const T * ; x, . const double * ; p . ); const. overrideprivatepure virtual . Implementation of the evaluation function using the x values and the parameters. ; Must be implemented by derived classes ; Implements ROOT::Math::IParametricFunctionMultiDimTempl< T >.; Implemented in ROOT::Math::WrappedMultiTF1Templ< T >. ◆ DoParameterDerivative(). template<class T > . virtual T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::DoParameterDerivative ; (; const T * ; x, . const double * ; p, . unsigned int ; ipar . ); const. privatepure virtual . Evaluate the partial derivative w.r.t a parameter ipar , to be implemented by the derived classes. ; Implemen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:973,Modifiability,inherit,inherited,973,". ROOT: ROOT::Math::IParametricGradFunctionMultiDimTempl< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricGradFunctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricGradFunctionMultiDimTempl< T >Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionMultiDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 227 of file IParamFunction.h. Public Types; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; virtual bool HasParameterHessian () const;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterD",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:1295,Modifiability,inherit,inherited,1295,"nctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricGradFunctionMultiDimTempl< T >Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionMultiDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 227 of file IParamFunction.h. Public Types; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; virtual bool HasParameterHessian () const;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterDerivative (const T *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; virtual bool ParameterG2 (const T *, const double *, T *) const;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; virtual void P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:1428,Modifiability,inherit,inherited,1428,"nctionMultiDimTempl< T > Class Template ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; template<class T>; class ROOT::Math::IParametricGradFunctionMultiDimTempl< T >Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionMultiDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 227 of file IParamFunction.h. Public Types; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; virtual bool HasParameterHessian () const;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterDerivative (const T *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; virtual bool ParameterG2 (const T *, const double *, T *) const;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; virtual void P",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:2829,Modifiability,inherit,inherited,2829,"al derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterDerivative (const T *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; virtual bool ParameterG2 (const T *, const double *, T *) const;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; virtual void ParameterGradient (const T *x, const double *p, T *grad) const;  Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (const T *x, T *grad) const;  Evaluate all derivatives using cached parameter values. ;  ; virtual bool ParameterHessian (const T *, const double *, T *) const;  Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access t",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:3071,Modifiability,inherit,inherited,3071," *, const double *, T *) const;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; virtual void ParameterGradient (const T *x, const double *p, T *grad) const;  Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (const T *x, T *grad) const;  Evaluate all derivatives using cached parameter values. ;  ; virtual bool ParameterHessian (const T *, const double *, T *) const;  Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; T DoEval (const T *x) const override;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoE",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:3492,Modifiability,inherit,inherited,3492,"rivatives using cached parameter values. ;  ; virtual bool ParameterHessian (const T *, const double *, T *) const;  Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; T DoEval (const T *x) const override;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; T DoEvalPar (const T *x, const double *p) const override=0;  Implementation of the evaluation function using the x values and the parameters. ;  ; virtual T DoParameterDerivative (const T *x, const double *p, unsigned int ipar) const =0;  Evaluate the partial derivative w.r.t a parameter ipar , to be implemented by the derived classes. ;  . #include <Math/IParamFun",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:2087,Performance,cache,cached,2087,"ParamFunction.h. Public Types; using BaseFunc = typename IParametricFunctionMultiDimTempl< T >::BaseFunc;  ; using BaseGradFunc = IGradientFunctionMultiDimTempl< T >;  ; using BaseParamFunc = IParametricFunctionMultiDimTempl< T >;  ;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; virtual bool HasParameterHessian () const;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterDerivative (const T *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; virtual bool ParameterG2 (const T *, const double *, T *) const;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; virtual void ParameterGradient (const T *x, const double *p, T *grad) const;  Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (const T *x, T *grad) const;  Evaluate all derivatives using cached parameter values. ;  ; virtual bool ParameterHessian (const T *, const double *, T *) const;  Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:2580,Performance,cache,cached,2580,"l< T > BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionMultiDimTempl () override;  Virtual Destructor (no operations) ;  ; virtual bool HasParameterHessian () const;  ; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  ; T ParameterDerivative (const T *x, const double *p, unsigned int ipar=0) const;  Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ;  ; T ParameterDerivative (const T *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; virtual bool ParameterG2 (const T *, const double *, T *) const;  Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ;  ; virtual void ParameterGradient (const T *x, const double *p, T *grad) const;  Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (const T *x, T *grad) const;  Evaluate all derivatives using cached parameter values. ;  ; virtual bool ParameterHessian (const T *, const double *, T *) const;  Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBasePa",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:4168,Performance,cache,cached,4168,"ionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; T DoEval (const T *x) const override;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; T DoEvalPar (const T *x, const double *p) const override=0;  Implementation of the evaluation function using the x values and the parameters. ;  ; virtual T DoParameterDerivative (const T *x, const double *p, unsigned int ipar) const =0;  Evaluate the partial derivative w.r.t a parameter ipar , to be implemented by the derived classes. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricGradFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseFunc = typename IParametricFunctionMultiDimTempl<T>::BaseFunc. Definition at line 232 of file IParamFunction.h. ◆ BaseGradFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseGradFunc = IGra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:5962,Performance,cache,cached,5962,"seFunc. Definition at line 232 of file IParamFunction.h. ◆ BaseGradFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseGradFunc = IGradientFunctionMultiDimTempl<T>. Definition at line 231 of file IParamFunction.h. ◆ BaseParamFunc. template<class T > . using ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::BaseParamFunc = IParametricFunctionMultiDimTempl<T>. Definition at line 230 of file IParamFunction.h. Constructor & Destructor Documentation. ◆ ~IParametricGradFunctionMultiDimTempl(). template<class T > . ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::~IParametricGradFunctionMultiDimTempl ; (; ). inlineoverride . Virtual Destructor (no operations) ; Definition at line 238 of file IParamFunction.h. Member Function Documentation. ◆ DoEval(). template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::DoEval ; (; const T * ; x); const. inlineoverrideprivatevirtual . Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ; Reimplemented from ROOT::Math::IParametricFunctionMultiDimTempl< T >.; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 307 of file IParamFunction.h. ◆ DoEvalPar(). template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::DoEvalPar ; (; const T * ; x, . const double * ; p . ); const. overrideprivatepure virtual . Implementation of the evaluation function using the x values and the parameters. ; Must be implemented by derived classes ; Implements ROOT::Math::IParametricFunctionMultiDimTempl< T >.; Implemented in ROOT::Math::WrappedMultiTF1Templ< T >. ◆ DoParameterDerivative(). template<class T > . virtual T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::DoParameterDerivative ; (; const T * ; x, . const double * ; p, . unsigned int ; ipar . ); const. privatepure virtual . Evaluate the partial derivative w.r.t a parameter ipar , to be implemented by the derived classes. ; Implemen",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:8253,Performance,cache,cached,8253,"n.h. ◆ operator()() [1/2]. template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::operator() ; (; const T * ; x); const. inline . Definition at line 248 of file IParamFunction.h. ◆ operator()() [2/2]. template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::operator() ; (; const T * ; x, . const double * ; p . ); const. inline . Definition at line 243 of file IParamFunction.h. ◆ ParameterDerivative() [1/2]. template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterDerivative ; (; const T * ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Evaluate the partial derivative w.r.t a parameter ipar from values and parameters. ; Definition at line 283 of file IParamFunction.h. ◆ ParameterDerivative() [2/2]. template<class T > . T ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterDerivative ; (; const T * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 295 of file IParamFunction.h. ◆ ParameterG2(). template<class T > . virtual bool ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterG2 ; (; const T * ; , . const double * ; , . T * ;  . ); const. inlinevirtual . Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ; g2 is a vector of dimension npar ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 278 of file IParamFunction.h. ◆ ParameterGradient() [1/2]. template<class T > . virtual void ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterGradient ; (; const T * ; x, . const double * ; p, . T * ; grad . ); const. inlinevirtual . Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:9512,Performance,cache,cached,9512,"tricGradFunctionMultiDimTempl< T >::ParameterG2 ; (; const T * ; , . const double * ; , . T * ;  . ); const. inlinevirtual . Evaluate all the second derivatives (diagonal ones) of the function with respect to the parameters at a point x. ; g2 is a vector of dimension npar ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 278 of file IParamFunction.h. ◆ ParameterGradient() [1/2]. template<class T > . virtual void ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterGradient ; (; const T * ; x, . const double * ; p, . T * ; grad . ); const. inlinevirtual . Evaluate the all the derivatives (gradient vector) of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 257 of file IParamFunction.h. ◆ ParameterGradient() [2/2]. template<class T > . void ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterGradient ; (; const T * ; x, . T * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values. ; Definition at line 291 of file IParamFunction.h. ◆ ParameterHessian(). template<class T > . virtual bool ROOT::Math::IParametricGradFunctionMultiDimTempl< T >::ParameterHessian ; (; const T * ; , . const double * ; , . T * ;  . ); const. inlinevirtual . Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes if needed. If it is not implemented return a false. h must be dimensioned as a n x (n+1)/2 matrix (since it is a symmetric matrix) ; Reimplemented in ROOT::Math::WrappedMultiTF1Templ< T >.; Definition at line 272 of file IParamFunction.h. math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricGradFunctionMultiDimTempl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html:3813,Safety,avoid,avoid,3813,"espect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual IBaseFunctionMultiDimTempl< T > * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; virtual unsigned int NDim () const =0;  Retrieve the dimension of the function. ;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; T DoEval (const T *x) const override;  Implement the ROOT::Math::IBaseFunctionMultiDim interface DoEval(x) using the cached parameter values. ;  ; T DoEvalPar (const T *x, const double *p) const override=0;  Implementation of the evaluation function using the x values and the parameters. ;  ; virtual T DoParameterDerivative (const T *x, const double *p, unsigned int ipar) const =0;  Evaluate the partial derivative w.r.t a parameter ipar , to be implemented by the derived classes. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricGradFunctionMultiDimTempl< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionMultiDimTempl.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:1581,Integrability,interface,interface,1581,"dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionOneDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the functio",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:1778,Integrability,interface,interface,1778,"Gradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2153,Integrability,interface,interface,2153,"nherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2336,Integrability,interface,interface,2336,"icGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2795,Integrability,interface,interface,2795,"interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the par",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:5649,Integrability,interface,interface,5649,"etricFunctionOneDim ROOT::Math::IParametricGradFunctionOneDim::BaseParamFunc. Definition at line 334 of file IParamFunction.h. Constructor & Destructor Documentation. ◆ ~IParametricGradFunctionOneDim(). ROOT::Math::IParametricGradFunctionOneDim::~IParametricGradFunctionOneDim ; (; ). inlineoverride . Virtual Destructor (no operations) ; Definition at line 342 of file IParamFunction.h. Member Function Documentation. ◆ DoParameterDerivative(). virtual double ROOT::Math::IParametricGradFunctionOneDim::DoParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar . ); const. privatepure virtual . Evaluate the gradient, to be implemented by the derived classes. ; Implemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial. ◆ ParameterDerivative() [1/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ; Definition at line 403 of file IParamFunction.h. ◆ ParameterDerivative() [2/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. v",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:5991,Integrability,interface,interface,5991,"inition at line 342 of file IParamFunction.h. Member Function Documentation. ◆ DoParameterDerivative(). virtual double ROOT::Math::IParametricGradFunctionOneDim::DoParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar . ); const. privatepure virtual . Evaluate the gradient, to be implemented by the derived classes. ; Implemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial. ◆ ParameterDerivative() [1/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ; Definition at line 403 of file IParamFunction.h. ◆ ParameterDerivative() [2/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::Param",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:6806,Integrability,interface,interface,6806,"Dim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency if needed ; Reimplemented in ROOT::Math::WrappedTF1.; Definition at line 351 of file IParamFunction.h. ◆ ParameterGradient() [4/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . double * ; grad . ); const. inline . Evaluate all deriva",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:7131,Integrability,interface,interface,7131,"onOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency if needed ; Reimplemented in ROOT::Math::WrappedTF1.; Definition at line 351 of file IParamFunction.h. ◆ ParameterGradient() [4/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values. ; Definition at line 361 of file IParamFunction.h. Libraries for ROOT::Math::IParametricGradFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricGradFunctionOneD",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:846,Modifiability,inherit,inherited,846,". ROOT: ROOT::Math::IParametricGradFunctionOneDim Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricGradFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionOneDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evalua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:1123,Modifiability,inherit,inherited,1123,"ing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricGradFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionOneDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *gra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:1232,Modifiability,inherit,inherited,1232,"ing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; List of all members ; ROOT::Math::IParametricGradFunctionOneDim Class ReferenceabstractMath » MathCore » Function Classes and Interfaces » Parametric Function Evaluation Interfaces. ; Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. ; It is a derived class from ROOT::Math::IParametricFunctionOneDim.; The pure private virtual method DoParameterGradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *gra",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2666,Modifiability,inherit,inherited,2666,"interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the par",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2953,Modifiability,inherit,inherited,2953,"ative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual double DoParameterDerivative (double x, const double *p, unsigned int ipar) const =0;  Evaluate the grad",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:3346,Modifiability,inherit,inherited,3346,"*grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual double DoParameterDerivative (double x, const double *p, unsigned int ipar) const =0;  Evaluate the gradient, to be implemented by the derived classes. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricGradFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IParametricFunctionOneDim::BaseFunc ROOT::Math::IParametricGradFunctionOneDim::BaseFunc. Definition a",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:1738,Performance,cache,cached,1738,"Gradient must be implemented by the derived classes in addition to those inherited by the base abstract classes. ; Definition at line 327 of file IParamFunction.h. Public Types; typedef IParametricFunctionOneDim::BaseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2029,Performance,cache,cached,2029,"aseFunc BaseFunc;  ; typedef IGradientFunctionOneDim BaseGradFunc;  ; typedef IParametricFunctionOneDim BaseParamFunc;  ;  Public Types inherited from ROOT::Math::IParametricFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Public Member Functions;  ~IParametricGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFun",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2296,Performance,cache,cached,2296,"icGradFunctionOneDim () override;  Virtual Destructor (no operations) ;  ; double ParameterDerivative (const double *x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited f",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:2611,Performance,cache,cached,2611,"lity interface with multi-dimensional functions. ;  ; double ParameterDerivative (const double *x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values (multi-dim like interface) ;  ; double ParameterDerivative (double x, const double *p, unsigned int ipar=0) const;  Partial derivative with respect a parameter. ;  ; double ParameterDerivative (double x, unsigned int ipar=0) const;  Evaluate partial derivative using cached parameter values. ;  ; void ParameterGradient (const double *x, const double *p, double *grad) const;  Compatibility interface with multi-dimensional functions. ;  ; void ParameterGradient (const double *x, double *grad) const;  Evaluate all derivatives using cached parameter values (multi-dim like interface) ;  ; virtual void ParameterGradient (double x, const double *p, double *grad) const;  Evaluate the derivatives of the function with respect to the parameters at a point x. ;  ; void ParameterGradient (double x, double *grad) const;  Evaluate all derivatives using cached parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:5951,Performance,cache,cached,5951,"inition at line 342 of file IParamFunction.h. Member Function Documentation. ◆ DoParameterDerivative(). virtual double ROOT::Math::IParametricGradFunctionOneDim::DoParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar . ); const. privatepure virtual . Evaluate the gradient, to be implemented by the derived classes. ; Implemented in ROOT::Math::WrappedTF1, and ROOT::Math::Polynomial. ◆ ParameterDerivative() [1/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ; Definition at line 403 of file IParamFunction.h. ◆ ParameterDerivative() [2/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::Param",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:6535,Performance,cache,cached,6535," double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter Compatibility interface with multi-dimensional functions. ; Definition at line 403 of file IParamFunction.h. ◆ ParameterDerivative() [2/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; const double * ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values (multi-dim like interface) ; Definition at line 412 of file IParamFunction.h. ◆ ParameterDerivative() [3/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for b",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:7091,Performance,cache,cached,7091,"onOneDim::ParameterDerivative ; (; double ; x, . const double * ; p, . unsigned int ; ipar = 0 . ); const. inline . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency if needed ; Reimplemented in ROOT::Math::WrappedTF1.; Definition at line 351 of file IParamFunction.h. ◆ ParameterGradient() [4/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values. ; Definition at line 361 of file IParamFunction.h. Libraries for ROOT::Math::IParametricGradFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricGradFunctionOneD",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:7832,Performance,cache,cached,7832,"line . Partial derivative with respect a parameter. ; Definition at line 386 of file IParamFunction.h. ◆ ParameterDerivative() [4/4]. double ROOT::Math::IParametricGradFunctionOneDim::ParameterDerivative ; (; double ; x, . unsigned int ; ipar = 0 . ); const. inline . Evaluate partial derivative using cached parameter values. ; Definition at line 394 of file IParamFunction.h. ◆ ParameterGradient() [1/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inline . Compatibility interface with multi-dimensional functions. ; Definition at line 369 of file IParamFunction.h. ◆ ParameterGradient() [2/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; const double * ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values (multi-dim like interface) ; Definition at line 377 of file IParamFunction.h. ◆ ParameterGradient() [3/4]. virtual void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . const double * ; p, . double * ; grad . ); const. inlinevirtual . Evaluate the derivatives of the function with respect to the parameters at a point x. ; It is optional to be implemented by the derived classes for better efficiency if needed ; Reimplemented in ROOT::Math::WrappedTF1.; Definition at line 351 of file IParamFunction.h. ◆ ParameterGradient() [4/4]. void ROOT::Math::IParametricGradFunctionOneDim::ParameterGradient ; (; double ; x, . double * ; grad . ); const. inline . Evaluate all derivatives using cached parameter values. ; Definition at line 361 of file IParamFunction.h. Libraries for ROOT::Math::IParametricGradFunctionOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IParamFunction.h. ROOTMathIParametricGradFunctionOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html:3667,Safety,avoid,avoid,3667,"hed parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual IBaseFunctionOneDim * Clone () const =0;  Clone a function. ;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual unsigned int NPar () const =0;  Return the number of Parameters. ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; virtual const double * Parameters () const =0;  Access the parameter values. ;  ; virtual void SetParameters (const double *p)=0;  Set the parameter values. ;  . Private Member Functions; virtual double DoParameterDerivative (double x, const double *p, unsigned int ipar) const =0;  Evaluate the gradient, to be implemented by the derived classes. ;  . #include <Math/IParamFunction.h>. Inheritance diagram for ROOT::Math::IParametricGradFunctionOneDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IParametricFunctionOneDim::BaseFunc ROOT::Math::IParametricGradFunctionOneDim::BaseFunc. Definition at line 336 of file IParamFunction.h. ◆ BaseGradFunc. typedef IGradientFunctionOneDim ROOT::Math::IParametricGradFunctionOneDim::BaseGradFunc. Definition at line 335 of file IParamFunction.h. ◆ Bas",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IParametricGradFunctionOneDim.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:732,Availability,error,error,732,". ROOT: ROOT::Math::IRootFinderMethod Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; ROOT::Math::IRootFinderMethod Class ReferenceabstractMath » MathCore | Math » MathMore » Numerical Algorithms » One-dimensional Root-Finding. ; Interface for finding function roots of one-dimensional functions. ; Definition at line 34 of file IRootFinderMethod.h. Public Member Functions;  IRootFinderMethod ();  Default Constructor. ;  ; virtual ~IRootFinderMethod ();  Default Destructor. ;  ; virtual int Iterate ();  This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ;  ; virtual int Iterations () const;  Return number of iterations used to find the root Must be implemented by derived classes. ;  ; virtual const char * Name () const =0;  Return name of root finder algorithm. ;  ; virtual double Root () const =0;  Returns the previously calculated root. ;  ; virtual bool SetFunction (const ROOT::Math::IGenFunction &, double, double);  Sets the function for the rest of the algorithms. ;  ; virtual bool SetFunction (const ROOT::Math::IGradFunction &, double);  Sets the function for algorithms using derivatives. ;  ; virtual bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10)=0;  Stimates the root for the function. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  . #include <Math/IRootFinderMethod.h>. Inheritance diagram for ROOT::Math::IRootFinderMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IRootFinderMethod(). virtual ROOT::Math::IRootFinderMethod::~IRootFinderMethod ; (; ). inlinevirtual . Default Destructor. ; Definition at line 37 of file IRootFinderMethod.h. ◆ IRootFinderMethod(). ROOT::Math::IRootFinderMethod::IRootFinderMe",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:2319,Availability,error,error,2319,"or algorithms using derivatives. ;  ; virtual bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10)=0;  Stimates the root for the function. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  . #include <Math/IRootFinderMethod.h>. Inheritance diagram for ROOT::Math::IRootFinderMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IRootFinderMethod(). virtual ROOT::Math::IRootFinderMethod::~IRootFinderMethod ; (; ). inlinevirtual . Default Destructor. ; Definition at line 37 of file IRootFinderMethod.h. ◆ IRootFinderMethod(). ROOT::Math::IRootFinderMethod::IRootFinderMethod ; (; ). inline . Default Constructor. ; Definition at line 40 of file IRootFinderMethod.h. Member Function Documentation. ◆ Iterate(). virtual int ROOT::Math::IRootFinderMethod::Iterate ; (; ). inlinevirtual . This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ; Reimplemented in ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 79 of file IRootFinderMethod.h. ◆ Iterations(). virtual int ROOT::Math::IRootFinderMethod::Iterations ; (; ); const. inlinevirtual . Return number of iterations used to find the root Must be implemented by derived classes. ; Reimplemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 87 of file IRootFinderMethod.h. ◆ Name(). virtual const char * ROOT::Math::IRootFinderMethod::Name ; (; ); const. pure virtual . Return name of root finder algorithm. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ Root(). virtual double ROOT::Math::IRootFinderMethod::Root ; (; ); const. pure virtual . Returns the previously calculated root. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFind",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:4504,Availability,error,error,4504,"ulated root. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ SetFunction() [1/2]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGenFunction & ; , . double ; , . double ;  . ). inlinevirtual . Sets the function for the rest of the algorithms. ; The parameters set the interval where the root has to be calculated. ; Reimplemented in ROOT::Math::GSLRootFinder, ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, ROOT::Math::GSLRootFinderDeriv, and ROOT::Math::BrentRootFinder.; Definition at line 53 of file IRootFinderMethod.h. ◆ SetFunction() [2/2]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGradFunction & ; , . double ;  . ). inlinevirtual . Sets the function for algorithms using derivatives. . Reimplemented in ROOT::Math::GSLRootFinderDeriv, ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 45 of file IRootFinderMethod.h. ◆ Solve(). virtual bool ROOT::Math::IRootFinderMethod::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). pure virtual . Stimates the root for the function. ; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ Status(). virtual int ROOT::Math::IRootFinderMethod::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IRootFinderMethod.h. ROOTMathIRootFinderMethod. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html
https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:4566,Availability,error,error,4566,"ulated root. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ SetFunction() [1/2]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGenFunction & ; , . double ; , . double ;  . ). inlinevirtual . Sets the function for the rest of the algorithms. ; The parameters set the interval where the root has to be calculated. ; Reimplemented in ROOT::Math::GSLRootFinder, ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, ROOT::Math::GSLRootFinderDeriv, and ROOT::Math::BrentRootFinder.; Definition at line 53 of file IRootFinderMethod.h. ◆ SetFunction() [2/2]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGradFunction & ; , . double ;  . ). inlinevirtual . Sets the function for algorithms using derivatives. . Reimplemented in ROOT::Math::GSLRootFinderDeriv, ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 45 of file IRootFinderMethod.h. ◆ Solve(). virtual bool ROOT::Math::IRootFinderMethod::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). pure virtual . Stimates the root for the function. ; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desired relative error in the minimum position. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ Status(). virtual int ROOT::Math::IRootFinderMethod::Status ; (; ); const. pure virtual . Returns the status of the previous estimate. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. The documentation for this class was generated from the following file:; math/mathcore/inc/Math/IRootFinderMethod.h. ROOTMathIRootFinderMethod. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:510,Availability,error,errors,510,". ROOT: ROOT::Math::KahanSum< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KahanSum< T, N > Class Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:674,Availability,error,errors,674,". ROOT: ROOT::Math::KahanSum< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KahanSum< T, N > Class Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:2366,Availability,error,error,2366,"itude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4; AVX512-float: 16; AVX512-double: 8. Examples; std::vector<double> numbers(1000);; for (std::size_t i=0; i<1000; ++i) {; numbers[i] = rand();; }; ; ROOT::Math::KahanSum<double, 4> k;; k.Add(numbers.begin(), numbers.end());; // or; k.Add(numbers);; ROOT::Math::KahanSumThe Kahan summation is a compensated summation algorithm, which significantly reduces numerical error...Definition Util.h:122; ROOT::Math::KahanSum::Addvoid Add(T x)Single-element accumulation. Will not vectorise.Definition Util.h:165; double offset = 10.;; auto result = ROOT::Math::KahanSum<double, 4>::Accumulate(numbers.begin(), numbers.end(), offset);; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:9543,Availability,avail,available,9543,":Add ; (; Iterator ; begin, . Iterator ; end . ). inline . Accumulate from a range denoted by iterators. ; This function will auto-vectorise with random-access iterators. Parameters. [in]beginBeginning of a range. Needs to be a random access iterator for automatic vectorisation, because a contiguous block of memory needs to be read. ; [in]endEnd of the range. . Definition at line 180 of file Util.h. ◆ Add() [3/3]. template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::Add ; (; T ; x). inline . Single-element accumulation. Will not vectorise. ; Definition at line 165 of file Util.h. ◆ AddIndexed(). template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::AddIndexed ; (; T ; input, . std::size_t ; index . ). inline . Add input to the sum. ; Particularly helpful when filling from a for loop. This function can be inlined and auto-vectorised if the index parameter is used to enumerate consecutive fills. Use Add() or Accumulate() when no index is available. Parameters. [in]inputValue to accumulate. ; [in]indexIndex of the value. Determines internal accumulator that this value is added to. Make sure that consecutive fills have consecutive indices to make a loop auto-vectorisable. The actual value of the index does not matter, as long as it is consecutive. . Definition at line 231 of file Util.h. ◆ Carry(). template<typename T = double, unsigned int N = 1> . T ROOT::Math::KahanSum< T, N >::Carry ; (; ); const. inline . ReturnsThe sum used for compensation. ; Definition at line 250 of file Util.h. ◆ operator!=(). template<typename T = double, unsigned int N = 1> . template<typename U , unsigned int M> . bool ROOT::Math::KahanSum< T, N >::operator!= ; (; KahanSum< U, M > const & ; other); const. inline . Definition at line 310 of file Util.h. ◆ operator+=() [1/2]. template<typename T = double, unsigned int N = 1> . template<typename U , unsigned int M> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator+= ;",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:492,Energy Efficiency,reduce,reduces,492,". ROOT: ROOT::Math::KahanSum< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KahanSum< T, N > Class Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:2348,Energy Efficiency,reduce,reduces,2348,"itude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4; AVX512-float: 16; AVX512-double: 8. Examples; std::vector<double> numbers(1000);; for (std::size_t i=0; i<1000; ++i) {; numbers[i] = rand();; }; ; ROOT::Math::KahanSum<double, 4> k;; k.Add(numbers.begin(), numbers.end());; // or; k.Add(numbers);; ROOT::Math::KahanSumThe Kahan summation is a compensated summation algorithm, which significantly reduces numerical error...Definition Util.h:122; ROOT::Math::KahanSum::Addvoid Add(T x)Single-element accumulation. Will not vectorise.Definition Util.h:165; double offset = 10.;; auto result = ROOT::Math::KahanSum<double, 4>::Accumulate(numbers.begin(), numbers.end(), offset);; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:1274,Integrability,depend,depends,1274,"s Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4; AVX512-float: 16; AVX512-double: 8. Examples; std::vector<double> numbers(1000);; for (std::size_t i=0; i<1000; ++i) {; numbers[i] = rand();; }; ; ROOT::Math::KahanSum<double, 4> k;; k.Add(numbers.begin(), numbers.end());; // or; k.Add(numbers);; ROOT::Math::KahanSumThe Kahan summation is a compensate",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:1407,Integrability,depend,dependence,1407,"ahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4; AVX512-float: 16; AVX512-double: 8. Examples; std::vector<double> numbers(1000);; for (std::size_t i=0; i<1000; ++i) {; numbers[i] = rand();; }; ; ROOT::Math::KahanSum<double, 4> k;; k.Add(numbers.begin(), numbers.end());; // or; k.Add(numbers);; ROOT::Math::KahanSumThe Kahan summation is a compensated summation algorithm, which significantly reduces numerical error...Definition Util.h:122; ROO",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:645,Modifiability,variab,variable,645,". ROOT: ROOT::Math::KahanSum< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KahanSum< T, N > Class Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:11089,Performance,perform,performance,11089,"Definition at line 250 of file Util.h. ◆ operator!=(). template<typename T = double, unsigned int N = 1> . template<typename U , unsigned int M> . bool ROOT::Math::KahanSum< T, N >::operator!= ; (; KahanSum< U, M > const & ; other); const. inline . Definition at line 310 of file Util.h. ◆ operator+=() [1/2]. template<typename T = double, unsigned int N = 1> . template<typename U , unsigned int M> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator+= ; (; const KahanSum< U, M > & ; other). inline . Add other KahanSum into accumulator. ; Does not vectorise.; Based on KahanIncrement from: Y. Tian, S. Tatikonda and B. Reinwald, ""Scalable and Numerically Stable Descriptive Statistics in SystemML,"" 2012 IEEE 28th International Conference on Data Engineering, 2012, pp. 1351-1359, doi: 10.1109/ICDE.2012.12. Note that while Tian et al. add the carry in the first step, we subtract the carry, in accordance with the Add(Indexed) implementation(s) above. This is purely an implementation choice that has no impact on performance.; NoteTake care when using += (and -=) to add other KahanSums into a zero-initialized KahanSum. The operator behaves correctly in this case, but the result may be slightly off if you expect 0 + x to yield exactly x (where 0 is the zero-initialized KahanSum and x another KahanSum). In particular, x's carry term may get lost. This doesn't just happen with zero-initialized KahanSums; see the SubtractWithABitTooSmallCarry test case in the testKahan unittest for other examples. This behavior is internally consistent: the carry also gets lost if you switch the operands and it also happens with other KahanSum operators. ; Definition at line 277 of file Util.h. ◆ operator+=() [2/2]. template<typename T = double, unsigned int N = 1> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator+= ; (; T ; arg). inline . Add arg into accumulator. Does not vectorise. ; Definition at line 255 of file Util.h. ◆ operator-(). template<typename T = double, unsigned in",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:841,Security,access,access,841,". ROOT: ROOT::Math::KahanSum< T, N > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::KahanSum< T, N > Class Template Reference. ; template<typename T = double, unsigned int N = 1>; class ROOT::Math::KahanSum< T, N >The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. ; This is done by keeping a separate running compensation (a variable to accumulate small errors). Auto-vectorisable accumulation; This class can internally use multiple accumulators (template parameter N). When filled from a collection that supports index access from a contiguous block of memory, compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling through the internal accumulators based on the value of ""`index % N`"", so N accumulators can be filled from a block of N numbers in a single instruction.; The usage of multiple accumulators might slightly increase the precision in comparison to the single-accumulator version with N = 1. This depends on the order and magnitude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:4573,Security,access,access,4573,"TextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::Math::KahanSum::Accumulatestatic KahanSum< T, N > Accumulate(Iterator begin, Iterator end, T initialValue=T{})Iterate over a range and return an instance of a KahanSum.Definition Util.h:211. Definition at line 122 of file Util.h. Public Member Functions; template<class Iterator > ;  KahanSum (Iterator sumBegin, Iterator sumEnd, Iterator carryBegin, Iterator carryEnd);  Initialise the sum with a pre-existing state. ;  ; template<unsigned int M> ;  KahanSum (KahanSum< T, M > const &other);  Constructor to create a KahanSum from another KahanSum with a different number of accumulators. ;  ;  KahanSum (T initialSumValue, T initialCarryValue);  Initialise with a sum value and a carry value. ;  ;  KahanSum (T initialValue=T{});  Initialise the sum. ;  ; template<class Container_t > ; void Add (const Container_t &inputs);  Fill from a container that supports index access. ;  ; template<class Iterator > ; void Add (Iterator begin, Iterator end);  Accumulate from a range denoted by iterators. ;  ; void Add (T x);  Single-element accumulation. Will not vectorise. ;  ; void AddIndexed (T input, std::size_t index);  Add input to the sum. ;  ; T Carry () const;  ; template<typename U , unsigned int M> ; bool operator!= (KahanSum< U, M > const &other) const;  ; template<typename U , unsigned int M> ; KahanSum< T, N > & operator+= (const KahanSum< U, M > &other);  Add other KahanSum into accumulator. ;  ; KahanSum< T, N > & operator+= (T arg);  Add arg into accumulator. Does not vectorise. ;  ; KahanSum< T, N > operator- ();  ; template<typename U , unsigned int M> ; KahanSum< T, N > & operator-= (KahanSum< U, M > const &other);  Subtract other KahanSum. ;  ; template<typename U , unsigned int M> ; bool operator== (KahanSum< U, M > const &other) const;  ; T Result () const;  ; T Sum () const;  . Sta",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:8266,Security,access,access,8266," N = 1> . template<unsigned int M> . ROOT::Math::KahanSum< T, N >::KahanSum ; (; KahanSum< T, M > const & ; other). inline . Constructor to create a KahanSum from another KahanSum with a different number of accumulators. ; Definition at line 157 of file Util.h. Member Function Documentation. ◆ Accumulate(). template<typename T = double, unsigned int N = 1> . template<class Iterator > . static KahanSum< T, N > ROOT::Math::KahanSum< T, N >::Accumulate ; (; Iterator ; begin, . Iterator ; end, . T ; initialValue = T{} . ). inlinestatic . Iterate over a range and return an instance of a KahanSum. ; See Add(Iterator,Iterator) for details. Parameters. [in]beginBeginning of a range. ; [in]endEnd of the range. ; [in]initialValueOptional initial value. . Definition at line 211 of file Util.h. ◆ Add() [1/3]. template<typename T = double, unsigned int N = 1> . template<class Container_t > . void ROOT::Math::KahanSum< T, N >::Add ; (; const Container_t & ; inputs). inline . Fill from a container that supports index access. ; Parameters. [in]inputsContainer with index access such as std::vector or array. . Definition at line 195 of file Util.h. ◆ Add() [2/3]. template<typename T = double, unsigned int N = 1> . template<class Iterator > . void ROOT::Math::KahanSum< T, N >::Add ; (; Iterator ; begin, . Iterator ; end . ). inline . Accumulate from a range denoted by iterators. ; This function will auto-vectorise with random-access iterators. Parameters. [in]beginBeginning of a range. Needs to be a random access iterator for automatic vectorisation, because a contiguous block of memory needs to be read. ; [in]endEnd of the range. . Definition at line 180 of file Util.h. ◆ Add() [3/3]. template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::Add ; (; T ; x). inline . Single-element accumulation. Will not vectorise. ; Definition at line 165 of file Util.h. ◆ AddIndexed(). template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:8319,Security,access,access,8319,"um ; (; KahanSum< T, M > const & ; other). inline . Constructor to create a KahanSum from another KahanSum with a different number of accumulators. ; Definition at line 157 of file Util.h. Member Function Documentation. ◆ Accumulate(). template<typename T = double, unsigned int N = 1> . template<class Iterator > . static KahanSum< T, N > ROOT::Math::KahanSum< T, N >::Accumulate ; (; Iterator ; begin, . Iterator ; end, . T ; initialValue = T{} . ). inlinestatic . Iterate over a range and return an instance of a KahanSum. ; See Add(Iterator,Iterator) for details. Parameters. [in]beginBeginning of a range. ; [in]endEnd of the range. ; [in]initialValueOptional initial value. . Definition at line 211 of file Util.h. ◆ Add() [1/3]. template<typename T = double, unsigned int N = 1> . template<class Container_t > . void ROOT::Math::KahanSum< T, N >::Add ; (; const Container_t & ; inputs). inline . Fill from a container that supports index access. ; Parameters. [in]inputsContainer with index access such as std::vector or array. . Definition at line 195 of file Util.h. ◆ Add() [2/3]. template<typename T = double, unsigned int N = 1> . template<class Iterator > . void ROOT::Math::KahanSum< T, N >::Add ; (; Iterator ; begin, . Iterator ; end . ). inline . Accumulate from a range denoted by iterators. ; This function will auto-vectorise with random-access iterators. Parameters. [in]beginBeginning of a range. Needs to be a random access iterator for automatic vectorisation, because a contiguous block of memory needs to be read. ; [in]endEnd of the range. . Definition at line 180 of file Util.h. ◆ Add() [3/3]. template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::Add ; (; T ; x). inline . Single-element accumulation. Will not vectorise. ; Definition at line 165 of file Util.h. ◆ AddIndexed(). template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::AddIndexed ; (; T ; input, . std::size_t ; index . ). inline . Add inpu",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:8679,Security,access,access,8679,"OT::Math::KahanSum< T, N >::Accumulate ; (; Iterator ; begin, . Iterator ; end, . T ; initialValue = T{} . ). inlinestatic . Iterate over a range and return an instance of a KahanSum. ; See Add(Iterator,Iterator) for details. Parameters. [in]beginBeginning of a range. ; [in]endEnd of the range. ; [in]initialValueOptional initial value. . Definition at line 211 of file Util.h. ◆ Add() [1/3]. template<typename T = double, unsigned int N = 1> . template<class Container_t > . void ROOT::Math::KahanSum< T, N >::Add ; (; const Container_t & ; inputs). inline . Fill from a container that supports index access. ; Parameters. [in]inputsContainer with index access such as std::vector or array. . Definition at line 195 of file Util.h. ◆ Add() [2/3]. template<typename T = double, unsigned int N = 1> . template<class Iterator > . void ROOT::Math::KahanSum< T, N >::Add ; (; Iterator ; begin, . Iterator ; end . ). inline . Accumulate from a range denoted by iterators. ; This function will auto-vectorise with random-access iterators. Parameters. [in]beginBeginning of a range. Needs to be a random access iterator for automatic vectorisation, because a contiguous block of memory needs to be read. ; [in]endEnd of the range. . Definition at line 180 of file Util.h. ◆ Add() [3/3]. template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::Add ; (; T ; x). inline . Single-element accumulation. Will not vectorise. ; Definition at line 165 of file Util.h. ◆ AddIndexed(). template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::AddIndexed ; (; T ; input, . std::size_t ; index . ). inline . Add input to the sum. ; Particularly helpful when filling from a for loop. This function can be inlined and auto-vectorised if the index parameter is used to enumerate consecutive fills. Use Add() or Accumulate() when no index is available. Parameters. [in]inputValue to accumulate. ; [in]indexIndex of the value. Determines internal accumulator that",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:8761,Security,access,access,8761,"r a range and return an instance of a KahanSum. ; See Add(Iterator,Iterator) for details. Parameters. [in]beginBeginning of a range. ; [in]endEnd of the range. ; [in]initialValueOptional initial value. . Definition at line 211 of file Util.h. ◆ Add() [1/3]. template<typename T = double, unsigned int N = 1> . template<class Container_t > . void ROOT::Math::KahanSum< T, N >::Add ; (; const Container_t & ; inputs). inline . Fill from a container that supports index access. ; Parameters. [in]inputsContainer with index access such as std::vector or array. . Definition at line 195 of file Util.h. ◆ Add() [2/3]. template<typename T = double, unsigned int N = 1> . template<class Iterator > . void ROOT::Math::KahanSum< T, N >::Add ; (; Iterator ; begin, . Iterator ; end . ). inline . Accumulate from a range denoted by iterators. ; This function will auto-vectorise with random-access iterators. Parameters. [in]beginBeginning of a range. Needs to be a random access iterator for automatic vectorisation, because a contiguous block of memory needs to be read. ; [in]endEnd of the range. . Definition at line 180 of file Util.h. ◆ Add() [3/3]. template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::Add ; (; T ; x). inline . Single-element accumulation. Will not vectorise. ; Definition at line 165 of file Util.h. ◆ AddIndexed(). template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::AddIndexed ; (; T ; input, . std::size_t ; index . ). inline . Add input to the sum. ; Particularly helpful when filling from a for loop. This function can be inlined and auto-vectorised if the index parameter is used to enumerate consecutive fills. Use Add() or Accumulate() when no index is available. Parameters. [in]inputValue to accumulate. ; [in]indexIndex of the value. Determines internal accumulator that this value is added to. Make sure that consecutive fills have consecutive indices to make a loop auto-vectorisable. The actual value of ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:11523,Testability,test,test,11523,"um< T, N >::operator+= ; (; const KahanSum< U, M > & ; other). inline . Add other KahanSum into accumulator. ; Does not vectorise.; Based on KahanIncrement from: Y. Tian, S. Tatikonda and B. Reinwald, ""Scalable and Numerically Stable Descriptive Statistics in SystemML,"" 2012 IEEE 28th International Conference on Data Engineering, 2012, pp. 1351-1359, doi: 10.1109/ICDE.2012.12. Note that while Tian et al. add the carry in the first step, we subtract the carry, in accordance with the Add(Indexed) implementation(s) above. This is purely an implementation choice that has no impact on performance.; NoteTake care when using += (and -=) to add other KahanSums into a zero-initialized KahanSum. The operator behaves correctly in this case, but the result may be slightly off if you expect 0 + x to yield exactly x (where 0 is the zero-initialized KahanSum and x another KahanSum). In particular, x's carry term may get lost. This doesn't just happen with zero-initialized KahanSums; see the SubtractWithABitTooSmallCarry test case in the testKahan unittest for other examples. This behavior is internally consistent: the carry also gets lost if you switch the operands and it also happens with other KahanSum operators. ; Definition at line 277 of file Util.h. ◆ operator+=() [2/2]. template<typename T = double, unsigned int N = 1> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator+= ; (; T ; arg). inline . Add arg into accumulator. Does not vectorise. ; Definition at line 255 of file Util.h. ◆ operator-(). template<typename T = double, unsigned int N = 1> . KahanSum< T, N > ROOT::Math::KahanSum< T, N >::operator- ; (; ). inline . Definition at line 299 of file Util.h. ◆ operator-=(). template<typename T = double, unsigned int N = 1> . template<typename U , unsigned int M> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator-= ; (; KahanSum< U, M > const & ; other). inline . Subtract other KahanSum. ; Does not vectorise.; Based on KahanIncrement from: Tian et al., 2012 (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:11540,Testability,test,testKahan,11540,"um< T, N >::operator+= ; (; const KahanSum< U, M > & ; other). inline . Add other KahanSum into accumulator. ; Does not vectorise.; Based on KahanIncrement from: Y. Tian, S. Tatikonda and B. Reinwald, ""Scalable and Numerically Stable Descriptive Statistics in SystemML,"" 2012 IEEE 28th International Conference on Data Engineering, 2012, pp. 1351-1359, doi: 10.1109/ICDE.2012.12. Note that while Tian et al. add the carry in the first step, we subtract the carry, in accordance with the Add(Indexed) implementation(s) above. This is purely an implementation choice that has no impact on performance.; NoteTake care when using += (and -=) to add other KahanSums into a zero-initialized KahanSum. The operator behaves correctly in this case, but the result may be slightly off if you expect 0 + x to yield exactly x (where 0 is the zero-initialized KahanSum and x another KahanSum). In particular, x's carry term may get lost. This doesn't just happen with zero-initialized KahanSums; see the SubtractWithABitTooSmallCarry test case in the testKahan unittest for other examples. This behavior is internally consistent: the carry also gets lost if you switch the operands and it also happens with other KahanSum operators. ; Definition at line 277 of file Util.h. ◆ operator+=() [2/2]. template<typename T = double, unsigned int N = 1> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator+= ; (; T ; arg). inline . Add arg into accumulator. Does not vectorise. ; Definition at line 255 of file Util.h. ◆ operator-(). template<typename T = double, unsigned int N = 1> . KahanSum< T, N > ROOT::Math::KahanSum< T, N >::operator- ; (; ). inline . Definition at line 299 of file Util.h. ◆ operator-=(). template<typename T = double, unsigned int N = 1> . template<typename U , unsigned int M> . KahanSum< T, N > & ROOT::Math::KahanSum< T, N >::operator-= ; (; KahanSum< U, M > const & ; other). inline . Subtract other KahanSum. ; Does not vectorise.; Based on KahanIncrement from: Tian et al., 2012 (",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1KahanSum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LCGEngine.html:731,Modifiability,inherit,inherited,731,". ROOT: ROOT::Math::LCGEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LCGEngine Class Reference. . Definition at line 33 of file LCGEngine.h. Public Types; typedef TRandomEngine BaseType;  ; typedef uint32_t Result_t;  ; typedef uint32_t StateInt_t;  . Public Member Functions;  LCGEngine ();  ;  ~LCGEngine () override;  ; uint32_t IntRndm ();  ; double operator() ();  ; double Rndm () override;  ; void SetSeed (uint32_t seed);  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static unsigned int MaxInt ();  maximum integer that can be generated ;  ; static unsigned int MinInt ();  minimum integer that can be generated ;  ; static std::string Name ();  Name of the generator. ;  ; static int Size ();  Size of the generator state. ;  . Protected Member Functions; int Counter () const;  ; void GetState (std::vector< uint32_t > &state);  ; void SetState (const std::vector< uint32_t > &state);  . Private Member Functions; double Rndm_impl ();  . Private Attributes; uint32_t fSeed;  . #include <Math/LCGEngine.h>. Inheritance diagram for ROOT::Math::LCGEngine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseType. typedef TRandomEngine ROOT::Math::LCGEngine::BaseType. Definition at line 38 of file LCGEngine.h. ◆ Result_t. typedef uint32_t ROOT::Math::LCGEngine::Result_t. Definition at line 39 of file LCGEngine.h. ◆ StateInt_t. typedef uint32_t ROOT::Math::LCGEngine::StateInt_t. Definition at line 40 of file LCGEngine.h. Constructor & Destructor Documentation. ◆ LCGEngine(). ROOT::Math::LCGEngine::LCGEngine ; (; ). inline . Definition at line 42 ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LCGEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LCGEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:11453,Performance,perform,performed,11453,"ion::LorentzRotation ; (; Quaternion const & ; q). explicit . Definition at line 79 of file LorentzRotation.cxx. ◆ LorentzRotation() [12/17]. ROOT::Math::LorentzRotation::LorentzRotation ; (; RotationX const & ; r). explicit . Definition at line 91 of file LorentzRotation.cxx. ◆ LorentzRotation() [13/17]. ROOT::Math::LorentzRotation::LorentzRotation ; (; RotationY const & ; r). explicit . Definition at line 101 of file LorentzRotation.cxx. ◆ LorentzRotation() [14/17]. ROOT::Math::LorentzRotation::LorentzRotation ; (; RotationZ const & ; r). explicit . Definition at line 111 of file LorentzRotation.cxx. ◆ LorentzRotation() [15/17]. template<class ForeignMatrix > . constexpr ROOT::Math::LorentzRotation::LorentzRotation ; (; const ForeignMatrix & ; m). inlineexplicitconstexpr . Construct from a linear algebra matrix of size at least 4x4, which must support operator()(i,j) to obtain elements (0,3) thru (3,3). ; Precondition: The matrix is assumed to be orthosymplectic. NO checking or re-adjusting is performed. Note: (0,0) refers to the XX component; (3,3) refers to the TT component. ; Definition at line 119 of file LorentzRotation.h. ◆ LorentzRotation() [16/17]. template<class Foreign4Vector > . ROOT::Math::LorentzRotation::LorentzRotation ; (; const Foreign4Vector & ; v1, . const Foreign4Vector & ; v2, . const Foreign4Vector & ; v3, . const Foreign4Vector & ; v4 . ). inline . Construct from four orthosymplectic vectors (which must have methods x(), y(), z() and t()) which will be used as the columns of the Lorentz rotation matrix. ; The orthosymplectic conditions will be checked, and values adjusted so that the result will always be a good Lorentz rotation matrix. ; Definition at line 129 of file LorentzRotation.h. ◆ LorentzRotation() [17/17]. ROOT::Math::LorentzRotation::LorentzRotation ; (; Scalar ; xx, . Scalar ; xy, . Scalar ; xz, . Scalar ; xt, . Scalar ; yx, . Scalar ; yy, . Scalar ; yz, . Scalar ; yt, . Scalar ; zx, . Scalar ; zy, . Scalar ; zz, . Scalar ; zt, .",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:20049,Performance,perform,performed,20049,"th::LorentzRotation::operator= ; (; Boost const & ; b). inline . Assign from a pure boost. ; Definition at line 165 of file LorentzRotation.h. ◆ operator=() [3/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; BoostX const & ; b). inline . Definition at line 167 of file LorentzRotation.h. ◆ operator=() [4/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; BoostY const & ; b). inline . Definition at line 169 of file LorentzRotation.h. ◆ operator=() [5/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; BoostZ const & ; b). inline . Definition at line 171 of file LorentzRotation.h. ◆ operator=() [6/13]. template<class ForeignMatrix > . LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; const ForeignMatrix & ; m). inline . Assign from a linear algebra matrix of size at least 4x4, which must support operator()(i,j) to obtain elements (0,3) thru (3,3). ; Precondition: The matrix is assumed to be orthosymplectic. NO checking or re-adjusting is performed. ; Definition at line 199 of file LorentzRotation.h. ◆ operator=() [7/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; EulerAngles const & ; e). inline . Definition at line 181 of file LorentzRotation.h. ◆ operator=() [8/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; LorentzRotation const & ; rhs). inline . Assign from another LorentzRotation. ; Definition at line 153 of file LorentzRotation.h. ◆ operator=() [9/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; Quaternion const & ; q). inline . Definition at line 183 of file LorentzRotation.h. ◆ operator=() [10/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; Rotation3D const & ; r). inline . Assign from a 3-D rotation. ; Definition at line 177 of file LorentzRotation.h. ◆ operator=() [11/13]. LorentzRotation & ROOT::Math::LorentzRotation::operator= ; (; RotationX const & ; r). inline . Definition at line 189 of file LorentzRotation.h. ◆ operat",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:23472,Performance,perform,performed,23472,"mponents from four orthosymplectic vectors (which must have methods x(), y(), z(), and t()) which will be used as the columns of the Lorentz rotation matrix. ; The values will be adjusted so that the result will always be a good Lorentz rotation matrix. ; Definition at line 223 of file LorentzRotation.h. ◆ SetComponents() [2/3]. template<class IT > . void ROOT::Math::LorentzRotation::SetComponents ; (; IT ; begin, . IT ; end . ). inline . Set the 16 matrix components given an iterator to the start of the desired data, and another to the end (16 past start). ; Definition at line 256 of file LorentzRotation.h. ◆ SetComponents() [3/3]. void ROOT::Math::LorentzRotation::SetComponents ; (; Scalar ; xx, . Scalar ; xy, . Scalar ; xz, . Scalar ; xt, . Scalar ; yx, . Scalar ; yy, . Scalar ; yz, . Scalar ; yt, . Scalar ; zx, . Scalar ; zy, . Scalar ; zz, . Scalar ; zt, . Scalar ; tx, . Scalar ; ty, . Scalar ; tz, . Scalar ; tt . ). inline . Set the components from sixteen scalars – UNCHECKED for orthosymplectic. ; Definition at line 320 of file LorentzRotation.h. ◆ SetRotationMatrix(). template<class ForeignMatrix > . void ROOT::Math::LorentzRotation::SetRotationMatrix ; (; const ForeignMatrix & ; m). inline . Set components from a linear algebra matrix of size at least 4x4, which must support operator()(i,j) to obtain elements (0,0) thru (3,3). ; Precondition: The matrix is assumed to be orthosymplectic. NO checking or re-adjusting is performed. ; Definition at line 295 of file LorentzRotation.h. Member Data Documentation. ◆ fM. Scalar ROOT::Math::LorentzRotation::fM[16]. private . Definition at line 460 of file LorentzRotation.h. Libraries for ROOT::Math::LorentzRotation:. [legend]; The documentation for this class was generated from the following files:; math/genvector/inc/Math/GenVector/LorentzRotation.h; math/genvector/src/LorentzRotation.cxx. ROOTMathLorentzRotation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:3790,Security,access,access,3790,"thout any checking) ;  ; template<class Foreign4Vector > ; void GetComponents (Foreign4Vector &v1, Foreign4Vector &v2, Foreign4Vector &v3, Foreign4Vector &v4) const;  Get components into four 4-vectors which will be the (orthosymplectic) columns of the rotation matrix. ;  ; template<class IT > ; void GetComponents (IT begin) const;  Get the 16 matrix components into data specified by an iterator begin. ;  ; template<class IT > ; void GetComponents (IT begin, IT end) const;  Get the 16 matrix components into data specified by an iterator begin and another to the end of the desired data (16 past start). ;  ; void GetComponents (Scalar &xx, Scalar &xy, Scalar &xz, Scalar &xt, Scalar &yx, Scalar &yy, Scalar &yz, Scalar &yt, Scalar &zx, Scalar &zy, Scalar &zz, Scalar &zt, Scalar &tx, Scalar &ty, Scalar &tz, Scalar &tt) const;  Get the sixteen components into sixteen scalars. ;  ; template<class ForeignMatrix > ; void GetRotationMatrix (ForeignMatrix &m) const;  Get components into a linear algebra matrix of size at least 4x4, which must support operator()(i,j) for write access to elements (0,0) thru (3,3). ;  ; LorentzRotation Inverse () const;  Return inverse of a rotation. ;  ; void Invert ();  Invert a Lorentz rotation in place. ;  ; bool operator!= (const LorentzRotation &rhs) const;  ; template<class Foreign4Vector > ; Foreign4Vector operator() (const Foreign4Vector &v) const;  Lorentz transformation operation on an arbitrary 4-vector v. ;  ; template<class CoordSystem > ; LorentzVector< CoordSystem > operator() (const LorentzVector< CoordSystem > &v) const;  Lorentz transformation operation on a LorentzVector in any coordinate system. ;  ; LorentzVector< ROOT::Math::PxPyPzE4D< double > > operator() (const LorentzVector< ROOT::Math::PxPyPzE4D< double > > &v) const;  Lorentz transformation operation on a Minkowski ('Cartesian') LorentzVector. ;  ; template<class A4Vector > ; A4Vector operator* (const A4Vector &v) const;  Overload operator * for rotation on a vector. ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:14442,Security,access,access,14442,"3/4]. template<class IT > . void ROOT::Math::LorentzRotation::GetComponents ; (; IT ; begin, . IT ; end . ); const. inline . Get the 16 matrix components into data specified by an iterator begin and another to the end of the desired data (16 past start). ; Definition at line 270 of file LorentzRotation.h. ◆ GetComponents() [4/4]. void ROOT::Math::LorentzRotation::GetComponents ; (; Scalar & ; xx, . Scalar & ; xy, . Scalar & ; xz, . Scalar & ; xt, . Scalar & ; yx, . Scalar & ; yy, . Scalar & ; yz, . Scalar & ; yt, . Scalar & ; zx, . Scalar & ; zy, . Scalar & ; zz, . Scalar & ; zt, . Scalar & ; tx, . Scalar & ; ty, . Scalar & ; tz, . Scalar & ; tt . ); const. inline . Get the sixteen components into sixteen scalars. ; Definition at line 334 of file LorentzRotation.h. ◆ GetRotationMatrix(). template<class ForeignMatrix > . void ROOT::Math::LorentzRotation::GetRotationMatrix ; (; ForeignMatrix & ; m); const. inline . Get components into a linear algebra matrix of size at least 4x4, which must support operator()(i,j) for write access to elements (0,0) thru (3,3). ; Definition at line 309 of file LorentzRotation.h. ◆ Inverse(). LorentzRotation ROOT::Math::LorentzRotation::Inverse ; (; ); const. Return inverse of a rotation. ; Definition at line 186 of file LorentzRotation.cxx. ◆ Invert(). void ROOT::Math::LorentzRotation::Invert ; (; ). Invert a Lorentz rotation in place. ; Definition at line 175 of file LorentzRotation.cxx. ◆ operator!=(). bool ROOT::Math::LorentzRotation::operator!= ; (; const LorentzRotation & ; rhs); const. inline . Definition at line 454 of file LorentzRotation.h. ◆ operator()() [1/3]. template<class Foreign4Vector > . Foreign4Vector ROOT::Math::LorentzRotation::operator() ; (; const Foreign4Vector & ; v); const. inline . Lorentz transformation operation on an arbitrary 4-vector v. ; Preconditions: v must implement methods x(), y(), z(), and t() and the arbitrary vector type must have a constructor taking (x,y,z,t) ; Definition at line 382 of file Lo",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:4615,Availability,toler,tolerance,4615,"  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determine if momentum-energy is spacelike, and represents a tachyon. ;  ; bool isTimelike () const;  Determine if momentum-energy can represent a physical massive particle. ;  ; Scalar M () const;  return magnitude (mass) using the (-,-,-,+) metric. ;  ; Scalar M2 () const;  return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ;  ; Scalar mag () const;  ; Scalar mag2 () const;  ; Scalar mass () const;  ; Scalar mass2 () const;  ; Scalar Mt () const;  return the transverse mass ;  ; Scalar mt () const;  ; Scalar Mt2 () const;  return the transverse mass squared ;  ; Scalar mt2 () const;  ; bool operator!= (const Lorentz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:17587,Availability,toler,tolerance,17587," at line 229 of file LorentzVector.h. ◆ GetCoordinates() [2/4]. template<class CoordSystem > . template<class IT > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; IT ; begin, . IT ; end . ); const. inline . get internal data into 4 Scalars at *begin to *end ; Definition at line 218 of file LorentzVector.h. ◆ GetCoordinates() [3/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar & ; a, . Scalar & ; b, . Scalar & ; c, . Scalar & ; d . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 205 of file LorentzVector.h. ◆ GetCoordinates() [4/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 211 of file LorentzVector.h. ◆ isLightlike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isLightlike ; (; Scalar ; tolerance = 100*std::numeric_limits<Scalar>::epsilon()); const. inline . Determine if momentum-energy can represent a massless particle. ; Definition at line 535 of file LorentzVector.h. ◆ isSpacelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isSpacelike ; (; ); const. inline . Determine if momentum-energy is spacelike, and represents a tachyon. ; Definition at line 545 of file LorentzVector.h. ◆ isTimelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isTimelike ; (; ); const. inline . Determine if momentum-energy can represent a physical massive particle. ; Definition at line 528 of file LorentzVector.h. ◆ M(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M ; (; ); const. inline . return magnitude (mass) using the (-,-,-,+) metric. ; If M2 is negative (space-like vector) a GenVector_exception is suggested and if continuing, - sqrt( -M2) is returned ; Definition at line 30",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:1438,Energy Efficiency,energy,energy,1438,"enceMath » Physics Vectors. ; template<class CoordSystem>; class ROOT::Math::LorentzVector< CoordSystem >Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. ; The metric used for the LorentzVector is (-,-,-,+). In the case of LorentzVector we don't distinguish the concepts of points and displacement vectors as in the 3D case, since the main use case for 4D Vectors is to describe the kinematics of relativistic particles. A LorentzVector behaves like a DisplacementVector in 4D. The Minkowski components could be viewed as v and t, or for kinematic 4-vectors, as p and E.; ROOT provides specialisations and aliases to them of the ROOT::Math::LorentzVector template:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). See alsoOverview of the physics vector library ; Definition at line 59 of file LorentzVector.h. Public Types; typedef DisplacementVector3D< Cartesian3D< Scalar > > BetaVector;  ; typedef CoordSystem CoordinateType;  ; typedef CoordSystem::Scalar Scalar;  . Public Member Functions;  LorentzVector ();  default constructor of an empty vector (Px = Py = Pz = E = 0 ) ;  ; template<class ForeignLorentzVector , typename = decltype(std::declval<ForeignLorentzVector>().x() + std::declval<ForeignLorentzVector>().y() + std::declval<ForeignLorentzVector>().z() + std::declval<ForeignLorentzVector>().t())> ; constexpr LorentzVector (const ForeignLorentzVec",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:3810,Energy Efficiency,energy,energy,3810,"  generic constructors from four scalar values. ;  ; Scalar Beta () const;  Return beta scalar value. ;  ; BetaVector BoostToCM () const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; template<class Other4Vector > ; BetaVector BoostToCM (const Other4Vector &v) const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; Scalar ColinearRapidity () const;  Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. ;  ; const CoordSystem & Coordinates () const;  Retrieve a const reference to the coordinates object. ;  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:3876,Energy Efficiency,energy,energy,3876,"  generic constructors from four scalar values. ;  ; Scalar Beta () const;  Return beta scalar value. ;  ; BetaVector BoostToCM () const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; template<class Other4Vector > ; BetaVector BoostToCM (const Other4Vector &v) const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; Scalar ColinearRapidity () const;  Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. ;  ; const CoordSystem & Coordinates () const;  Retrieve a const reference to the coordinates object. ;  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:3939,Energy Efficiency,energy,energy,3939,"  generic constructors from four scalar values. ;  ; Scalar Beta () const;  Return beta scalar value. ;  ; BetaVector BoostToCM () const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; template<class Other4Vector > ; BetaVector BoostToCM (const Other4Vector &v) const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; Scalar ColinearRapidity () const;  Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. ;  ; const CoordSystem & Coordinates () const;  Retrieve a const reference to the coordinates object. ;  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:3995,Energy Efficiency,energy,energy,3995,"  generic constructors from four scalar values. ;  ; Scalar Beta () const;  Return beta scalar value. ;  ; BetaVector BoostToCM () const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; template<class Other4Vector > ; BetaVector BoostToCM (const Other4Vector &v) const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; Scalar ColinearRapidity () const;  Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. ;  ; const CoordSystem & Coordinates () const;  Retrieve a const reference to the coordinates object. ;  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:4702,Energy Efficiency,energy,energy,4702,"  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determine if momentum-energy is spacelike, and represents a tachyon. ;  ; bool isTimelike () const;  Determine if momentum-energy can represent a physical massive particle. ;  ; Scalar M () const;  return magnitude (mass) using the (-,-,-,+) metric. ;  ; Scalar M2 () const;  return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ;  ; Scalar mag () const;  ; Scalar mag2 () const;  ; Scalar mass () const;  ; Scalar mass2 () const;  ; Scalar Mt () const;  return the transverse mass ;  ; Scalar mt () const;  ; Scalar Mt2 () const;  return the transverse mass squared ;  ; Scalar mt2 () const;  ; bool operator!= (const Lorentz",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:4799,Energy Efficiency,energy,energy,4799,"onent (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determine if momentum-energy is spacelike, and represents a tachyon. ;  ; bool isTimelike () const;  Determine if momentum-energy can represent a physical massive particle. ;  ; Scalar M () const;  return magnitude (mass) using the (-,-,-,+) metric. ;  ; Scalar M2 () const;  return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ;  ; Scalar mag () const;  ; Scalar mag2 () const;  ; Scalar mass () const;  ; Scalar mass2 () const;  ; Scalar Mt () const;  return the transverse mass ;  ; Scalar mt () const;  ; Scalar Mt2 () const;  return the transverse mass squared ;  ; Scalar mt2 () const;  ; bool operator!= (const LorentzVector &rhs) const;  ; LorentzVector operator* (const Scalar &a) const;  product of a LorentzVector by a scalar quantity ;  ; LorentzVector & operator*= (Scalar a);  multiplication by a scalar quantity v *= a ;  ; LorentzVector operator+ () const;  ; template<class OtherLorentzVector > ; LorentzVector operator+ (const OtherLorentzVector &v2) const;  addit",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:4900,Energy Efficiency,energy,energy,4900,"calar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get internal data into 4 Scalars at *begin to *end ;  ; void GetCoordinates (Scalar &a, Scalar &b, Scalar &c, Scalar &d) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; bool isLightlike (Scalar tolerance=100 *std::numeric_limits< Scalar >::epsilon()) const;  Determine if momentum-energy can represent a massless particle. ;  ; bool isSpacelike () const;  Determine if momentum-energy is spacelike, and represents a tachyon. ;  ; bool isTimelike () const;  Determine if momentum-energy can represent a physical massive particle. ;  ; Scalar M () const;  return magnitude (mass) using the (-,-,-,+) metric. ;  ; Scalar M2 () const;  return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ;  ; Scalar mag () const;  ; Scalar mag2 () const;  ; Scalar mass () const;  ; Scalar mass2 () const;  ; Scalar Mt () const;  return the transverse mass ;  ; Scalar mt () const;  ; Scalar Mt2 () const;  return the transverse mass squared ;  ; Scalar mt2 () const;  ; bool operator!= (const LorentzVector &rhs) const;  ; LorentzVector operator* (const Scalar &a) const;  product of a LorentzVector by a scalar quantity ;  ; LorentzVector & operator*= (Scalar a);  multiplication by a scalar quantity v *= a ;  ; LorentzVector operator+ () const;  ; template<class OtherLorentzVector > ; LorentzVector operator+ (const OtherLorentzVector &v2) const;  addition of two LorentzVectors (v3 = v1 + v2) Enable the addition with any other LorentzVector ;  ; template",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:14830,Energy Efficiency,energy,energy,14830,"efinition at line 170 of file LorentzVector.h. ◆ Dimension(). template<class CoordSystem > . unsigned int ROOT::Math::LorentzVector< CoordSystem >::Dimension ; (; ); const. inline . dimension ; Definition at line 269 of file LorentzVector.h. ◆ Dot(). template<class CoordSystem > . template<class OtherLorentzVector > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Dot ; (; const OtherLorentzVector< CoordSystem > & ; q); const. inline . scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of type according to the base scalar type of v ; Definition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; );",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:15075,Energy Efficiency,energy,energy,15075,"LorentzVector.h. ◆ Dot(). template<class CoordSystem > . template<class OtherLorentzVector > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Dot ; (; const OtherLorentzVector< CoordSystem > & ; q); const. inline . scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of type according to the base scalar type of v ; Definition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; ); const. inline . pseudorapidity . \[ \eta = - \ln { \tan { \frac { \theta} {2} } } \]. Definition at line 365 of file LorentzVector.h. ◆ eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:15165,Energy Efficiency,energy,energy,15165,"OtherLorentzVector > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Dot ; (; const OtherLorentzVector< CoordSystem > & ; q); const. inline . scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of type according to the base scalar type of v ; Definition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; ); const. inline . pseudorapidity . \[ \eta = - \ln { \tan { \frac { \theta} {2} } } \]. Definition at line 365 of file LorentzVector.h. ◆ eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::eta ; (; ); const. inline . Definition at line 654 of file LorentzVector.h",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:15381,Energy Efficiency,energy,energy,15381,"he product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of type according to the base scalar type of v ; Definition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; ); const. inline . pseudorapidity . \[ \eta = - \ln { \tan { \frac { \theta} {2} } } \]. Definition at line 365 of file LorentzVector.h. ◆ eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::eta ; (; ); const. inline . Definition at line 654 of file LorentzVector.h. ◆ Gamma(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Gamma ; (; ); const. inline . Return Gamma scalar value. ; Definition at line 617 of file LorentzVector.h. ◆ GetCoordinates() [1/4",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:15642,Energy Efficiency,energy,energy,15642,"efinition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; ); const. inline . pseudorapidity . \[ \eta = - \ln { \tan { \frac { \theta} {2} } } \]. Definition at line 365 of file LorentzVector.h. ◆ eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::eta ; (; ); const. inline . Definition at line 654 of file LorentzVector.h. ◆ Gamma(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Gamma ; (; ); const. inline . Return Gamma scalar value. ; Definition at line 617 of file LorentzVector.h. ◆ GetCoordinates() [1/4]. template<class CoordSystem > . template<class IT > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; IT ; begin); const. inline . get internal data into 4 Scalars at *begin ; Definition at line 229 of file LorentzVector.h. ◆ GetCoordinates() [",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:17682,Energy Efficiency,energy,energy,17682,"IT > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; IT ; begin, . IT ; end . ); const. inline . get internal data into 4 Scalars at *begin to *end ; Definition at line 218 of file LorentzVector.h. ◆ GetCoordinates() [3/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar & ; a, . Scalar & ; b, . Scalar & ; c, . Scalar & ; d . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 205 of file LorentzVector.h. ◆ GetCoordinates() [4/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 211 of file LorentzVector.h. ◆ isLightlike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isLightlike ; (; Scalar ; tolerance = 100*std::numeric_limits<Scalar>::epsilon()); const. inline . Determine if momentum-energy can represent a massless particle. ; Definition at line 535 of file LorentzVector.h. ◆ isSpacelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isSpacelike ; (; ); const. inline . Determine if momentum-energy is spacelike, and represents a tachyon. ; Definition at line 545 of file LorentzVector.h. ◆ isTimelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isTimelike ; (; ); const. inline . Determine if momentum-energy can represent a physical massive particle. ; Definition at line 528 of file LorentzVector.h. ◆ M(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M ; (; ); const. inline . return magnitude (mass) using the (-,-,-,+) metric. ; If M2 is negative (space-like vector) a GenVector_exception is suggested and if continuing, - sqrt( -M2) is returned ; Definition at line 306 of file LorentzVector.h. ◆ M2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSyst",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:17927,Energy Efficiency,energy,energy,17927,"mplate<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar & ; a, . Scalar & ; b, . Scalar & ; c, . Scalar & ; d . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 205 of file LorentzVector.h. ◆ GetCoordinates() [4/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 211 of file LorentzVector.h. ◆ isLightlike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isLightlike ; (; Scalar ; tolerance = 100*std::numeric_limits<Scalar>::epsilon()); const. inline . Determine if momentum-energy can represent a massless particle. ; Definition at line 535 of file LorentzVector.h. ◆ isSpacelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isSpacelike ; (; ); const. inline . Determine if momentum-energy is spacelike, and represents a tachyon. ; Definition at line 545 of file LorentzVector.h. ◆ isTimelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isTimelike ; (; ); const. inline . Determine if momentum-energy can represent a physical massive particle. ; Definition at line 528 of file LorentzVector.h. ◆ M(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M ; (; ); const. inline . return magnitude (mass) using the (-,-,-,+) metric. ; If M2 is negative (space-like vector) a GenVector_exception is suggested and if continuing, - sqrt( -M2) is returned ; Definition at line 306 of file LorentzVector.h. ◆ M2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M2 ; (; ); const. inline . return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ; Definition at line 300 of file LorentzVector.h. ◆ mag(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< Coor",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:18175,Energy Efficiency,energy,energy,18175," LorentzVector.h. ◆ GetCoordinates() [4/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 211 of file LorentzVector.h. ◆ isLightlike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isLightlike ; (; Scalar ; tolerance = 100*std::numeric_limits<Scalar>::epsilon()); const. inline . Determine if momentum-energy can represent a massless particle. ; Definition at line 535 of file LorentzVector.h. ◆ isSpacelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isSpacelike ; (; ); const. inline . Determine if momentum-energy is spacelike, and represents a tachyon. ; Definition at line 545 of file LorentzVector.h. ◆ isTimelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isTimelike ; (; ); const. inline . Determine if momentum-energy can represent a physical massive particle. ; Definition at line 528 of file LorentzVector.h. ◆ M(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M ; (; ); const. inline . return magnitude (mass) using the (-,-,-,+) metric. ; If M2 is negative (space-like vector) a GenVector_exception is suggested and if continuing, - sqrt( -M2) is returned ; Definition at line 306 of file LorentzVector.h. ◆ M2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M2 ; (; ); const. inline . return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ; Definition at line 300 of file LorentzVector.h. ◆ mag(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::mag ; (; ); const. inline . Definition at line 658 of file LorentzVector.h. ◆ mag2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::mag2 ; (; ); const. inline . Definition at line 657 of file LorentzVecto",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:11338,Integrability,depend,depends,11338,"< CoordSystem >::BetaVector. Definition at line 549 of file LorentzVector.h. ◆ CoordinateType. template<class CoordSystem > . typedef CoordSystem ROOT::Math::LorentzVector< CoordSystem >::CoordinateType. Definition at line 66 of file LorentzVector.h. ◆ Scalar. template<class CoordSystem > . typedef CoordSystem::Scalar ROOT::Math::LorentzVector< CoordSystem >::Scalar. Definition at line 65 of file LorentzVector.h. Constructor & Destructor Documentation. ◆ LorentzVector() [1/4]. template<class CoordSystem > . ROOT::Math::LorentzVector< CoordSystem >::LorentzVector ; (; ). inline . default constructor of an empty vector (Px = Py = Pz = E = 0 ) ; Definition at line 71 of file LorentzVector.h. ◆ LorentzVector() [2/4]. template<class CoordSystem > . ROOT::Math::LorentzVector< CoordSystem >::LorentzVector ; (; const Scalar & ; a, . const Scalar & ; b, . const Scalar & ; c, . const Scalar & ; d . ). inline . generic constructors from four scalar values. ; The association between values and coordinate depends on the coordinate system. For PxPyPzE4D, Parameters. ascalar value (Px) ; bscalar value (Py) ; cscalar value (Pz) ; dscalar value (E) . Definition at line 82 of file LorentzVector.h. ◆ LorentzVector() [3/4]. template<class CoordSystem > . template<class Coords > . constexpr ROOT::Math::LorentzVector< CoordSystem >::LorentzVector ; (; const LorentzVector< Coords > & ; v). inlineexplicitconstexpr . constructor from a LorentzVector expressed in different coordinates, or using a different Scalar type ; Definition at line 93 of file LorentzVector.h. ◆ LorentzVector() [4/4]. template<class CoordSystem > . template<class ForeignLorentzVector , typename = decltype(std::declval<ForeignLorentzVector>().x() + std::declval<ForeignLorentzVector>().y() + std::declval<ForeignLorentzVector>().z() + std::declval<ForeignLorentzVector>().t())> . constexpr ROOT::Math::LorentzVector< CoordSystem >::LorentzVector ; (; const ForeignLorentzVector< CoordSystem > & ; v). inlineexplicitconstexpr ",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:3316,Testability,log,log,3316,"ntzVector (const ForeignLorentzVector &v);  Construct from a foreign 4D vector type, for example, HepLorentzVector Precondition: v must implement methods x(), y(), z(), and t() ;  ; template<class Coords > ; constexpr LorentzVector (const LorentzVector< Coords > &v);  constructor from a LorentzVector expressed in different coordinates, or using a different Scalar type ;  ;  LorentzVector (const Scalar &a, const Scalar &b, const Scalar &c, const Scalar &d);  generic constructors from four scalar values. ;  ; Scalar Beta () const;  Return beta scalar value. ;  ; BetaVector BoostToCM () const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; template<class Other4Vector > ; BetaVector BoostToCM (const Other4Vector &v) const;  The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ;  ; Scalar ColinearRapidity () const;  Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. ;  ; const CoordSystem & Coordinates () const;  Retrieve a const reference to the coordinates object. ;  ; unsigned int Dimension () const;  dimension ;  ; template<class OtherLorentzVector > ; Scalar Dot (const OtherLorentzVector &q) const;  scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ;  ; Scalar E () const;  return 4-th component (time, or energy for a 4-momentum vector) ;  ; Scalar e () const;  ; Scalar energy () const;  ; Scalar Et () const;  return the transverse energy ;  ; Scalar Et2 () const;  return the transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; Scalar eta () const;  ; Scalar Gamma () const;  Return Gamma scalar value. ;  ; template<class IT > ; void GetCoordinates (IT begin) const;  get internal data into 4 Scalars at *begin ;  ; template<class IT > ; void GetCoordinates (IT begin, IT end) const;  get inter",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:8184,Testability,log,log,8184,"operator= (const LorentzVector< OtherCoords > &v);  Assignment operator from a lorentz vector of arbitrary type. ;  ; bool operator== (const LorentzVector &rhs) const;  Exact equality. ;  ; Scalar P () const;  ; Scalar P2 () const;  return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ) ;  ; Scalar Perp2 () const;  return the square of the transverse spatial component ( X**2 + Y**2 ) ;  ; Scalar perp2 () const;  ; Scalar Phi () const;  azimuthal Angle ;  ; Scalar phi () const;  ; Scalar Pt () const;  return the transverse spatial component sqrt ( X**2 + Y**2 ) ;  ; Scalar pt () const;  ; Scalar Px () const;  spatial X component ;  ; Scalar px () const;  ; Scalar Py () const;  spatial Y component ;  ; Scalar py () const;  ; Scalar Pz () const;  spatial Z component ;  ; Scalar pz () const;  ; Scalar R () const;  return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ) ;  ; Scalar r () const;  ; Scalar Rapidity () const;  Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. ;  ; Scalar Rho () const;  ; Scalar rho () const;  ; LorentzVector< CoordSystem > & SetCoordinates (const Scalar src[]);  Set internal data based on an array of 4 Scalar numbers. ;  ; template<class IT > ; LorentzVector< CoordSystem > & SetCoordinates (IT begin, IT end);  Set internal data based on 4 Scalars at *begin to *end. ;  ; LorentzVector< CoordSystem > & SetCoordinates (Scalar a, Scalar b, Scalar c, Scalar d);  Set internal data based on 4 Scalar numbers. ;  ; LorentzVector< CoordSystem > & SetE (Scalar a);  Methods setting a Single-component Work only if the component is one of which the vector is represented. ;  ; LorentzVector< CoordSystem > & SetEta (Scalar a);  ; LorentzVector< CoordSystem > & SetM (Scalar a);  ; LorentzVector< CoordSystem > & SetPhi (Scalar a);  ; LorentzVector< CoordSystem > & SetPt (Scalar a);  ; LorentzVector< CoordSystem > & SetPx (Scalar a);  ; LorentzVector< CoordSystem > & SetPxPyPzE (Scalar xx, Scalar yy, Scalar zz, Scalar ee);  ; Lore",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:13582,Testability,log,log,13582,"alar ROOT::Math::LorentzVector< CoordSystem >::Beta ; (; ); const. inline . Return beta scalar value. ; Definition at line 599 of file LorentzVector.h. ◆ BoostToCM() [1/2]. template<class CoordSystem > . BetaVector ROOT::Math::LorentzVector< CoordSystem >::BoostToCM ; (; ); const. inline . The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ; Definition at line 555 of file LorentzVector.h. ◆ BoostToCM() [2/2]. template<class CoordSystem > . template<class Other4Vector > . BetaVector ROOT::Math::LorentzVector< CoordSystem >::BoostToCM ; (; const Other4Vector & ; v); const. inline . The beta vector for the boost that would bring this vector into its center of mass frame (zero momentum) ; Definition at line 577 of file LorentzVector.h. ◆ ColinearRapidity(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::ColinearRapidity ; (; ); const. inline . Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. ; Definition at line 516 of file LorentzVector.h. ◆ Coordinates(). template<class CoordSystem > . const CoordSystem & ROOT::Math::LorentzVector< CoordSystem >::Coordinates ; (; ); const. inline . Retrieve a const reference to the coordinates object. ; Definition at line 170 of file LorentzVector.h. ◆ Dimension(). template<class CoordSystem > . unsigned int ROOT::Math::LorentzVector< CoordSystem >::Dimension ; (; ); const. inline . dimension ; Definition at line 269 of file LorentzVector.h. ◆ Dot(). template<class CoordSystem > . template<class OtherLorentzVector > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Dot ; (; const OtherLorentzVector< CoordSystem > & ; q); const. inline . scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:28407,Testability,log,log,28407,"r< CoordSystem >::py ; (; ); const. inline . Definition at line 647 of file LorentzVector.h. ◆ Pz(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Pz ; (; ); const. inline . spatial Z component ; Definition at line 289 of file LorentzVector.h. ◆ pz(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::pz ; (; ); const. inline . Definition at line 648 of file LorentzVector.h. ◆ R(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::R ; (; ); const. inline . return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ) ; Definition at line 310 of file LorentzVector.h. ◆ r(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::r ; (; ); const. inline . Definition at line 650 of file LorentzVector.h. ◆ Rapidity(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Rapidity ; (; ); const. inline . Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. ; Definition at line 503 of file LorentzVector.h. ◆ Rho(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Rho ; (; ); const. inline . Definition at line 325 of file LorentzVector.h. ◆ rho(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::rho ; (; ); const. inline . Definition at line 653 of file LorentzVector.h. ◆ SetCoordinates() [1/3]. template<class CoordSystem > . LorentzVector< CoordSystem > & ROOT::Math::LorentzVector< CoordSystem >::SetCoordinates ; (; const Scalar ; src[]). inline . Set internal data based on an array of 4 Scalar numbers. ; Definition at line 177 of file LorentzVector.h. ◆ SetCoordinates() [2/3]. template<class CoordSystem > . template<class IT > . LorentzVector< CoordSystem > & ROOT::Math::LorentzVector< CoordSystem >::SetCoordinates ; (; IT ; begin, . IT ; end . ). inline . Set internal data based on 4 Scalars at *begin to *end. ; Definition at line 194 of file LorentzVector.h. ◆ Se",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LorentzVector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:787,Integrability,wrap,wraps,787,". ROOT: ROOT::Math::LSResidualFunc< Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LSResidualFunc< Func > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class Func>; class ROOT::Math::LSResidualFunc< Func >LSResidualFunc class description. ; Internal class used for accessing the residuals of the Least Square function and their derivatives which are estimated numerically using GSL numerical derivation. The class contains a pointer to the fit method function and an index specifying the i-th residual and wraps it in a multi-dim gradient function interface ROOT::Math::IGradientFunctionMultiDim. The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter) ; Definition at line 135 of file GSLNLSMinimizer.cxx. Public Member Functions;  LSResidualFunc ();  ;  LSResidualFunc (const Func &func, unsigned int i);  ;  LSResidualFunc (const LSResidualFunc< Func > &rhs);  ; IMultiGenFunction * Clone () const override;  Clone a function. ;  ; void FdF (const double *x, double &f, double *g) const override;  ; void Gradient (const double *x, double *g) const override;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; LSResidualFunc< Func > & operator= (const LSResidualFunc< Func > &rhs);  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:829,Integrability,interface,interface,829,". ROOT: ROOT::Math::LSResidualFunc< Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LSResidualFunc< Func > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class Func>; class ROOT::Math::LSResidualFunc< Func >LSResidualFunc class description. ; Internal class used for accessing the residuals of the Least Square function and their derivatives which are estimated numerically using GSL numerical derivation. The class contains a pointer to the fit method function and an index specifying the i-th residual and wraps it in a multi-dim gradient function interface ROOT::Math::IGradientFunctionMultiDim. The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter) ; Definition at line 135 of file GSLNLSMinimizer.cxx. Public Member Functions;  LSResidualFunc ();  ;  LSResidualFunc (const Func &func, unsigned int i);  ;  LSResidualFunc (const LSResidualFunc< Func > &rhs);  ; IMultiGenFunction * Clone () const override;  Clone a function. ;  ; void FdF (const double *x, double &f, double *g) const override;  ; void Gradient (const double *x, double *g) const override;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; LSResidualFunc< Func > & operator= (const LSResidualFunc< Func > &rhs);  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:1559,Modifiability,inherit,inherited,1559,"ing GSL numerical derivation. The class contains a pointer to the fit method function and an index specifying the i-th residual and wraps it in a multi-dim gradient function interface ROOT::Math::IGradientFunctionMultiDim. The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter) ; Definition at line 135 of file GSLNLSMinimizer.cxx. Public Member Functions;  LSResidualFunc ();  ;  LSResidualFunc (const Func &func, unsigned int i);  ;  LSResidualFunc (const LSResidualFunc< Func > &rhs);  ; IMultiGenFunction * Clone () const override;  Clone a function. ;  ; void FdF (const double *x, double &f, double *g) const override;  ; void Gradient (const double *x, double *g) const override;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; LSResidualFunc< Func > & operator= (const LSResidualFunc< Func > &rhs);  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:2637,Modifiability,inherit,inherited,2637," T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtual void FdF (const T *x, T &f, T *df) const;  Optimized method to evaluate at the same time the function value and derivative at a point x. ;  ; virtual void Gradient (const T *x, T *grad) const;  Evaluate all the vector of function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *, unsigned int) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; const Func * fChi2;  ; unsigned int fIndex;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Inheritance diagram for ROOT::Math::LSResidualFunc< Func >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LSResidualFunc() [1/3]. template<class Func > . ROOT::Math::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:3083,Modifiability,inherit,inherited,3083," function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *, unsigned int) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; const Func * fChi2;  ; unsigned int fIndex;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Inheritance diagram for ROOT::Math::LSResidualFunc< Func >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LSResidualFunc() [1/3]. template<class Func > . ROOT::Math::LSResidualFunc< Func >::LSResidualFunc ; (; ). inline . Definition at line 139 of file GSLNLSMinimizer.cxx. ◆ LSResidualFunc() [2/3]. template<class Func > . ROOT::Math::LSResidualFunc< Func >::LSResidualFunc ; (; const Func & ; func, . unsigned int ; i . ). inline . Definition at line 143 of file GSLNLSMinimizer.cxx. ◆ LSResidualFunc() [3/3]. template<class Func > . ROOT::Math::LSResidualFunc< Func >::LSResidualFunc ; (; const LSResidualFunc< Func > & ; rhs). inline . Definition at line 150 of file GSLNLSMinimizer.cxx. Member Function Documentation",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:3271,Modifiability,inherit,inherited,3271," function derivatives (gradient) at a point x. ;  ; virtual void GradientWithPrevResult (const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the gradient algorithm will use information from the previous step, these can be passed in with this overload. ;  ; bool HasGradient () const;  ; virtual bool returnsInMinuit2ParameterSpace () const;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  . Private Member Functions; double DoDerivative (const double *, unsigned int) const override;  ; double DoEval (const double *x) const override;  . Private Attributes; const Func * fChi2;  ; unsigned int fIndex;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  ; typedef IGradientFunctionMultiDimTempl< T > BaseGrad;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . Inheritance diagram for ROOT::Math::LSResidualFunc< Func >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LSResidualFunc() [1/3]. template<class Func > . ROOT::Math::LSResidualFunc< Func >::LSResidualFunc ; (; ). inline . Definition at line 139 of file GSLNLSMinimizer.cxx. ◆ LSResidualFunc() [2/3]. template<class Func > . ROOT::Math::LSResidualFunc< Func >::LSResidualFunc ; (; const Func & ; func, . unsigned int ; i . ). inline . Definition at line 143 of file GSLNLSMinimizer.cxx. ◆ LSResidualFunc() [3/3]. template<class Func > . ROOT::Math::LSResidualFunc< Func >::LSResidualFunc ; (; const LSResidualFunc< Func > & ; rhs). inline . Definition at line 150 of file GSLNLSMinimizer.cxx. Member Function Documentation",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html:546,Security,access,accessing,546,". ROOT: ROOT::Math::LSResidualFunc< Func > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Math::LSResidualFunc< Func > Class Template ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; template<class Func>; class ROOT::Math::LSResidualFunc< Func >LSResidualFunc class description. ; Internal class used for accessing the residuals of the Least Square function and their derivatives which are estimated numerically using GSL numerical derivation. The class contains a pointer to the fit method function and an index specifying the i-th residual and wraps it in a multi-dim gradient function interface ROOT::Math::IGradientFunctionMultiDim. The class is used by ROOT::Math::GSLNLSMinimizer (GSL non linear least square fitter) ; Definition at line 135 of file GSLNLSMinimizer.cxx. Public Member Functions;  LSResidualFunc ();  ;  LSResidualFunc (const Func &func, unsigned int i);  ;  LSResidualFunc (const LSResidualFunc< Func > &rhs);  ; IMultiGenFunction * Clone () const override;  Clone a function. ;  ; void FdF (const double *x, double &f, double *g) const override;  ; void Gradient (const double *x, double *g) const override;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; LSResidualFunc< Func > & operator= (const LSResidualFunc< Func > &rhs);  ;  Public Member Functions inherited from ROOT::Math::IGradientFunctionMultiDimTempl< T >; T Derivative (const T *x, unsigned int icoord, T *previous_grad, T *previous_g2, T *previous_gstep) const;  In some cases, the derivative algorithm will use information from the previous step, these can be passed in with this overload. ;  ; T Derivative (const T *x, unsigned int icoord=0) const;  Return the partial derivative with respect to the passed coordinate. ;  ; virtua",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1LSResidualFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LSResidualFunc.html
https://root.cern/doc/master/classROOT_1_1Math_1_1MatRepStd.html:484,Integrability,wrap,wrapper,484,". ROOT: ROOT::Math::MatRepStd< T, D1, D2 > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::Math::MatRepStd< T, D1, D2 > Class Template ReferenceMath » SMatrix Package » Expression Template Classes. ; template<class T, unsigned int D1, unsigned int D2 = D1>; class ROOT::Math::MatRepStd< T, D1, D2 >Expression wrapper class for Matrix objects. ; Definition at line 54 of file MatrixRepresentationsStatic.h. Public Types; enum  { kRows = D1; , kCols = D2; , kSize = D1*D2; };  ; typedef T value_type;  . Public Member Functions; T apply (unsigned int i) const;  ; T * Array ();  ; const T * Array () const;  ; T & operator() (unsigned int i, unsigned int j);  ; const T & operator() (unsigned int i, unsigned int j) const;  ; template<class R > ; MatRepStd< T, D1, D2 > & operator+= (const R &rhs);  ; template<class R > ; MatRepStd< T, D1, D2 > & operator-= (const R &rhs);  ; template<class R > ; MatRepStd< T, D1, D2 > & operator= (const R &rhs);  ; template<class R > ; bool operator== (const R &rhs) const;  ; T & operator[] (unsigned int i);  ; const T & operator[] (unsigned int i) const;  . Private Attributes; T fArray [kSize];  . #include <Math/MatrixRepresentationsStatic.h>; Member Typedef Documentation. ◆ value_type. template<class T , unsigned int D1, unsigned int D2 = D1> . typedef T ROOT::Math::MatRepStd< T, D1, D2 >::value_type. Definition at line 58 of file MatrixRepresentationsStatic.h. Member Enumeration Documentation. ◆ anonymous enum. template<class T , unsigned int D1, unsigned int D2 = D1> . anonymous enum. EnumeratorkRows return no. of matrix rows . kCols return no. of matrix columns . kSize return no of elements: rows*columns . Definition at line 103 of file MatrixRepresentationsStatic.h. Member Function Documentation. ◆ apply(). template<class T , unsigned int D1, unsigned int D2 = D1> . T",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1MatRepStd.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MatRepStd.html
https://root.cern/doc/master/classROOT_1_1Math_1_1MersenneTwisterEngine.html:1653,Modifiability,inherit,inherited,1653,"e Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3–30.; For more information see the Mersenne Twister homepage [http://www.math.keio.ac.jp/~matumoto/emt.html]; Advantage:. large period 2**19937 -1; relatively fast (slightly slower than TRandom1 and TRandom2 but much faster than TRandom1). Note that this is a 32 bit implementation. Only 32 bits of the returned double numbers are random. in case more precision is needed, one should use an engine providing at least 48 random bits.; Drawback: a relative large internal state of 624 integers ; Definition at line 50 of file MersenneTwisterEngine.h. Public Types; typedef TRandomEngine BaseType;  ; typedef uint32_t Result_t;  ; typedef uint32_t StateInt_t;  . Public Member Functions;  MersenneTwisterEngine (uint32_t seed=4357);  ;  ~MersenneTwisterEngine () override;  ; uint32_t IntRndm ();  ; double operator() ();  ; double Rndm () override;  ; void SetSeed (Result_t seed);  set the seed x ;  ;  Public Member Functions inherited from ROOT::Math::TRandomEngine; virtual ~TRandomEngine ();  . Static Public Member Functions; static unsigned int MaxInt ();  maximum integer that can be generated ;  ; static unsigned int MinInt ();  minimum integer that can be generated ;  ; static std::string Name ();  ; static int Size ();  . Protected Member Functions; int Counter () const;  ; void GetState (std::vector< uint32_t > &state);  ; void SetState (const std::vector< uint32_t > &state);  . Private Types; enum  { kSize =624; };  . Private Member Functions; uint32_t IntRndm_impl ();  ; double Rndm_impl ();  generate a random double number ;  . Private Attributes; int fCount624;  ; uint32_t fMt [kSize];  . #include <Math/MersenneTwisterEngine.h>. Inheritance diagram for ROOT::Math::MersenneTwisterEngine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Doc",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1MersenneTwisterEngine.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MersenneTwisterEngine.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer-members.html:215,Modifiability,inherit,inherited,215,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOT::Math::Minimizer Member List. This is the complete list of members for ROOT::Math::Minimizer, including all inherited members. Clear()ROOT::Math::Minimizerinlinevirtual; Contour(unsigned int ivar, unsigned int jvar, unsigned int &npoints, double *xi, double *xj)ROOT::Math::Minimizervirtual; Correlation(unsigned int i, unsigned int j) constROOT::Math::Minimizerinlinevirtual; CovMatrix(unsigned int ivar, unsigned int jvar) constROOT::Math::Minimizervirtual; CovMatrixStatus() constROOT::Math::Minimizerinlinevirtual; Edm() constROOT::Math::Minimizerinlinevirtual; ErrorDef() constROOT::Math::Minimizerinline; Errors() constROOT::Math::Minimizerinlinevirtual; FixVariable(unsigned int ivar)ROOT::Math::Minimizervirtual; fOptionsROOT::Math::Minimizerprotected; fStatusROOT::Math::Minimizerprotected; fValidErrorROOT::Math::Minimizerprotected; GetCovMatrix(double *covMat) constROOT::Math::Minimizervirtual; GetHessianMatrix(double *hMat) constROOT::Math::Minimizervirtual; GetMinosError(unsigned int ivar, double &errLow, double &errUp, int option=0)ROOT::Math::Minimizervirtual; GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings &pars) constROOT::Math::Minimizervirtual; GlobalCC(unsigned int ivar) constROOT::Math::Minimizervirtual; Hesse()ROOT::Math::Minimizervirtual; IsFixedVariable(unsigned int ivar) constROOT::Math::Minimizervirtual; IsValidError() constROOT::Math::Minimizerinline; MaxFunctionCalls() constROOT::Math::Minimizerinline; MaxIterations() constROOT::Math::Minimizerinline; MinGradient() constROOT::Math::Minimizerinlinevirtual; Minimize()=0ROOT::Math::Minimizerpure virtual; Minimizer()ROOT::Math::Minimizerinline; Minimizer(Minimizer const &)=deleteROOT::Math::Minimizer; Minimizer(Minimizer &&)=deleteROOT::Math::Minimizer; MinosStatus() constROOT::Math::Minimizerinlinevirtual; MinValue() const =0ROOT::Math::Minimizerpure virtual; NCalls() constROOT::",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Minimizer-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer-members.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:1340,Availability,avail,available,1340," ; Abstract Minimizer class, defining the interface for the various minimizer (like Minuit2, Minuit, GSL, etc..) in ROOT. ; Plug-in's exist in ROOT to be able to instantiate the derived classes without linking the library using the static function ROOT::Math::Factory::CreateMinimizer.; Here is the list of all possible minimizers and their respective methods (algorithms) that can be instantiated: The name shown below can be used to create them. More documentation can be found in the respective class. Minuit (class TMinuitMinimizer); Migrad (default); MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of Minuit tutorial on Function Minimization); Simplex; Minimize (a combination of Simplex + Migrad); Minimize; Scan; Seek. Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); Migrad (default); Simplex; Minimize; Fumili (Fumili2); Scan. Fumili (class TFumiliMinimizer); GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with mathmore support; BFGS2 (Default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built mathmore support; GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with mathmore support; Genetic (class ROOT::Math::GeneticMinimizer); RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with r support; BFGS (default); L-BFGS-S; Nelder-Mead; CG; and more methods, see the Details in the documentation of the function optimix of the optmix R package. The Minimizer class provides the interface to perform the minimization including; In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface ROOT::Math::IBaseFunctionMultiDim. If the function provides gr",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:1505,Availability,avail,available,1505," their respective methods (algorithms) that can be instantiated: The name shown below can be used to create them. More documentation can be found in the respective class. Minuit (class TMinuitMinimizer); Migrad (default); MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of Minuit tutorial on Function Minimization); Simplex; Minimize (a combination of Simplex + Migrad); Minimize; Scan; Seek. Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); Migrad (default); Simplex; Minimize; Fumili (Fumili2); Scan. Fumili (class TFumiliMinimizer); GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with mathmore support; BFGS2 (Default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built mathmore support; GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with mathmore support; Genetic (class ROOT::Math::GeneticMinimizer); RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with r support; BFGS (default); L-BFGS-S; Nelder-Mead; CG; and more methods, see the Details in the documentation of the function optimix of the optmix R package. The Minimizer class provides the interface to perform the minimization including; In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface) the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization. These are the ROOT::Math::Functor class and the ROOT::Math::GradF",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html
https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:1599,Availability,avail,available,1599," their respective methods (algorithms) that can be instantiated: The name shown below can be used to create them. More documentation can be found in the respective class. Minuit (class TMinuitMinimizer); Migrad (default); MigradImproved (Migrad with adding a method to improve minimization when ends-up in a local minimum, see par. 6.3 of Minuit tutorial on Function Minimization); Simplex; Minimize (a combination of Simplex + Migrad); Minimize; Scan; Seek. Minuit2 (class ROOT::Minuit2::Minuit2Minimizer); Migrad (default); Simplex; Minimize; Fumili (Fumili2); Scan. Fumili (class TFumiliMinimizer); GSLMultiMin (class ROOT::Math::GSLMinimizer) available when ROOT is built with mathmore support; BFGS2 (Default); BFGS; ConjugateFR; ConjugatePR; SteepestDescent. GSLMultiFit (class ROOT::Math::GSLNLMinimizer) available when ROOT is built mathmore support; GSLSimAn (class ROOT::Math::GSLSimAnMinimizer) available when ROOT is built with mathmore support; Genetic (class ROOT::Math::GeneticMinimizer); RMinimizer (class ROOT::Math::RMinimizer) available when ROOT is built with r support; BFGS (default); L-BFGS-S; Nelder-Mead; CG; and more methods, see the Details in the documentation of the function optimix of the optmix R package. The Minimizer class provides the interface to perform the minimization including; In addition to provide the API for function minimization (via ROOT::Math::Minimizer::Minimize) the Minimizer class provides:; the interface for setting the function to be minimized. The objective function passed to the Minimizer must implement the multi-dimensional generic interface ROOT::Math::IBaseFunctionMultiDim. If the function provides gradient calculation (e.g. implementing the ROOT::Math::IGradientFunctionMultiDim interface) the gradient will be used by the Minimizer class, when needed. There are convenient classes for the users to wrap their own functions in this required interface for minimization. These are the ROOT::Math::Functor class and the ROOT::Math::GradF",MatchSource.WIKI,doc/master/classROOT_1_1Math_1_1Minimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html
