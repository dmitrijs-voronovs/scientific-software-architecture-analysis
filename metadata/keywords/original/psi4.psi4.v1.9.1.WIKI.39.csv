id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:127788,Performance,optimiz,optimization,127788,"(DETCI)¶DETCI (Expert) — Array specifying the absolute alpha string number and beta string number for the second determinant in the filter procedure. (See FILTER_GUESS). Type: array; Default: No Default. FILTER_GUESS_SIGN (DETCI)¶DETCI (Expert) — The required phase (1 or -1) between the two determinants specified by FILTER_GUESS_DET1 and FILTER_GUESS_DET2. Type: integer; Default: 1. FILTER_ZERO_DET (DETCI)¶DETCI (Expert) — If present, the code will try to filter out a particular determinant by setting its CI coefficient to zero. FILTER_ZERO_DET = [alphastr, betastr] specifies the absolute alpha and beta string numbers of the target determinant. This could be useful for trying to exclude states that have a nonzero CI coefficient for the given determinant. However, this option was experimental and may not be effective. Type: array; Default: No Default. FINAL_GEOM_WRITE (OPTKING)¶OPTKING — Do save and print the geometry from the last projected step at the end of a geometry optimization? Otherwise (and by default), save and print the previous geometry at which was computed the gradient that satisfied the convergence criteria. Type: boolean; Default: false. FISAPT_CHARGE_COMPLETENESS (FISAPT)¶FISAPT — Amount of fragment charge completeness to distinguish link bonds. Type: double; Default: 0.8. FISAPT_DO_FSAPT (FISAPT)¶FISAPT — Do an F-SAPT analysis?. Type: boolean; Default: true. FISAPT_DO_FSAPT_DISP (FISAPT)¶FISAPT — Do F-SAPT Dispersion?. Type: boolean; Default: true. FISAPT_DO_PLOT (FISAPT)¶FISAPT — Plot a scalar-field analysis. Type: boolean; Default: false. FISAPT_FSAPT_EXCH_SCALE (FISAPT)¶FISAPT — Do F-SAPT exchange scaling? (ratio of S^infty to S^2). Type: boolean; Default: true. FISAPT_FSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:129931,Performance,optimiz,optimizations,129931,"-scaling F-SAPT data within input file directory. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT)¶FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FIXED_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRC",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:130761,Performance,optimiz,optimization,130761,"NG)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence criteria. Type: boolean; Default: false. FOLLOW_ROOT (DETCI)¶DETCI — The root to write out the two-particle density matrix for (the one-particle density matrices are written for all roots). Useful for a state-specific CASSCF or CI optimization on an excited state. Type: integer; Default: 0. FOLLOW_ROOT (MCSCF)¶MCSCF — Which solution of the SCF equations to find, where 1 is the SCF ground state. Type: integer; Default: 1. FOLLOW_ROOT (PSIMRCC)¶PSIMRCC — Which root of the effective hamiltonian is the target state?. Type: integer; Default: 1. FOLLOW_STEP_INCREMENT (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS = FOLLOW, the increment to modify FOLLOW_STEP_SCALE value if we end up in the same SCF solution. Type: double; Default: 0.2. FOLLOW_STEP_SCALE (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, how much to scale the step along the eigenvector by. A full step of \(pi/2\) corresponds to a value of 1.0. Type: double; Default: 0.5. FOLLOW_VECTOR (DETCI)¶DETCI (Expert) — In following a particular root (see FOLLOW_ROOT), sometimes the root number changes. To follow a root of a particular character, one can specify a list of determinants and their coefficients, and the code will follow the root with ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:135691,Performance,optimiz,optimized,135691,"e in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. FREEZE_INTERFRAG (OPTKING)¶OPTKING — Do freeze all interfragment modes?. Type: boolean; Default: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:135964,Performance,optimiz,optimized,135964,"ault: false. FREEZE_INTRAFRAG (OPTKING)¶OPTKING — Do freeze all fragments rigid?. Type: boolean; Default: false. FROZEN_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:136160,Performance,optimiz,optimization,136160,"No Default. FROZEN_CARTESIAN (OPTKING)¶OPTKING — Specify atom and X, XY, XYZ, … to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be frozen (unchanged). Type: string; Default: No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:136512,Performance,optimiz,optimization,136512,"No Default. FROZEN_DOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen doubly-occupied orbitals per irrep (these are not excited in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_DOCC and FREEZE_CORE. Type: array; Default: No Default. FROZEN_UOCC (GLOBALS)¶GLOBALS — An array containing the number of frozen unoccupied orbitals per irrep (these are not populated in a correlated wavefunction, nor can they be optimized in MCSCF. This trumps NUM_FROZEN_UOCC. Type: array; Default: No Default. FULL_HESS_EVERY (OPTKING)¶OPTKING — Frequency with which to compute the full Hessian in the course of a geometry optimization. 0 means to compute the initial Hessian only, 1 means recompute every step, and N means recompute every N steps. The default (-1) is to never compute the full Hessian. Type: integer; Default: -1. FULL_MATRIX (CCEOM)¶CCEOM — Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. G_CONVERGENCE (OPTKING)¶OPTKING — Set of optimization criteria. Specification of any MAX_*_G_CONVERGENCE or RMS_*_G_CONVERGENCE options will append to overwrite the criteria set here unless FLEXIBLE_G_CONVERGENCE is also on. See Table Geometry Convergence for details. Type: string; Possible Values: QCHEM, MOLPRO, GAU, GAU_LOOSE, GAU_TIGHT, INTERFRAG_TIGHT, GAU_VERYTIGHT, TURBOMOLE, CFOUR, NWCHEM_LOOSE; Default: QCHEM. GAUGE (ADC)¶ADC — Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. GAUGE (CCDENSITY)¶CCDENSITY — The type of gauge to use for properties. Type: string; Default: LENGTH. GAUGE (CCRESPONSE)¶CCRESPONSE — Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usua",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:139128,Performance,optimiz,optimization,139128,"a file should be provided. Type: integer; Default: 2. GDMA_MULTIPOLE_UNITS (GDMA)¶GDMA — Whether to print DMA results in atomic units or SI. Type: string; Possible Values: AU; Default: AU SI. GDMA_ORIGIN (GDMA)¶GDMA — The origin (in Angstrom, expressed as an [x, y, z] array) about which the total multipoles will be computed during DMA. Useful for determining single site expansions at an arbitrary point. Type: array; Default: No Default. GDMA_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:139526,Performance,optimiz,optimizations,139526,"_RADIUS (GDMA)¶GDMA — The radii to be used, overriding the defaults. Specified as an array [ n1, r1, n2, r2, … ] where n1,n2,n3… are atom type strings and r1,r2,r3 are radii in Angstrom. Type: array; Default: No Default. GDMA_SWITCH (GDMA)¶GDMA — The value to switch between the older standard DMA and the new grid-based approach. Pairs of primitives whose exponents sum is above this value will be treated using standard DMA. Set to 0 to force all pairs to be treated with standard DMA. Type: double; Default: 4.0. GEOM_MAXITER (OPTKING)¶OPTKING — Maximum number of geometry optimization steps. Type: integer; Default: 50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) —",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:140231,Performance,optimiz,optimization,140231,"50. GRADIENT_WRITE (FINDIF)¶FINDIF — Do write a gradient output file? If so, the filename will end in .grad, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0.",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:140403,Performance,optimiz,optimized,140403,"y the name of the output file plus the name of the current molecule. Type: boolean; Default: false. GUESS (SCF)¶SCF — The type of guess orbitals. Defaults to READ for geometry optimizations after the first step, to CORE for single atoms, and to SAD otherwise. The HUCKEL guess employs on-the-fly calculations like SAD, as described in doi:10.1021/acs.jctc.8b01089 which also describes the SAP guess. Type: string; Possible Values: AUTO, CORE, GWH, SAD, SADNO, SAP, HUCKEL, READ; Default: AUTO. GUESS_MIX (SCF)¶SCF — Mix the HOMO/LUMO in UHF or UKS to break alpha/beta spatial symmetry. Useful to produce broken-symmetry unrestricted solutions. Notice that this procedure is defined only for calculations in C1 symmetry. Type: boolean; Default: false. GUESS_PERSIST (SCF)¶SCF — If true, then repeat the specified guess procedure for the orbitals every time - even during a geometry optimization. Type: boolean; Default: false. GUESS_R_CONVERGENCE (DCT)¶DCT — Convergence criterion for the density cumulant and orbital guess for the variationally orbital-optimized DFT methods. Currently only available for ALGORITHM = SIMULTANEOUS. Type: conv double; Default: 1e-3. GUESS_VECTOR (DETCI)¶DETCI (Expert) — Guess vector type. Accepted values are UNIT for a unit vector guess (NUM_ROOTS and NUM_INIT_VECS must both be 1); H0_BLOCK to use eigenvectors from the H0 BLOCK submatrix (default); DFILE to use NUM_ROOTS previously converged vectors in the D file;. Type: string; Possible Values: UNIT, H0_BLOCK, DFILE; Default: H0_BLOCK. H0_BLOCK_COUPLING (DETCI)¶DETCI (Expert) — Do use coupling block in preconditioner?. Type: boolean; Default: false. H0_BLOCK_COUPLING_SIZE (DETCI)¶DETCI (Expert) — Parameters which specifies the size of the coupling block within the generalized davidson preconditioner. Type: integer; Default: 0. H0_BLOCKSIZE (DETCI)¶DETCI (Expert) — This parameter specifies the size of the H0 block of the Hamiltonian which is solved exactly. The n determinants with the lowest SCF energy",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:145331,Performance,perform,perform,145331,"f HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 1.00. HESS_UPDATE_LIMIT_SCALE (OPTKING)¶OPTKING — If HESS_UPDATE_LIMIT is true, changes to the Hessian from the update are limited to the larger of HESS_UPDATE_LIMIT_SCALE * (the previous value) and HESS_UPDATE_LIMIT_MAX [au]. Type: double; Default: 0.50. HESS_UPDATE_USE_LAST (OPTKING)¶OPTKING — Number of previous steps to use in Hessian update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INCFOCK (SCF)¶SCF — Do Perform Incremental Fock Build?. Type: boolean; Default: false. INCFOCK_FULL_FOCK_EVERY (SCF)¶SCF — Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure. Type: integer; Default: 5. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC)¶DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS)¶GLOBALS — Integral package to us",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:150271,Performance,perform,performed,150271,"from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. INTS_TOLERANCE (SCF)¶SCF — Screening threshold for the chosen screening method (SCHWARZ, CSAM, DENSITY) Absolute value below which TEI are neglected. Type: conv double; Default: 1e-12. IP_POLES (OCC)¶OCC — Do compute OCC poles for ionization potentials? Only valid OMP2. Type: boolean; Default: false. IRC_DIRECTION (OPTKING)¶OPTKING — IRC mapping direction. Type: string; Possible Values: FORWARD, BACKWARD; Default: FORWARD. IRC_STEP_SIZE (OPTKING)¶OPTKING — IRC step size in bohr(amu)\(^{1/2}\). Type: double; Default: 0.2. IRC_STOP (OPTKING)¶OPTKING — Decide when to stop IRC calculations. Type: string; Possible Values: ASK, STOP, GO; Default: STOP. ISOTROPIC_POL (PE)¶PE — Make polarizabilities isotropic. Type: boolean; Default: false. ISTOP (DETCI)¶DETCI — Do stop DETCI after string information is formed and before integrals are read?. Type: boolean; Default: false. JOBTYPE (CCLAMBDA)¶CCLAMBDA (Expert) — Type of job being performed. Type: string; Default: No Default. KEEP_INTCOS (OPTKING)¶OPTKING — Keep internal coordinate definition file. Type: boolean; Default: false. KIND (ADC)¶ADC — The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. LEVEL_SHIFT (DFOCC)¶DFOCC — Level shift to aid convergence. Type: double; Default: 0.02. LEVEL_SHIFT (MCSCF)¶MCSCF — Level shift to aid convergence. Type: double; Default: 0.0. LEVEL_SHIFT (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 0.02. LEVEL_SHIFT (SCF)¶SCF — Do use a level shift?. Type: double; Default: 0.0. LEVEL_SHIFT_CUTOFF (SCF)¶SCF — DIIS error at which to stop applying the level shift. Type: double; Default: 1e-2. LINEAR (CCRESPONSE)¶CCRESPONSE — Do Bartlett size-extensive linear model?. Type: boolean; Default: false. LINEQ_SOLVER (DFOCC)¶DFOCC — The solver will be used for simultaneous linear equations. Type: string; Possible Values: CDGESV",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:159518,Performance,perform,performed,159518,"uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. LOCAL_WEAKP (CCLAMBDA)¶CCLAMBDA — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCAL_WEAKP (CCRESPONSE)¶CCRESPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:159920,Performance,optimiz,optimization,159920,"SPONSE — Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. LOCK_SINGLET (PSIMRCC)¶PSIMRCC — Do lock onto a singlet root?. Type: boolean; Default: false. LSE (DETCI)¶DETCI — Do use least-squares extrapolation in iterative solution of CI vector?. Type: boolean; Default: false. LSE_COLLAPSE (DETCI)¶DETCI — Number of iterations between least-squares extrapolations. Type: integer; Default: 3. LSE_TOLERANCE (DETCI)¶DETCI — Minimum converged energy for least-squares extrapolation to be performed. Type: conv double; Default: 3. MADMP2_SLEEP (DFMP2)¶DFMP2 (Expert) — A helpful option, used only in debugging the MADNESS version. Type: integer; Default: 0. MAT_NUM_COLUMN_PRINT (GLOBALS)¶GLOBALS (Expert) — Number of columns to print in calls to Matrix::print_mat. Type: integer; Default: 5. MAX_ATTEMPTS (SCF)¶SCF (Expert) — When using STABILITY_ANALYSIS FOLLOW, maximum number of orbital optimization attempts to make the wavefunction stable. Type: integer; Default: 1. MAX_CCD_DIISVECS (SAPT)¶SAPT — Maximum number of vectors used in CCD-DIIS. Type: integer; Default: 10. MAX_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. MAX_ENERGY_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum energy change. Type: conv double; Default: 1.0e-6. MAX_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: maximum force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. MAX_MEM_BUF (SCF)¶SCF — Max memory per buf for PK algo REORDER, for debug and tuning. Type: integer; Default: 0. MAX_MOGRAD_CONVERGENCE (DFOCC)¶DFOCC — Convergence criterion for maximum orbital gradient. If this keyword is not set by the user, DFOCC will estimate and use a v",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:168053,Performance,optimiz,optimization,168053,"Do allow “mixed” excitations involving RAS IV into the CI space. Useful to specify a split-virtual CISD[TQ] computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SC",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:168158,Performance,optimiz,optimization,168158," computation. If FALSE, then if there are any electrons in RAS IV, then the number of holes in RAS I cannot exceed the given excitation level EX_LEVEL. Type: boolean; Default: true. MO_DIIS_NUM_VECS (DFOCC)¶DFOCC — Number of vectors used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:170073,Performance,perform,perform,170073,"ile? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/beta). Type: array; Default: No Default. MOM_START (SCF)¶SCF — The iteration to start MOM on (or 0 for no MOM). Type: integer; Default: 0. MOM_VIR (SCF)¶SCF — The absolute indices of orbitals to excite to in MOM (+/- for alpha/beta). Type: array; Default: No Default. MP2_AMP_TYPE (DFOCC)¶DFOCC — The algorithm that used to handle mp2 amplitudes. The DIRECT option means compute amplitudes on the fly * whenever they are necessary. Type: string; Possible Values: DIRECT, CONV; Default: DIRECT. MP2_AMPS_PRINT (CCENERGY)¶CCENERGY — Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. MP2_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:171057,Performance,optimiz,optimized-,171057,"_CCSD_METHOD (PSIMRCC)¶PSIMRCC — How to perform MP2_CCSD computations. Type: string; Possible Values: I, IA, II; Default: II. MP2_GUESS (PSIMRCC)¶PSIMRCC — Do start from a MP2 guess?. Type: boolean; Default: true. MP2_OS_SCALE (CCENERGY)¶CCENERGY — MP2 opposite-spin scaling value. Type: double; Default: 1.20. MP2_OS_SCALE (DFMP2)¶DFMP2 — OS Scale. Type: double; Default: 6.0. MP2_OS_SCALE (DFOCC)¶DFOCC — MP2 opposite-spin scaling value. Type: double; Default: 6.0. MP2_OS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 6.0. MP2_SCALE_OS (FNOCC)¶FNOCC — Opposite-spin scaling factor for SCS-MP2. Type: double; Default: 1.20. MP2_SCALE_SS (FNOCC)¶FNOCC — Same-spin scaling factor for SCS-MP2. Type: double; Default: 1.0. MP2_SOS_SCALE (DFOCC)¶DFOCC — MP2 Spin-opposite scaling (SOS) value. Type: double; Default: 1.3. MP2_SOS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:171908,Performance,optimiz,optimized,171908,"LE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.3. MP2_SOS_SCALE2 (DFOCC)¶DFOCC — Spin-opposite scaling (SOS) value for optimized-MP2 orbitals. Type: double; Default: 1.2. MP2_SOS_SCALE2 (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.2. MP2_SS_SCALE (CCENERGY)¶CCENERGY — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (DFMP2)¶DFMP2 — SS Scale. Type: double; Default: 1.0. MP2_SS_SCALE (DFOCC)¶DFOCC — MP2 same-spin scaling value. Type: double; Default: 1.0. MP2_SS_SCALE (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: double; Default: 1.0. MP2_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MP2 computation. See Cross-module Redundancies for details. Type: string; Possible Values: DF, CONV, CD; Default: DF. MP_TYPE (GLOBALS)¶GLOBALS — Algorithm to use for MPn ( \(n>2\) ) computation (e.g., MP3 or MP2.5 or MP4(SDQ)). See Cross-module Redundancies for details. Since v1.4, default for non-orbital-optimized MP2.5 and MP3 is DF. Type: string; Possible Values: DF, CONV, CD; Default: CONV. MPN (DETCI)¶DETCI — Do compute the MPn series out to kth order where k is determined by MAX_NUM_VECS ? For open-shell systems (REFERENCE is ROHF, WFN is ZAPTN), DETCI will compute the ZAPTn series. GUESS_VECTOR must be set to UNIT, HD_OTF must be set to TRUE, and HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:173294,Performance,perform,performed,173294,"d HD_AVG must be set to orb_ener; these should happen by default for MPN = TRUE. Type: boolean; Default: false. MPN_ORDER_SAVE (DETCI)¶DETCI (Expert) — If 0, save the MPn energy; if 1, save the MP(2n-1) energy (if available from MPN_WIGNER = true); if 2, save the MP(2n-2) energy (if available from MPN_WIGNER = true). Type: integer; Default: 0. MPN_SCHMIDT (DETCI)¶DETCI (Expert) — Do employ an orthonormal vector space rather than storing the kth order wavefunction?. Type: boolean; Default: false. MPN_WIGNER (DETCI)¶DETCI (Expert) — Do use Wigner formulas in the \(E_{text{mp}n}\) series?. Type: boolean; Default: true. MRCC_LEVEL (MRCC)¶MRCC — Maximum excitation level. This is used ONLY if it is explicitly set by the user. Single-reference case: all excitations up to this level are included, e.g., 2 for CCSD, 3 for CCSDT, 4 for CCSDTQ, etc. This becomes ex.lev (option #1) in fort.56. Type: integer; Default: 2. MRCC_METHOD (MRCC)¶MRCC (Expert) — If more than one root is requested and calc=1, LR-CC (EOM-CC) calculation is performed automatically for the excited states. This overrides all automatic determination of method and will only work with energy(). This becomes CC/CI (option #5) in fort.56. See Table MRCC_METHOD for details. Type: integer; Default: 1. MRCC_NUM_DOUBLET_ROOTS (MRCC)¶MRCC — Number of root in case of open shell system. This becomes ndoub (option #13) int fort.56. Type: integer; Default: 0. MRCC_NUM_SINGLET_ROOTS (MRCC)¶MRCC — Number of singlet roots. (Strictly speaking number of of roots with M_s=0 and S is even.) Use this option only with closed shell reference determinant, it must be zero otherwise. This becomes nsing (option #2) in fort.56. Type: integer; Default: 1. MRCC_NUM_TRIPLET_ROOTS (MRCC)¶MRCC — Number of triplet roots. (Strictly speaking number of of roots with \(M_s=0\) and S is odd.) See notes at option MRCC_NUM_SINGLET_ROOTS. This becomes ntrip (option #3) in fort.56. Type: integer; Default: 0. MRCC_OMP_NUM_THREADS (MRCC)¶MRCC (Expert) —",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:180560,Performance,perform,perform,180560,"Type: boolean; Default: false. OCC_ORBS_PRINT (OCC)¶OCC — Do print OCC orbital energies?. Type: boolean; Default: false. OCC_PERCENTAGE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). The number of virtual NOs is chosen so the occupation of the truncated virtual space is OCC_PERCENTAGE percent of occupation of the original MP2 virtual space. This option is only used if NAT_ORBS = true. This keyword overrides OCC_TOLERANCE. Type: double; Default: 99.0. OCC_TOLERANCE (FNOCC)¶FNOCC — Cutoff for occupation of MP2 virtual NOs in FNO-QCISD/CCSD(T). Virtual NOs with occupations less than OCC_TOLERANCE will be discarded. This option is only used if NAT_ORBS = true. Type: conv double; Default: 1.0e-6. OCC_TOLERANCE (SAPT)¶SAPT — Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. ODC_GUESS (DCT)¶DCT — Whether to perform a guess DC-06 or DC-12 computation for ODC-06 or ODC-12 methods, respectively. Currently only available for ALGORITHM = SIMULTANEOUS. Type: boolean; Default: false. OEPROP (DFOCC)¶DFOCC — Do compute one electron properties?. Type: boolean; Default: false. OEPROP (OCC)¶OCC — Do compute one electron properties?. Type: boolean; Default: false. OFFDIAGONAL_CCSD_T (PSIMRCC)¶PSIMRCC — Do include the off-diagonal corrections in (T) computations?. Type: boolean; Default: true. OMEGA (CCRESPONSE)¶CCRESPONSE — Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. OMEGA_ERF (MINTS)¶MINTS — Omega scaling for Erf and Erfc. Type: double; Default: 0.20. ONEPDM (CCDENSITY)¶CCDENSITY — Do compute one-particle density matrix?. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:182876,Performance,optimiz,optimization,182876,"RID_DUMP (CCDENSITY)¶CCDENSITY — Write one-particle density matrix on a grid to file opdm.dx. Type: boolean; Default: false. ONEPDM_GRID_STEPSIZE (CCDENSITY)¶CCDENSITY — Step size (Angstrom) for one-particle density matrix values on a grid. Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:183286,Performance,optimiz,optimization,183286,"ing factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:183470,Performance,optimiz,optimization,183470,"ons. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:183808,Performance,perform,performed,183808,"?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:184094,Performance,optimiz,optimize,184094,"ses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:184171,Performance,optimiz,optimize,184171,"DUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_OPT (OCC)¶OCC — Do optimize the orbitals?. Type: boolean; Default: true. ORB_RESP_SOLVER (DFOCC)¶DFOCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORB_RESP_SOLVER (OCC)¶OCC — The algorithm will be used for solving the orbital-response equations. The LINEQ option create the MO Hessian and solve the simultaneous linear equations with method choosen by the LINEQ_SOLVER option. The PCG option does not create the MO Hessian explicitly, instead it solves the simultaneous equations iteratively with the preconditioned conjugate gradient method. Type: string; Possible Values: PCG, LINEQ; Default: PCG. ORBITAL_LEVEL_SHIFT (DCT)¶DCT (Exper",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:195044,Performance,perform,perform,195044,"perties to compute. Type: array; Default: No Default. PROPERTIES_ORIGIN (GLOBALS)¶GLOBALS — Either a set of 3 coordinates or a string describing the origin about which one-electron properties are computed. Type: array; Default: No Default. PROPERTY (CCENERGY)¶CCENERGY — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. PROPERTY (CCRESPONSE)¶CCRESPONSE — The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. PT_ENERGY (PSIMRCC)¶PSIMRCC — The type of perturbation theory computation to perform. Type: string; Default: SECOND_ORDER. PUREAM (GLOBALS)¶GLOBALS — Do use pure angular momentum basis functions? If not explicitly set, the default comes from the basis set. Cfour Interface: Keyword translates into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulan",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:196255,Performance,perform,perform,196255,"tes into CFOUR_SPHERICAL. Type: boolean; Default: true. QC_COUPLING (DCT)¶DCT — Controls whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in th",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:196335,Performance,perform,perform,196335,"ntrols whether to include the coupling terms in the DCT electronic Hessian (for ALOGRITHM = QC with QC_TYPE = SIMULTANEOUS only). Type: boolean; Default: false. QC_MODULE (GLOBALS)¶GLOBALS — When several modules can compute the same methods and the default routing is not suitable, this targets a module. CCENERGY covers CCHBAR, etc. OCC covers OCC and DFOCC. Type: string; Possible Values: CCENERGY, DETCI, DFMP2, FNOCC, OCC, ADCC, CCT3; Default: No Default. QC_TYPE (DCT)¶DCT — Controls the type of the quadratically-convergent algorithm (effective for ALGORITHM = QC). If set to TWOSTEP the Newton-Raphson equations are only solved for the orbital updates, the cumulant is updated using the standard Jacobi algorithm. If set to SIMULTANEOUS both cumulant and orbitals are updated in a single Newton-Raphson step. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: SIMULTANEOUS. QCHF (DFOCC)¶DFOCC — Do perform a QCHF computation?. Type: boolean; Default: false. QCHF (SCF)¶SCF — Do perform a QCHF computation?. Type: boolean; Default: false. QMEFP (EFP)¶EFP (Expert) — Do turn on QM/EFP terms?. Type: boolean; Default: false. R4S (DETCI)¶DETCI (Expert) — Do restrict strings with \(e-\) in RAS IV? Useful to reduce the number of strings required if MIXED4=true, as in a split-virutal CISD[TQ] computation. If more than one electron is in RAS IV, then the holes in RAS I cannot exceed the number of particles in RAS III + RAS IV (i.e., EX_LEVEL), or else the string is discarded. Type: boolean; Default: false. R_CONVERGENCE (ADC)¶ADC — Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. R_CONVERGENCE (CCENERGY)¶CCENERGY — Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. R_CONVERGENCE (",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:201941,Performance,perform,performing,201941," TWOCON, MCSCF, GENERAL; Default: RHF. REFERENCE (SCF)¶SCF — Reference wavefunction type. Cfour Interface: Keyword translates into CFOUR_REFERENCE. Type: string; Possible Values: RHF, ROHF, UHF, CUHF, RKS, UKS; Default: RHF. REFERENCE_SYM (DETCI)¶DETCI (Expert) — Irrep for CI vectors; -1 = find automatically. This option allows the user to look for CI vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:202874,Performance,optimiz,optimizations,202874,"S (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbita",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:203899,Performance,optimiz,optimized,203899,"old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING)¶OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING)¶OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING)¶OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM)¶CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:204116,Performance,optimiz,optimized,204116,"ing that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. RESTART (CCRESPONSE)¶CCRESPONSE — Do restart from on-disk amplitudes?. Type: boolean; Default: true. RESTART (DETCI)¶DETCI — Do restart a DETCI iteration that terminated prematurely? It assumes that the CI and sigma vectors are on disk. Type: boolean; Default: false. RESTART_EOM_CC3 (CCEOM)¶CCEOM — Do restart from on-disk?. Type: boolean; Default: false. RESTRICTED_DOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted doubly-occupied orbitals per irrep (not excited in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RESTRICTED_UOCC (GLOBALS)¶GLOBALS — An array giving the number of restricted unoccupied orbitals per irrep (not occupied in CI wavefunctions, but orbitals can be optimized in MCSCF). Type: array; Default: No Default. RFO_FOLLOW_ROOT (OPTKING)¶OPTKING — Do follow the initial RFO vector after the first step?. Type: boolean; Default: false. RFO_NORMALIZATION_MAX (OPTKING)¶OPTKING — Eigenvectors of RFO matrix whose final column is smaller than this are ignored. Type: double; Default: 100. RFO_ROOT (OPTKING)¶OPTKING — Root for RFO to follow, 0 being lowest (for a minimum). Type: integer; Default: 0. RHF_TRIPLETS (CCEOM)¶CCEOM — Do form a triplet state from RHF reference?. Type: boolean; Default: false. RMS_DISP_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms displacement (internal coordinates, atomic units). Type: conv double; Default: 1.2e-3. RMS_FORCE_G_CONVERGENCE (OPTKING)¶OPTKING — Convergence criterion for geometry optmization: rms force (internal coordinates, atomic units). Type: conv double; Default: 3.0e-4. RMS_MOGRAD_CONVERGENCE (DF",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:215917,Performance,optimiz,optimized,215917,"on algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCREENING (GLOBALS)¶GLOBALS — The type of screening used when computing two-electron integrals. Type: string; Possible Values: SCHWARZ, CSAM, DENSITY; Default: CSAM. SCS_CCSD (CCENERGY)¶CCENERGY — Do spin-component-scaled CCSD. Type: boolean; Default: false. SCS_CCSD (FNOCC)¶FNOCC — Do SCS-CCSD?. Type: boolean; Default: false. SCS_CEPA (FNOCC)¶FNOCC — Do SCS-CEPA? Note that the scaling factors will be identical to those for SCS-CCSD. Type: boolean; Default: false. SCS_MP2 (CCENERGY)¶CCENERGY — Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. SCS_MP2 (FNOCC)¶FNOCC — Do SCS-MP2?. Type: boolean; Default: false. SCS_TYPE (DFOCC)¶DFOCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCS_TYPE (OCC)¶OCC — Type of the SCS method. Type: string; Possible Values: SCS, SCSN, SCSVDW, SCSMI; Default: SCS. SCSN_MP2 (CCENERGY)¶CCENERGY — Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. SEKINO (CCLAMBDA)¶CCLAMBDA — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEKINO (CCRESPONSE)¶CCRESPONSE — Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. SEM_MAXITER (ADC)¶ADC — Maximum iteration number in simultaneous expansion method. This option is only available for the built-in ADC backend. Type: integer; Default: 30. SEMICANONICAL (CCENERGY)¶CCENERGY — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCEOM)¶CCEOM — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SEMICANONICAL (CCTRANSORT)¶CCTRANSORT — Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. SEMICANONICAL (CCTRIPLES)¶CCTRIPLES — Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. SF_RESTRICT (DETCI)¶DETCI (Expert) — Do eliminate determinants not valid for s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:219651,Performance,perform,perform,219651,"lt: JACOBI. SOLVER_PRECONDITION_MAXITER (CPHF)¶CPHF — Solver precondition max steps. Type: integer; Default: 1. SOLVER_PRECONDITION_STEPS (CPHF)¶CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF)¶CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF)¶CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:219764,Performance,perform,perform,219764,"OLVER_PRECONDITION_STEPS (CPHF)¶CPHF — Solver precondition step type. Type: string; Possible Values: CONSTANT, TRIANGULAR; Default: TRIANGULAR. SOLVER_QUANTITY (CPHF)¶CPHF — Solver residue or eigenvector delta. Type: string; Possible Values: EIGENVECTOR, RESIDUAL; Default: RESIDUAL. SOLVER_TYPE (CPHF)¶CPHF — Solver type (for interchangeable solvers). Type: string; Possible Values: DL, RAYLEIGH; Default: DL. SOS_TYPE (DFOCC)¶DFOCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOS_TYPE (OCC)¶OCC — Type of the SOS method. Type: string; Possible Values: SOS, SOSPI; Default: SOS. SOSCF (SCF)¶SCF — Do use second-order SCF convergence methods?. Type: boolean; Default: false. SOSCF_CONV (SCF)¶SCF — Second order convergence threshold. Cease microiterating at this value. Type: conv double; Default: 5.0e-3. SOSCF_MAX_ITER (SCF)¶SCF — Maximum number of second-order microiterations to perform. Type: integer; Default: 5. SOSCF_MIN_ITER (SCF)¶SCF — Minimum number of second-order microiterations to perform. Type: integer; Default: 1. SOSCF_PRINT (SCF)¶SCF — Do we print the SOSCF microiterations?. Type: boolean; Default: false. SOSCF_START_CONVERGENCE (SCF)¶SCF — When to start second-order SCF iterations based on gradient RMS. Type: conv double; Default: 1.0e-2. SPIN_SCALE_TYPE (OCC)¶OCC (Expert) — Controls the spin scaling set to current energy. This is set by Psi internally. Type: string; Possible Values: NONE, CUSTOM, SCS, SCSN, SCSVDW, SOS, SOSPI; Default: NONE. SPINADAPT_ENERGIES (CCENERGY)¶CCENERGY — Do print spin-adapted pair energies?. Type: boolean; Default: false. SS_E_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:221404,Performance,perform,perform,221404,"for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the sub",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:221479,Performance,perform,performed,221479," CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_R_CONVERGENCE (CCEOM)¶CCEOM — Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if thi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:221597,Performance,perform,perform,221597," conv double; Default: 1e-6. SS_SCALE (OCC)¶OCC — A custom scaling parameter for same-spin terms in OCC. The result goes to a CUSTOM SCS variable, exact name method-dependent. Type: double; Default: 1. SS_SKIP_DIAG (CCEOM)¶CCEOM — Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. SS_VECS_PER_ROOT (CCEOM)¶CCEOM — SS vectors stored per root. Type: integer; Default: 5. SSAPT0_SCALE (FISAPT)¶FISAPT — Do sSAPT0 exchange-scaling with F-SAPT. Type: boolean; Default: false. STABILITY_ADD_VECTORS (DCT)¶DCT (Expert) — The number of vectors that can be added simultaneously into the subspace for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STABILITY_ANALYSIS (SCF)¶SCF — Whether to perform stability analysis after convergence. NONE prevents analysis being performed. CHECK will print out the analysis of the wavefunction stability at the end of the computation. FOLLOW will perform the analysis and, if a totally symmetric instability is found, will attempt to follow the eigenvector and re-run the computations to find a stable solution. Type: string; Possible Values: NONE, CHECK, FOLLOW; Default: NONE. STABILITY_AUGMENT_SPACE_TOL (DCT)¶DCT (Expert) — The value of the rms of the residual in Schmidt orthogonalization which is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:222925,Performance,optimiz,optimization,222925,"hich is used as a threshold for augmenting the vector subspace in stability check. Type: conv double; Default: 0.1. STABILITY_CHECK (DCT)¶DCT (Expert) — Performs stability analysis of the DCT energy. Type: boolean; Default: false. STABILITY_CONVERGENCE (DCT)¶DCT (Expert) — Controls the convergence of the Davidson’s diagonalization in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMM_TOL (OPTKING)¶OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCH",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:3864,Safety,avoid,avoid,3864,"isk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCLAMBDA)¶CCLAMBDA — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (CCTRANSORT)¶CCTRANSORT — The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. AO_BASIS (DCT)¶DCT — Controls whether to avoid the AO->MO transformation of the two-electron integrals for the four-virtual case (\(\langle VV|| VV \rangle\)) by computing the corresponding terms in the AO basis. AO_BASIS = DISK algorithm reduces the memory requirements and can significantly reduce the cost of the energy computation if SIMULTANEOUS algorithm is used. For the TWOSTEP algorithm, however, AO_BASIS = DISK option is not recommended due to extra I/O. Type: string; Possible Values: NONE, DISK; Default: DISK. AUXILIARY_BOND_FACTOR (OPTKING)¶OPTKING — This factor times standard covalent distance is used to add extra stretch coordinates. Type: double; Default: 2.5. AVG_STATES (DETCI)¶DETCI — Array giving the root numbers of the states to average in a state-averaged procedure such as SA-CASSCF. Root numbering starts from 0. Type: array; Default: No Default. AVG_WEIGHTS (DETCI)¶DETCI — Array giving the weights for each state in a state-averaged procedure. Type: array; Default: No Default. B_RAS3_MAX (DETCI)¶DETCI — maximum number of beta electrons in RAS III. Type: integer; Default: -",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:27822,Safety,safe,safe,27822," OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. CFOUR_CC_MAXCYC (CFOUR)¶CFOUR — Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. CFOUR_CC_PROGRAM (CFOUR)¶CFOUR — Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL, reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. CFOUR_CHARGE (CFOUR)¶CFOUR — Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. CFOUR_CIS_CONV (CFOUR)¶CFOUR — Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. CFOUR_CONTINUUM (CFOUR)¶CFOUR — Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:87605,Safety,hazard,hazardous,87605,"LOBALS)¶GLOBALS — Algorithm to use for CI computation (e.g., CID or CISD). See Cross-module Redundancies for details. Type: string; Possible Values: CONV; Default: CONV. CIBLKS_PRINT (DETCI)¶DETCI — Do print a summary of the CI blocks?. Type: boolean; Default: false. COLLAPSE_SIZE (DETCI)¶DETCI — Gives the number of vectors to retain when the Davidson subspace is collapsed (see MAX_NUM_VECS). If greater than one, the collapsed subspace retains the best estimate of the CI vector for the previous n iterations. Defaults to 1. Type: integer; Default: 1. COLLAPSE_WITH_LAST (CCEOM)¶CCEOM — When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. COLLAPSE_WITH_LAST_CC3 (CCEOM)¶CCEOM — Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. COMPLEX_TOLERANCE (CCEOM)¶CCEOM — Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. COMPUT_S2 (DFOCC)¶DFOCC — Do compute \(\langle \hat{S}^2 \rangle\) for DF-OMP2/DF-MP2?. Type: boolean; Default: false. COMPUTE_MP4_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute MP4 triples contribution?. Type: boolean; Default: false. COMPUTE_TRIPLES (FNOCC)¶FNOCC (Expert) — Do compute triples contribution?. Type: boolean; Default: true. CONSECUTIVE_BACKSTEPS (OPTKING)¶OPTKING — Set number of consecutive backward steps allowed in optimization. Type: integer; Default: 0. CORR_ANSATZ (PSIMRCC)¶PSIMRCC — The ansatz to use for MRCC computations. Type: string; Possible Values: SR, MK, BW, APBW; Default: MK. CORR_CCSD_T (PSIMRCC)¶PSIMRCC — The type of CCSD(T) computation to perform. Type: string; Possible Values: STANDARD, PITTNER; Default: STANDARD. CORR_CHARGE (PSIMRCC)¶PSIMRCC — The molecular charge of the targ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:89860,Safety,safe,safety,89860," type of correlated wavefunction. Type: string; Possible Values: PT2, CCSD, MP2-CCSD, CCSD_T; Default: CCSD. COUPLED_INDUCTION (SAPT)¶SAPT (Expert) — Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. COUPLING (PSIMRCC)¶PSIMRCC — The order of coupling terms to include in MRCCSDT computations. Type: string; Possible Values: NONE, LINEAR, QUADRATIC, CUBIC; Default: CUBIC. COUPLING_TERMS (PSIMRCC)¶PSIMRCC — Do include the terms that couple the reference determinants?. Type: boolean; Default: true. COVALENT_CONNECT (OPTKING)¶OPTKING — When determining connectivity, a bond is assigned if interatomic distance is less than (this number) * sum of covalent radii. Type: double; Default: 1.3. CPHF_MEM_SAFETY_FACTOR (CPHF)¶CPHF — Memory safety factor for allocating JK. Type: double; Default: 0.75. CPHF_TASKS (CPHF)¶CPHF — Which tasks to run CPHF For * Valid choices: * -Polarizability *. Type: array; Default: No Default. CUBEPROP_BASIS_FUNCTIONS (GLOBALS)¶GLOBALS — List of basis function indices for which cube files are generated (1-based). All basis functions computed if empty. Type: array; Default: No Default. CUBEPROP_FILEPATH (GLOBALS)¶GLOBALS — Directory to which to write cube files. Default is the input file directory. Type: string; Default: No Default. CUBEPROP_ISOCONTOUR_THRESHOLD (GLOBALS)¶GLOBALS — Fraction of density captured by adaptive isocontour values. Type: double; Default: 0.85. CUBEPROP_ORBITALS (GLOBALS)¶GLOBALS — List of orbital indices for which cube files are generated (1-based, \(+\) for alpha, \(-\) for beta). All orbitals computed if empty. Type: array; Default: No Default. CUBEPROP_TASKS (GLOBALS)¶GLOBALS — Properties to compute. Valid tasks include: DENSITY - Da, Db, Dt, Ds; ESP - Dt, E",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:111323,Safety,avoid,avoid,111323,"ult: 50. DMRG_CASPT2_CALC (DMRG)¶DMRG — Do calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done?. Type: boolean; Default: false. DMRG_CASPT2_IMAG (DMRG)¶DMRG — CASPT2 Imaginary shift. Type: double; Default: 0.0. DMRG_CASPT2_IPEA (DMRG)¶DMRG — CASPT2 IPEA shift. Type: double; Default: 0.0. DMRG_CASPT2_ORBS (DMRG)¶DMRG — Whether to calculate the DMRG-CASPT2 energy after the DMRGSCF calculations are done. Type: string; Possible Values: PSEUDOCANONICAL, ACTIVE; Default: PSEUDOCANONICAL. DMRG_DIIS (DMRG)¶DMRG — Whether or not to use DIIS for DMRG. Type: boolean; Default: false. DMRG_DIIS_WRITE (DMRG)¶DMRG — Whether or not to store the DIIS checkpoint on disk (convenient for restarting). Type: boolean; Default: true. DMRG_EXCITATION (DMRG)¶DMRG — Which root is targeted: 0 means ground state, 1 first excited state, etc. Type: integer; Default: 0. DMRG_IRREP (DMRG)¶DMRG — The DMRG wavefunction irrep uses the same conventions as PSI4. How convenient :-). Just to avoid confusion, it’s copied here. It can also be found on http://sebwouters.github.io/CheMPS2/doxygen/classCheMPS2_1_1Irreps.html . Symmetry Conventions Irrep Number & Name Group Number & Name 0 1 2 3 4 5 6 7 0: c1 A 1: ci Ag Au 2: c2 A B 3: cs A’ A’’ 4: d2 A B1 B2 B3 5: c2v A1 A2 B1 B2 6: c2h Ag Bg Au Bu 7: d2h Ag B1g B2g B3g Au B1u B2u B3u. Type: integer; Default: -1. DMRG_LOCAL_INIT (DMRG)¶DMRG — Whether to start the active space localization process from a random unitary matrix instead of a unit matrix. Type: boolean; Default: true. DMRG_MOLDEN_WRITE (DMRG)¶DMRG — DMRG-CI or converged DMRG-SCF orbitals in molden format. Type: boolean; Default: false. DMRG_MPS_WRITE (DMRG)¶DMRG — Whether or not to create intermediary MPS checkpoints. Type: boolean; Default: false. DMRG_MULTIPLICITY (DMRG)¶DMRG — The DMRG wavefunction multiplicity in the form (2S+1). Type: integer; Default: -1. DMRG_OPDM_AO_PRINT (DMRG)¶DMRG — Print out the density matrix in the AO basis. Type: boolean; Default: false. DMRG_PRIN",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:129541,Safety,safe,safety,129541,"ATH (FISAPT)¶FISAPT — Filepath to drop F-SAPT data within input file directory. Type: string; Default: fsapt/. FISAPT_FSAPT_IND_RESPONSE (FISAPT)¶FISAPT — Do F-SAPT coupled response? (not recommended). Type: boolean; Default: false. FISAPT_FSAPT_IND_SCALE (FISAPT)¶FISAPT — Do F-SAPT induction scaling? (ratio of HF induction to F-SAPT induction). Type: boolean; Default: true. FISAPT_FSSAPT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop sSAPT0 exchange-scaling F-SAPT data within input file directory. Type: string; Default: s-fsapt/. FISAPT_LINK_ASSIGNMENT (FISAPT)¶FISAPT — Where do sigma links go (to C or to AB)?. Type: string; Possible Values: C, AB; Default: C. FISAPT_LINK_SELECTION (FISAPT)¶FISAPT — Specification algorithm for link bonds in ISAPT. Type: string; Possible Values: AUTOMATIC, MANUAL; Default: AUTOMATIC. FISAPT_MANUAL_LINKS (FISAPT)¶FISAPT — Manual link bond specification [[Atom1, Atom2], …]. Type: array; Default: No Default. FISAPT_MEM_SAFETY_FACTOR (FISAPT)¶FISAPT (Expert) — Memory safety factor for heavy FISAPT operations. Type: double; Default: 0.9. FISAPT_PLOT_FILEPATH (FISAPT)¶FISAPT — Filepath to drop scalar data within input file directory. Type: string; Default: plot/. FIXED_BEND (OPTKING)¶OPTKING — Specify angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_COORD_FORCE_CONSTANT (OPTKING)¶OPTKING — In constrained optimizations, for coordinates with user-specified equilibrium values, this is the initial force constant (in au) used to apply an additional force to each coordinate. Type: double; Default: 0.5. FIXED_DIHEDRAL (OPTKING)¶OPTKING — Specify dihedral angles between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FIXED_DISTANCE (OPTKING)¶OPTKING — Specify distances between atoms to be fixed (eq. value specified). Type: string; Default: No Default. FLEXIBLE_G_CONVERGENCE (OPTKING)¶OPTKING — Even if a user-defined threshold is set, allow for normal, flexible convergence cr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:133353,Safety,redund,redundant,133353,"coefficents of \(\pm \sqrt{\frac{1}{2}}\) ?. Type: boolean; Default: false. FRAC_DIIS (SCF)¶SCF — Do use DIIS extrapolation to accelerate convergence in frac?. Type: boolean; Default: true. FRAC_LOAD (SCF)¶SCF — Do recompute guess from stored orbitals?. Type: boolean; Default: false. FRAC_OCC (SCF)¶SCF — The absolute indices of occupied orbitals to fractionally occupy (+/- for alpha/beta). Type: array; Default: No Default. FRAC_RENORMALIZE (SCF)¶SCF — Do renormalize C matrices prior to writing to checkpoint?. Type: boolean; Default: true. FRAC_START (SCF)¶SCF — The iteration to start fractionally occupying orbitals (or 0 for no fractional occupation). Type: integer; Default: 0. FRAC_VAL (SCF)¶SCF — The occupations of the orbital indices specified above (\(0.0\le {\rm occ} \le 1.0\)). Type: array; Default: No Default. FRAG_MODE (OPTKING)¶OPTKING — For multi-fragment molecules, treat as single bonded molecule or via interfragment coordinates. A primary difference is that in MULTI mode, the interfragment coordinates are not redundant. Type: string; Possible Values: SINGLE, MULTI; Default: SINGLE. FRAG_REF_ATOMS (OPTKING)¶OPTKING — Which atoms define the reference points for interfragment coordinates?. Type: array; Default: No Default. FREEZE_CORE (GLOBALS)¶GLOBALS — Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total numbe",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:145902,Safety,avoid,avoid,145902,"n update, 0 uses all. Type: integer; Default: 2. HESSIAN_WRITE (FINDIF)¶FINDIF — Do write a hessian output file? If so, the filename will end in .hess, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. ICORE (DETCI)¶DETCI — Specifies how to handle buffering of CI vectors. A value of 0 makes the program perform I/O one RAS subblock at a time; 1 uses entire CI vectors at a time; and 2 uses one irrep block at a time. Values of 0 or 2 cause some inefficiency in the I/O (requiring multiple reads of the C vector when constructing H in the iterative subspace if DIAG_METHOD = SEM), but require less core memory. Type: integer; Default: 1. INCFOCK (SCF)¶SCF — Do Perform Incremental Fock Build?. Type: boolean; Default: false. INCFOCK_FULL_FOCK_EVERY (SCF)¶SCF — Frequency with which to compute the full Fock matrix if using INCFOCK . N means rebuild every N SCF iterations to avoid accumulating error from the incremental procedure. Type: integer; Default: 5. INDUCED_CONVERGENCE (PE)¶PE — Threshold for induced moments convergence. Type: conv double; Default: 1e-8. INTCOS_GENERATE_EXIT (OPTKING)¶OPTKING — Do only generate the internal coordinates and then stop?. Type: boolean; Default: false. INTEGRAL_CUTOFF (DFOCC)¶DFOCC — Cutoff value for DF integrals. Type: integer; Default: 9. INTEGRAL_PACKAGE (GLOBALS)¶GLOBALS — Integral package to use. If compiled with ERD or Simint support, change this option to use them; LibInt is used otherwise. Type: string; Possible Values: ERD, LIBINT1, SIMINT, LIBINT2; Default: LIBINT2. INTERFRAG_DIST_INV (OPTKING)¶OPTKING — Do use \(\frac{1}{R_{AB}}\) for the stretching coordinate between fragments? Otherwise, use \(R_{AB}\). Type: boolean; Default: false. INTERFRAG_HESS (OPTKING)¶OPTKING — Model Hessian to guess interfragment force constants. Type: string; Possible Values: DEFAULT, FISCHER_LIKE; Default: DEFAULT. INTERFRAG_MODE (OPTKI",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:183100,Safety,redund,redundant,183100,"Type: double; Default: 0.1. ONEPOT_GRID_READ (SCF)¶SCF — Read an external potential from the .dx file?. Type: boolean; Default: false. OO_SCALE (DFOCC)¶DFOCC — OO scaling factor used in MSD. Type: double; Default: 0.01. OPDM (DCT)¶DCT — Compute a (relaxed) one-particle density matrix? Can be set manually. Set internally for property and gradient computations. Type: boolean; Default: false. OPDM (DETCI)¶DETCI — Do compute one-particle density matrix if not otherwise required?. Type: boolean; Default: false. OPDM_RELAX (CCDENSITY)¶CCDENSITY — Do relax the one-particle density matrix?. Type: boolean; Default: false. OPDM_RELAX (DFMP2)¶DFMP2 — Do relax the one-particle density matrix?. Type: boolean; Default: true. OPT_COORDINATES (OPTKING)¶OPTKING — Geometry optimization coordinates to use. REDUNDANT and INTERNAL are synonyms and the default. DELOCALIZED are the coordinates of Baker. NATURAL are the coordinates of Pulay. CARTESIAN uses only cartesian coordinates. BOTH uses both redundant and cartesian coordinates. Type: string; Possible Values: REDUNDANT, INTERNAL, DELOCALIZED, NATURAL, CARTESIAN, BOTH; Default: INTERNAL. OPT_METHOD (DFOCC)¶DFOCC — The orbital optimization algorithm. Presently quasi-Newton-Raphson algorithm available with several Hessian * options. Type: string; Possible Values: QNR; Default: QNR. OPT_METHOD (OCC)¶OCC — The optimization algorithm. Modified Steepest-Descent (MSD) takes a Newton-Raphson (NR) step with a crude approximation to diagonal elements of the MO Hessian. The ORB_RESP option obtains the orbital rotation parameters with a crude approximation to all elements of the MO Hessian. Additionally, for both methods a DIIS extrapolation will be performed with the DO_DIIS = TRUE option. Type: string; Possible Values: MSD, ORB_RESP; Default: MSD. OPT_TYPE (OPTKING)¶OPTKING — Specifies minimum search, transition-state search, or IRC following. Type: string; Possible Values: MIN, TS, IRC; Default: MIN. ORB_OPT (DFOCC)¶DFOCC — Do optimize the orb",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:208625,Safety,redund,redundant,208625,")¶FNOCC (Expert) — do ccsd rather than qcisd?. Type: boolean; Default: false. RUN_CCTRANSORT (CCTRANSORT)¶CCTRANSORT — Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. RUN_CEPA (FNOCC)¶FNOCC (Expert) — Is this a CEPA job? This parameter is used internally by the pythond driver. Changing its value won’t have any effect on the procedure. Type: boolean; Default: false. RUN_MP2 (FNOCC)¶FNOCC (Expert) — do only evaluate mp2 energy?. Type: boolean; Default: false. RUN_MP3 (FNOCC)¶FNOCC (Expert) — do only evaluate mp3 energy?. Type: boolean; Default: false. RUN_MP4 (FNOCC)¶FNOCC (Expert) — do only evaluate mp4 energy?. Type: boolean; Default: false. S (DETCI)¶DETCI — The value of the spin quantum number \(S\) is given by this option. The default is determined by the value of the multiplicity. This is used for two things: (1) determining the phase of the redundant half of the CI vector when the \(M_s = 0\) component is used (i.e., MS0 = TRUE), and (2) making sure the guess vector has the desired value of \(\langle S^2\rangle\) (if CALC_S_SQUARED is TRUE and ICORE = 1). Type: double; Default: 0.0. S_CHOLESKY_TOLERANCE (SCF)¶SCF — Tolerance for partial Cholesky decomposition of overlap matrix. Type: conv double; Default: 1e-8. S_CUT (DLPNO)¶DLPNO (Expert) — Overlap matrix threshold for removing linear dependencies. Type: double; Default: 1e-8. S_ORTHOGONALIZATION (SCF)¶SCF — SO orthogonalization: automatic, symmetric, or canonical?. Type: string; Possible Values: AUTO, SYMMETRIC, CANONICAL, PARTIALCHOLESKY; Default: AUTO. S_TOLERANCE (SCF)¶SCF — Minimum S matrix eigenvalue to allow before linear dependencies are removed. Type: conv double; Default: 1e-7. SAD_CHOL_TOLERANCE (SCF)¶SCF (Expert) — SAD guess density decomposition threshold. Type: conv double; Default: 1e-7. SAD_D_CONVERGENCE (SCF)¶SCF — Convergence criterion for SCF density in the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:213795,Safety,safe,safety,213795,"p module to use?. Type: string; Possible Values: FISAPT, SAPT; Default: SAPT. SAPT_FDDS_DISP_LEG_LAMBDA (SAPT)¶SAPT (Expert) — Lambda shift in the space morphing for the FDDS Dispersion time integration. Type: double; Default: 0.3. SAPT_FDDS_DISP_NUM_POINTS (SAPT)¶SAPT (Expert) — Number of points in the Legendre FDDS Dispersion time integration. Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCHMIDT",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:214131,Safety,safe,safety,214131," Type: integer; Default: 10. SAPT_FDDS_V2_RHO_CUTOFF (SAPT)¶SAPT (Expert) — Minimum rho cutoff for the in the LDA response for FDDS. Type: double; Default: 1.e-6. SAPT_LEVEL (SAPT)¶SAPT — The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. SAPT_MEM_CHECK (SAPT)¶SAPT — Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. SAPT_MEM_FACTOR (SAPT)¶SAPT (Expert) — Proportion of memory available for the DF-MP2 three-index integral buffers used to evaluate dispersion. Type: double; Default: 0.9. SAPT_MEM_SAFETY (SAPT)¶SAPT — Memory safety. Type: double; Default: 0.9. SAPT_QUIET (SAPT)¶SAPT (Expert) — Interior option to clean up printing. Type: boolean; Default: false. SAVE_JK (SCF)¶SCF — Keep JK object for later use?. Type: boolean; Default: false. SAVE_UHF_NOS (SCF)¶SCF — Save the UHF NOs. Type: boolean; Default: false. SCF_MEM_SAFETY_FACTOR (SCF)¶SCF — Memory safety factor for allocating JK. Type: double; Default: 0.75. SCF_PROPERTIES (SCF)¶SCF — SCF Properties to calculate after an energy evaluation. Note, this keyword is not used for property evaluations. Type: array; Default: No Default. SCF_TYPE (CPHF)¶CPHF — SCF Type. Type: string; Possible Values: DIRECT, DF, PK, OUT_OF_CORE, PS, INDEPENDENT, GTFOCK; Default: DIRECT. SCF_TYPE (GLOBALS)¶GLOBALS — What algorithm to use for the SCF computation. See Table SCF Convergence & Algorithm for default algorithm for different calculation types. Type: string; Possible Values: DIRECT, DF, MEM_DF, DISK_DF, PK, OUT_OF_CORE, CD, GTFOCK; Default: PK. SCHMIDT_ADD_RESIDUAL_TOLERANCE (CCEOM)¶CCEOM — Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. SCREENING (GLOBALS)¶GLOBALS — The type of screening used when computing two-electron integrals. Type: string; Possible Values: SCHWARZ, CSAM, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:44035,Security,access,access,44035,"tes, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. CFOUR_FD_STEPSIZE (CFOUR)¶CFOUR — Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. CFOUR_FD_USEGROUP (CFOUR)¶CFOUR — In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. CFOUR_FILE_RECSIZ (CFOUR)¶CFOUR — This specifies the physical length (in integer words) of the records used in the word-addressable direct access files used by CFOUR. This value should always be chosen as a multiple of 512 bytes, as your local system manager certainly understands. Type: integer; Default: 2048. CFOUR_FILE_STRIPE (CFOUR)¶CFOUR — This option allows the splitting of files. Input is required in the form N1/N2/N3/N4/N5, where N1, N2, N3, N4, and N5 specify the number of files in which MOINTS, GAMLAM, MOABCD, DERINT, and DERGAM are split, respectively. Type: string; Default: 0/0/0/0/0. CFOUR_FINITE_PERTURBATION (CFOUR)¶CFOUR — Specifies the field strength for a perturbation (defined within a %perturbation section). The value must be given as an integer, and the field strength used by the program will be then the value of the keyword \(\times 10^{-6}\). Type: integer; Default: 0. CFOUR_FOCK (CFOUR)¶CFOUR — This option is used to control the algorithm used for construction of the Fock matrix in SCF calculations. PK (=0) uses the PK-supermatrix approach while ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:52668,Security,access,access,52668,"as a possible search for a lower SCF solution. There are three possible options for this keyword. OFF (=0) does nothing, while ON (=1) performs a stability analysis and returns the number of negative eigenvalues in the orbital rotation Hessian. A third option, FOLLOW (=2) performs the stability analysis and then proceeds to rotate the SCF orbitals in the direction of a particular negative eigenvalue of the orbital rotation Hessian (see the explanation of keyword CFOUR_ROT_EVEC), after which the SCF is rerun. Type: string; Possible Values: OFF, ON, FOLLOW; Default: OFF. CFOUR_INCORE (CFOUR)¶CFOUR — This keyword can be used to significantly reduce disk i/o, and should be implemented very soon. The following options are available: OFF (= 0), no special algorithms are used (the default case); ALL (=1) all quantities except the \(\langle ab\vert\vert cd\rangle\) molecular integral lists are held in core; PARTIAL (= 2), the T2 and T1 vectors are held in core throughout the calculation; (=4) all quantities except the \(\langle ab\vert\vert cd\rangle\) and \(\langle ab\vert\vert ci\rangle\) integrals are held in core; (=5) \(\langle ij\vert\vert kl\rangle\) and \(\langle ij\vert\vert ka\rangle\) and two-index quantities are held in core; (=6) all direct access files (MOINTS, GAMLAM, etc.) are held in core. At present, these options have been implemented only in the energy code xvcc and the excitation energy code xvee. (Default: 0). Type: string; Possible Values: OFF, ALL, PARTIAL; Default: OFF. CFOUR_INPUT_MRCC (CFOUR)¶CFOUR — Specifies whether an input for mrcc is written (ON, =0) or not (OFF, =1) if CFOUR_CC_PROGRAM =EXTERNAL has been specified. Type: boolean; Default: true. CFOUR_INTEGRALS (CFOUR)¶CFOUR — This keyword defines what type of integral input will be written by xjoda. VMOL (=1) has to be used with the programs of CFOUR. Using ARGOS (=0), input for Pitzer’s ARGOS integral program will be written. (Default: VMOL). Type: string; Possible Values: VMOL, ARGOS; Defa",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:6053,Testability,benchmark,benchmarking,6053,"INTS — Primary basis set. Available basis sets. Type: string; Possible Values: basis string; Default: No Default. BASIS (SAPT)¶SAPT — Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. BASIS (SCF)¶SCF — Primary basis set. Type: string; Possible Values: basis string; Default: No Default. BASIS_GUESS (SCF)¶SCF — Accelerate convergence by performing a preliminary SCF with this small basis set followed by projection into the full target basis. A value of TRUE turns on projection using the Defaults small basis set 3-21G, pcseg-0, or def2-SV(P). Type: string; Default: FALSE. BASIS_RELATIVISTIC (GLOBALS)¶GLOBALS — Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. BCCD_MAXITER (CCENERGY)¶CCENERGY — Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. BENCH (GLOBALS)¶GLOBALS — Some codes (DFT) can dump benchmarking data to separate output files. Type: integer; Default: 0. BENDAZZOLI (DETCI)¶DETCI (Expert) — Do use some routines based on the papers of Bendazzoli et al. to calculate sigma? Seems to be slower and not worthwhile; may disappear eventually. Works only for full CI and I don’t remember if I could see how their clever scheme might be extended to RAS in general. Type: boolean; Default: false. BORDER (PE)¶PE — Activate border options for sites in proximity to the QM/MM border. Type: boolean; Default: false. BORDER_N_REDIST (PE)¶PE — number of neighbor sites to redistribute to. The default (-1) redistributes to all sites which are not in the border region. Type: integer; Default: -1. BORDER_REDIST_ORDER (PE)¶PE — order from which moments are removed, e.g., if set to 1 (default), only charges are redistributed and all higher order moments are removed. Type: integer; Default: 1. BORDER_REDIST_POL (PE)¶PE — redistribute polarizabilities? If false, polarizabilities are removed ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:54549,Testability,test,tested,54549,"r higher generally do not produce anything of interest to the general user. Do not set JODA_PRINT to 999 as this will cause the core vector to be dumped to disk. Type: integer; Default: 0. CFOUR_LINEQ_CONV (CFOUR)¶CFOUR — Convergence threshold for linear equations controlled by LINEQ_TYPE. Equations are iterated until smallest residual falls below \(10^{-N}\), where \(N\) is the value associated with this keyword. Type: integer; Default: 7. CFOUR_LINEQ_MAXCY (CFOUR)¶CFOUR — The maximum number of iterations in all linear CC equations. Type: integer; Default: 50. CFOUR_LINEQ_TYPE (CFOUR)¶CFOUR — Determines the algorithm used to solve linear equations ( \(\Lambda\) and derivative \(T\) and \(\Lambda\) ). POPLE (=0) uses Pople’s method of successively orthogonalized basis vectors, while DIIS (=1) uses Pulay’s DIIS method. The latter offers the practical advantage of requiring much less disk space, although it is not guaranteed to converge. Moreover, POPLE has not been tested for some time and should definitely be checked! (Default : DIIS). Type: string; Possible Values: POPLE, DIIS; Default: DIIS. CFOUR_LOCK_ORBOCC (CFOUR)¶CFOUR — This keyword is used by the SCF program to determine if the orbital occupancy (by symmetry block) is allowed to change in the course of the calculation. ON (=1) locks the occupation to that set by the keyword CFOUR_OCCUPATION (or the initial guess if omitted); OFF (= 0) permits the occupation to change. (Default : 1 if the occupation is specified with CFOUR_OCCUPATION and for second and later steps of optimizations; 0 if CFOUR_OCCUPATION omitted.). Type: boolean; Default: false. CFOUR_MAXSTEP (CFOUR)¶CFOUR — Identical to CFOUR_GEO_MAXSTEP. Type: integer; Default: 300. CFOUR_MEM_UNIT (CFOUR)¶CFOUR — Specifies the units in which the amount of requested core memory is given. Possible choices are INTEGERWORDS (default), kB, MB, GB, and TB. Psi4 Interface: Keyword set from memory input command when given, always MB. Type: string; Possible Values: I",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:60460,Testability,log,logical,60460,"l be printed. Type: integer; Default: 15. CFOUR_OCCUPATION (CFOUR)¶CFOUR — Specifies the orbital occupancy of the reference function in terms of the occupation numbers of the orbitals and their irreducible representations. The occupancy is specified by either NIRREP or 2*NIRREP integers specifying the number of occupied orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. If the reference function is for an open-shell system, two strings of NIRREP occupation numbers separated by a slash are input for the \(\alpha\) and \(\beta\) sets of orbitals. An example of the use of the OCCUPATION keyword for the water molecule would be OCCUPATION=3-1-1-0. For the \(^2A_1\) water cation, an open-shell system, the keyword would be specified by OCCUPATION=3-1-1-0/2-1-1-0. It should be noted that the xvmol integral program orders the irreducible representations in a strange way, which most users do not perceive to be a logical order. Hence, it is usually advisable initially to run just a single point integral and HF-SCF calculation in order to determine the number and ordering of the irreducible representations. The occupation keyword may be omitted, in which case an initial orbital occupancy is determined by diagonalization of the core Hamiltonian. In many cases, HF-SCF calculations run with the core Hamiltonian guess will usually converge to the lowest energy HF-SCF solution, but this should not be blindly assumed. (Default: The occupation is given by the core Hamiltonian initial guess). Psi4 Interface: The arrays above are specified in PSI as (white space tolerant) [3,1,1,0] and [[3,1,1,0],[3,0,1,0]]. Type: array; Default: No Default. CFOUR_OMP_NUM_THREADS (CFOUR)¶CFOUR (Expert) — Sets the OMP_NUM_THREADS environment variable before calling CFOUR. If the environment variable OMP_NUM_THREADS is set prior to calling Psi4 then that v",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:64552,Testability,test,testing,64552,"ing. Default: STANDARD except for ROHF-CCSD(T) and ROHF-MP4 calculations for which SEMICANONICAL is the default. Type: string; Possible Values: STANDARD, SEMICANONICAL; Default: STANDARD. CFOUR_PERT_ORB (CFOUR)¶CFOUR — Specifies the type of perturbed orbitals used in energy derivative calculations. STANDARD means that the gradient formulation assumes that the perturbed orbitals are not those in which the (perturbed) Fock matrix is diagonal. CANONICAL means that the perturbed orbitals are assumed to be canonical. This keyword is set automatically to CANONICAL in derivative calculations with methods which include triple excitations (MBPT[4]/MP4, CCSD+T[CCSD], CCSD[T], QCISD[T] and all iterative schemes like CCSDT-n and CC3) apart from CCSDT. IJ_CANONICAL requests a canonical perturbed-orbital treatment only for the occupied-occupied block of the unperturbed density matrix in analytic derivative calculations. For testing purposes, it is possible to force the use standard perturbed orbitals even in case of iterative triple excitations via the option FORCE_STANDA (dne?). Note also that in case of unrelaxed derivatives standard orbitals must be used. Default : STANDARD for all methods without triples (except CCSDT), CANONICAL for all methods with triples in case of relaxed derivatives. Type: string; Possible Values: STANDARD, CANONICAL, IJ_CANONICAL; Default: No Default. CFOUR_POINTS (CFOUR)¶CFOUR — Specifies either single (=1, or SINGLE) or double (=2, DOUBLE) sided numerical differentiation in the finite difference evaluation of the Hessian. Two-sided numerical differentiation is considerably more accurate than the single-sided method, and its use is strongly recommended for production work. Type: string; Possible Values: SINGLE, DOUBLE; Default: DOUBLE. CFOUR_PRINT (CFOUR)¶CFOUR — Controls the amount of printing in the energy and energy derivative calculation programs. Using a value of 1 will produce a modest amount of additional output over the default value of 0, whic",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:103879,Testability,log,logarithmic,103879,"SCF)¶SCF — The gradient regularized asymptotic correction beta value. Type: double; Default: 40.0. DFT_GRAC_C_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional corr form. Type: string; Default: XC_LDA_C_VWN. DFT_GRAC_SHIFT (SCF)¶SCF — The gradient regularized asymptotic correction shift value. Type: double; Default: 0.0. DFT_GRAC_X_FUNC (SCF)¶SCF (Expert) — The gradient regularized asymptotic correction functional exch form. Type: string; Default: XC_GGA_X_LB. DFT_GRID_NAME (SCF)¶SCF (Expert) — The DFT grid specification, such as SG1. Type: string; Possible Values: SG0, SG1; Default: No Default. DFT_NUCLEAR_SCHEME (SCF)¶SCF — Nuclear Scheme. Type: string; Possible Values: TREUTLER, BECKE, NAIVE, STRATMANN, SBECKE; Default: TREUTLER. DFT_OMEGA (SCF)¶SCF — The DFT Range-separation parameter. Type: double; Default: 0.0. DFT_OMEGA_C (SCF)¶SCF — The DFT Correlation Range-separation parameter. Type: double; Default: 0.0. DFT_PRUNING_ALPHA (SCF)¶SCF (Expert) — Spread alpha for logarithmic pruning. Type: double; Default: 1.0. DFT_PRUNING_SCHEME (SCF)¶SCF — Select approach for pruning. Options ROBUST and TREUTLER prune based on regions (proximity to nucleus) while FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER prune based on decaying functions (experts only!). The recommended scheme is ROBUST. Type: string; Default: NONE. DFT_RADIAL_POINTS (SCF)¶SCF — Number of radial points. Type: integer; Default: 75. DFT_RADIAL_SCHEME (SCF)¶SCF — Radial Scheme. Type: string; Possible Values: TREUTLER, BECKE, MULTIEXP, EM, MURA; Default: TREUTLER. DFT_SPHERICAL_POINTS (SCF)¶SCF — Number of spherical points (A Lebedev Points number). Type: integer; Default: 302. DFT_SPHERICAL_SCHEME (SCF)¶SCF — Spherical Scheme. Type: string; Possible Values: LEBEDEV; Default: LEBEDEV. DFT_V2_RHO_CUTOFF (SCF)¶SCF — Minima rho cutoff for the second derivative. Type: double; Default: 1.e-6. DFT_VV10_B (SCF)¶SCF — Define VV10 parameter b. Type: double; Def",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:168388,Testability,test,test,168388," used in orbital DIIS. Type: integer; Default: 6. MO_DIIS_NUM_VECS (OCC)¶OCC — Removed in 1.4. Will raise an error in 1.5. Type: integer; Default: 6. MO_MAXITER (DFOCC)¶DFOCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_MAXITER (OCC)¶OCC — Maximum number of iterations to determine the orbitals. Type: integer; Default: 50. MO_READ (MCSCF)¶MCSCF — Do read in from file the MOs from a previous computation?. Type: boolean; Default: true. MO_READ (OCC)¶OCC — Do read coefficient matrices from external files of a previous OMP2 or OMP3 computation?. Type: boolean; Default: false. MO_STEP_MAX (DFOCC)¶DFOCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_STEP_MAX (OCC)¶OCC — Maximum step size in orbital-optimization procedure. Type: double; Default: 0.5. MO_WRITE (OCC)¶OCC — Do write coefficient matrices to external files for direct reading MOs in a subsequent job?. Type: boolean; Default: false. MODULE (CPHF)¶CPHF — What app to test?. Type: string; Possible Values: RCPHF; Default: RCPHF. MOGRAD_DAMPING (OCC)¶OCC — Damping factor for the orbital gradient (Rendell et al., JCP, vol. 87, pp. 5976, 1987). Type: double; Default: 1.0. MOLDEN_WITH_VIRTUAL (GLOBALS)¶GLOBALS — Write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs (false). Type: boolean; Default: true. MOLDEN_WRITE (DFOCC)¶DFOCC — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOLDEN_WRITE (SCF)¶SCF — Do write a MOLDEN output file? If so, the filename will end in .molden, and the prefix is determined by WRITER_FILE_LABEL (if set), or else by the name of the output file plus the name of the current molecule. Type: boolean; Default: false. MOM_OCC (SCF)¶SCF — The absolute indices of orbitals to excite from in MOM (+/- for alpha/bet",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:202355,Testability,test,tested,202355,"I vectors of a different irrep than the reference. This probably only makes sense for Full CI, and it would probably not work with unit vector guesses. Numbering starts from zero for the totally-symmetric irrep. Type: integer; Default: -1. REG_PARAM (DFOCC)¶DFOCC — Regularization parameter. Type: double; Default: 0.4. REGULARIZATION (DFOCC)¶DFOCC — Do use regularized denominators?. Type: boolean; Default: false. RELATIVISTIC (GLOBALS)¶GLOBALS (Expert) — Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. RELAX_GUESS_ORBITALS (DCT)¶DCT (Expert) — Controls whether to relax the guess orbitals by taking the guess density cumulant and performing orbital update on the first macroiteration (for ALOGRITHM = TWOSTEP only). Type: boolean; Default: false. RELAXED (OCC)¶OCC — Do consider orbital response contributions for PDMs and GFM?. Type: boolean; Default: true. REPL_OTF (DETCI)¶DETCI (Expert) — Do string replacements on the fly in DETCI? Can save a gigantic amount of memory (especially for truncated CI’s) but is somewhat flaky and hasn’t been tested for a while. It may work only works for certain classes of RAS calculations. The current code is very slow with this option turned on. Type: boolean; Default: false. RESPONSE_ALGORITHM (DCT)¶DCT — Algorithm to use for the solution of DC-06 response equations in computation of analytic gradients and * properties. Type: string; Possible Values: TWOSTEP, SIMULTANEOUS; Default: TWOSTEP. RESTART (CCENERGY)¶CCENERGY — Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. RESTART (CCLAMBDA)¶CCLAMBDA — Do restart the coupled-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:223286,Testability,test,testing,223286," in stability check. Type: conv double; Default: 1e-4. STABILITY_MAX_SPACE_SIZE (DCT)¶DCT (Expert) — The maximum size of the subspace for the stability check. The program will terminate if this parameter is exceeded and the convergence (STABILITY_CONVERGENCE) is not satisfied. Type: integer; Default: 200. STABILITY_N_EIGENVALUES (DCT)¶DCT (Expert) — The number of Hessian eigenvalues computed during the stability check. Type: integer; Default: 3. STABILITY_N_GUESS_VECTORS (DCT)¶DCT (Expert) — The number of guess vectors used for Davidson’s diagonalization in stability check. Type: integer; Default: 20. STEP_TYPE (OPTKING)¶OPTKING — Geometry optimization step type, either Newton-Raphson or Rational Function Optimization. Type: string; Possible Values: RFO, NR, SD, LINESEARCH_STATIC; Default: RFO. SUMMATION_FIELDS (PE)¶PE — Summation scheme for field computations, can be direct or fmm. Type: string; Possible Values: DIRECT, FMM; Default: DIRECT. SYMM_TOL (OPTKING)¶OPTKING — Symmetry tolerance for testing whether a mode is symmetric. Type: conv double; Default: 0.05. SYMMETRIZE (OCC)¶OCC — Do symmetrize the GFM and OPDM in the EKT computations?. Type: boolean; Default: true. T (THERMO)¶THERMO — Temperature in Kelvin for thermodynamic analysis. Note that 273.15 is the value for IUPAC STP. Type: double; Default: 298.15. T2_COUPLED (CCENERGY)¶CCENERGY —. Type: boolean; Default: false. T3_WS_INCORE (CCENERGY)¶CCENERGY — Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. T3_WS_INCORE (CCEOM)¶CCEOM — Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. T_AMPS (CCHBAR)¶CCHBAR — Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. T_CUT_CLMO (DLPNO)¶DLPNO (Expert) — Basis set coefficient threshold for including basis function (m) in domain of LMO (i). Type: double; Default: 1e-2. T_CUT_CPAO (DLPNO)¶DLPNO (Expert) — Basis set coefficient threshold for including basis fu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:227354,Testability,test,test,227354,"g irreps when symmetry is used. Type: array; Default: No Default. TDSCF_TDA (SCF)¶SCF — Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Def",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:227442,Testability,test,test,227442,"Run with Tamm-Dancoff approximation (TDA), uses random-phase approximation (RPA) when false. Type: boolean; Default: false. TDSCF_TDM_PRINT (SCF)¶SCF — Which transition dipole moments to print out: - E_TDM_LEN : electric transition dipole moments, length representation - E_TDM_VEL : electric transition dipole moments, velocity representation - M_TDM : magnetic transition dipole moments. Type: array; Default: No Default. TDSCF_TRIPLETS (SCF)¶SCF — Controls inclusion of triplet states, which is only valid for restricted references. Valid options: - none : No triplets computed (default) - also : lowest-energy triplets and singlets included, in 50-50 ratio. Note that singlets are privileged, i.e. if seeking to converge 5 states in total, 3 will be singlets and 2 will be triplets. - only : Only triplet states computed. Type: string; Possible Values: NONE, ALSO, ONLY; Default: NONE. TEST_B (OPTKING)¶OPTKING — Do test B matrix?. Type: boolean; Default: false. TEST_DERIVATIVE_B (OPTKING)¶OPTKING — Do test derivative B matrix?. Type: boolean; Default: false. THETA_POINTS (SCF)¶SCF — Number of colatitude grid points for spherical potential integration. Type: integer; Default: 360. THICKNESS (SCF)¶SCF — Thickness (bohr) of a hard-sphere external potential. Type: double; Default: 20.0. THREE_PARTICLE (DCT)¶DCT — Whether to compute three-particle energy correction or not. Type: string; Possible Values: NONE, PERTURBATIVE; Default: NONE. TIKHONOW_MAX (PSIMRCC)¶PSIMRCC — The cycle after which Tikhonow regularization is stopped. Set to zero to allow regularization in all iterations. Type: integer; Default: 5. TIKHONOW_OMEGA (DCT)¶DCT (Expert) — The shift applied to the denominator in the density cumulant update iterations. Type: double; Default: 0.0. TIKHONOW_OMEGA (PSIMRCC)¶PSIMRCC — The shift to apply to the denominators, {it c.f.} Taube and Bartlett, JCP, 130, 144112 (2009). Type: double; Default: 0.0. TIKHONOW_TRIPLES (PSIMRCC)¶PSIMRCC (Expert) — Do use Tikhonow regularization ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:230721,Testability,test,testing,230721,"ce for iterative triples excitations?. Type: boolean; Default: false. TRIPLES_IABC_TYPE (DFOCC)¶DFOCC — The algorithm to handle (ia|bc) type integrals that used for (T) correction. Type: string; Possible Values: INCORE, AUTO, DIRECT, DISK; Default: DISK. TRIPLES_LOW_MEMORY (FNOCC)¶FNOCC — Do use low memory option for triples contribution? Note that this option is enabled automatically if the memory requirements of the conventional algorithm would exceed the available resources. The low memory algorithm is faster in general and has been turned on by default starting September 2020. Type: boolean; Default: true. TURN_ON_ACTV (MCSCF)¶MCSCF —. Type: integer; Default: 0. UHF_NOONS (SCF)¶SCF — The number of NOONs to print in a UHF calc. Type: string; Default: 3. UPDATE (DETCI)¶DETCI — The update or correction vector formula, either DAVIDSON (default) or OLSEN. Type: string; Possible Values: DAVIDSON, OLSEN; Default: DAVIDSON. USE_DF_INTS (FNOCC)¶FNOCC (Expert) — Use 3-index integrals to generate 4-index ERI’s? This keyword is used for testing purposes only. Changing its value will have no effect on the computation. Type: boolean; Default: false. USE_SPIN_SYM (PSIMRCC)¶PSIMRCC — Do use symmetry to map equivalent determinants onto each other, for efficiency?. Type: boolean; Default: true. USE_SPIN_SYMMETRY (PSIMRCC)¶PSIMRCC (Expert) — Whether to use spin symmetry to map equivalent configurations onto each other, for efficiency. Type: boolean; Default: true. VAL_EX_LEVEL (DETCI)¶DETCI — In a RAS CI, this is the additional excitation level for allowing electrons out of RAS I into RAS II. The maximum number of holes in RAS I is therefore EX_LEVEL + VAL_EX_LEVEL. Type: integer; Default: 0. VECS_CC3 (CCEOM)¶CCEOM — Vectors stored in CC3 computations. Type: integer; Default: 10. VECS_PER_ROOT (CCEOM)¶CCEOM — Vectors stored per root. Type: integer; Default: 12. WABEI_LOWDISK (CCHBAR)¶CCHBAR — Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: fal",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:19642,Usability,simpl,simply,19642,"ly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. CFOUR_ACTIVE_ORBI (CFOUR)¶CFOUR — Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS. The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. CFOUR_ANH_ALGORITHM (CFOUR)¶CFOUR — Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. CFOUR_ANH_DERIVATIVES (CFOUR)¶CFOUR — Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. CFOUR_ANH_STEPSIZE (CFOUR)¶CFOUR — Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:37622,Usability,clear,clearly,37622,"eyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. CFOUR_ESTATE_SYM (CFOUR)¶CFOUR — Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION. For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html:69608,Usability,simpl,simply,69608,"tual in symmetry block 2 and another will be removed from the second highest occupied orbital in symmetry block 4. Examples given later in this manual further illustrate the QRHF input options and may help to clarify any confusion resulting from this documentation. (Default : 1). Type: array; Default: No Default. CFOUR_QRHFGUES (CFOUR)¶CFOUR — If this keyword is set to ON (=1), then the QRHF orbitals specified by the CFOUR_QRHF_GENERAL, CFOUR_QRHF_ORBITAL and CFOUR_QRHF_SPIN (nyi?) keywords are used as a starting guess for a restarted SCF procedure. This can be an extremely useful way to converge “difficult” SCF solutions, such as those that correspond to states that are not the lowest states of a given symmetry. Note that when this option is used, the calculation that is performed is not a QRHF-CC calculation; it is instead a UHF-based or ROHF-based calculation, depending on what type of reference is specified by the CFOUR_REFERENCE keyword. The QRHF aspect of the calculation is used simply as a device to converge the orbitals. Type: boolean; Default: false. CFOUR_RAMAN_INT (CFOUR)¶CFOUR — ON (=1) requests a calculation of Raman intensities based on the geometrical derivatives of the static polarizability tensor, while DYN (=2) requests a calculation of Raman intensities based on the derivatives of the dynamical polarizability tensor. Type: string; Possible Values: ON, DYN, OFF; Default: OFF. CFOUR_RAMAN_ORB (CFOUR)¶CFOUR — Specifies whether Raman intensities are calculated with orbital relaxation with respect to the electric field perturbation (RELAXED, = 1) or without orbital relaxation (UNRELAXED, = 0). Type: string; Possible Values: RELAXED, UNRELAXED; Default: UNRELAXED. CFOUR_RDO (CFOUR)¶CFOUR — Specifies whether or not relaxed density natural orbitals are to be computed. This option only has meaning for a correlated calculation. For =0, Do not compute. For =1, compute. Type: boolean; Default: true. CFOUR_REFERENCE (CFOUR)¶CFOUR — Specifies the type of SCF ca",MatchSource.WIKI,psi4manual/1.5.0/autodoc_glossary_options_c.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_glossary_options_c.html
https://psicode.org/psi4manual/1.5.0/autodoc_options_c_bymodule-1.html:579,Deployability,update,updated,579,"﻿. Keywords by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module. Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DETCI; DFEP2; DFMP2; DFOCC; DLPNO; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_options_c_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_options_c_bymodule-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_options_c_bymodule.html:579,Deployability,update,updated,579,"﻿. Keywords by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module. Keywords by Module¶. GLOBALS; ADC; CCDENSITY; CCENERGY; CCEOM; CCHBAR; CCLAMBDA; CCRESPONSE; CCTRANSORT; CCTRIPLES; CFOUR; CPHF; DCT; DETCI; DFEP2; DFMP2; DFOCC; DLPNO; DMRG; EFP; FINDIF; FISAPT; FNOCC; GDMA; MCSCF; MINTS; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Keywords by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_options_c_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_options_c_bymodule.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:39324,Deployability,update,updated,39324,"r to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumbers [kcal cm mol^-1] kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; e0 [F m^-1] Vacuum permittivity (Fm$^{-1}$). na; 6.022140857E+23; na [mol^-1] Avogadro’s number. me; 9.10938356E-31; me [kg] Electron rest mass (in kg). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:602,Energy Efficiency,energy,energy,602,﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. _220_lattice_spacing_of_silicon; 1.920155714E-10; {220} lattice spacing of silicon [m] uncertainty=0.000 0032 e-12. alpha_particle_electron_mass_ratio; 7294.29954136; alpha particle-electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relation,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:735,Energy Efficiency,energy,energy,735,﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. _220_lattice_spacing_of_silicon; 1.920155714E-10; {220} lattice spacing of silicon [m] uncertainty=0.000 0032 e-12. alpha_particle_electron_mass_ratio; 7294.29954136; alpha particle-electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relation,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:1382,Energy Efficiency,energy,energy,1382,electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilo,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:1517,Energy Efficiency,energy,energy,1517,. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolariz,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:2050,Energy Efficiency,meter,meter,2050,259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of cha,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:2181,Energy Efficiency,joule,joule,2181,inty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:2940,Energy Efficiency,charge,charge,2940,inty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupo,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:3048,Energy Efficiency,charge,charge,3048,ter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupole mom. [C m^2] uncertainty=0.000 000 028 e-40. atomic_unit_of_energy; 4.359744650E-18; atomic unit of energy [J] un,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:4040,Energy Efficiency,energy,energy,4040,ic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupole mom. [C m^2] uncertainty=0.000 000 028 e-40. atomic_unit_of_energy; 4.359744650E-18; atomic unit of energy [J] uncertainty=0.000 000 054 e-18. atomic_unit_of_force; 8.23872336E-8; atomic unit of force [N] uncertainty=0.000 000 10 e-8. atomic_unit_of_length; 5.2917721067E-11; atomic unit of length [m] uncertainty=0.000 000 000 12 e-10. atomic_unit_of_mag_dipole_mom; 1.854801999E-23; atomic unit of mag. dipole mom. [J T^{-1}] uncertainty=0.000 000 011 e-23. atomic_unit_of_mag_flux_density; 235051.7550; atomic unit of mag. flux density [T] uncertainty=0.000 000 014 e5. atomic_unit_of_magnetizability; 7.8910365886E-29; atomic unit of magnetizability [J T^{-2}] uncertainty=0.000 000 0090 e-29. atomic_unit_of_mass; 9.10938356E-31; atomic unit of mass [kg] uncertainty=0.000 000 11 e-31. atomic_unit_of_momum; 1.992851882E-24; atomic unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 024 e-24. atomic_unit_of_permittivity; 1.112650056E-10; atomic unit of permittivity [F m^{-1}] uncertainty=(exact). atomic_unit_of_time; 2.418884326509E-17; atomic unit of time [s] uncertainty=0.000 000 000 014,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:5624,Energy Efficiency,meter,meters,5624,0 e-29. atomic_unit_of_mass; 9.10938356E-31; atomic unit of mass [kg] uncertainty=0.000 000 11 e-31. atomic_unit_of_momum; 1.992851882E-24; atomic unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 024 e-24. atomic_unit_of_permittivity; 1.112650056E-10; atomic unit of permittivity [F m^{-1}] uncertainty=(exact). atomic_unit_of_time; 2.418884326509E-17; atomic unit of time [s] uncertainty=0.000 000 000 014 e-17. atomic_unit_of_velocity; 2187691.26277; atomic unit of velocity [m s^{-1}] uncertainty=0.000 000 000 50 e6. Avogadro_constant; 6.022140857E+23; Avogadro constant [mol^{-1}] uncertainty=0.000 000 074 e23. Bohr_magneton; 9.274009994E-24; Bohr magneton [J T^{-1}] uncertainty=0.000 0057 e-26. Bohr_magneton_in_eVpT; 0.000057883818012; Bohr magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0026 e-5. Bohr_magneton_in_HzpT; 13996245042; Bohr magneton in Hz/T [Hz T^{-1}] uncertainty=0.000 000 086 e9. Bohr_magneton_in_inverse_meters_per_tesla; 46.68644814; Bohr magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 29. Bohr_magneton_in_KpT; 0.67171405; Bohr magneton in K/T [K T^{-1}] uncertainty=0.000 000 39. Bohr_radius; 5.2917721067E-11; Bohr radius [m] uncertainty=0.000 000 000 12 e-10. Boltzmann_constant; 1.38064852E-23; Boltzmann constant [J K^{-1}] uncertainty=0.000 000 79 e-23. Boltzmann_constant_in_eVpK; 0.000086173303; Boltzmann constant in eV/K [eV K^{-1}] uncertainty=0.000 0050 e-5. Boltzmann_constant_in_HzpK; 2.0836612E+10; Boltzmann constant in Hz/K [Hz K^{-1}] uncertainty=0.000 0012 e10. Boltzmann_constant_in_inverse_meters_per_kelvin; 69.503457; Boltzmann constant in inverse meters per kelvin [m^{-1} K^{-1}] uncertainty=0.000 040. characteristic_impedance_of_vacuum; 376.730313461; characteristic impedance of vacuum [ohm] uncertainty=(exact). classical_electron_radius; 2.8179403227E-15; classical electron radius [m] uncertainty=0.000 000 0019 e-15. Compton_wavelength; 2.4263102367E-12; Compton wavelength [m] uncertainty=0.000 000 0011,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:6265,Energy Efficiency,meter,meters,6265,09994E-24; Bohr magneton [J T^{-1}] uncertainty=0.000 0057 e-26. Bohr_magneton_in_eVpT; 0.000057883818012; Bohr magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0026 e-5. Bohr_magneton_in_HzpT; 13996245042; Bohr magneton in Hz/T [Hz T^{-1}] uncertainty=0.000 000 086 e9. Bohr_magneton_in_inverse_meters_per_tesla; 46.68644814; Bohr magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 29. Bohr_magneton_in_KpT; 0.67171405; Bohr magneton in K/T [K T^{-1}] uncertainty=0.000 000 39. Bohr_radius; 5.2917721067E-11; Bohr radius [m] uncertainty=0.000 000 000 12 e-10. Boltzmann_constant; 1.38064852E-23; Boltzmann constant [J K^{-1}] uncertainty=0.000 000 79 e-23. Boltzmann_constant_in_eVpK; 0.000086173303; Boltzmann constant in eV/K [eV K^{-1}] uncertainty=0.000 0050 e-5. Boltzmann_constant_in_HzpK; 2.0836612E+10; Boltzmann constant in Hz/K [Hz K^{-1}] uncertainty=0.000 0012 e10. Boltzmann_constant_in_inverse_meters_per_kelvin; 69.503457; Boltzmann constant in inverse meters per kelvin [m^{-1} K^{-1}] uncertainty=0.000 040. characteristic_impedance_of_vacuum; 376.730313461; characteristic impedance of vacuum [ohm] uncertainty=(exact). classical_electron_radius; 2.8179403227E-15; classical electron radius [m] uncertainty=0.000 000 0019 e-15. Compton_wavelength; 2.4263102367E-12; Compton wavelength [m] uncertainty=0.000 000 0011 e-12. Compton_wavelength_over_2_pi; 3.8615926764E-13; Compton wavelength over 2 pi [m] uncertainty=0.000 000 18 e-15. conductance_quantum; 0.000077480917310; conductance quantum [S] uncertainty=0.000 000 0018 e-5. conventional_value_of_Josephson_constant; 4.835979E+14; conventional value of Josephson constant [Hz V^{-1}] uncertainty=(exact). conventional_value_of_von_Klitzing_constant; 25812.807; conventional value of von Klitzing constant [ohm] uncertainty=(exact). Cu_x_unit; 1.00207697E-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertai,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:7992,Energy Efficiency,energy,energy,7992,f_von_Klitzing_constant; 25812.807; conventional value of von Klitzing constant [ohm] uncertainty=(exact). Cu_x_unit; 1.00207697E-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertainty=0.000 000 026 e-4. deuteron_electron_mass_ratio; 3670.48296785; deuteron-electron mass ratio [] uncertainty=0.000 000 13. deuteron_g_factor; 0.8574382311; deuteron g factor [] uncertainty=0.000 000 0048. deuteron_mag_mom; 4.330735040E-27; deuteron mag. mom. [J T^{-1}] uncertainty=0.000 000 0036 e-26. deuteron_mag_mom_to_Bohr_magneton_ratio; 0.0004669754554; deuteron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0026 e-3. deuteron_mag_mom_to_nuclear_magneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. el,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:8113,Energy Efficiency,energy,energy,8113,-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertainty=0.000 000 026 e-4. deuteron_electron_mass_ratio; 3670.48296785; deuteron-electron mass ratio [] uncertainty=0.000 000 13. deuteron_g_factor; 0.8574382311; deuteron g factor [] uncertainty=0.000 000 0048. deuteron_mag_mom; 4.330735040E-27; deuteron mag. mom. [J T^{-1}] uncertainty=0.000 000 0036 e-26. deuteron_mag_mom_to_Bohr_magneton_ratio; 0.0004669754554; deuteron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0026 e-3. deuteron_mag_mom_to_nuclear_magneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_r,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:8737,Energy Efficiency,charge,charge,8737,gneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_ratio; 0.0002724437107484; electron-deuteron mass ratio [] uncertainty=0.000 000 000 096 e-4. electron_g_factor; -2.00231930436182; electron g factor [] uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:8927,Energy Efficiency,charge,charge,8927,s_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_ratio; 0.0002724437107484; electron-deuteron mass ratio [] uncertainty=0.000 000 000 096 e-4. electron_g_factor; -2.00231930436182; electron g factor [] uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Boh,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:10272,Energy Efficiency,energy,energy,10272, uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 000 000 26. electron_mag_mom_to_nuclear_magneton_ratio; -1838.28197234; electron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 17. electron_mass; 9.10938356E-31; electron mass [kg] uncertainty=0.000 000 11 e-31. electron_mass_energy_equivalent; 8.18710565E-14; electron mass energy equivalent [J] uncertainty=0.000 000 10 e-14. electron_mass_energy_equivalent_in_MeV; 0.5109989461; electron mass energy equivalent in MeV [MeV] uncertainty=0.000 000 0031. electron_mass_in_u; 0.000548579909070; electron mass in u [u] uncertainty=0.000 000 000 16 e-4. electron_molar_mass; 5.48579909070E-7; electron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 16 e-7. electron_muon_mag_mom_ratio; 206.7669880; electron-muon mag. mom. ratio [] uncertainty=0.000 0046. electron_muon_mass_ratio; 0.00483633170; electron-muon mass ratio [] uncertainty=0.000 000 11 e-3. electron_neutron_mag_mom_ratio; 960.92050; electron-neutron mag. mom. ratio [] uncertainty=0.000 23. electron_neutron_mass_ratio; 0.00054386734428; electron-neutron mass ratio [] uncertainty=0.000 000 0027 e-4. electron_proton_mag_mom_ratio; -658.2106866; electron-proton mag. mom. ratio [] uncertainty=0.000 0020. electron_proton_mass_ratio; 0.000544617021352; electron-proton mass ratio [] uncertainty=0.000 000 000 52 e-,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:10393,Energy Efficiency,energy,energy,10393,y=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 000 000 26. electron_mag_mom_to_nuclear_magneton_ratio; -1838.28197234; electron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 17. electron_mass; 9.10938356E-31; electron mass [kg] uncertainty=0.000 000 11 e-31. electron_mass_energy_equivalent; 8.18710565E-14; electron mass energy equivalent [J] uncertainty=0.000 000 10 e-14. electron_mass_energy_equivalent_in_MeV; 0.5109989461; electron mass energy equivalent in MeV [MeV] uncertainty=0.000 000 0031. electron_mass_in_u; 0.000548579909070; electron mass in u [u] uncertainty=0.000 000 000 16 e-4. electron_molar_mass; 5.48579909070E-7; electron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 16 e-7. electron_muon_mag_mom_ratio; 206.7669880; electron-muon mag. mom. ratio [] uncertainty=0.000 0046. electron_muon_mass_ratio; 0.00483633170; electron-muon mass ratio [] uncertainty=0.000 000 11 e-3. electron_neutron_mag_mom_ratio; 960.92050; electron-neutron mag. mom. ratio [] uncertainty=0.000 23. electron_neutron_mass_ratio; 0.00054386734428; electron-neutron mass ratio [] uncertainty=0.000 000 0027 e-4. electron_proton_mag_mom_ratio; -658.2106866; electron-proton mag. mom. ratio [] uncertainty=0.000 0020. electron_proton_mass_ratio; 0.000544617021352; electron-proton mass ratio [] uncertainty=0.000 000 000 52 e-4. electron_tau_mass_ratio; 0.000287592; electron-tau mass ratio [] uncertainty=0.000 26 e-4. electron_to_alpha_particle_mass_r,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:12417,Energy Efficiency,meter,meter,12417,798; electron to alpha particle mass ratio [] uncertainty=0.000 000 000 045 e-4. electron_to_shielded_helion_mag_mom_ratio; 864.058257; electron to shielded helion mag. mom. ratio [] uncertainty=0.000 010. electron_to_shielded_proton_mag_mom_ratio; -658.2275971; electron to shielded proton mag. mom. ratio [] uncertainty=0.000 0072. electron_triton_mass_ratio; 0.0001819200062203; electron-triton mass ratio [] uncertainty=0.000 000 000 084 e-4. electron_volt; 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fi,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:12541,Energy Efficiency,joule,joule,12541,io; 864.058257; electron to shielded helion mag. mom. ratio [] uncertainty=0.000 010. electron_to_shielded_proton_mag_mom_ratio; -658.2275971; electron to shielded proton mag. mom. ratio [] uncertainty=0.000 0072. electron_triton_mass_ratio; 0.0001819200062203; electron-triton mass ratio [] uncertainty=0.000 000 000 084 e-4. electron_volt; 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation const,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:12886,Energy Efficiency,charge,charge,12886, 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartre,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:12984,Energy Efficiency,charge,charge,12984,tionship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 1,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:14035,Energy Efficiency,energy,energy,14035,14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ra,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:14121,Energy Efficiency,energy,energy,14121,ay_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:14348,Energy Efficiency,meter,meter,14348,tainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:14463,Energy Efficiency,joule,joule,14463, 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_ener,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:15400,Energy Efficiency,energy,energy,15400,3 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:15517,Energy Efficiency,energy,energy,15517,vin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.00,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:16289,Energy Efficiency,meter,meter,16289,ass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:16387,Energy Efficiency,joule,joule,16387,mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:16836,Energy Efficiency,meter,meter-atomic,16836,00 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. jo,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:16981,Energy Efficiency,meter,meter-electron,16981,ctron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relati,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:17114,Energy Efficiency,meter,meter-hartree,17114,ionship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.2937123,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:17235,Energy Efficiency,meter,meter-hertz,17235,verse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.50919020,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:17345,Energy Efficiency,meter,meter-joule,17345,ionship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; jou,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:17463,Energy Efficiency,meter,meter-kelvin,17463,447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-ke,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:17585,Energy Efficiency,meter,meter-kilogram,17585,logram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationshi,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:17898,Energy Efficiency,joule,joule-atomic,17898,0 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.000,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18019,Energy Efficiency,joule,joule-electron,18019,000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relations,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18133,Energy Efficiency,joule,joule-hartree,18133,certainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relatio,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18240,Energy Efficiency,joule,joule-hertz,18240,nship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18352,Energy Efficiency,joule,joule-inverse,18352,] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] un,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18366,Energy Efficiency,meter,meter,18366,] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] un,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18467,Energy Efficiency,joule,joule-kelvin,18467,onship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass uni,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:18571,Energy Efficiency,joule,joule-kilogram,18571,-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kil,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:19136,Energy Efficiency,meter,meter,19136,e relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:19237,Energy Efficiency,joule,joule,19237,-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silic,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:19955,Energy Efficiency,meter,meter,19955,"000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silicon; 5.431020504E-10; lattice parameter of silicon [m] uncertainty=0.000 0089 e-12. Loschmidt_constant_27315_K_100_kPa; 2.6516467E+25; Loschmidt constant (273.15 K, 100 kPa) [m^{-3}] uncertainty=0.000 0015 e25. Loschmidt_constant_27315_K_101325_kPa; 2.6867811E+25; Loschmidt constant (273.15 K, 101.325 kPa) [m^{-3}] uncertainty=0.000 0015 e25. mag_constant; 0.0000012566370614; mag. constant [N A^{-2}] uncertainty=(exact). mag_flux_quantum; 2.067833831E-15; mag. flux quantum [Wb] uncertainty=0.000 000 013 e-15. molar_gas_constant; 8.3144598; molar gas constant [J mol^{-1} K^{-1}] uncertainty=0.000 0048. molar_mass_constant; 0.001; molar mass constant [kg mol^{-1}] uncertainty=(exact). molar_mass_of_carbon_12;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:20069,Energy Efficiency,joule,joule,20069,"vin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silicon; 5.431020504E-10; lattice parameter of silicon [m] uncertainty=0.000 0089 e-12. Loschmidt_constant_27315_K_100_kPa; 2.6516467E+25; Loschmidt constant (273.15 K, 100 kPa) [m^{-3}] uncertainty=0.000 0015 e25. Loschmidt_constant_27315_K_101325_kPa; 2.6867811E+25; Loschmidt constant (273.15 K, 101.325 kPa) [m^{-3}] uncertainty=0.000 0015 e25. mag_constant; 0.0000012566370614; mag. constant [N A^{-2}] uncertainty=(exact). mag_flux_quantum; 2.067833831E-15; mag. flux quantum [Wb] uncertainty=0.000 000 013 e-15. molar_gas_constant; 8.3144598; molar gas constant [J mol^{-1} K^{-1}] uncertainty=0.000 0048. molar_mass_constant; 0.001; molar mass constant [kg mol^{-1}] uncertainty=(exact). molar_mass_of_carbon_12; 0.012; molar mass of carbon-12 [kg mol^{-1}] uncertainty=(exact). molar_Planck_constant; 3.9903127110E-10; molar Planc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:22688,Energy Efficiency,energy,energy,22688,; Mo x unit [m] uncertainty=0.000 000 53 e-13. muon_Compton_wavelength; 1.173444111E-14; muon Compton wavelength [m] uncertainty=0.000 000 26 e-15. muon_Compton_wavelength_over_2_pi; 1.867594308E-15; muon Compton wavelength over 2 pi [m] uncertainty=0.000 000 042 e-15. muon_electron_mass_ratio; 206.7682826; muon-electron mass ratio [] uncertainty=0.000 0046. muon_g_factor; -2.0023318418; muon g factor [] uncertainty=0.000 000 0013. muon_mag_mom; -4.49044826E-26; muon mag. mom. [J T^{-1}] uncertainty=0.000 000 10 e-26. muon_mag_mom_anomaly; 0.00116592089; muon mag. mom. anomaly [] uncertainty=0.000 000 63 e-3. muon_mag_mom_to_Bohr_magneton_ratio; -0.00484197048; muon mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 11 e-3. muon_mag_mom_to_nuclear_magneton_ratio; -8.89059705; muon mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 20. muon_mass; 1.883531594E-28; muon mass [kg] uncertainty=0.000 000 048 e-28. muon_mass_energy_equivalent; 1.692833774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:22801,Energy Efficiency,energy,energy,22801,rtainty=0.000 000 26 e-15. muon_Compton_wavelength_over_2_pi; 1.867594308E-15; muon Compton wavelength over 2 pi [m] uncertainty=0.000 000 042 e-15. muon_electron_mass_ratio; 206.7682826; muon-electron mass ratio [] uncertainty=0.000 0046. muon_g_factor; -2.0023318418; muon g factor [] uncertainty=0.000 000 0013. muon_mag_mom; -4.49044826E-26; muon mag. mom. [J T^{-1}] uncertainty=0.000 000 10 e-26. muon_mag_mom_anomaly; 0.00116592089; muon mag. mom. anomaly [] uncertainty=0.000 000 63 e-3. muon_mag_mom_to_Bohr_magneton_ratio; -0.00484197048; muon mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 11 e-3. muon_mag_mom_to_nuclear_magneton_ratio; -8.89059705; muon mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 20. muon_mass; 1.883531594E-28; muon mass [kg] uncertainty=0.000 000 048 e-28. muon_mass_energy_equivalent; 1.692833774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 0,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:23672,Energy Efficiency,energy,energy,23672,774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 000 0031. natural_unit_of_length; 3.8615926764E-13; natural unit of length [m] uncertainty=0.000 000 18 e-15. natural_unit_of_mass; 9.10938356E-31; natural unit of mass [kg] uncertainty=0.000 000 11 e-31. natural_unit_of_momum; 2.730924488E-22; natural unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 034 e-22. natural_unit_of_momum_in_MeVpc; 0.5109989461; natural unit of mom.um in MeV/c [MeV/c] uncertainty=0.000 000 0031. natural_unit_of_time; 1.28808866712E-21; natural unit of time [s] uncertainty=0.000 000 000 58 e-21. natural_unit_of_velocity; 299792458; natural unit of velocity [m s^{-1}] uncertainty=(exact). neutron_Compton_wavelength; 1.31959090481E-15; neutron Compton wavelength [m] uncertainty=0.000 000 000 88 e-15. neutron_Compton_wavelength_over_2_pi; 2.1001941536E-16; neutron Compton wavelength over 2 pi [m] uncertainty=0.000 000 00,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:23775,Energy Efficiency,energy,energy,23775,105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 000 0031. natural_unit_of_length; 3.8615926764E-13; natural unit of length [m] uncertainty=0.000 000 18 e-15. natural_unit_of_mass; 9.10938356E-31; natural unit of mass [kg] uncertainty=0.000 000 11 e-31. natural_unit_of_momum; 2.730924488E-22; natural unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 034 e-22. natural_unit_of_momum_in_MeVpc; 0.5109989461; natural unit of mom.um in MeV/c [MeV/c] uncertainty=0.000 000 0031. natural_unit_of_time; 1.28808866712E-21; natural unit of time [s] uncertainty=0.000 000 000 58 e-21. natural_unit_of_velocity; 299792458; natural unit of velocity [m s^{-1}] uncertainty=(exact). neutron_Compton_wavelength; 1.31959090481E-15; neutron Compton wavelength [m] uncertainty=0.000 000 000 88 e-15. neutron_Compton_wavelength_over_2_pi; 2.1001941536E-16; neutron Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 14 e-15. neutron_electron_mag_mom_ratio; 0.00104066882; neutron-electron mag. mom. ratio [] uncertainty=0.,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:25684,Energy Efficiency,energy,energy,25684,_electron_mag_mom_ratio; 0.00104066882; neutron-electron mag. mom. ratio [] uncertainty=0.000 000 25 e-3. neutron_electron_mass_ratio; 1838.68366158; neutron-electron mass ratio [] uncertainty=0.000 000 90. neutron_g_factor; -3.82608545; neutron g factor [] uncertainty=0.000 000 90. neutron_gyromag_ratio; 183247172; neutron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 43 e8. neutron_gyromag_ratio_over_2_pi; 29.1646933; neutron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 0069. neutron_mag_mom; -9.6623650E-27; neutron mag. mom. [J T^{-1}] uncertainty=0.000 000 23 e-26. neutron_mag_mom_to_Bohr_magneton_ratio; -0.00104187563; neutron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 25 e-3. neutron_mag_mom_to_nuclear_magneton_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:25803,Energy Efficiency,energy,energy,25803,s_ratio; 1838.68366158; neutron-electron mass ratio [] uncertainty=0.000 000 90. neutron_g_factor; -3.82608545; neutron g factor [] uncertainty=0.000 000 90. neutron_gyromag_ratio; 183247172; neutron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 43 e8. neutron_gyromag_ratio_over_2_pi; 29.1646933; neutron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 0069. neutron_mag_mom; -9.6623650E-27; neutron mag. mom. [J T^{-1}] uncertainty=0.000 000 23 e-26. neutron_mag_mom_to_Bohr_magneton_ratio; -0.00104187563; neutron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 25 e-3. neutron_mag_mom_to_nuclear_magneton_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.0013784,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:26452,Energy Efficiency,energy,energy,26452,_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:26604,Energy Efficiency,energy,energy,26604,000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.000 000 031 e-27. nuclear_magneton_in_eVpT; 3.1524512550E-8; nuclear magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0015 e-8. nuclear_magneton_in_inverse_,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:27666,Energy Efficiency,meter,meters,27666,ton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.000 000 031 e-27. nuclear_magneton_in_eVpT; 3.1524512550E-8; nuclear magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0015 e-8. nuclear_magneton_in_inverse_meters_per_tesla; 0.02542623432; nuclear magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 016 e-2. nuclear_magneton_in_KpT; 0.00036582690; nuclear magneton in K/T [K T^{-1}] uncertainty=0.000 0021 e-4. nuclear_magneton_in_MHzpT; 7.622593285; nuclear magneton in MHz/T [MHz T^{-1}] uncertainty=0.000 000 047. Planck_constant; 6.626070040E-34; Planck constant [J s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equiv,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:28709,Energy Efficiency,energy,energy,28709,0 016 e-2. nuclear_magneton_in_KpT; 0.00036582690; nuclear magneton in K/T [K T^{-1}] uncertainty=0.000 0021 e-4. nuclear_magneton_in_MHzpT; 7.622593285; nuclear magneton in MHz/T [MHz T^{-1}] uncertainty=0.000 000 047. Planck_constant; 6.626070040E-34; Planck constant [J s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equivalent_in_GeV; 1.220910E+19; Planck mass energy equivalent in GeV [GeV] uncertainty=0.000 029 e19. Planck_temperature; 1.416808E+32; Planck temperature [K] uncertainty=0.000 033 e32. Planck_time; 5.39116E-44; Planck time [s] uncertainty=0.000 13 e-44. proton_charge_to_mass_quotient; 95788332.26; proton charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 059 e7. proton_Compton_wavelength; 1.32140985396E-15; proton Compton wavelength [m] uncertainty=0.000 000 000 61 e-15. proton_Compton_wavelength_over_2_pi; 2.10308910109E-16; proton Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 097 e-15. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag.,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:28972,Energy Efficiency,charge,charge,28972, s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equivalent_in_GeV; 1.220910E+19; Planck mass energy equivalent in GeV [GeV] uncertainty=0.000 029 e19. Planck_temperature; 1.416808E+32; Planck temperature [K] uncertainty=0.000 033 e32. Planck_time; 5.39116E-44; Planck time [s] uncertainty=0.000 13 e-44. proton_charge_to_mass_quotient; 95788332.26; proton charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 059 e7. proton_Compton_wavelength; 1.32140985396E-15; proton Compton wavelength [m] uncertainty=0.000 000 000 61 e-15. proton_Compton_wavelength_over_2_pi; 2.10308910109E-16; proton Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 097 e-15. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneto,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:30275,Energy Efficiency,energy,energy,30275,. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circula,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:30392,Energy Efficiency,energy,energy,30392,4702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circulation times 2 [m^2 s^{-1}] uncertainty=0.000 000 0033 e-4. Rydberg_constant; 10973731.568508; Rydberg constant [m^{-1}] uncer,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:30978,Energy Efficiency,charge,charge,30978," magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circulation times 2 [m^2 s^{-1}] uncertainty=0.000 000 0033 e-4. Rydberg_constant; 10973731.568508; Rydberg constant [m^{-1}] uncertainty=0.000 065. Rydberg_constant_times_c_in_Hz; 3.289841960355E+15; Rydberg constant times c in Hz [Hz] uncertainty=0.000 000 000 019 e15. Rydberg_constant_times_hc_in_eV; 13.605693009; Rydberg constant times hc in eV [eV] uncertainty=0.000 000 084. Rydberg_constant_times_hc_in_J; 2.179872325E-18; Rydberg constant times hc in J [J] uncertainty=0.000 000 027 e-18. Sackur_Tetrode_constant_1_K_100_kPa; -1.1517084; Sackur-Tetrode constant (1 K, 100 kPa) [] uncertainty=0.000 0014. Sackur_Tetrode_constant_1_K_101325_kPa; -1.1648714; Sackur-Tetrode constant (1 K, 101.325 kPa) []",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:34577,Energy Efficiency,energy,energy,34577,m_to_nuclear_magneton_ratio; 2.792775600; shielded proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 030. speed_of_light_in_vacuum; 299792458; speed of light in vacuum [m s^{-1}] uncertainty=(exact). standard_acceleration_of_gravity; 9.80665; standard acceleration of gravity [m s^{-2}] uncertainty=(exact). standard_atmosphere; 101325; standard atmosphere [Pa] uncertainty=(exact). standard_state_pressure; 100000; standard-state pressure [Pa] uncertainty=(exact). Stefan_Boltzmann_constant; 5.670367E-8; Stefan-Boltzmann constant [W m^{-2} K^{-4}] uncertainty=0.000 013 e-8. tau_Compton_wavelength; 6.97787E-16; tau Compton wavelength [m] uncertainty=0.000 063 e-15. tau_Compton_wavelength_over_2_pi; 1.11056E-16; tau Compton wavelength over 2 pi [m] uncertainty=0.000 010 e-15. tau_electron_mass_ratio; 3477.15; tau-electron mass ratio [] uncertainty=0.31. tau_mass; 3.16747E-27; tau mass [kg] uncertainty=0.000 29 e-27. tau_mass_energy_equivalent; 2.84678E-10; tau mass energy equivalent [J] uncertainty=0.000 26 e-10. tau_mass_energy_equivalent_in_MeV; 1776.82; tau mass energy equivalent in MeV [MeV] uncertainty=0.16. tau_mass_in_u; 1.90749; tau mass in u [u] uncertainty=0.000 17. tau_molar_mass; 0.00190749; tau molar mass [kg mol^{-1}] uncertainty=0.000 17 e-3. tau_muon_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncert,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:34679,Energy Efficiency,energy,energy,34679,.000 000 030. speed_of_light_in_vacuum; 299792458; speed of light in vacuum [m s^{-1}] uncertainty=(exact). standard_acceleration_of_gravity; 9.80665; standard acceleration of gravity [m s^{-2}] uncertainty=(exact). standard_atmosphere; 101325; standard atmosphere [Pa] uncertainty=(exact). standard_state_pressure; 100000; standard-state pressure [Pa] uncertainty=(exact). Stefan_Boltzmann_constant; 5.670367E-8; Stefan-Boltzmann constant [W m^{-2} K^{-4}] uncertainty=0.000 013 e-8. tau_Compton_wavelength; 6.97787E-16; tau Compton wavelength [m] uncertainty=0.000 063 e-15. tau_Compton_wavelength_over_2_pi; 1.11056E-16; tau Compton wavelength over 2 pi [m] uncertainty=0.000 010 e-15. tau_electron_mass_ratio; 3477.15; tau-electron mass ratio [] uncertainty=0.31. tau_mass; 3.16747E-27; tau mass [kg] uncertainty=0.000 29 e-27. tau_mass_energy_equivalent; 2.84678E-10; tau mass energy equivalent [J] uncertainty=0.000 26 e-10. tau_mass_energy_equivalent_in_MeV; 1776.82; tau mass energy equivalent in MeV [MeV] uncertainty=0.16. tau_mass_in_u; 1.90749; tau mass in u [u] uncertainty=0.000 17. tau_molar_mass; 0.00190749; tau molar mass [kg mol^{-1}] uncertainty=0.000 17 e-3. tau_muon_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear m,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:35878,Energy Efficiency,energy,energy,35878,n_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 014. triton_mass; 5.007356665E-27; triton mass [kg] uncertainty=0.000 000 062 e-27. triton_mass_energy_equivalent; 4.500387735E-10; triton mass energy equivalent [J] uncertainty=0.000 000 055 e-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:35995,Energy Efficiency,energy,energy,35995,uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 014. triton_mass; 5.007356665E-27; triton mass [kg] uncertainty=0.000 000 062 e-27. triton_mass_energy_equivalent; 4.500387735E-10; triton mass energy equivalent [J] uncertainty=0.000 000 055 e-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). ,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:36912,Energy Efficiency,joule,joule,36912,-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion fa,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:37331,Energy Efficiency,meter,meters,37331, 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in at,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:37753,Energy Efficiency,joule,joule,37753,length_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversi,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:37908,Energy Efficiency,joule,joule,37908,orie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumber,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html:13323,Modifiability,coupling,coupling,13323, e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; har,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:39324,Deployability,update,updated,39324,"r to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumbers [kcal cm mol^-1] kcal mol$^{-1}$ to cm$^{-1}$ conversion factor. e0; 8.854187817E-12; e0 [F m^-1] Vacuum permittivity (Fm$^{-1}$). na; 6.022140857E+23; na [mol^-1] Avogadro’s number. me; 9.10938356E-31; me [kg] Electron rest mass (in kg). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:602,Energy Efficiency,energy,energy,602,﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. _220_lattice_spacing_of_silicon; 1.920155714E-10; {220} lattice spacing of silicon [m] uncertainty=0.000 0032 e-12. alpha_particle_electron_mass_ratio; 7294.29954136; alpha particle-electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relation,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:735,Energy Efficiency,energy,energy,735,﻿. Physical Constants. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Physical Constants. Physical Constants¶. Physical constants in PSI4¶. Label; Value; Description. _220_lattice_spacing_of_silicon; 1.920155714E-10; {220} lattice spacing of silicon [m] uncertainty=0.000 0032 e-12. alpha_particle_electron_mass_ratio; 7294.29954136; alpha particle-electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relation,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:1382,Energy Efficiency,energy,energy,1382,electron mass ratio [] uncertainty=0.000 000 24. alpha_particle_mass; 6.644657230E-27; alpha particle mass [kg] uncertainty=0.000 000 082 e-27. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilo,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:1517,Energy Efficiency,energy,energy,1517,. alpha_particle_mass_energy_equivalent; 5.971920097E-10; alpha particle mass energy equivalent [J] uncertainty=0.000 000 073 e-10. alpha_particle_mass_energy_equivalent_in_MeV; 3727.379378; alpha particle mass energy equivalent in MeV [MeV] uncertainty=0.000 023. alpha_particle_mass_in_u; 4.001506179127; alpha particle mass in u [u] uncertainty=0.000 000 000 063. alpha_particle_molar_mass; 0.004001506179127; alpha particle molar mass [kg mol^{-1}] uncertainty=0.000 000 000 063 e-3. alpha_particle_proton_mass_ratio; 3.97259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolariz,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:2050,Energy Efficiency,meter,meter,2050,259968907; alpha particle-proton mass ratio [] uncertainty=0.000 000 000 36. Angstrom_star; 1.00001495E-10; Angstrom star [m] uncertainty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of cha,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:2181,Energy Efficiency,joule,joule,2181,inty=0.000 000 90 e-10. atomic_mass_constant; 1.660539040E-27; atomic mass constant [kg] uncertainty=0.000 000 020 e-27. atomic_mass_constant_energy_equivalent; 1.492418062E-10; atomic mass constant energy equivalent [J] uncertainty=0.000 000 018 e-10. atomic_mass_constant_energy_equivalent_in_MeV; 931.4940954; atomic mass constant energy equivalent in MeV [MeV] uncertainty=0.000 0057. atomic_mass_unit_electron_volt_relationship; 931494095.4; atomic mass unit-electron volt relationship [eV] uncertainty=0.000 0057 e6. atomic_mass_unit_hartree_relationship; 34231776.902; atomic mass unit-hartree relationship [E_h] uncertainty=0.000 000 0016 e7. atomic_mass_unit_hertz_relationship; 2.2523427206E+23; atomic mass unit-hertz relationship [Hz] uncertainty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:2940,Energy Efficiency,charge,charge,2940,inty=0.000 000 0010 e23. atomic_mass_unit_inverse_meter_relationship; 7.5130066166E+14; atomic mass unit-inverse meter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupo,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:3048,Energy Efficiency,charge,charge,3048,ter relationship [m^{-1}] uncertainty=0.000 000 0034 e14. atomic_mass_unit_joule_relationship; 1.492418062E-10; atomic mass unit-joule relationship [J] uncertainty=0.000 000 018 e-10. atomic_mass_unit_kelvin_relationship; 1.08095438E+13; atomic mass unit-kelvin relationship [K] uncertainty=0.000 000 62 e13. atomic_mass_unit_kilogram_relationship; 1.660539040E-27; atomic mass unit-kilogram relationship [kg] uncertainty=0.000 000 020 e-27. atomic_unit_of_1st_hyperpolarizability; 3.206361329E-53; atomic unit of 1st hyperpolarizability [C^3 m^3 J^{-2}] uncertainty=0.000 000 020 e-53. atomic_unit_of_2nd_hyperpolarizability; 6.235380085E-65; atomic unit of 2nd hyperpolarizability [C^4 m^4 J^{-3}] uncertainty=0.000 000 077 e-65. atomic_unit_of_action; 1.054571800E-34; atomic unit of action [J s] uncertainty=0.000 000 013 e-34. atomic_unit_of_charge; 1.6021766208E-19; atomic unit of charge [C] uncertainty=0.000 000 0098 e-19. atomic_unit_of_charge_density; 1.0812023770E+12; atomic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupole mom. [C m^2] uncertainty=0.000 000 028 e-40. atomic_unit_of_energy; 4.359744650E-18; atomic unit of energy [J] un,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:4040,Energy Efficiency,energy,energy,4040,ic unit of charge density [C m^{-3}] uncertainty=0.000 000 0067 e12. atomic_unit_of_current; 0.006623618183; atomic unit of current [A] uncertainty=0.000 000 041 e-3. atomic_unit_of_electric_dipole_mom; 8.478353552E-30; atomic unit of electric dipole mom. [C m] uncertainty=0.000 000 052 e-30. atomic_unit_of_electric_field; 5.142206707E+11; atomic unit of electric field [V m^{-1}] uncertainty=0.000 000 032 e11. atomic_unit_of_electric_field_gradient; 9.717362356E+21; atomic unit of electric field gradient [V m^{-2}] uncertainty=0.000 000 060 e21. atomic_unit_of_electric_polarizability; 1.6487772731E-41; atomic unit of electric polarizability [C^2 m^2 J^{-1}] uncertainty=0.000 000 0011 e-41. atomic_unit_of_electric_potential; 27.21138602; atomic unit of electric potential [V] uncertainty=0.000 000 17. atomic_unit_of_electric_quadrupole_mom; 4.486551484E-40; atomic unit of electric quadrupole mom. [C m^2] uncertainty=0.000 000 028 e-40. atomic_unit_of_energy; 4.359744650E-18; atomic unit of energy [J] uncertainty=0.000 000 054 e-18. atomic_unit_of_force; 8.23872336E-8; atomic unit of force [N] uncertainty=0.000 000 10 e-8. atomic_unit_of_length; 5.2917721067E-11; atomic unit of length [m] uncertainty=0.000 000 000 12 e-10. atomic_unit_of_mag_dipole_mom; 1.854801999E-23; atomic unit of mag. dipole mom. [J T^{-1}] uncertainty=0.000 000 011 e-23. atomic_unit_of_mag_flux_density; 235051.7550; atomic unit of mag. flux density [T] uncertainty=0.000 000 014 e5. atomic_unit_of_magnetizability; 7.8910365886E-29; atomic unit of magnetizability [J T^{-2}] uncertainty=0.000 000 0090 e-29. atomic_unit_of_mass; 9.10938356E-31; atomic unit of mass [kg] uncertainty=0.000 000 11 e-31. atomic_unit_of_momum; 1.992851882E-24; atomic unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 024 e-24. atomic_unit_of_permittivity; 1.112650056E-10; atomic unit of permittivity [F m^{-1}] uncertainty=(exact). atomic_unit_of_time; 2.418884326509E-17; atomic unit of time [s] uncertainty=0.000 000 000 014,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:5624,Energy Efficiency,meter,meters,5624,0 e-29. atomic_unit_of_mass; 9.10938356E-31; atomic unit of mass [kg] uncertainty=0.000 000 11 e-31. atomic_unit_of_momum; 1.992851882E-24; atomic unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 024 e-24. atomic_unit_of_permittivity; 1.112650056E-10; atomic unit of permittivity [F m^{-1}] uncertainty=(exact). atomic_unit_of_time; 2.418884326509E-17; atomic unit of time [s] uncertainty=0.000 000 000 014 e-17. atomic_unit_of_velocity; 2187691.26277; atomic unit of velocity [m s^{-1}] uncertainty=0.000 000 000 50 e6. Avogadro_constant; 6.022140857E+23; Avogadro constant [mol^{-1}] uncertainty=0.000 000 074 e23. Bohr_magneton; 9.274009994E-24; Bohr magneton [J T^{-1}] uncertainty=0.000 0057 e-26. Bohr_magneton_in_eVpT; 0.000057883818012; Bohr magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0026 e-5. Bohr_magneton_in_HzpT; 13996245042; Bohr magneton in Hz/T [Hz T^{-1}] uncertainty=0.000 000 086 e9. Bohr_magneton_in_inverse_meters_per_tesla; 46.68644814; Bohr magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 29. Bohr_magneton_in_KpT; 0.67171405; Bohr magneton in K/T [K T^{-1}] uncertainty=0.000 000 39. Bohr_radius; 5.2917721067E-11; Bohr radius [m] uncertainty=0.000 000 000 12 e-10. Boltzmann_constant; 1.38064852E-23; Boltzmann constant [J K^{-1}] uncertainty=0.000 000 79 e-23. Boltzmann_constant_in_eVpK; 0.000086173303; Boltzmann constant in eV/K [eV K^{-1}] uncertainty=0.000 0050 e-5. Boltzmann_constant_in_HzpK; 2.0836612E+10; Boltzmann constant in Hz/K [Hz K^{-1}] uncertainty=0.000 0012 e10. Boltzmann_constant_in_inverse_meters_per_kelvin; 69.503457; Boltzmann constant in inverse meters per kelvin [m^{-1} K^{-1}] uncertainty=0.000 040. characteristic_impedance_of_vacuum; 376.730313461; characteristic impedance of vacuum [ohm] uncertainty=(exact). classical_electron_radius; 2.8179403227E-15; classical electron radius [m] uncertainty=0.000 000 0019 e-15. Compton_wavelength; 2.4263102367E-12; Compton wavelength [m] uncertainty=0.000 000 0011,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:6265,Energy Efficiency,meter,meters,6265,09994E-24; Bohr magneton [J T^{-1}] uncertainty=0.000 0057 e-26. Bohr_magneton_in_eVpT; 0.000057883818012; Bohr magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0026 e-5. Bohr_magneton_in_HzpT; 13996245042; Bohr magneton in Hz/T [Hz T^{-1}] uncertainty=0.000 000 086 e9. Bohr_magneton_in_inverse_meters_per_tesla; 46.68644814; Bohr magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 29. Bohr_magneton_in_KpT; 0.67171405; Bohr magneton in K/T [K T^{-1}] uncertainty=0.000 000 39. Bohr_radius; 5.2917721067E-11; Bohr radius [m] uncertainty=0.000 000 000 12 e-10. Boltzmann_constant; 1.38064852E-23; Boltzmann constant [J K^{-1}] uncertainty=0.000 000 79 e-23. Boltzmann_constant_in_eVpK; 0.000086173303; Boltzmann constant in eV/K [eV K^{-1}] uncertainty=0.000 0050 e-5. Boltzmann_constant_in_HzpK; 2.0836612E+10; Boltzmann constant in Hz/K [Hz K^{-1}] uncertainty=0.000 0012 e10. Boltzmann_constant_in_inverse_meters_per_kelvin; 69.503457; Boltzmann constant in inverse meters per kelvin [m^{-1} K^{-1}] uncertainty=0.000 040. characteristic_impedance_of_vacuum; 376.730313461; characteristic impedance of vacuum [ohm] uncertainty=(exact). classical_electron_radius; 2.8179403227E-15; classical electron radius [m] uncertainty=0.000 000 0019 e-15. Compton_wavelength; 2.4263102367E-12; Compton wavelength [m] uncertainty=0.000 000 0011 e-12. Compton_wavelength_over_2_pi; 3.8615926764E-13; Compton wavelength over 2 pi [m] uncertainty=0.000 000 18 e-15. conductance_quantum; 0.000077480917310; conductance quantum [S] uncertainty=0.000 000 0018 e-5. conventional_value_of_Josephson_constant; 4.835979E+14; conventional value of Josephson constant [Hz V^{-1}] uncertainty=(exact). conventional_value_of_von_Klitzing_constant; 25812.807; conventional value of von Klitzing constant [ohm] uncertainty=(exact). Cu_x_unit; 1.00207697E-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertai,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:7992,Energy Efficiency,energy,energy,7992,f_von_Klitzing_constant; 25812.807; conventional value of von Klitzing constant [ohm] uncertainty=(exact). Cu_x_unit; 1.00207697E-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertainty=0.000 000 026 e-4. deuteron_electron_mass_ratio; 3670.48296785; deuteron-electron mass ratio [] uncertainty=0.000 000 13. deuteron_g_factor; 0.8574382311; deuteron g factor [] uncertainty=0.000 000 0048. deuteron_mag_mom; 4.330735040E-27; deuteron mag. mom. [J T^{-1}] uncertainty=0.000 000 0036 e-26. deuteron_mag_mom_to_Bohr_magneton_ratio; 0.0004669754554; deuteron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0026 e-3. deuteron_mag_mom_to_nuclear_magneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. el,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:8113,Energy Efficiency,energy,energy,8113,-13; Cu x unit [m] uncertainty=0.000 000 28 e-13. deuteron_electron_mag_mom_ratio; -0.0004664345535; deuteron-electron mag. mom. ratio [] uncertainty=0.000 000 026 e-4. deuteron_electron_mass_ratio; 3670.48296785; deuteron-electron mass ratio [] uncertainty=0.000 000 13. deuteron_g_factor; 0.8574382311; deuteron g factor [] uncertainty=0.000 000 0048. deuteron_mag_mom; 4.330735040E-27; deuteron mag. mom. [J T^{-1}] uncertainty=0.000 000 0036 e-26. deuteron_mag_mom_to_Bohr_magneton_ratio; 0.0004669754554; deuteron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0026 e-3. deuteron_mag_mom_to_nuclear_magneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_r,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:8737,Energy Efficiency,charge,charge,8737,gneton_ratio; 0.8574382311; deuteron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0048. deuteron_mass; 3.343583719E-27; deuteron mass [kg] uncertainty=0.000 000 041 e-27. deuteron_mass_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_ratio; 0.0002724437107484; electron-deuteron mass ratio [] uncertainty=0.000 000 000 096 e-4. electron_g_factor; -2.00231930436182; electron g factor [] uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:8927,Energy Efficiency,charge,charge,8927,s_energy_equivalent; 3.005063183E-10; deuteron mass energy equivalent [J] uncertainty=0.000 000 037 e-10. deuteron_mass_energy_equivalent_in_MeV; 1875.612928; deuteron mass energy equivalent in MeV [MeV] uncertainty=0.000 012. deuteron_mass_in_u; 2.013553212745; deuteron mass in u [u] uncertainty=0.000 000 000 040. deuteron_molar_mass; 0.002013553212745; deuteron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 040 e-3. deuteron_neutron_mag_mom_ratio; -0.44820652; deuteron-neutron mag. mom. ratio [] uncertainty=0.000 000 11. deuteron_proton_mag_mom_ratio; 0.3070122077; deuteron-proton mag. mom. ratio [] uncertainty=0.000 000 0015. deuteron_proton_mass_ratio; 1.99900750087; deuteron-proton mass ratio [] uncertainty=0.000 000 000 19. deuteron_rms_charge_radius; 2.1413E-15; deuteron rms charge radius [m] uncertainty=0.0025 e-15. electric_constant; 8.854187817E-12; electric constant [F m^{-1}] uncertainty=(exact). electron_charge_to_mass_quotient; -1.758820024E+11; electron charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 011 e11. electron_deuteron_mag_mom_ratio; -2143.923499; electron-deuteron mag. mom. ratio [] uncertainty=0.000 012. electron_deuteron_mass_ratio; 0.0002724437107484; electron-deuteron mass ratio [] uncertainty=0.000 000 000 096 e-4. electron_g_factor; -2.00231930436182; electron g factor [] uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Boh,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:10272,Energy Efficiency,energy,energy,10272, uncertainty=0.000 000 000 000 52. electron_gyromag_ratio; 1.760859644E+11; electron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 000 000 26. electron_mag_mom_to_nuclear_magneton_ratio; -1838.28197234; electron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 17. electron_mass; 9.10938356E-31; electron mass [kg] uncertainty=0.000 000 11 e-31. electron_mass_energy_equivalent; 8.18710565E-14; electron mass energy equivalent [J] uncertainty=0.000 000 10 e-14. electron_mass_energy_equivalent_in_MeV; 0.5109989461; electron mass energy equivalent in MeV [MeV] uncertainty=0.000 000 0031. electron_mass_in_u; 0.000548579909070; electron mass in u [u] uncertainty=0.000 000 000 16 e-4. electron_molar_mass; 5.48579909070E-7; electron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 16 e-7. electron_muon_mag_mom_ratio; 206.7669880; electron-muon mag. mom. ratio [] uncertainty=0.000 0046. electron_muon_mass_ratio; 0.00483633170; electron-muon mass ratio [] uncertainty=0.000 000 11 e-3. electron_neutron_mag_mom_ratio; 960.92050; electron-neutron mag. mom. ratio [] uncertainty=0.000 23. electron_neutron_mass_ratio; 0.00054386734428; electron-neutron mass ratio [] uncertainty=0.000 000 0027 e-4. electron_proton_mag_mom_ratio; -658.2106866; electron-proton mag. mom. ratio [] uncertainty=0.000 0020. electron_proton_mass_ratio; 0.000544617021352; electron-proton mass ratio [] uncertainty=0.000 000 000 52 e-,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:10393,Energy Efficiency,energy,energy,10393,y=0.000 000 011 e11. electron_gyromag_ratio_over_2_pi; 28024.95164; electron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 17. electron_helion_mass_ratio; 0.0001819543074854; electron-helion mass ratio [] uncertainty=0.000 000 000 088 e-4. electron_mag_mom; -9.284764620E-24; electron mag. mom. [J T^{-1}] uncertainty=0.000 0057 e-26. electron_mag_mom_anomaly; 0.00115965218091; electron mag. mom. anomaly [] uncertainty=0.000 000 000 26 e-3. electron_mag_mom_to_Bohr_magneton_ratio; -1.00115965218091; electron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 000 000 26. electron_mag_mom_to_nuclear_magneton_ratio; -1838.28197234; electron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 17. electron_mass; 9.10938356E-31; electron mass [kg] uncertainty=0.000 000 11 e-31. electron_mass_energy_equivalent; 8.18710565E-14; electron mass energy equivalent [J] uncertainty=0.000 000 10 e-14. electron_mass_energy_equivalent_in_MeV; 0.5109989461; electron mass energy equivalent in MeV [MeV] uncertainty=0.000 000 0031. electron_mass_in_u; 0.000548579909070; electron mass in u [u] uncertainty=0.000 000 000 16 e-4. electron_molar_mass; 5.48579909070E-7; electron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 16 e-7. electron_muon_mag_mom_ratio; 206.7669880; electron-muon mag. mom. ratio [] uncertainty=0.000 0046. electron_muon_mass_ratio; 0.00483633170; electron-muon mass ratio [] uncertainty=0.000 000 11 e-3. electron_neutron_mag_mom_ratio; 960.92050; electron-neutron mag. mom. ratio [] uncertainty=0.000 23. electron_neutron_mass_ratio; 0.00054386734428; electron-neutron mass ratio [] uncertainty=0.000 000 0027 e-4. electron_proton_mag_mom_ratio; -658.2106866; electron-proton mag. mom. ratio [] uncertainty=0.000 0020. electron_proton_mass_ratio; 0.000544617021352; electron-proton mass ratio [] uncertainty=0.000 000 000 52 e-4. electron_tau_mass_ratio; 0.000287592; electron-tau mass ratio [] uncertainty=0.000 26 e-4. electron_to_alpha_particle_mass_r,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:12417,Energy Efficiency,meter,meter,12417,798; electron to alpha particle mass ratio [] uncertainty=0.000 000 000 045 e-4. electron_to_shielded_helion_mag_mom_ratio; 864.058257; electron to shielded helion mag. mom. ratio [] uncertainty=0.000 010. electron_to_shielded_proton_mag_mom_ratio; -658.2275971; electron to shielded proton mag. mom. ratio [] uncertainty=0.000 0072. electron_triton_mass_ratio; 0.0001819200062203; electron-triton mass ratio [] uncertainty=0.000 000 000 084 e-4. electron_volt; 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fi,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:12541,Energy Efficiency,joule,joule,12541,io; 864.058257; electron to shielded helion mag. mom. ratio [] uncertainty=0.000 010. electron_to_shielded_proton_mag_mom_ratio; -658.2275971; electron to shielded proton mag. mom. ratio [] uncertainty=0.000 0072. electron_triton_mass_ratio; 0.0001819200062203; electron-triton mass ratio [] uncertainty=0.000 000 000 084 e-4. electron_volt; 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation const,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:12886,Energy Efficiency,charge,charge,12886, 1.6021766208E-19; electron volt [J] uncertainty=0.000 000 0098 e-19. electron_volt_atomic_mass_unit_relationship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartre,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:12984,Energy Efficiency,charge,charge,12984,tionship; 1.0735441105E-9; electron volt-atomic mass unit relationship [u] uncertainty=0.000 000 0066 e-9. electron_volt_hartree_relationship; 0.03674932248; electron volt-hartree relationship [E_h] uncertainty=0.000 000 023 e-2. electron_volt_hertz_relationship; 2.417989262E+14; electron volt-hertz relationship [Hz] uncertainty=0.000 000 015 e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 1,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:14035,Energy Efficiency,energy,energy,14035,14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ra,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:14121,Energy Efficiency,energy,energy,14121,ay_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:14348,Energy Efficiency,meter,meter,14348,tainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:14463,Energy Efficiency,joule,joule,14463, 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; hartree-inverse meter relationship [m^{-1}] uncertainty=0.000 000 000 013 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_ener,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:15400,Energy Efficiency,energy,energy,15400,3 e7. hartree_joule_relationship; 4.359744650E-18; hartree-joule relationship [J] uncertainty=0.000 000 054 e-18. hartree_kelvin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:15517,Energy Efficiency,energy,energy,15517,vin_relationship; 315775.13; hartree-kelvin relationship [K] uncertainty=0.000 0018 e5. hartree_kilogram_relationship; 4.850870129E-35; hartree-kilogram relationship [kg] uncertainty=0.000 000 060 e-35. helion_electron_mass_ratio; 5495.88527922; helion-electron mass ratio [] uncertainty=0.000 000 27. helion_g_factor; -4.255250616; helion g factor [] uncertainty=0.000 000 050. helion_mag_mom; -1.074617522E-26; helion mag. mom. [J T^{-1}] uncertainty=0.000 000 014 e-26. helion_mag_mom_to_Bohr_magneton_ratio; -0.001158740958; helion mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 014 e-3. helion_mag_mom_to_nuclear_magneton_ratio; -2.127625308; helion mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 025. helion_mass; 5.006412700E-27; helion mass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.00,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:16289,Energy Efficiency,meter,meter,16289,ass [kg] uncertainty=0.000 000 062 e-27. helion_mass_energy_equivalent; 4.499539341E-10; helion mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:16387,Energy Efficiency,joule,joule,16387,mass energy equivalent [J] uncertainty=0.000 000 055 e-10. helion_mass_energy_equivalent_in_MeV; 2808.391586; helion mass energy equivalent in MeV [MeV] uncertainty=0.000 017. helion_mass_in_u; 3.01493224673; helion mass in u [u] uncertainty=0.000 000 000 12. helion_molar_mass; 0.00301493224673; helion molar mass [kg mol^{-1}] uncertainty=0.000 000 000 12 e-3. helion_proton_mass_ratio; 2.99315267046; helion-proton mass ratio [] uncertainty=0.000 000 000 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:16836,Energy Efficiency,meter,meter-atomic,16836,00 29. hertz_atomic_mass_unit_relationship; 4.4398216616E-24; hertz-atomic mass unit relationship [u] uncertainty=0.000 000 0020 e-24. hertz_electron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. jo,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:16981,Energy Efficiency,meter,meter-electron,16981,ctron_volt_relationship; 4.135667662E-15; hertz-electron volt relationship [eV] uncertainty=0.000 000 025 e-15. hertz_hartree_relationship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relati,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:17114,Energy Efficiency,meter,meter-hartree,17114,ionship; 1.5198298460088E-16; hertz-hartree relationship [E_h] uncertainty=0.000 000 000 0090 e-16. hertz_inverse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.2937123,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:17235,Energy Efficiency,meter,meter-hertz,17235,verse_meter_relationship; 3.335640951E-9; hertz-inverse meter relationship [m^{-1}] uncertainty=(exact). hertz_joule_relationship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.50919020,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:17345,Energy Efficiency,meter,meter-joule,17345,ionship; 6.626070040E-34; hertz-joule relationship [J] uncertainty=0.000 000 081 e-34. hertz_kelvin_relationship; 4.7992447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; jou,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:17463,Energy Efficiency,meter,meter-kelvin,17463,447E-11; hertz-kelvin relationship [K] uncertainty=0.000 0028 e-11. hertz_kilogram_relationship; 7.372497201E-51; hertz-kilogram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-ke,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:17585,Energy Efficiency,meter,meter-kilogram,17585,logram relationship [kg] uncertainty=0.000 000 091 e-51. inverse_fine_structure_constant; 137.035999139; inverse fine-structure constant [] uncertainty=0.000 000 031. inverse_meter_atomic_mass_unit_relationship; 1.33102504900E-15; inverse meter-atomic mass unit relationship [u] uncertainty=0.000 000 000 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationshi,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:17898,Energy Efficiency,joule,joule-atomic,17898,0 61 e-15. inverse_meter_electron_volt_relationship; 0.0000012398419739; inverse meter-electron volt relationship [eV] uncertainty=0.000 000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.000,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18019,Energy Efficiency,joule,joule-electron,18019,000 0076 e-6. inverse_meter_hartree_relationship; 4.556335252767E-8; inverse meter-hartree relationship [E_h] uncertainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relations,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18133,Energy Efficiency,joule,joule-hartree,18133,certainty=0.000 000 000 027 e-8. inverse_meter_hertz_relationship; 299792458; inverse meter-hertz relationship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relatio,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18240,Energy Efficiency,joule,joule-hertz,18240,nship [Hz] uncertainty=(exact). inverse_meter_joule_relationship; 1.986445824E-25; inverse meter-joule relationship [J] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18352,Energy Efficiency,joule,joule-inverse,18352,] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] un,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18366,Energy Efficiency,meter,meter,18366,] uncertainty=0.000 000 024 e-25. inverse_meter_kelvin_relationship; 0.0143877736; inverse meter-kelvin relationship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] un,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18467,Energy Efficiency,joule,joule-kelvin,18467,onship [K] uncertainty=0.000 000 83 e-2. inverse_meter_kilogram_relationship; 2.210219057E-42; inverse meter-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass uni,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:18571,Energy Efficiency,joule,joule-kilogram,18571,-kilogram relationship [kg] uncertainty=0.000 000 027 e-42. inverse_of_conductance_quantum; 12906.4037278; inverse of conductance quantum [ohm] uncertainty=0.000 0029. Josephson_constant; 4.835978525E+14; Josephson constant [Hz V^{-1}] uncertainty=0.0030 e9. joule_atomic_mass_unit_relationship; 6700535363; joule-atomic mass unit relationship [u] uncertainty=0.000 000 082 e9. joule_electron_volt_relationship; 6.241509126E+18; joule-electron volt relationship [eV] uncertainty=0.000 000 038 e18. joule_hartree_relationship; 2.293712317E+17; joule-hartree relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kil,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:19136,Energy Efficiency,meter,meter,19136,e relationship [E_h] uncertainty=0.000 000 028 e17. joule_hertz_relationship; 1.509190205E+33; joule-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:19237,Energy Efficiency,joule,joule,19237,-hertz relationship [Hz] uncertainty=0.000 000 019 e33. joule_inverse_meter_relationship; 5.034116651E+24; joule-inverse meter relationship [m^{-1}] uncertainty=0.000 000 062 e24. joule_kelvin_relationship; 7.2429731E+22; joule-kelvin relationship [K] uncertainty=0.000 0042 e22. joule_kilogram_relationship; 1.112650056E-17; joule-kilogram relationship [kg] uncertainty=(exact). kelvin_atomic_mass_unit_relationship; 9.2510842E-14; kelvin-atomic mass unit relationship [u] uncertainty=0.000 0053 e-14. kelvin_electron_volt_relationship; 0.000086173303; kelvin-electron volt relationship [eV] uncertainty=0.000 0050 e-5. kelvin_hartree_relationship; 0.0000031668105; kelvin-hartree relationship [E_h] uncertainty=0.000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silic,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:19955,Energy Efficiency,meter,meter,19955,"000 0018 e-6. kelvin_hertz_relationship; 2.0836612E+10; kelvin-hertz relationship [Hz] uncertainty=0.000 0012 e10. kelvin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silicon; 5.431020504E-10; lattice parameter of silicon [m] uncertainty=0.000 0089 e-12. Loschmidt_constant_27315_K_100_kPa; 2.6516467E+25; Loschmidt constant (273.15 K, 100 kPa) [m^{-3}] uncertainty=0.000 0015 e25. Loschmidt_constant_27315_K_101325_kPa; 2.6867811E+25; Loschmidt constant (273.15 K, 101.325 kPa) [m^{-3}] uncertainty=0.000 0015 e25. mag_constant; 0.0000012566370614; mag. constant [N A^{-2}] uncertainty=(exact). mag_flux_quantum; 2.067833831E-15; mag. flux quantum [Wb] uncertainty=0.000 000 013 e-15. molar_gas_constant; 8.3144598; molar gas constant [J mol^{-1} K^{-1}] uncertainty=0.000 0048. molar_mass_constant; 0.001; molar mass constant [kg mol^{-1}] uncertainty=(exact). molar_mass_of_carbon_12;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:20069,Energy Efficiency,joule,joule,20069,"vin_inverse_meter_relationship; 69.503457; kelvin-inverse meter relationship [m^{-1}] uncertainty=0.000 040. kelvin_joule_relationship; 1.38064852E-23; kelvin-joule relationship [J] uncertainty=0.000 000 79 e-23. kelvin_kilogram_relationship; 1.53617865E-40; kelvin-kilogram relationship [kg] uncertainty=0.000 000 88 e-40. kilogram_atomic_mass_unit_relationship; 6.022140857E+26; kilogram-atomic mass unit relationship [u] uncertainty=0.000 000 074 e26. kilogram_electron_volt_relationship; 5.609588650E+35; kilogram-electron volt relationship [eV] uncertainty=0.000 000 034 e35. kilogram_hartree_relationship; 2.061485823E+34; kilogram-hartree relationship [E_h] uncertainty=0.000 000 025 e34. kilogram_hertz_relationship; 1.356392512E+50; kilogram-hertz relationship [Hz] uncertainty=0.000 000 017 e50. kilogram_inverse_meter_relationship; 4.524438411E+41; kilogram-inverse meter relationship [m^{-1}] uncertainty=0.000 000 056 e41. kilogram_joule_relationship; 8.987551787E+16; kilogram-joule relationship [J] uncertainty=(exact). kilogram_kelvin_relationship; 6.5096595E+39; kilogram-kelvin relationship [K] uncertainty=0.000 0037 e39. lattice_parameter_of_silicon; 5.431020504E-10; lattice parameter of silicon [m] uncertainty=0.000 0089 e-12. Loschmidt_constant_27315_K_100_kPa; 2.6516467E+25; Loschmidt constant (273.15 K, 100 kPa) [m^{-3}] uncertainty=0.000 0015 e25. Loschmidt_constant_27315_K_101325_kPa; 2.6867811E+25; Loschmidt constant (273.15 K, 101.325 kPa) [m^{-3}] uncertainty=0.000 0015 e25. mag_constant; 0.0000012566370614; mag. constant [N A^{-2}] uncertainty=(exact). mag_flux_quantum; 2.067833831E-15; mag. flux quantum [Wb] uncertainty=0.000 000 013 e-15. molar_gas_constant; 8.3144598; molar gas constant [J mol^{-1} K^{-1}] uncertainty=0.000 0048. molar_mass_constant; 0.001; molar mass constant [kg mol^{-1}] uncertainty=(exact). molar_mass_of_carbon_12; 0.012; molar mass of carbon-12 [kg mol^{-1}] uncertainty=(exact). molar_Planck_constant; 3.9903127110E-10; molar Planc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:22688,Energy Efficiency,energy,energy,22688,; Mo x unit [m] uncertainty=0.000 000 53 e-13. muon_Compton_wavelength; 1.173444111E-14; muon Compton wavelength [m] uncertainty=0.000 000 26 e-15. muon_Compton_wavelength_over_2_pi; 1.867594308E-15; muon Compton wavelength over 2 pi [m] uncertainty=0.000 000 042 e-15. muon_electron_mass_ratio; 206.7682826; muon-electron mass ratio [] uncertainty=0.000 0046. muon_g_factor; -2.0023318418; muon g factor [] uncertainty=0.000 000 0013. muon_mag_mom; -4.49044826E-26; muon mag. mom. [J T^{-1}] uncertainty=0.000 000 10 e-26. muon_mag_mom_anomaly; 0.00116592089; muon mag. mom. anomaly [] uncertainty=0.000 000 63 e-3. muon_mag_mom_to_Bohr_magneton_ratio; -0.00484197048; muon mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 11 e-3. muon_mag_mom_to_nuclear_magneton_ratio; -8.89059705; muon mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 20. muon_mass; 1.883531594E-28; muon mass [kg] uncertainty=0.000 000 048 e-28. muon_mass_energy_equivalent; 1.692833774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:22801,Energy Efficiency,energy,energy,22801,rtainty=0.000 000 26 e-15. muon_Compton_wavelength_over_2_pi; 1.867594308E-15; muon Compton wavelength over 2 pi [m] uncertainty=0.000 000 042 e-15. muon_electron_mass_ratio; 206.7682826; muon-electron mass ratio [] uncertainty=0.000 0046. muon_g_factor; -2.0023318418; muon g factor [] uncertainty=0.000 000 0013. muon_mag_mom; -4.49044826E-26; muon mag. mom. [J T^{-1}] uncertainty=0.000 000 10 e-26. muon_mag_mom_anomaly; 0.00116592089; muon mag. mom. anomaly [] uncertainty=0.000 000 63 e-3. muon_mag_mom_to_Bohr_magneton_ratio; -0.00484197048; muon mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 11 e-3. muon_mag_mom_to_nuclear_magneton_ratio; -8.89059705; muon mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 20. muon_mass; 1.883531594E-28; muon mass [kg] uncertainty=0.000 000 048 e-28. muon_mass_energy_equivalent; 1.692833774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 0,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:23672,Energy Efficiency,energy,energy,23672,774E-11; muon mass energy equivalent [J] uncertainty=0.000 000 043 e-11. muon_mass_energy_equivalent_in_MeV; 105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 000 0031. natural_unit_of_length; 3.8615926764E-13; natural unit of length [m] uncertainty=0.000 000 18 e-15. natural_unit_of_mass; 9.10938356E-31; natural unit of mass [kg] uncertainty=0.000 000 11 e-31. natural_unit_of_momum; 2.730924488E-22; natural unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 034 e-22. natural_unit_of_momum_in_MeVpc; 0.5109989461; natural unit of mom.um in MeV/c [MeV/c] uncertainty=0.000 000 0031. natural_unit_of_time; 1.28808866712E-21; natural unit of time [s] uncertainty=0.000 000 000 58 e-21. natural_unit_of_velocity; 299792458; natural unit of velocity [m s^{-1}] uncertainty=(exact). neutron_Compton_wavelength; 1.31959090481E-15; neutron Compton wavelength [m] uncertainty=0.000 000 000 88 e-15. neutron_Compton_wavelength_over_2_pi; 2.1001941536E-16; neutron Compton wavelength over 2 pi [m] uncertainty=0.000 000 00,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:23775,Energy Efficiency,energy,energy,23775,105.6583745; muon mass energy equivalent in MeV [MeV] uncertainty=0.000 0024. muon_mass_in_u; 0.1134289257; muon mass in u [u] uncertainty=0.000 000 0025. muon_molar_mass; 0.0001134289257; muon molar mass [kg mol^{-1}] uncertainty=0.000 000 0025 e-3. muon_neutron_mass_ratio; 0.1124545167; muon-neutron mass ratio [] uncertainty=0.000 000 0025. muon_proton_mag_mom_ratio; -3.183345142; muon-proton mag. mom. ratio [] uncertainty=0.000 000 071. muon_proton_mass_ratio; 0.1126095262; muon-proton mass ratio [] uncertainty=0.000 000 0025. muon_tau_mass_ratio; 0.0594649; muon-tau mass ratio [] uncertainty=0.000 54 e-2. natural_unit_of_action; 1.054571800E-34; natural unit of action [J s] uncertainty=0.000 000 013 e-34. natural_unit_of_action_in_eV_s; 6.582119514E-16; natural unit of action in eV s [eV s] uncertainty=0.000 000 040 e-16. natural_unit_of_energy; 8.18710565E-14; natural unit of energy [J] uncertainty=0.000 000 10 e-14. natural_unit_of_energy_in_MeV; 0.5109989461; natural unit of energy in MeV [MeV] uncertainty=0.000 000 0031. natural_unit_of_length; 3.8615926764E-13; natural unit of length [m] uncertainty=0.000 000 18 e-15. natural_unit_of_mass; 9.10938356E-31; natural unit of mass [kg] uncertainty=0.000 000 11 e-31. natural_unit_of_momum; 2.730924488E-22; natural unit of mom.um [kg m s^{-1}] uncertainty=0.000 000 034 e-22. natural_unit_of_momum_in_MeVpc; 0.5109989461; natural unit of mom.um in MeV/c [MeV/c] uncertainty=0.000 000 0031. natural_unit_of_time; 1.28808866712E-21; natural unit of time [s] uncertainty=0.000 000 000 58 e-21. natural_unit_of_velocity; 299792458; natural unit of velocity [m s^{-1}] uncertainty=(exact). neutron_Compton_wavelength; 1.31959090481E-15; neutron Compton wavelength [m] uncertainty=0.000 000 000 88 e-15. neutron_Compton_wavelength_over_2_pi; 2.1001941536E-16; neutron Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 14 e-15. neutron_electron_mag_mom_ratio; 0.00104066882; neutron-electron mag. mom. ratio [] uncertainty=0.,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:25684,Energy Efficiency,energy,energy,25684,_electron_mag_mom_ratio; 0.00104066882; neutron-electron mag. mom. ratio [] uncertainty=0.000 000 25 e-3. neutron_electron_mass_ratio; 1838.68366158; neutron-electron mass ratio [] uncertainty=0.000 000 90. neutron_g_factor; -3.82608545; neutron g factor [] uncertainty=0.000 000 90. neutron_gyromag_ratio; 183247172; neutron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 43 e8. neutron_gyromag_ratio_over_2_pi; 29.1646933; neutron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 0069. neutron_mag_mom; -9.6623650E-27; neutron mag. mom. [J T^{-1}] uncertainty=0.000 000 23 e-26. neutron_mag_mom_to_Bohr_magneton_ratio; -0.00104187563; neutron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 25 e-3. neutron_mag_mom_to_nuclear_magneton_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:25803,Energy Efficiency,energy,energy,25803,s_ratio; 1838.68366158; neutron-electron mass ratio [] uncertainty=0.000 000 90. neutron_g_factor; -3.82608545; neutron g factor [] uncertainty=0.000 000 90. neutron_gyromag_ratio; 183247172; neutron gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 43 e8. neutron_gyromag_ratio_over_2_pi; 29.1646933; neutron gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 0069. neutron_mag_mom; -9.6623650E-27; neutron mag. mom. [J T^{-1}] uncertainty=0.000 000 23 e-26. neutron_mag_mom_to_Bohr_magneton_ratio; -0.00104187563; neutron mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 25 e-3. neutron_mag_mom_to_nuclear_magneton_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.0013784,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:26452,Energy Efficiency,energy,energy,26452,_ratio; -1.91304273; neutron mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 45. neutron_mass; 1.674927471E-27; neutron mass [kg] uncertainty=0.000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:26604,Energy Efficiency,energy,energy,26604,000 000 021 e-27. neutron_mass_energy_equivalent; 1.505349739E-10; neutron mass energy equivalent [J] uncertainty=0.000 000 019 e-10. neutron_mass_energy_equivalent_in_MeV; 939.5654133; neutron mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. neutron_mass_in_u; 1.00866491588; neutron mass in u [u] uncertainty=0.000 000 000 49. neutron_molar_mass; 0.00100866491588; neutron molar mass [kg mol^{-1}] uncertainty=0.000 000 000 49 e-3. neutron_muon_mass_ratio; 8.89248408; neutron-muon mass ratio [] uncertainty=0.000 000 20. neutron_proton_mag_mom_ratio; -0.68497934; neutron-proton mag. mom. ratio [] uncertainty=0.000 000 16. neutron_proton_mass_difference; 2.30557377E-30; neutron-proton mass difference [] uncertainty=0.000 000 85 e-30. neutron_proton_mass_difference_energy_equivalent; 2.07214637E-13; neutron-proton mass difference energy equivalent [] uncertainty=0.000 000 76 e-13. neutron_proton_mass_difference_energy_equivalent_in_MeV; 1.29333205; neutron-proton mass difference energy equivalent in MeV [] uncertainty=0.000 000 48. neutron_proton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.000 000 031 e-27. nuclear_magneton_in_eVpT; 3.1524512550E-8; nuclear magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0015 e-8. nuclear_magneton_in_inverse_,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:27666,Energy Efficiency,meter,meters,27666,ton_mass_difference_in_u; 0.00138844900; neutron-proton mass difference in u [] uncertainty=0.000 000 000 51. neutron_proton_mass_ratio; 1.00137841898; neutron-proton mass ratio [] uncertainty=0.000 000 000 51. neutron_tau_mass_ratio; 0.528790; neutron-tau mass ratio [] uncertainty=0.000 048. neutron_to_shielded_proton_mag_mom_ratio; -0.68499694; neutron to shielded proton mag. mom. ratio [] uncertainty=0.000 000 16. Newtonian_constant_of_gravitation; 6.67408E-11; Newtonian constant of gravitation [m^3 kg^{-1} s^{-2}] uncertainty=0.000 31 e-11. Newtonian_constant_of_gravitation_over_h_bar_c; 6.70861E-39; Newtonian constant of gravitation over h-bar c [(GeV/c^2)^-2] uncertainty=0.000 31 e-39. nuclear_magneton; 5.050783699E-27; nuclear magneton [J T^{-1}] uncertainty=0.000 000 031 e-27. nuclear_magneton_in_eVpT; 3.1524512550E-8; nuclear magneton in eV/T [eV T^{-1}] uncertainty=0.000 000 0015 e-8. nuclear_magneton_in_inverse_meters_per_tesla; 0.02542623432; nuclear magneton in inverse meters per tesla [m^{-1} T^{-1}] uncertainty=0.000 000 016 e-2. nuclear_magneton_in_KpT; 0.00036582690; nuclear magneton in K/T [K T^{-1}] uncertainty=0.000 0021 e-4. nuclear_magneton_in_MHzpT; 7.622593285; nuclear magneton in MHz/T [MHz T^{-1}] uncertainty=0.000 000 047. Planck_constant; 6.626070040E-34; Planck constant [J s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equiv,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:28709,Energy Efficiency,energy,energy,28709,0 016 e-2. nuclear_magneton_in_KpT; 0.00036582690; nuclear magneton in K/T [K T^{-1}] uncertainty=0.000 0021 e-4. nuclear_magneton_in_MHzpT; 7.622593285; nuclear magneton in MHz/T [MHz T^{-1}] uncertainty=0.000 000 047. Planck_constant; 6.626070040E-34; Planck constant [J s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equivalent_in_GeV; 1.220910E+19; Planck mass energy equivalent in GeV [GeV] uncertainty=0.000 029 e19. Planck_temperature; 1.416808E+32; Planck temperature [K] uncertainty=0.000 033 e32. Planck_time; 5.39116E-44; Planck time [s] uncertainty=0.000 13 e-44. proton_charge_to_mass_quotient; 95788332.26; proton charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 059 e7. proton_Compton_wavelength; 1.32140985396E-15; proton Compton wavelength [m] uncertainty=0.000 000 000 61 e-15. proton_Compton_wavelength_over_2_pi; 2.10308910109E-16; proton Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 097 e-15. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag.,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:28972,Energy Efficiency,charge,charge,28972, s] uncertainty=0.000 000 081 e-34. Planck_constant_in_eV_s; 4.135667662E-15; Planck constant in eV s [eV s] uncertainty=0.000 000 025 e-15. Planck_constant_over_2_pi; 1.054571800E-34; Planck constant over 2 pi [J s] uncertainty=0.000 000 013 e-34. Planck_constant_over_2_pi_in_eV_s; 6.582119514E-16; Planck constant over 2 pi in eV s [eV s] uncertainty=0.000 000 040 e-16. Planck_constant_over_2_pi_times_c_in_MeV_fm; 197.3269788; Planck constant over 2 pi times c in MeV fm [MeV fm] uncertainty=0.000 0012. Planck_length; 1.616229E-35; Planck length [m] uncertainty=0.000 038 e-35. Planck_mass; 2.176470E-8; Planck mass [kg] uncertainty=0.000 051 e-8. Planck_mass_energy_equivalent_in_GeV; 1.220910E+19; Planck mass energy equivalent in GeV [GeV] uncertainty=0.000 029 e19. Planck_temperature; 1.416808E+32; Planck temperature [K] uncertainty=0.000 033 e32. Planck_time; 5.39116E-44; Planck time [s] uncertainty=0.000 13 e-44. proton_charge_to_mass_quotient; 95788332.26; proton charge to mass quotient [C kg^{-1}] uncertainty=0.000 000 059 e7. proton_Compton_wavelength; 1.32140985396E-15; proton Compton wavelength [m] uncertainty=0.000 000 000 61 e-15. proton_Compton_wavelength_over_2_pi; 2.10308910109E-16; proton Compton wavelength over 2 pi [m] uncertainty=0.000 000 000 097 e-15. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneto,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:30275,Energy Efficiency,energy,energy,30275,. proton_electron_mass_ratio; 1836.15267389; proton-electron mass ratio [] uncertainty=0.000 000 17. proton_g_factor; 5.585694702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circula,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:30392,Energy Efficiency,energy,energy,30392,4702; proton g factor [] uncertainty=0.000 000 017. proton_gyromag_ratio; 267522190.0; proton gyromag. ratio [s^{-1} T^{-1}] uncertainty=0.000 000 018 e8. proton_gyromag_ratio_over_2_pi; 42.57747892; proton gyromag. ratio over 2 pi [MHz T^{-1}] uncertainty=0.000 000 29. proton_mag_mom; 1.4106067873E-26; proton mag. mom. [J T^{-1}] uncertainty=0.000 000 0097 e-26. proton_mag_mom_to_Bohr_magneton_ratio; 0.0015210322053; proton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0046 e-3. proton_mag_mom_to_nuclear_magneton_ratio; 2.7928473508; proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circulation times 2 [m^2 s^{-1}] uncertainty=0.000 000 0033 e-4. Rydberg_constant; 10973731.568508; Rydberg constant [m^{-1}] uncer,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:30978,Energy Efficiency,charge,charge,30978," magneton ratio [] uncertainty=0.000 000 0085. proton_mag_shielding_correction; 0.000025691; proton mag. shielding correction [] uncertainty=0.011 e-6. proton_mass; 1.672621898E-27; proton mass [kg] uncertainty=0.000 000 021 e-27. proton_mass_energy_equivalent; 1.503277593E-10; proton mass energy equivalent [J] uncertainty=0.000 000 018 e-10. proton_mass_energy_equivalent_in_MeV; 938.2720813; proton mass energy equivalent in MeV [MeV] uncertainty=0.000 0058. proton_mass_in_u; 1.007276466879; proton mass in u [u] uncertainty=0.000 000 000 091. proton_molar_mass; 0.001007276466879; proton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 091 e-3. proton_muon_mass_ratio; 8.88024338; proton-muon mass ratio [] uncertainty=0.000 000 20. proton_neutron_mag_mom_ratio; -1.45989805; proton-neutron mag. mom. ratio [] uncertainty=0.000 000 34. proton_neutron_mass_ratio; 0.99862347844; proton-neutron mass ratio [] uncertainty=0.000 000 000 51. proton_rms_charge_radius; 8.751E-16; proton rms charge radius [m] uncertainty=0.0061 e-15. proton_tau_mass_ratio; 0.528063; proton-tau mass ratio [] uncertainty=0.000 048. quantum_of_circulation; 0.00036369475486; quantum of circulation [m^2 s^{-1}] uncertainty=0.000 000 0017 e-4. quantum_of_circulation_times_2; 0.00072738950972; quantum of circulation times 2 [m^2 s^{-1}] uncertainty=0.000 000 0033 e-4. Rydberg_constant; 10973731.568508; Rydberg constant [m^{-1}] uncertainty=0.000 065. Rydberg_constant_times_c_in_Hz; 3.289841960355E+15; Rydberg constant times c in Hz [Hz] uncertainty=0.000 000 000 019 e15. Rydberg_constant_times_hc_in_eV; 13.605693009; Rydberg constant times hc in eV [eV] uncertainty=0.000 000 084. Rydberg_constant_times_hc_in_J; 2.179872325E-18; Rydberg constant times hc in J [J] uncertainty=0.000 000 027 e-18. Sackur_Tetrode_constant_1_K_100_kPa; -1.1517084; Sackur-Tetrode constant (1 K, 100 kPa) [] uncertainty=0.000 0014. Sackur_Tetrode_constant_1_K_101325_kPa; -1.1648714; Sackur-Tetrode constant (1 K, 101.325 kPa) []",MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:34577,Energy Efficiency,energy,energy,34577,m_to_nuclear_magneton_ratio; 2.792775600; shielded proton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 030. speed_of_light_in_vacuum; 299792458; speed of light in vacuum [m s^{-1}] uncertainty=(exact). standard_acceleration_of_gravity; 9.80665; standard acceleration of gravity [m s^{-2}] uncertainty=(exact). standard_atmosphere; 101325; standard atmosphere [Pa] uncertainty=(exact). standard_state_pressure; 100000; standard-state pressure [Pa] uncertainty=(exact). Stefan_Boltzmann_constant; 5.670367E-8; Stefan-Boltzmann constant [W m^{-2} K^{-4}] uncertainty=0.000 013 e-8. tau_Compton_wavelength; 6.97787E-16; tau Compton wavelength [m] uncertainty=0.000 063 e-15. tau_Compton_wavelength_over_2_pi; 1.11056E-16; tau Compton wavelength over 2 pi [m] uncertainty=0.000 010 e-15. tau_electron_mass_ratio; 3477.15; tau-electron mass ratio [] uncertainty=0.31. tau_mass; 3.16747E-27; tau mass [kg] uncertainty=0.000 29 e-27. tau_mass_energy_equivalent; 2.84678E-10; tau mass energy equivalent [J] uncertainty=0.000 26 e-10. tau_mass_energy_equivalent_in_MeV; 1776.82; tau mass energy equivalent in MeV [MeV] uncertainty=0.16. tau_mass_in_u; 1.90749; tau mass in u [u] uncertainty=0.000 17. tau_molar_mass; 0.00190749; tau molar mass [kg mol^{-1}] uncertainty=0.000 17 e-3. tau_muon_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncert,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:34679,Energy Efficiency,energy,energy,34679,.000 000 030. speed_of_light_in_vacuum; 299792458; speed of light in vacuum [m s^{-1}] uncertainty=(exact). standard_acceleration_of_gravity; 9.80665; standard acceleration of gravity [m s^{-2}] uncertainty=(exact). standard_atmosphere; 101325; standard atmosphere [Pa] uncertainty=(exact). standard_state_pressure; 100000; standard-state pressure [Pa] uncertainty=(exact). Stefan_Boltzmann_constant; 5.670367E-8; Stefan-Boltzmann constant [W m^{-2} K^{-4}] uncertainty=0.000 013 e-8. tau_Compton_wavelength; 6.97787E-16; tau Compton wavelength [m] uncertainty=0.000 063 e-15. tau_Compton_wavelength_over_2_pi; 1.11056E-16; tau Compton wavelength over 2 pi [m] uncertainty=0.000 010 e-15. tau_electron_mass_ratio; 3477.15; tau-electron mass ratio [] uncertainty=0.31. tau_mass; 3.16747E-27; tau mass [kg] uncertainty=0.000 29 e-27. tau_mass_energy_equivalent; 2.84678E-10; tau mass energy equivalent [J] uncertainty=0.000 26 e-10. tau_mass_energy_equivalent_in_MeV; 1776.82; tau mass energy equivalent in MeV [MeV] uncertainty=0.16. tau_mass_in_u; 1.90749; tau mass in u [u] uncertainty=0.000 17. tau_molar_mass; 0.00190749; tau molar mass [kg mol^{-1}] uncertainty=0.000 17 e-3. tau_muon_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear m,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:35878,Energy Efficiency,energy,energy,35878,n_mass_ratio; 16.8167; tau-muon mass ratio [] uncertainty=0.0015. tau_neutron_mass_ratio; 1.89111; tau-neutron mass ratio [] uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 014. triton_mass; 5.007356665E-27; triton mass [kg] uncertainty=0.000 000 062 e-27. triton_mass_energy_equivalent; 4.500387735E-10; triton mass energy equivalent [J] uncertainty=0.000 000 055 e-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:35995,Energy Efficiency,energy,energy,35995,uncertainty=0.000 17. tau_proton_mass_ratio; 1.89372; tau-proton mass ratio [] uncertainty=0.000 17. Thomson_cross_section; 6.6524587158E-29; Thomson cross section [m^2] uncertainty=0.000 000 000 91 e-28. triton_electron_mass_ratio; 5496.92153588; triton-electron mass ratio [] uncertainty=0.000 000 26. triton_g_factor; 5.957924920; triton g factor [] uncertainty=0.000 000 028. triton_mag_mom; 1.504609503E-26; triton mag. mom. [J T^{-1}] uncertainty=0.000 000 012 e-26. triton_mag_mom_to_Bohr_magneton_ratio; 0.0016223936616; triton mag. mom. to Bohr magneton ratio [] uncertainty=0.000 000 0076 e-3. triton_mag_mom_to_nuclear_magneton_ratio; 2.978962460; triton mag. mom. to nuclear magneton ratio [] uncertainty=0.000 000 014. triton_mass; 5.007356665E-27; triton mass [kg] uncertainty=0.000 000 062 e-27. triton_mass_energy_equivalent; 4.500387735E-10; triton mass energy equivalent [J] uncertainty=0.000 000 055 e-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). ,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:36912,Energy Efficiency,joule,joule,36912,-10. triton_mass_energy_equivalent_in_MeV; 2808.921112; triton mass energy equivalent in MeV [MeV] uncertainty=0.000 017. triton_mass_in_u; 3.01550071632; triton mass in u [u] uncertainty=0.000 000 000 11. triton_molar_mass; 0.00301550071632; triton molar mass [kg mol^{-1}] uncertainty=0.000 000 000 11 e-3. triton_proton_mass_ratio; 2.99371703348; triton-proton mass ratio [] uncertainty=0.000 000 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion fa,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:37331,Energy Efficiency,meter,meters,37331, 000 22. unified_atomic_mass_unit; 1.660539040E-27; unified atomic mass unit [kg] uncertainty=0.000 000 020 e-27. von_Klitzing_constant; 25812.8074555; von Klitzing constant [ohm] uncertainty=0.000 0059. weak_mixing_angle; 0.2223; weak mixing angle [] uncertainty=0.0021. Wien_frequency_displacement_law_constant; 5.8789238E+10; Wien frequency displacement law constant [Hz K^{-1}] uncertainty=0.000 0034 e10. Wien_wavelength_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in at,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:37753,Energy Efficiency,joule,joule,37753,length_displacement_law_constant; 0.0028977729; Wien wavelength displacement law constant [m K] uncertainty=0.000 0017 e-3. calorie_joule_relationship; 4.184; calorie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversi,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:37908,Energy Efficiency,joule,joule,37908,orie-joule relationship [J] uncertainty=(exact). h; 6.626070040E-34; h [J] The Planck constant (Js). c; 299792458; c [Hz] Speed of light (ms$^{-1}$). kb; 1.38064852E-23; kb [J] The Boltzmann constant (JK$^{-1}$). R; 8.3144598; R [J mol^-1 K^-1] Universal gas constant (JK$^{-1}$mol$^{-1}$). bohr2angstroms; 0.52917721067; bohr2angstroms [AA] Bohr to Angstroms conversion factor. bohr2m; 5.2917721067E-11; bohr2m [m] Bohr to meters conversion factor. bohr2cm; 5.291772106700E-9; bohr2cm [cm] Bohr to centimeters conversion factor. amu2g; 1.660539040000E-24; amu2g [g] Atomic mass units to grams conversion factor. amu2kg; 1.660539040E-27; amu2kg [kg] Atomic mass units to kg conversion factor. au2amu; 0.000548579909070; au2amu [u] Atomic units (m$@@e$) to atomic mass units conversion factor. hartree2J; 4.359744650E-18; hartree2J [J] Hartree to joule conversion factor. hartree2aJ; 4.359744650; hartree2aJ [aJ] Hartree to attojoule (10$^{-18}$J) conversion factor. cal2J; 4.184; cal2J [J] Calorie to joule conversion factor. dipmom_au2si; 8.478353552E-30; dipmom_au2si [C m] Atomic units to SI units (Cm) conversion factor for dipoles. dipmom_au2debye; 2.541746451895025916414946904; dipmom_au2debye [???] Atomic units to Debye conversion factor for dipoles. dipmom_debye2si; 3.335640951E-30; dipmom_debye2si [???] Debye to SI units (Cm) conversion factor for dipoles. c_au; 137.035999139; c_au [] Speed of light in atomic units. hartree2ev; 27.21138602; hartree2ev [eV] Hartree to eV conversion factor. hartree2wavenumbers; 219474.6313702; hartree2wavenumbers [cm^-1] Hartree to cm$^{-1}$ conversion factor. hartree2kcalmol; 627.5094737775374055927342256; hartree2kcalmol [kcal mol^-1] Hartree to kcal mol$^{-1}$ conversion factor. hartree2kJmol; 2625.4996382852165050; hartree2kJmol [kJ mol^-1] Hartree to kilojoule mol$^{-1}$ conversion factor. hartree2MHz; 6579683920.711; hartree2MHz [MHz] Hartree to MHz conversion factor. kcalmol2wavenumbers; 349.7550882318031839256652313; kcalmol2wavenumber,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html:13323,Modifiability,coupling,coupling,13323, e14. electron_volt_inverse_meter_relationship; 806554.4005; electron volt-inverse meter relationship [m^{-1}] uncertainty=0.000 000 050 e5. electron_volt_joule_relationship; 1.6021766208E-19; electron volt-joule relationship [J] uncertainty=0.000 000 0098 e-19. electron_volt_kelvin_relationship; 11604.5221; electron volt-kelvin relationship [K] uncertainty=0.000 000 67 e4. electron_volt_kilogram_relationship; 1.782661907E-36; electron volt-kilogram relationship [kg] uncertainty=0.000 000 011 e-36. elementary_charge; 1.6021766208E-19; elementary charge [C] uncertainty=0.000 000 0098 e-19. elementary_charge_over_h; 2.417989262E+14; elementary charge over h [A J^{-1}] uncertainty=0.000 000 015 e14. Faraday_constant; 96485.33289; Faraday constant [C mol^{-1}] uncertainty=0.000 59. Faraday_constant_for_conventional_electric_current; 96485.3251; Faraday constant for conventional electric current [C_{90} mol^{-1}] uncertainty=0.0012. Fermi_coupling_constant; 0.000011663787; Fermi coupling constant [GeV^{-2}] uncertainty=0.000 0006 e-5. fine_structure_constant; 0.0072973525664; fine-structure constant [] uncertainty=0.000 000 0017 e-3. first_radiation_constant; 3.741771790E-16; first radiation constant [W m^2] uncertainty=0.000 000 046 e-16. first_radiation_constant_for_spectral_radiance; 1.191042953E-16; first radiation constant for spectral radiance [W m^2 sr^{-1}] uncertainty=0.000 000 015 e-16. hartree_atomic_mass_unit_relationship; 2.9212623197E-8; hartree-atomic mass unit relationship [u] uncertainty=0.000 000 0013 e-8. hartree_electron_volt_relationship; 27.21138602; hartree-electron volt relationship [eV] uncertainty=0.000 000 17. Hartree_energy; 4.359744650E-18; Hartree energy [J] uncertainty=0.000 000 054 e-18. Hartree_energy_in_eV; 27.21138602; Hartree energy in eV [eV] uncertainty=0.000 000 17. hartree_hertz_relationship; 6.579683920711E+15; hartree-hertz relationship [Hz] uncertainty=0.000 000 000 039 e15. hartree_inverse_meter_relationship; 21947463.13702; har,MatchSource.WIKI,psi4manual/1.5.0/autodoc_physconst.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_physconst.html
https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases-1.html:140,Availability,avail,availability,140,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element; <no title>. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. Pople. sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs. 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31ppg; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31ppg_d_p_; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pgss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si;,MatchSource.WIKI,psi4manual/1.5.0/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases-1.html:56802,Deployability,update,updated,56802,"r. psi3-dzp; 6D/10F; H. B; C; N; O; F; Ne. Al; Si; P; S; Cl. sadlej-lpol-fl; 5D/7F; H. C; N; O; F. dgauss-dzvp-autoaux; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. roos-ano-dz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psi4bases-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases.html:140,Availability,avail,availability,140,﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element; <no title>. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. Pople. sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs. 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31ppg; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31ppg_d_p_; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pgss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si;,MatchSource.WIKI,psi4manual/1.5.0/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases.html
https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases.html:56802,Deployability,update,updated,56802,"r. psi3-dzp; 6D/10F; H. B; C; N; O; F; Ne. Al; Si; P; S; Cl. sadlej-lpol-fl; 5D/7F; H. C; N; O; F. dgauss-dzvp-autoaux; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. roos-ano-dz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psi4bases.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psi4bases.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html:5327,Availability,error,error,5327,3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS. 228; PSIF_3B_SAPT_BB_DF_INTS. 229; PSIF_3B_SAPT_CC_DF_INTS. 230; PSIF_3B_SAPT_AMPS. 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. 350; PSIF_CI_HD_FILE; DETCI H diagonal. 351; PSIF_CI_C_FILE; DETCI CI coeffs. 352; PSIF_CI_S_FILE; DETCI sigma coeffs. 353; PSIF_CI_D_FILE; DETCI D correction vectors. 400; PSIF_DCT_DPD; DCT DPD handle. 401; PSIF_,MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html:6532,Deployability,update,updated,6532,"PT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS. 228; PSIF_3B_SAPT_BB_DF_INTS. 229; PSIF_3B_SAPT_CC_DF_INTS. 230; PSIF_3B_SAPT_AMPS. 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. 350; PSIF_CI_HD_FILE; DETCI H diagonal. 351; PSIF_CI_C_FILE; DETCI CI coeffs. 352; PSIF_CI_S_FILE; DETCI sigma coeffs. 353; PSIF_CI_D_FILE; DETCI D correction vectors. 400; PSIF_DCT_DPD; DCT DPD handle. 401; PSIF_DCT_DENSITY; DCT density. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSIOH Intermediate Files. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html:3181,Integrability,contract,contractions,3181,"PSIF_CC_OEI_NEW. 114; PSIF_CC_GAMMA_NEW. 115; PSIF_CC_AINTS_NEW. 116; PSIF_CC_BINTS_NEW. 117; PSIF_CC_CINTS_NEW. 118; PSIF_CC_DINTS_NEW. 119; PSIF_CC_EINTS_NEW. 120; PSIF_CC_FINTS_NEW. 121; PSIF_CC_LAMBDA. 122; PSIF_CC_RAMPS. 123; PSIF_CC_LAMPS. 124; PSIF_CC_LR. 125; PSIF_CC_DIIS_ERR. 126; PSIF_CC_DIIS_AMP. 127; PSIF_CC_TMP. 128; PSIF_CC_TMP0. 129; PSIF_CC_TMP1. 130; PSIF_CC_TMP2. 131; PSIF_CC_TMP3. 132; PSIF_CC_TMP4. 133; PSIF_CC_TMP5. 134; PSIF_CC_TMP6. 135; PSIF_CC_TMP8. 137; PSIF_CC_TMP9. 138; PSIF_CC_TMP10. 139; PSIF_CC_TMP11. 140; PSIF_EOM_D. 141; PSIF_EOM_CME. 142; PSIF_EOM_Cme. 143; PSIF_EOM_CMNEF. 144; PSIF_EOM_Cmnef. 145; PSIF_EOM_CMnEf. 146; PSIF_EOM_SIA. 147; PSIF_EOM_Sia. 148; PSIF_EOM_SIJAB. 149; PSIF_EOM_Sijab. 150; PSIF_EOM_SIjAb. 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html:257,Performance,optimiz,optimization,257,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSIOH Intermediate Files. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING. 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX. 33; PSIF_SO_TEI. 34; PSIF_SO_PK. 35; PSIF_OEI. 36; PSIF_SO_ERF_TEI. 37; PSIF_SO_ERFC_TEI. 38; PSIF_SO_R12. 39; PSIF_SO_R12T1. 40; PSIF_DERINFO. 41; PSIF_SO_PRESORT. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY. 46; PSIF_AO_DGDBZ. 50; PSIF_PSIMRCC_INTEGRALS. 51; PSIF_PSIMRCC_RESTART. 52; PSIF_MCSCF. 53; PSIF_TPDM_HALFTRANS. 60; PSIF_DETCAS. 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-transformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 71; PSIF_TPDM_PRESORT. 72; PSIF_MO_TEI. 73; PSIF_MO_OPDM. 74; PSIF_MO_TPDM. 75; PSIF_MO_LAG. 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM. 79; PSIF_MO_R12. 80; PSIF_MO_R12T2. 81; PSIF_MO_AA_TEI. 82; PSIF_MO_BB_TEI. 83; PSIF_MO_AB_TEI. 84; PSIF_MO_AA_TPDM. 85; PSIF_MO_BB_TPDM. 86; PSIF_MO_AB_TPDM. 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF twopdm presort file. 89; PSIF_AB_PRESORT; AB UHF twopdm presort file. 92; PSIF_SO_PKSUPER1. 93; PSIF_SO_PKSUPER2. 94; PSIF_HALFT0. 95; PSIF_HALFT1. 97; PSIF_DFSCF_BJ; B Matrix containing 3-index tensor in AOs with J^-1/2 for use with DF-SCF. 100; PSIF_CC_INFO. 101; PSIF_CC_OEI. 102; PSIF_CC_AINTS. 103; PSIF_CC_BINTS. 104; PSIF_CC_CINTS. 10",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html:5327,Availability,error,error,5327,3B_SAPT_TRIMER; SAPT Three-Body Trimer. 221; PSIF_3B_SAPT_DIMER_AB; SAPT Three-Body Dimer AB. 222; PSIF_3B_SAPT_DIMER_AC; SAPT Three-Body Dimer AC. 223; PSIF_3B_SAPT_DIMER_BC; SAPT Three-Body Dimer BC. 224; PSIF_3B_SAPT_MONOMER_A; SAPT Three-Body Mon A. 225; PSIF_3B_SAPT_MONOMER_B; SAPT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS. 228; PSIF_3B_SAPT_BB_DF_INTS. 229; PSIF_3B_SAPT_CC_DF_INTS. 230; PSIF_3B_SAPT_AMPS. 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. 350; PSIF_CI_HD_FILE; DETCI H diagonal. 351; PSIF_CI_C_FILE; DETCI CI coeffs. 352; PSIF_CI_S_FILE; DETCI sigma coeffs. 353; PSIF_CI_D_FILE; DETCI D correction vectors. 400; PSIF_DCT_DPD; DCT DPD handle. 401; PSIF_,MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html:6532,Deployability,update,updated,6532,"PT Three-Body Mon B. 226; PSIF_3B_SAPT_MONOMER_C; SAPT Three-Body Mon C. 227; PSIF_3B_SAPT_AA_DF_INTS. 228; PSIF_3B_SAPT_BB_DF_INTS. 229; PSIF_3B_SAPT_CC_DF_INTS. 230; PSIF_3B_SAPT_AMPS. 250; PSIF_DCC_IJAK; CEPA/CC (ij|ak). 251; PSIF_DCC_IJAK2; CEPA/CC (ij|ak). 252; PSIF_DCC_ABCI; CEPA/CC (ia|bc). 253; PSIF_DCC_ABCI2; CEPA/CC (ia|bc). 254; PSIF_DCC_ABCI3; CEPA/CC (ia|bc). 255; PSIF_DCC_ABCI4; CEPA/CC (ia|bc). 256; PSIF_DCC_ABCI5; CEPA/CC (ia|bc). 257; PSIF_DCC_ABCD1; CEPA/CC (ab|cd)+. 258; PSIF_DCC_ABCD2; CEPA/CC (ab|cd)-. 259; PSIF_DCC_IJAB; CEPA/CC (ij|ab). 260; PSIF_DCC_IAJB; CEPA/CC (ia|jb). 261; PSIF_DCC_IJKL; CEPA/CC (ij|kl). 262; PSIF_DCC_OVEC; CEPA/CC old vectors for diis. 263; PSIF_DCC_EVEC; CEPA/CC error vectors for diis. 264; PSIF_DCC_R2; CEPA/CC residual. 265; PSIF_DCC_TEMP; CEPA/CC temporary storage. 266; PSIF_DCC_T2; CEPA/CC t2 amplitudes. 267; PSIF_DCC_QSO; DFCC 3-index integrals. 270; PSIF_DCC_SORT_START; CEPA/CC integral sort starting file number. 271; PSIF_SAPT_CCD; SAPT2+ CCD Utility File. 272; PSIF_HESS; Hessian Utility File. 273; PSIF_OCC_DPD; OCC DPD. 274; PSIF_OCC_DENSITY; OCC Density. 275; PSIF_OCC_IABC; OCC out-of-core <IA|BC>. 276; PSIF_DFOCC_INTS; DFOCC Integrals. 277; PSIF_DFOCC_AMPS; DFOCC Amplitudes. 278; PSIF_DFOCC_DENS; DFOCC PDMs. 279; PSIF_DFOCC_IABC; DFOCC (IA|BC). 280; PSIF_DFOCC_ABIC; DFOCC <AB|IC>. 281; PSIF_DFOCC_MIABC; DFOCC M_iabc. 282; PSIF_DFOCC_TEMP; DFOCC temporary storage. 300; PSIF_SAD; A SAD file (File for SAD related quantities. 350; PSIF_CI_HD_FILE; DETCI H diagonal. 351; PSIF_CI_C_FILE; DETCI CI coeffs. 352; PSIF_CI_S_FILE; DETCI sigma coeffs. 353; PSIF_CI_D_FILE; DETCI D correction vectors. 400; PSIF_DCT_DPD; DCT DPD handle. 401; PSIF_DCT_DENSITY; DCT density. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSIOH Intermediate Files. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html:3181,Integrability,contract,contractions,3181,"PSIF_CC_OEI_NEW. 114; PSIF_CC_GAMMA_NEW. 115; PSIF_CC_AINTS_NEW. 116; PSIF_CC_BINTS_NEW. 117; PSIF_CC_CINTS_NEW. 118; PSIF_CC_DINTS_NEW. 119; PSIF_CC_EINTS_NEW. 120; PSIF_CC_FINTS_NEW. 121; PSIF_CC_LAMBDA. 122; PSIF_CC_RAMPS. 123; PSIF_CC_LAMPS. 124; PSIF_CC_LR. 125; PSIF_CC_DIIS_ERR. 126; PSIF_CC_DIIS_AMP. 127; PSIF_CC_TMP. 128; PSIF_CC_TMP0. 129; PSIF_CC_TMP1. 130; PSIF_CC_TMP2. 131; PSIF_CC_TMP3. 132; PSIF_CC_TMP4. 133; PSIF_CC_TMP5. 134; PSIF_CC_TMP6. 135; PSIF_CC_TMP8. 137; PSIF_CC_TMP9. 138; PSIF_CC_TMP10. 139; PSIF_CC_TMP11. 140; PSIF_EOM_D. 141; PSIF_EOM_CME. 142; PSIF_EOM_Cme. 143; PSIF_EOM_CMNEF. 144; PSIF_EOM_Cmnef. 145; PSIF_EOM_CMnEf. 146; PSIF_EOM_SIA. 147; PSIF_EOM_Sia. 148; PSIF_EOM_SIJAB. 149; PSIF_EOM_Sijab. 150; PSIF_EOM_SIjAb. 151; PSIF_EOM_R; holds residual. 152; PSIF_CC_GLG; left-hand psi for g.s. parts of cc-density. 153; PSIF_CC_GL; left-hand psi for e.s. parts of cc-density. 154; PSIF_CC_GR; right-hand eigenvector for cc-density. 155; PSIF_EOM_TMP1; intermediates just for single contractions. 156; PSIF_EOM_TMP0; temporary copies of density. 157; PSIF_EOM_TMP_XI; intermediates for xi computation. 158; PSIF_EOM_XI; xi = dE/dt amplitudes. 159; PSIF_EOM_TMP; intermediates used more than once. 160; PSIF_CC3_HET1; [H,e^T1]. 161; PSIF_CC3_HC1; [H,C1]. 162; PSIF_CC3_HC1ET1; [[H,e^T1],C1]. 163; PSIF_CC3_MISC; various intermediates needed in CC3 codes. 164; PSIF_CC2_HET1; [H,e^T1]. 165; PSIF_WK_PK; File to contain wK pre-sorted integrals for PK. 180; PSIF_SCF_MOS; Save SCF orbitals for re-use later as guess, etc. 181; PSIF_DFMP2_AIA; Unfitted three-index MO ints for DFMP2. 182; PSIF_DFMP2_QIA; Fitted-three index MO ints for DFMP2. 183; PSIF_ADC; ADC. 184; PSIF_ADC_SEM; ADC. 190; PSIF_SAPT_DIMER; SAPT Two-Body Dimer. 191; PSIF_SAPT_MONOMERA; SAPT Two-Body Mon A. 192; PSIF_SAPT_MONOMERB; SAPT Two-Body Mon B. 193; PSIF_SAPT_AA_DF_INTS; SAPT AA DF Ints. 194; PSIF_SAPT_AB_DF_INTS; SAPT AB DF Ints. 195; PSIF_SAPT_BB_DF_INTS; SAPT BB DF Ints. 196; PSIF_SAPT_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html:257,Performance,optimiz,optimization,257,"﻿. PSIOH Intermediate Files. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSIOH Intermediate Files. PSIOH Intermediate Files¶. Auxiliary files in PSI4¶. File; File Label; Contents. 1; PSIF_OPTKING. 11; PSIF_GRAD; geometry optimization, geometry, and gradient; currently is an ASCII file like output.grad. 12; PSIF_INTCO; internal coordinates file, currently is ASCII file like output.intco. 16; PSIF_3INDEX. 33; PSIF_SO_TEI. 34; PSIF_SO_PK. 35; PSIF_OEI. 36; PSIF_SO_ERF_TEI. 37; PSIF_SO_ERFC_TEI. 38; PSIF_SO_R12. 39; PSIF_SO_R12T1. 40; PSIF_DERINFO. 41; PSIF_SO_PRESORT. 43; PSIF_CIVECT; CI vector from DETCI along with string and determinant info. 44; PSIF_AO_DGDBX; B-field derivative AO integrals over GIAO Gaussians – only bra-ket permutational symmetry holds. 45; PSIF_AO_DGDBY. 46; PSIF_AO_DGDBZ. 50; PSIF_PSIMRCC_INTEGRALS. 51; PSIF_PSIMRCC_RESTART. 52; PSIF_MCSCF. 53; PSIF_TPDM_HALFTRANS. 60; PSIF_DETCAS. 61; PSIF_LIBTRANS_DPD; libtrans: All transformed integrals in DPD format are sent here by default. 62; PSIF_LIBTRANS_A_HT; libtrans: Alpha half-transformed integrals in DPD format. 63; PSIF_LIBTRANS_B_HT; libtrans: Beta half-transformed integrals in DPD format. 64; PSIF_LIBDIIS; Storage for libdiis. 71; PSIF_TPDM_PRESORT. 72; PSIF_MO_TEI. 73; PSIF_MO_OPDM. 74; PSIF_MO_TPDM. 75; PSIF_MO_LAG. 76; PSIF_AO_OPDM; PSIF_AO_OPDM also contains AO Lagrangian. 77; PSIF_AO_TPDM. 79; PSIF_MO_R12. 80; PSIF_MO_R12T2. 81; PSIF_MO_AA_TEI. 82; PSIF_MO_BB_TEI. 83; PSIF_MO_AB_TEI. 84; PSIF_MO_AA_TPDM. 85; PSIF_MO_BB_TPDM. 86; PSIF_MO_AB_TPDM. 87; PSIF_AA_PRESORT; AA UHF twopdm presort file. 88; PSIF_BB_PRESORT; BB UHF twopdm presort file. 89; PSIF_AB_PRESORT; AB UHF twopdm presort file. 92; PSIF_SO_PKSUPER1. 93; PSIF_SO_PKSUPER2. 94; PSIF_HALFT0. 95; PSIF_HALFT1. 97; PSIF_DFSCF_BJ; B Matrix containing 3-index tensor in AOs with J^-1/2 for use with DF-SCF. 100; PSIF_CC_INFO. 101; PSIF_CC_OEI. 102; PSIF_CC_AINTS. 103; PSIF_CC_BINTS. 104; PSIF_CC_CINTS. 10",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psifiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psifiles.html
https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html:638,Deployability,update,updated,638,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html:190,Modifiability,variab,variable,190,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html:215,Modifiability,variab,variable,215,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule.html:638,Deployability,update,updated,638,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule.html:190,Modifiability,variab,variable,190,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule.html:215,Modifiability,variab,variable,215,"﻿. PSI Variables by Module. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. PSI Variables by Module¶. Note; Lowercase letters in PSI variable names represent variable portions of the name.; See PSI Variables by Alpha for fuller description. ADC; CCENERGY; DCT; DETCI; DFMP2; DFOCC; DLPNO; DMRG; EFP; FISAPT; FNOCC; GDMA; MCSCF; MRCC; OCC; OPTKING; PCM; PE; PSIMRCC; SAPT; SCF; THERMO; OEPROP; CFOUR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; PSI Variables by Module. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_psivariables_bymodule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_psivariables_bymodule.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_adcc-1.html:2403,Deployability,update,updated,2403,"ates for the cyanide radical. adcc/cn-adc2; UADC(2)/cc-pvdz calculation of 5 states for the cyanide radical. adcc/h2o-cvs-adc2x; CVS-ADC(2)-x/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-adc2-any; ADC(2)/cc-pvdz calculation of 6 states of water of any spin kind. adcc/h2o-cvs-adc2; CVS-ADC(2)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-adc2; ADC(2)/cc-pvdz calculation of 10 water singlet excited states. adcc/h2o-adc1; ADC(1)/cc-pvdz calculation of 10 water singlet excited states. adcc/h2o-fv-adc2x; ADC(2)-x/cc-pvdz calculation of 5 water singlet excited states keeping 5 virtual orbitals frozen for the calculation. adcc/h2o-cvs-adc1; CVS-ADC(1)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/hf-adc2-spin-flip; spin-flip ADC(2)/6-31G calculation of hydrogen-fluoride near the bond dissociation. We tackle the singlet ground state and its singlet excited states by a triplet UHF reference, flipping the spin during excitation. The first excited states of the ADC(2) calculation now describes the actual ground state. adcc/formaldehyde-pe-adc2; PE-ADC(2)/cc-pvdz formaldehyde in presence of 6 water molecules Reference data from Q-Chem calculation. adcc/h2o-cvs-adc2x-triplets; CVS-ADC(2)-x/cc-pvdz calculation of 7 water triplet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-cvs-adc3; CVS-ADC(3)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-fc-adc2; ADC(2)/cc-pvdz calculation of 5 water singlet excited states employing the frozen-core approximation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ADCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_adcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_adcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_adcc.html:2403,Deployability,update,updated,2403,"ates for the cyanide radical. adcc/cn-adc2; UADC(2)/cc-pvdz calculation of 5 states for the cyanide radical. adcc/h2o-cvs-adc2x; CVS-ADC(2)-x/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-adc2-any; ADC(2)/cc-pvdz calculation of 6 states of water of any spin kind. adcc/h2o-cvs-adc2; CVS-ADC(2)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-adc2; ADC(2)/cc-pvdz calculation of 10 water singlet excited states. adcc/h2o-adc1; ADC(1)/cc-pvdz calculation of 10 water singlet excited states. adcc/h2o-fv-adc2x; ADC(2)-x/cc-pvdz calculation of 5 water singlet excited states keeping 5 virtual orbitals frozen for the calculation. adcc/h2o-cvs-adc1; CVS-ADC(1)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/hf-adc2-spin-flip; spin-flip ADC(2)/6-31G calculation of hydrogen-fluoride near the bond dissociation. We tackle the singlet ground state and its singlet excited states by a triplet UHF reference, flipping the spin during excitation. The first excited states of the ADC(2) calculation now describes the actual ground state. adcc/formaldehyde-pe-adc2; PE-ADC(2)/cc-pvdz formaldehyde in presence of 6 water molecules Reference data from Q-Chem calculation. adcc/h2o-cvs-adc2x-triplets; CVS-ADC(2)-x/cc-pvdz calculation of 7 water triplet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-cvs-adc3; CVS-ADC(3)/cc-pvdz calculation of 10 water singlet excited states tackling the Oxygen 1s edge core exitations. adcc/h2o-fc-adc2; ADC(2)/cc-pvdz calculation of 5 water singlet excited states employing the frozen-core approximation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ADCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_adcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_adcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1847,Deployability,update,updated,1847,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1038,Integrability,depend,dependence,1038,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1094,Integrability,depend,dependent,1094,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:183,Performance,optimiz,optimization-hf-uhf,183,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:213,Performance,optimiz,optimization,213,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:849,Performance,optimiz,optimization-hf-rohf,849,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:880,Performance,optimiz,optimization,880,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1305,Performance,optimiz,optimization-dft-lrc,1305,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1336,Performance,optimiz,optimization,1336,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1443,Performance,optimiz,optimization-dft,1443,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1470,Performance,optimiz,optimization,1470,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1545,Performance,optimiz,optimization-hf,1545,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1571,Performance,optimiz,optimization,1571,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html:1080,Testability,test,test,1080,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1847,Deployability,update,updated,1847,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1038,Integrability,depend,dependence,1038,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1094,Integrability,depend,dependent,1094,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:183,Performance,optimiz,optimization-hf-uhf,183,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:213,Performance,optimiz,optimization,213,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:849,Performance,optimiz,optimization-hf-rohf,849,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:880,Performance,optimiz,optimization,880,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1305,Performance,optimiz,optimization-dft-lrc,1305,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1336,Performance,optimiz,optimization,1336,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1443,Performance,optimiz,optimization-dft,1443,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1470,Performance,optimiz,optimization,1470,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1545,Performance,optimiz,optimization-hf,1545,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1571,Performance,optimiz,optimization,1571,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html:1080,Testability,test,test,1080,"﻿. BRIANQC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. BRIANQC¶. Input File; Description. brianqc/geometry-optimization-hf-uhf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-rohf; Hydroxyl with sto-3g. brianqc/single-point-dft-uhf; Hydroxyl with sto-3g, b3lyp with sg1 grid. brianqc/pentacene; Pentacene with cc-pvdz, b3lyp with eml(50,110) grid. brianqc/single-point-dft; Water with sto-3g, b3lyp with sg1 grid. brianqc/high-angular-momentum; Water with cc-pvqz. brianqc/frequency-hf-uhf; Hydroxyl with sto-3g frequencies. brianqc/single-point-dft-lrc; Water with sto-3g, wb97x long-range corrected functional with sg1 grid the omega of the functional is manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-hf-rohf; Geometry optimization for hydroxyl with sto-3g. brianqc/single-point-hf-uhf; Hydroxyl with sto-3g. brianqc/frequency-hf; Water with sto-3g frequencies. brianqc/linear-dependence; Water with modified sto-3g to test linearly-dependent basis. brianqc/single-point-dft-nlc; Water with sto-3g, lc-vv10 with sg1 grid the vv10 b and c parameters are manually set to also check dft parameter passing through the BrianQC API. brianqc/geometry-optimization-dft-lrc; Geometry optimization for ethane with sto-3g, wb97x long-range corrected functional with sg1 grid. brianqc/geometry-optimization-dft; Geometry optimization for ethane with sto-3g, b3lyp with sg1 grid. brianqc/geometry-optimization-hf; Geometry optimization for ethane with sto-3g. brianqc/single-point-hf; Water with sto-3g. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; BRIANQC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_brianqc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1104,Deployability,update,updated,1104,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:5192,Deployability,update,updated,5192,"hf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:909,Energy Efficiency,energy,energy,909,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1133,Energy Efficiency,energy,energy,1133,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1736,Energy Efficiency,energy,energy,1736,"3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:2374,Energy Efficiency,energy,energy,2374," single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:2901,Energy Efficiency,energy,energy,2901,"HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy componen",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3129,Energy Efficiency,energy,energy,3129," cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3649,Energy Efficiency,energy,energy,3649,"single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 wit",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3880,Energy Efficiency,energy,energy,3880,"four/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:4354,Energy Efficiency,energy,energy,4354,"hf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1085,Modifiability,variab,variables,1085,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:581,Performance,optimiz,optimization,581,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1185,Performance,perform,performed,1185,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1532,Performance,optimiz,optimization,1532,"pe. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:2313,Performance,optimiz,optimization,2313," Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rh",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:2814,Performance,optimiz,optimization,2814,"rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian wi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3024,Performance,optimiz,optimization,3024,"t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3327,Performance,optimiz,optimization,3327,"c-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of form",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3384,Performance,optimiz,optimization,3384,"cks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:4701,Performance,optimiz,optimization,4701,"hf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:240,Testability,test,testing,240,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:1307,Testability,test,tests,1307,"cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3218,Testability,test,testing,3218," in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html:3737,Testability,test,testing,3737,"oint CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1104,Deployability,update,updated,1104,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:5192,Deployability,update,updated,5192,"hf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:909,Energy Efficiency,energy,energy,909,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1133,Energy Efficiency,energy,energy,1133,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1736,Energy Efficiency,energy,energy,1736,"3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:2374,Energy Efficiency,energy,energy,2374," single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:2901,Energy Efficiency,energy,energy,2901,"HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy componen",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3129,Energy Efficiency,energy,energy,3129," cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3649,Energy Efficiency,energy,energy,3649,"single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 wit",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3880,Energy Efficiency,energy,energy,3880,"four/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:4354,Energy Efficiency,energy,energy,4354,"hf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1085,Modifiability,variab,variables,1085,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:581,Performance,optimiz,optimization,581,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1185,Performance,perform,performed,1185,"; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1532,Performance,optimiz,optimization,1532,"pe. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:2313,Performance,optimiz,optimization,2313," Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rh",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:2814,Performance,optimiz,optimization,2814,"rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian wi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3024,Performance,optimiz,optimization,3024,"t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3327,Performance,optimiz,optimization,3327,"c-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of form",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3384,Performance,optimiz,optimization,3384,"cks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:4701,Performance,optimiz,optimization,4701,"hf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. Gradients after three opt cycles are compared with those from psi4. cfour/pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:240,Testability,test,testing,240,"﻿. CFOUR. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CFOUR. CFOUR¶. Input File; Description. cfour/mints5; geometries from a variety of input formats. references from psi4, testing whether geometry strings read identically for psi4/cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:1307,Testability,test,tests,1307,"cfour. cfour/sp-rohf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cfour/mints5-grad; geometry after three optimization cycles for a variety of input formats, references from psi4. cfour/kw-4; Basis set spherical/Cartesian with basis and puream. cfour/sp-rhf-cc3; single-point CC3/qz2p on water. cfour/sp-rohf-scf; single-point HF/qz2p on NH2. cfour/sp-rohf-ccsd-ao; single-point CCSD/qz2p on NH2 with aobasis. cfour/scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is apecified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cfour/pywrap-cbs1; Various basis set extrapolation tests only in Cfour instead of Psi4. cfour/sp-uhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on NH2 with ecc. cfour/sp-rhf-ccsd_t_-fc; single-point CCSD(T)/qz2p on water with ecc, aobasis, and frozen-core. cfour/opt-rhf-ccsd_t_; optimization CCSD(T)/dzp on water. cfour/sp-rhf-ccsd-ao; single-point CCSD/qz2p on water with aobasis. cfour/sp-rohf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/psi-mp4; MP4 energy components. Checks that computed identically between cfour and psi4. cfour/sp-rohf-ccsd; single-point CCSD/qz2p on NH2. cfour/sp-uhf-scf; single-point HF/qz2p on NH2. cfour/sp-rhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qc2p on water with ecc, aobasis. cfour/sp-rhf-ccsd_t_; single-point CCSD(T)/qz2p on water. cfour/sp-rhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on water with aobasis. cfour/sp-rhf-ccsdt; single-point CCSDT/qz2p on water. cfour/puream; Basis set spherical/Cartesian behavior in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3218,Testability,test,testing,3218," in cfour. cfour/sp-rohf-mp2-sc; single-point MP2/qz2p on NH2. cfour/opt-rhf-mp2; optimization MP2/cc-pvtz on water. cfour/psi-rhf-scsmp2; MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-mp2; single-point MP2/qz2p on NH2. cfour/sp-uhf-ccsdt; single-point CCSDT/qz2p on NH2. cfour/kw-5; Basis set spherical/Cartesian with basis and cfour_spherical. cfour/sp-uhf-ccsd_t_; single-point CCSD(T)/qz2p. cfour/sp-rhf-mp2; single-point MP2/qz2p on water. cfour/sp-uhf-ccsd; single-point CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html:3737,Testability,test,testing,3737,"oint CCSD/qz2p on NH2. cfour/psi-a24-grad; geometry after three optimization cycles on A24 database, cfour matches psi4. cfour/psi-uhf-scsmp2; UHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/mp2-1; All-electron MP2 6-31G** geometry optimization of water. cfour/kw-7; Translating psi4 options to cfour, part i. cfour/psi-uhf-mp3; UHF MP3 energy components. Checks that converted identically between cfour and psi4. cfour/kw-2; testing best practices options, part ii. cfour/sp-rhf-scf; single-point HF/qz2p on water. cfour/opt-rhf-scf; optimization HF/svp on water. cfour/opt-rhf-ccsd_t_-ecc; optimization CCSD(T)/dzp on water with ecc, aobasis. cfour/sp-rhf-ccsd; single point CCSD/qz2p on water. cfour/sp-rohf-ccsd_t_; single-point CCSD(T)/qz2p on NH2. cfour/kw-3; Basis set spherical/Cartesian with cfour_basis and cfour_spherical. cfour/psi-rhf-mp3; MP3 energy components. Checks that computed identically between cfour and psi4. cfour/kw-1; testing best practices options, part i. cfour/kw-6; Basis set spherical/Cartesian with cfour_basis and puream. cfour/psi-rohf-scsmp2; ROHF MP2 energy components. Checks that computed identically between cfour and psi4. cfour/sp-uhf-ccsd_t_-ao-ecc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis. cfour/sp-uhf-cc3; single-point CC3/qz2p on NH2. cfour/sp-rohf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/kw-8; Translating psi4 options to cfour, part ii. cfour/sp-uhf-ccsd_t_-ao; single-point CCSD(T)/qz2p on NH2 with aobasis. cfour/dfmp2-1; MP2/cc-PVDZ computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cfour/sp-rhf-ccsd_t_-ecc; single-point CCSD(T)/qz2p on water with ecc module. cfour/sp-rohf-mp4-sc; single-point MP4/qz2p on NH2. cfour/sp-rohf-ccsd_t_-fc; single-point CCSD(T)/qz2p on NH2 with ecc, aobasis, frozen-core. cfour/psi-ghost-grad; MP2 optimization of dimers with one momomer ghosted. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cfour.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cfour.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_chemps2-1.html:559,Deployability,update,updated,559,"﻿. CHEMPS2. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CHEMPS2. CHEMPS2¶. Input File; Description. chemps2/caspt2-small; dmrg-caspt2 on nitrogen. chemps2/natural-orbital; dmrg-scf on N2. chemps2/scf-n2; dmrg-scf on N2. chemps2/ci-h2o; dmrg-ci on water. chemps2/caspt2-n2; dmrg-caspt2 on nitrogen. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CHEMPS2. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_chemps2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_chemps2-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_chemps2.html:559,Deployability,update,updated,559,"﻿. CHEMPS2. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CHEMPS2. CHEMPS2¶. Input File; Description. chemps2/caspt2-small; dmrg-caspt2 on nitrogen. chemps2/natural-orbital; dmrg-scf on N2. chemps2/scf-n2; dmrg-scf on N2. chemps2/ci-h2o; dmrg-ci on water. chemps2/caspt2-n2; dmrg-caspt2 on nitrogen. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; CHEMPS2. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_chemps2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_chemps2.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html:958,Deployability,update,updated,958,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html:652,Energy Efficiency,energy,energy,652,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html:689,Testability,test,tests,689,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html:755,Testability,test,tests,755,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html:958,Deployability,update,updated,958,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html:652,Energy Efficiency,energy,energy,652,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html:689,Testability,test,tests,689,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html:755,Testability,test,tests,755,"﻿. COOKBOOK. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. COOKBOOK¶. Input File; Description. cookbook/rohf-orb-rot; Test if DGAS’s orbital rotation code matches expected values. The first two calculations compute the X (symm A’’) and A (symm A’) states of HO2 in Cs by restricting the occupations of the two states. The second two calculations compute the X and A states of HO2 in C1. Computation of the A state requires a rotation of the HOMO and SOMO by 90 degrees (i.e., by swapping these two orbitals). The orb_rotate() function accomplishes this. cookbook/manual-fd-hess-energy; SCF STO-3G finite-difference tests. cookbook/manual-fd-hess-grad; SCF STO-3G finite-difference tests. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; COOKBOOK. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_cookbook.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_cookbook.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9522,Availability,error,error,9522,"e. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:26422,Availability,checkpoint,checkpoint,26422,"* H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42666,Availability,avail,available,42666,"dient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:2308,Deployability,update,update,2308,"n of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:5227,Deployability,update,updated,5227,"plit-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk al",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6023,Deployability,update,update,6023,"his test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6417,Deployability,update,updated,6417,"he NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordin",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7526,Deployability,update,updated,7526,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8104,Deployability,update,updated,8104,"the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10121,Deployability,update,updated,10121,"n example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation invo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11358,Deployability,update,updated,11358,"ci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11881,Deployability,update,update,11881,"poles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15432,Deployability,update,update,15432,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:17365,Deployability,update,updated,17365," fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18440,Deployability,update,update,18440,"ron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20248,Deployability,update,update,20248,"le, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:21217,Deployability,update,updated,21217,"; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:22860,Deployability,update,updated,22860,"metry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAP",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23637,Deployability,update,update,23637," frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix mult",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32497,Deployability,update,update,32497,"2 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent par",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32609,Deployability,update,update,32609,"an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35504,Deployability,update,update,35504,"Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy betw",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36211,Deployability,install,install,36211,"KFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sow",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37392,Deployability,update,update,37392,"lated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molec",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:45395,Deployability,update,updated,45395,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:551,Energy Efficiency,energy,energy,551,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:958,Energy Efficiency,charge,charge,958,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:974,Energy Efficiency,energy,energy,974,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1206,Energy Efficiency,energy,energy,1206,"s in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1447,Energy Efficiency,energy,energy,1447,"cification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1533,Energy Efficiency,energy,energy,1533,"-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1638,Energy Efficiency,energy,energy,1638,"-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:2947,Energy Efficiency,energy,energy,2947," structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Si",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:3268,Energy Efficiency,energy,energy,3268,"culation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sher",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:3934,Energy Efficiency,energy,energy,3934," methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:5343,Energy Efficiency,energy,energy,5343,"condary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6160,Energy Efficiency,energy,energy,6160,"for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient fo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6573,Energy Efficiency,energy,energy,6573," Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7179,Energy Efficiency,energy,energy,7179,"utations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-3",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7199,Energy Efficiency,energy,energy,7199,"disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspa",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7331,Energy Efficiency,energy,energy,7331," NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7555,Energy Efficiency,energy,energy,7555,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8418,Energy Efficiency,energy,energy,8418,"oordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8536,Energy Efficiency,energy,energy,8536,"ntial energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8610,Energy Efficiency,energy,energy,8610," coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9054,Energy Efficiency,energy,energy,9054," phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9554,Energy Efficiency,energy,energy,9554,"d water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9678,Energy Efficiency,energy,energy,9678,"h Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9942,Energy Efficiency,energy,energy,9942,"ning values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10254,Energy Efficiency,energy,energy,10254,"xyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-correct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10494,Energy Efficiency,energy,energy,10494,"arrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to matc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10938,Energy Efficiency,energy,energy,10938,"y for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-vi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11836,Energy Efficiency,energy,energy,11836," Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:12746,Energy Efficiency,energy,energy,12746,"ent of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:13030,Energy Efficiency,charge,charged,13030,"n the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:13169,Energy Efficiency,energy,energy,13169,"physical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-ma",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14128,Energy Efficiency,energy,energy,14128,"e2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14385,Energy Efficiency,energy,energy,14385,"mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now a",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14801,Energy Efficiency,energy,energy,14801,"m). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14967,Energy Efficiency,energy,energy,14967,". pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15039,Energy Efficiency,energy,energy,15039,"st of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15139,Energy Efficiency,energy,energy,15139,"(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15784,Energy Efficiency,energy,energy,15784,"nput. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16445,Energy Efficiency,energy,energy,16445,"ate ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for eac",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:17019,Energy Efficiency,energy,energy,17019,"WN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:17075,Energy Efficiency,energy,energy,17075,"e values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:17398,Energy Efficiency,charge,charge,17398," fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18157,Energy Efficiency,energy,energy,18157,"O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18194,Energy Efficiency,energy,energy,18194,"n, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RH",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18620,Energy Efficiency,energy,energy,18620,"CI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18925,Energy Efficiency,energy,energy,18925," point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to v",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19082,Energy Efficiency,energy,energy,19082,"h a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19159,Energy Efficiency,energy,energy,19159,"c-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Heli",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19225,Energy Efficiency,energy,energy,19225,"ion. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ grad",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20045,Energy Efficiency,energy,energy,20045,"int. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the differen",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:21141,Energy Efficiency,energy,energy,21141,"an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the for",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:21482,Energy Efficiency,energy,energy,21482,"ocedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:21606,Energy Efficiency,energy,energy,21606,"au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. Thi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:22227,Energy Efficiency,energy,energy,22227,"updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:22430,Energy Efficiency,energy,energy,22430,"gy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation).",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23057,Energy Efficiency,energy,energy,23057,"ragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23297,Energy Efficiency,energy,energy,23297,"hine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23930,Energy Efficiency,energy,energy,23930,"-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:24497,Energy Efficiency,energy,energy,24497,"p; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25000,Energy Efficiency,energy,energy,25000," with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25745,Energy Efficiency,energy,energy,25745,"and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:26346,Energy Efficiency,energy,energy,26346,"ation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-he",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:26561,Energy Efficiency,energy,energy,26561," of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:26840,Energy Efficiency,energy,energy,26840," described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:27446,Energy Efficiency,energy,energy,27446,"is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algori",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:27950,Energy Efficiency,charge,charge,27950,"2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:28598,Energy Efficiency,energy,energy,28598,"onverged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:28725,Energy Efficiency,energy,energy,28725,"g; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:28968,Energy Efficiency,energy,energy,28968,"2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HO",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:29445,Energy Efficiency,energy,energy,29445,"tly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:29954,Energy Efficiency,energy,energy,29954,"plet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30856,Energy Efficiency,energy,energy,30856,"he presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calcu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30922,Energy Efficiency,energy,energy,30922,"s constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-p",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31137,Energy Efficiency,energy,energy,31137,"Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31945,Energy Efficiency,energy,energy,31945,"^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32414,Energy Efficiency,energy,energy,32414," sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O part",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32769,Energy Efficiency,energy,energy,32769,"d 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT phy",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32856,Energy Efficiency,energy,energy,32856,"lculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being com",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:33393,Energy Efficiency,energy,energy,33393," UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:33429,Energy Efficiency,energy,energy,33429," UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:33983,Energy Efficiency,energy,energy,33983,"radient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particula",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:34668,Energy Efficiency,energy,energy,34668,"O radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:34816,Energy Efficiency,energy,energy,34816,"onents (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35155,Energy Efficiency,energy,energy,35155," CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35372,Energy Efficiency,energy,energy,35372,"the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT co",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35641,Energy Efficiency,energy,energy,35641,"mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35895,Energy Efficiency,energy,energy,35895,"cal with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36269,Energy Efficiency,energy,energy,36269,"es. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the gu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36395,Energy Efficiency,energy,energy,36395,"ulation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals a",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36501,Energy Efficiency,energy,energy,36501,"d simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36655,Energy Efficiency,energy,energy,36655,"tions. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36914,Energy Efficiency,energy,energy,36914,"lly displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37590,Energy Efficiency,energy,energy,37590,"c51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37898,Energy Efficiency,energy,energy,37898,"for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, a",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38679,Energy Efficiency,energy,energy,38679,"-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38749,Energy Efficiency,energy,energy,38749,"ll-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38788,Energy Efficiency,energy,energy,38788,"ore. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:39468,Energy Efficiency,energy,energy,39468,"F->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:39829,Energy Efficiency,energy,energy,39829,"scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40180,Energy Efficiency,energy,energy,40180,"ts directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first per",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41295,Energy Efficiency,energy,energy,41295,"2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ ge",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41523,Energy Efficiency,energy,energy-large,41523,"unctional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; rep",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41820,Energy Efficiency,energy,energy,41820,"esponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Tri",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42194,Energy Efficiency,energy,energy,42194,"erformed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42756,Energy Efficiency,energy,energy,42756,"2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42822,Energy Efficiency,energy,energy,42822,"g automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:43074,Energy Efficiency,energy,energy,43074,"P and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:43250,Energy Efficiency,energy,energy,43250,"the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file does",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:43865,Energy Efficiency,energy,energy,43865,"y matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44457,Energy Efficiency,energy,energy,44457,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10764,Integrability,depend,dependencies,10764,"system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:12447,Integrability,depend,depend,12447," internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined usin",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:12550,Integrability,depend,depend,12550,"et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16823,Integrability,interface,interface,16823," of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19200,Integrability,wrap,wrapper,19200,"ion. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ grad",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20374,Integrability,interface,interface,20374," @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of diff",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20391,Integrability,interface,interface,20391," @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of diff",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23022,Integrability,wrap,wrappers,23022,"ragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:33331,Integrability,rout,routing,33331," two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:34559,Integrability,depend,dependent,34559," two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant usin",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44160,Integrability,depend,depend,44160,"r (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are co",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44263,Integrability,depend,depend,44263,"for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7507,Modifiability,variab,variables,7507,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15329,Modifiability,variab,variables,15329,"e. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15412,Modifiability,variab,variables,15412,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:21901,Modifiability,variab,variables,21901,"he O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36179,Modifiability,plugin,plugins,36179,"KFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sow",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1869,Performance,optimiz,optimization,1869,"cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1947,Performance,optimiz,optimized,1947,"cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:2284,Performance,perform,performs,2284,"n of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:5989,Performance,perform,performs,5989,"his test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6674,Performance,optimiz,optimizations,6674," Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6983,Performance,perform,performed,6983,"rms both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7607,Performance,perform,performed,7607,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8313,Performance,perform,performed,8313,"VDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10005,Performance,optimiz,optimization,10005,"without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10181,Performance,optimiz,optimization,10181,"rgeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to vali",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:10713,Performance,optimiz,optimized,10713,". scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11018,Performance,optimiz,optimizations,11018,"or the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11176,Performance,perform,performed,11176,"** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; che",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11857,Performance,perform,performs,11857,"poles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14266,Performance,optimiz,optimization,14266,"ne dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT vari",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16243,Performance,perform,performs,16243,"e, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16261,Performance,optimiz,optimization,16261,"e, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16485,Performance,optimiz,optimization,16485,"dii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties compute",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18008,Performance,optimiz,optimization,18008,"-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dip",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:18416,Performance,perform,performs,18416,"ron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19910,Performance,perform,performed,19910,"ter dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20955,Performance,perform,performing,20955,"t al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23047,Performance,optimiz,optimize,23047,"ragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23354,Performance,optimiz,optimization,23354,"ase. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23703,Performance,optimiz,optimization,23703,"nd CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:23842,Performance,optimiz,optimization,23842,"mega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:24733,Performance,perform,performed,24733,"t individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy me",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25448,Performance,optimiz,optimization,25448,"ter. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO hand",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:26272,Performance,optimiz,optimization,26272,"tric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Te",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:27747,Performance,optimiz,optimization,27747,"st computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess fo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:29067,Performance,optimiz,optimized,29067,"2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HO",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30034,Performance,optimiz,optimizations,30034,"n the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30669,Performance,optimiz,optimization,30669,"b97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32265,Performance,perform,performed,32265,"d with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:33596,Performance,optimiz,optimization,33596," S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Funct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35464,Performance,perform,performs,35464,"Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy betw",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36753,Performance,optimiz,optimization,36753,"hen repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37372,Performance,perform,performs,37372,"lated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molec",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37812,Performance,optimiz,optimizations,37812,"try from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CE",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:39029,Performance,optimiz,optimization,39029,"run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Ex",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40408,Performance,optimiz,optimization,40408,"; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40502,Performance,optimiz,optimization,40502," guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping f",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41186,Performance,perform,performed,41186,"O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** ener",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42243,Performance,optimiz,optimization,42243," cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:43008,Performance,optimiz,optimization,43008," processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and sph",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:43785,Performance,optimiz,optimization,43785,". soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6301,Safety,avoid,avoided,6301,"e to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after se",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:12026,Safety,avoid,avoided,12026,"rtesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35778,Safety,avoid,avoided,35778,"t9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11189,Security,validat,validate,11189,"** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; che",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19923,Security,validat,validate,19923,"ter dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:192,Testability,test,test,192,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:1148,Testability,test,test,1148,"iption. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al.",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:2865,Testability,test,test,2865,"-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:3700,Testability,test,tests,3700," with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:3858,Testability,test,test,3858," mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspac",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:4069,Testability,test,tests,4069,"y and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an examp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:5037,Testability,test,test,5037,"ode for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6345,Testability,test,test,6345," OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6838,Testability,test,test,6838,"s set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retenti",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:6969,Testability,test,test,6969,"rms both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:7783,Testability,test,tests,7783,"a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAP",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8711,Testability,test,test,8711,"-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8750,Testability,test,test,8750,"us basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron sys",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:8836,Testability,test,test,8836,"ergies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9081,Testability,test,test,9081,"; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-3",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:9288,Testability,test,testing,9288,"utation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrati",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11152,Testability,test,test,11152,"** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; che",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:11482,Testability,test,testing,11482,"ci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:13386,Testability,test,test,13386,"up parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy betwe",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14331,Testability,test,test,14331,"Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test th",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:14548,Testability,test,testing,14548,"s. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15201,Testability,test,tests,15201,"fied explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15315,Testability,test,test,15315,"e. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15380,Testability,test,testing,15380,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15545,Testability,benchmark,benchmark,15545," been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing p",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15570,Testability,benchmark,benchmarks,15570," been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing p",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15645,Testability,test,test,15645,"zalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:15850,Testability,test,test,15850," dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16551,Testability,test,testing,16551,"ment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energie",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:16807,Testability,test,test,16807," of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:17629,Testability,test,testing,17629,"imization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:19886,Testability,test,test,19886,"ter dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20401,Testability,test,testing,20401," @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of diff",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:20949,Testability,test,test,20949,"t al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:21075,Testability,test,tests,21075,"; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:22322,Testability,test,test,22322,"y-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25045,Testability,test,test,25045,"ion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test fre",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25175,Testability,test,test,25175,"e only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:25968,Testability,test,test,25968,"OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:27078,Testability,test,test,27078,"uencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:27367,Testability,test,test,27367,", with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:28351,Testability,test,test,28351,"-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for di",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:28423,Testability,test,test,28423,"ug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:28855,Testability,test,test,28855,"rn3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:29600,Testability,test,tests,29600,"; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30080,Testability,test,test,30080,"-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:30619,Testability,test,test,30619,"ptions1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an exam",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31034,Testability,test,test,31034,"imizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31586,Testability,test,test,31586,"S-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new Bragg",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:31753,Testability,test,test,31753,"wo states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32120,Testability,test,test,32120,"fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32251,Testability,test,test,32251,"d with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:32467,Testability,test,test,32467,"2 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent par",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:34266,Testability,test,test,34266,"a-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gra",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:35036,Testability,test,tests,35036,"g. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:36049,Testability,test,tested,36049,"sts Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and pro",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:37609,Testability,test,tests,37609,"c51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38189,Testability,test,test,38189,"te difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants di",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38508,Testability,test,test,38508,"density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38576,Testability,test,test,38576,"density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38915,Testability,test,test,38915,"Z energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:38957,Testability,test,test,38957,". ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:39745,Testability,test,test,39745,"energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40248,Testability,test,test,40248,"Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40790,Testability,test,test,40790,"ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:40824,Testability,test,test,40824,"ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41041,Testability,test,test,41041,"ll and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/f",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:41172,Testability,test,test,41172,"O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** ener",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:42841,Testability,test,tests,42841,"g automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44738,Testability,test,test,44738,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html:44853,Testability,test,tested,44853,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9522,Availability,error,error,9522,"e. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:26422,Availability,checkpoint,checkpoint,26422,"* H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:42666,Availability,avail,available,42666,"dient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:2308,Deployability,update,update,2308,"n of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:5227,Deployability,update,updated,5227,"plit-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk al",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6023,Deployability,update,update,6023,"his test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6417,Deployability,update,updated,6417,"he NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordin",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7526,Deployability,update,updated,7526,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8104,Deployability,update,updated,8104,"the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10121,Deployability,update,updated,10121,"n example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation invo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11358,Deployability,update,updated,11358,"ci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11881,Deployability,update,update,11881,"poles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15432,Deployability,update,update,15432,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:17365,Deployability,update,updated,17365," fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18440,Deployability,update,update,18440,"ron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20248,Deployability,update,update,20248,"le, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:21217,Deployability,update,updated,21217,"; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:22860,Deployability,update,updated,22860,"metry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAP",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23637,Deployability,update,update,23637," frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix mult",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32497,Deployability,update,update,32497,"2 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent par",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32609,Deployability,update,update,32609,"an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35504,Deployability,update,update,35504,"Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy betw",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36211,Deployability,install,install,36211,"KFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sow",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:37392,Deployability,update,update,37392,"lated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molec",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:45395,Deployability,update,updated,45395,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:551,Energy Efficiency,energy,energy,551,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:958,Energy Efficiency,charge,charge,958,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:974,Energy Efficiency,energy,energy,974,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1206,Energy Efficiency,energy,energy,1206,"s in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1447,Energy Efficiency,energy,energy,1447,"cification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1533,Energy Efficiency,energy,energy,1533,"-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1638,Energy Efficiency,energy,energy,1638,"-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:2947,Energy Efficiency,energy,energy,2947," structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Si",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:3268,Energy Efficiency,energy,energy,3268,"culation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sher",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:3934,Energy Efficiency,energy,energy,3934," methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:5343,Energy Efficiency,energy,energy,5343,"condary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6160,Energy Efficiency,energy,energy,6160,"for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient fo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6573,Energy Efficiency,energy,energy,6573," Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7179,Energy Efficiency,energy,energy,7179,"utations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-3",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7199,Energy Efficiency,energy,energy,7199,"disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspa",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7331,Energy Efficiency,energy,energy,7331," NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7555,Energy Efficiency,energy,energy,7555,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8418,Energy Efficiency,energy,energy,8418,"oordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8536,Energy Efficiency,energy,energy,8536,"ntial energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8610,Energy Efficiency,energy,energy,8610," coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9054,Energy Efficiency,energy,energy,9054," phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9554,Energy Efficiency,energy,energy,9554,"d water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9678,Energy Efficiency,energy,energy,9678,"h Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9942,Energy Efficiency,energy,energy,9942,"ning values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10254,Energy Efficiency,energy,energy,10254,"xyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-correct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10494,Energy Efficiency,energy,energy,10494,"arrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to matc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10938,Energy Efficiency,energy,energy,10938,"y for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-vi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11836,Energy Efficiency,energy,energy,11836," Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:12746,Energy Efficiency,energy,energy,12746,"ent of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:13030,Energy Efficiency,charge,charged,13030,"n the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:13169,Energy Efficiency,energy,energy,13169,"physical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-ma",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14128,Energy Efficiency,energy,energy,14128,"e2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14385,Energy Efficiency,energy,energy,14385,"mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now a",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14801,Energy Efficiency,energy,energy,14801,"m). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14967,Energy Efficiency,energy,energy,14967,". pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15039,Energy Efficiency,energy,energy,15039,"st of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15139,Energy Efficiency,energy,energy,15139,"(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15784,Energy Efficiency,energy,energy,15784,"nput. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16445,Energy Efficiency,energy,energy,16445,"ate ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for eac",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:17019,Energy Efficiency,energy,energy,17019,"WN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:17075,Energy Efficiency,energy,energy,17075,"e values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:17398,Energy Efficiency,charge,charge,17398," fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18157,Energy Efficiency,energy,energy,18157,"O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18194,Energy Efficiency,energy,energy,18194,"n, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RH",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18620,Energy Efficiency,energy,energy,18620,"CI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18925,Energy Efficiency,energy,energy,18925," point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to v",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19082,Energy Efficiency,energy,energy,19082,"h a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19159,Energy Efficiency,energy,energy,19159,"c-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Heli",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19225,Energy Efficiency,energy,energy,19225,"ion. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ grad",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20045,Energy Efficiency,energy,energy,20045,"int. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the differen",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:21141,Energy Efficiency,energy,energy,21141,"an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the for",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:21482,Energy Efficiency,energy,energy,21482,"ocedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:21606,Energy Efficiency,energy,energy,21606,"au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. Thi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:22227,Energy Efficiency,energy,energy,22227,"updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:22430,Energy Efficiency,energy,energy,22430,"gy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation).",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23057,Energy Efficiency,energy,energy,23057,"ragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23297,Energy Efficiency,energy,energy,23297,"hine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23930,Energy Efficiency,energy,energy,23930,"-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:24497,Energy Efficiency,energy,energy,24497,"p; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:25000,Energy Efficiency,energy,energy,25000," with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:25745,Energy Efficiency,energy,energy,25745,"and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:26346,Energy Efficiency,energy,energy,26346,"ation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-he",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:26561,Energy Efficiency,energy,energy,26561," of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:26840,Energy Efficiency,energy,energy,26840," described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:27446,Energy Efficiency,energy,energy,27446,"is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algori",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:27950,Energy Efficiency,charge,charge,27950,"2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:28598,Energy Efficiency,energy,energy,28598,"onverged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:28725,Energy Efficiency,energy,energy,28725,"g; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:28968,Energy Efficiency,energy,energy,28968,"2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HO",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:29445,Energy Efficiency,energy,energy,29445,"tly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:29954,Energy Efficiency,energy,energy,29954,"plet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:30856,Energy Efficiency,energy,energy,30856,"he presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calcu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:30922,Energy Efficiency,energy,energy,30922,"s constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-p",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:31137,Energy Efficiency,energy,energy,31137,"Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:31945,Energy Efficiency,energy,energy,31945,"^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32414,Energy Efficiency,energy,energy,32414," sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O part",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32769,Energy Efficiency,energy,energy,32769,"d 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT phy",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32856,Energy Efficiency,energy,energy,32856,"lculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being com",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:33393,Energy Efficiency,energy,energy,33393," UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:33429,Energy Efficiency,energy,energy,33429," UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:33983,Energy Efficiency,energy,energy,33983,"radient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particula",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:34668,Energy Efficiency,energy,energy,34668,"O radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:34816,Energy Efficiency,energy,energy,34816,"onents (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35155,Energy Efficiency,energy,energy,35155," CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35372,Energy Efficiency,energy,energy,35372,"the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT co",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35641,Energy Efficiency,energy,energy,35641,"mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35895,Energy Efficiency,energy,energy,35895,"cal with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36269,Energy Efficiency,energy,energy,36269,"es. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the gu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36395,Energy Efficiency,energy,energy,36395,"ulation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals a",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36501,Energy Efficiency,energy,energy,36501,"d simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36655,Energy Efficiency,energy,energy,36655,"tions. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36914,Energy Efficiency,energy,energy,36914,"lly displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:37590,Energy Efficiency,energy,energy,37590,"c51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:37898,Energy Efficiency,energy,energy,37898,"for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, a",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38679,Energy Efficiency,energy,energy,38679,"-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1;",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38749,Energy Efficiency,energy,energy,38749,"ll-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38788,Energy Efficiency,energy,energy,38788,"ore. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:39468,Energy Efficiency,energy,energy,39468,"F->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:39829,Energy Efficiency,energy,energy,39829,"scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:40180,Energy Efficiency,energy,energy,40180,"ts directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first per",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:41295,Energy Efficiency,energy,energy,41295,"2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ ge",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:41523,Energy Efficiency,energy,energy-large,41523,"unctional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; rep",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:41820,Energy Efficiency,energy,energy,41820,"esponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Tri",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:42194,Energy Efficiency,energy,energy,42194,"erformed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:42756,Energy Efficiency,energy,energy,42756,"2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:42822,Energy Efficiency,energy,energy,42822,"g automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:43074,Energy Efficiency,energy,energy,43074,"P and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:43250,Energy Efficiency,energy,energy,43250,"the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file does",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:43865,Energy Efficiency,energy,energy,43865,"y matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:44457,Energy Efficiency,energy,energy,44457,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10764,Integrability,depend,dependencies,10764,"system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:12447,Integrability,depend,depend,12447," internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined usin",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:12550,Integrability,depend,depend,12550,"et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16823,Integrability,interface,interface,16823," of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19200,Integrability,wrap,wrapper,19200,"ion. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ grad",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20374,Integrability,interface,interface,20374," @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of diff",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20391,Integrability,interface,interface,20391," @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of diff",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23022,Integrability,wrap,wrappers,23022,"ragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:33331,Integrability,rout,routing,33331," two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:34559,Integrability,depend,dependent,34559," two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant usin",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:44160,Integrability,depend,depend,44160,"r (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are co",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:44263,Integrability,depend,depend,44263,"for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7507,Modifiability,variab,variables,7507,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15329,Modifiability,variab,variables,15329,"e. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15412,Modifiability,variab,variables,15412,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:21901,Modifiability,variab,variables,21901,"he O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36179,Modifiability,plugin,plugins,36179,"KFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sow",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1869,Performance,optimiz,optimization,1869,"cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1947,Performance,optimiz,optimized,1947,"cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:2284,Performance,perform,performs,2284,"n of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:5989,Performance,perform,performs,5989,"his test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6674,Performance,optimiz,optimizations,6674," Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6983,Performance,perform,performed,6983,"rms both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7607,Performance,perform,performed,7607,"ained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8313,Performance,perform,performed,8313,"VDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10005,Performance,optimiz,optimization,10005,"without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10181,Performance,optimiz,optimization,10181,"rgeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to vali",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:10713,Performance,optimiz,optimized,10713,". scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11018,Performance,optimiz,optimizations,11018,"or the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformat",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11176,Performance,perform,performed,11176,"** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; che",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11857,Performance,perform,performs,11857,"poles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14266,Performance,optimiz,optimization,14266,"ne dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT vari",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16243,Performance,perform,performs,16243,"e, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16261,Performance,optimiz,optimization,16261,"e, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16485,Performance,optimiz,optimization,16485,"dii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties compute",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18008,Performance,optimiz,optimization,18008,"-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dip",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:18416,Performance,perform,performs,18416,"ron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. mp2-h; check that methods can act on single atom. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). o",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19910,Performance,perform,performed,19910,"ter dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20955,Performance,perform,performing,20955,"t al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23047,Performance,optimiz,optimize,23047,"ragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23354,Performance,optimiz,optimization,23354,"ase. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23703,Performance,optimiz,optimization,23703,"nd CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:23842,Performance,optimiz,optimization,23842,"mega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. dft1; DFT Functional Test all values update for new BraggSlater radii. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. mints3; Test individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:24733,Performance,perform,performed,24733,"t individual integral objects for correctness. mp2-1; All-electron MP2 6-31G** geometry optimization of water. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy me",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:25448,Performance,optimiz,optimization,25448,"ter. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO hand",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:26272,Performance,optimiz,optimization,26272,"tric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Te",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:27747,Performance,optimiz,optimization,27747,"st computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess fo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:29067,Performance,optimiz,optimized,29067,"2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HO",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:30034,Performance,optimiz,optimizations,30034,"n the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF t",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:30669,Performance,optimiz,optimization,30669,"b97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32265,Performance,perform,performed,32265,"d with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:33596,Performance,optimiz,optimization,33596," S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Funct",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35464,Performance,perform,performs,35464,"Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy betw",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36753,Performance,optimiz,optimization,36753,"hen repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:37372,Performance,perform,performs,37372,"lated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molec",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:37812,Performance,optimiz,optimizations,37812,"try from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CE",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:39029,Performance,optimiz,optimization,39029,"run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Ex",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:40408,Performance,optimiz,optimization,40408,"; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coo",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:40502,Performance,optimiz,optimization,40502," guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping f",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:41186,Performance,perform,performed,41186,"O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** ener",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:42243,Performance,optimiz,optimization,42243," cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:43008,Performance,optimiz,optimization,43008," processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and sph",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:43785,Performance,optimiz,optimization,43785,". soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6301,Safety,avoid,avoided,6301,"e to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after se",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:12026,Safety,avoid,avoided,12026,"rtesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35778,Safety,avoid,avoided,35778,"t9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11189,Security,validat,validate,11189,"** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; che",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19923,Security,validat,validate,19923,"ter dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:192,Testability,test,test,192,"﻿. <no title>. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. Input File; Description. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:1148,Testability,test,test,1148,"iption. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. tdscf-5; td-camb3lyp with DiskDF and method/basis specification. scf-cholesky-basis; incremental Cholesky filtered SCF. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. scf-upcast-custom-basis; test scf castup with custom basis sets. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dlpnomp2-2; comparison of DF-MP2 and DLPNO-MP2 with a CBS extrapolation. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. fnocc2; Test G2 method for H2O. dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al.",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:2865,Testability,test,test,2865,"-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). sapt10; usapt example with empty beta due to frozen core. dct3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. explicit-am-basis; Check that basis sets can be input with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; tes",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:3700,Testability,test,tests,3700," with explicit angular momentum format. scf-guess-read2; Test if the the guess read in the same basis converges. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:3858,Testability,test,test,3858," mp2 itself and setting scs-mp2. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspac",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:4069,Testability,test,tests,4069,"y and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. cc54; CCSD dipole with user-specified basis set. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. fcidump; test FCIDUMP functionality for rhf/uhf. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. scf-hess3; CONV SCF 6-31G analytical vs finite-difference tests Tests UHF hessian code for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an examp",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:5037,Testability,test,test,5037,"ode for Ca != Cb. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. frac-traverse; Scan fractional occupation of electrons updated values due to new BraggSlater radii. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. omp2-3; OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6345,Testability,test,test,6345," OMP2 cc-pVDZ energy for the NO radical. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). sapt11; sapt example with orbital freezing with alkali metal and dMP2. fci-h2o; 6-31G H2O Test FCI Energy Point. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6838,Testability,test,test,6838,"s set. dct8; DCT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retenti",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:6969,Testability,test,test,6969,"rms both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_DISPERSION_PARAMETERS tuple updated ‘bench’ reference values for new BraggSlater radii. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:7783,Testability,test,tests,7783,"a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. dlpnomp2-1; comparison of DF-MP2 and DLPNO-MP2. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAP",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8711,Testability,test,test,8711,"-pVDZ gradients for the H2O molecule. pywrap-cbs1; Various basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8750,Testability,test,test,8750,"us basis set extrapolation tests. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron sys",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:8836,Testability,test,test,8836,"ergies with ECP, with electrons correlated then frozen. scf3; File retention, docc, socc, and bond distances specified explicitly. mbis-2; MBIS calculation on OH- (Expanded Arrays). opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure updated reference due to new BraggSlater radii. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9081,Testability,test,test,9081,"; 6-31G** H2O Test CISD Energy Point with subspace collapse. mbis-3; MBIS calculation on OH radical. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-3",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:9288,Testability,test,testing,9288,"utation, performed by applying a finite electric field and numerical differentiation. fnocc4; Test FNO-DF-CCSD(T) energy. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). cbs-xtpl-energy; Extrapolated water energies. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. dft-dsd; DSD S22 Ammonia test. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). dft-dens-cut; LibXC density screening test. Tests empty, C-only, X-only and XC superfunctionals. ‘super_mix’ showcases how to use different screening values for X and C parts. SCF will fail or crash (nans) without screening!. casscf-fzc-sp; CASSCF/6-31G** energy point. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cisd-sp; 6-31G** H2O Test CISD Energy Point. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. adc1; ADC(2)/6-31G** on H2O using builtin ADC module. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. scf-uhf-grad-nobeta; UHF gradient for a one-electron system (no beta electrons). cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. dft-grad-meta; meta-GGA gradients of water and ssh molecules reference gradients updated due to new BraggSlater radii. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrati",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11152,Testability,test,test,11152,"** H2O CCSD optimization by energies, with Z-Matrix input. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. fci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; che",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:11482,Testability,test,testing,11482,"ci-h2o-2; 6-31G H2O Test FCI Energy Point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. fnocc7; Test fnocc with linear dependencies. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dft-custom-mgga; updated dldf reference to new BraggSlater radii Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. freq-masses; check nonphysical masses possible. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:13386,Testability,test,test,13386,"up parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. sapt-ecp; sapt0 of charged system in ECP basis set. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy betwe",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14331,Testability,test,test,14331,"Test Gibbs free energies at 298 K of N2, H2O, and CH4. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test th",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:14548,Testability,test,testing,14548,"s. The symmetry of the molecule is automatically lowered to account for the different basis sets. adc2; ADC(2)/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dft-reference; MP2 with a PBE0 reference computation. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15201,Testability,test,tests,15201,"fied explicitly. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15315,Testability,test,test,15315,"e. dft-jk; DFT JK on-disk test. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15380,Testability,test,testing,15380,"alpha; Extrapolated water energies. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15545,Testability,benchmark,benchmark,15545," been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing p",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15570,Testability,benchmark,benchmarks,15570," been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing p",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15645,Testability,test,test,15645,"zalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:15850,Testability,test,test,15850," dipole derivatives against old Psi3 reference values. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly update ref_dft_2e/xc due to new BraggSlater radii. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16551,Testability,test,testing,16551,"ment. mints-benchmark; run some BLAS benchmarks. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. cc13c; Tests RHF CCSD(T)gradients. ao-casscf-sp; CASSCF/6-31G** energy point. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energie",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:16807,Testability,test,test,16807," of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. dft-freq-analytic; Analytic SVWN frequencies, compared to finite difference values. cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dct5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. ao-dfcasscf-sp; CASSCF/6-31G** energy point. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ g",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:17629,Testability,test,testing,17629,"imization followed by frequencies H2O HF/cc-pVDZ. dct10; The multiple guesses for DCT amplitudes for ODC-12. pubchem2; Superficial test of PubChem interface. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. fnocc5; Test FNO-DF-CCSD(T) energy. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc12; Single point energies of multiple excited states with EOM-CCSD. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. sapt0-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dct1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). x2c3; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:19886,Testability,test,test,19886,"ter dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. fci-dipole; 6-31G H2O Test FCI Energy Point. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20401,Testability,test,testing,20401," @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. olccd-freq1; OLCCD cc-pVDZ freqs for C2H2. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. rasci-h2o; RASCI/6-31G** H2O Energy Point. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of diff",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:20949,Testability,test,test,20949,"t al., JCP 104, 8007 (1996). dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:21075,Testability,test,tests,21075,"; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN update df/pk_ref values due to new BraggSlater radii. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. numpy-array-interface; Numpy interface testing. fsaptd-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-align; apply linear fragmentation algorithm to a water cluster. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. fsapt-ext-abc-au; analog of fsapt-ext-abc with molecule and external potentials in Bohr. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dct-grad1; Various DCT analytic gradients for the O2 molecule with 6-31G basis set. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. dfcasscf-sp; CASSCF/6-31G** energy point. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN updated ref gradient due to new BraggSlater radii. olccd-grad2; OLCCD cc-pVDZ gradient for the NO radical. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:22322,Testability,test,test,22322,"y-convergence; Convergence of many-body gradients of different BSSE schemes. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. cbs-xtpl-dict; Extrapolated water energies. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. olccd3; OLCCD cc-pVDZ energy with ROHF initial guess for the NO radical. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. dft-omega; Test omega is setable updated wb97x_20,wb97x_03 to account for new BraggSlater radii. dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp3-4; ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:25045,Testability,test,test,25045,"ion that is computed with cc-pVDZ-ri density fitting with ROHF. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test fre",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:25175,Testability,test,test,25175,"e only) on Z-mat H2O2. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. dct-grad4; Unrestricted DF-DCT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. density-screen-1; RHF Density Matrix based-Integral Screening Test for water. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. fci-coverage; 6-31G H2O Test for coverage. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:25968,Testability,test,test,25968,"OMP3 cc-pVDZ energy for the H2O molecule. tdscf-1; td-uhf test on triplet states of methylene (rpa). sad-scf-type; Test SAD SCF guesses on noble gas atom. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. props4; Electrostatic potential and electric field evaluated on a grid around water. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. tdscf-2; td-uhf test on triplet states of methylene (tda), wfn passing. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS c",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:27078,Testability,test,test,27078,"uencies by finite differences of energies for planar C4NH4 TS. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dft1-alt; DFT Functional Test. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:27367,Testability,test,test,27367,", with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. phi-ao; Test computing values of basis functions (puream and non-puream) at points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. mbis-6; MBIS calculation on H2O. scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. cc13b; Tests RHF CCSD(T)gradients. soscf-large; Second-order SCF convergnece: Benzene. mints-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. d",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:28351,Testability,test,test,28351,"-helper; A general test of the MintsHelper function. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for di",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:28423,Testability,test,test,28423,"ug-cc-pVDZ interaction energy between Ne and Ar atoms. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. extern3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:28855,Testability,test,test,28855,"rn3; External potential calculation with one Ghost atom and one point charge at the same position. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. cc17; Single point energies of multiple excited states with EOM-CCSD. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. scf-coverage; Lithium test for coverage. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:29600,Testability,test,tests,29600,"; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. scf-occ; force occupations in scf. omp3-2; OMP3 cc-pCVDZ energy with ROHF initial guess for the NO radical. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. fsapt-ext; Quick test of external potential in F-SAPT (see fsapt1 for a real example). pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:30080,Testability,test,test,30080,"-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. fd-gradient; SCF STO-3G finite-difference tests. options1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:30619,Testability,test,test,30619,"ptions1; check all variety of options parsing. tdscf-4; td-wb97x singlet excitation energies of methylene (tda). omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. lccd-grad2; LCCD cc-pVDZ gradient for the NO radical. scf7; Tests SCF gradient in the presence of a dipole field. fnocc3; Test FNO-QCISD(T) computation. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an exam",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:31034,Testability,test,test,31034,"imizations of HOOH in internals. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:31586,Testability,test,test,31586,"S-OMP3 cc-pVDZ geometry optimization for the H2O molecule. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new Bragg",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:31753,Testability,test,test,31753,"wo states of each symmetry of H2O. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. scf-hess4; DF SCF 6-31G UHFl vs RHF test Tests DF UHF hessian code for Ca = Cb. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32120,Testability,test,test,32120,"fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32251,Testability,test,test,32251,"d with cc-pVDZ-ri density fitting with UHF. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. sapt-exch-disp-inf; SAPT0 with S^inf exch-disp20. dct-grad3; Restricted DF-DCT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:32467,Testability,test,test,32467,"2 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. dft-custom; DFT custom functional test. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. dft-grad-lr3; wB97X-D test for a large UKS molecule update ref gradient due to new BraggSlater radii. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN update ref gradient due to new BraggSlater radii. mbis-5; MBIS calculation on ZnO. lccd-grad1; LCCD cc-pVDZ gradient for the H2O molecule. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. pywrap-db2; Database calculation, run in sow/reap mode. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. x2c-perturb-h; Test SFX2C-1e with a static electric field on He aug-cc-pVTZ. cepa-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent par",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:34266,Testability,test,test,34266,"a-module; routing check on lccd, lccsd, cepa(0). cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. mints15; check SP basis Fortran exponent parsing. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gra",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:35036,Testability,test,tests,35036,"g. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. olccd-grad1; OLCCD cc-pVDZ gradient for the H2O molecule. dct11; Restricted DF-DCT ODC-12 energies with linearly dependent basis functions. dft2; DFT Functional Test. mbis-1; MBIS calculation on H2O. olccd2; OLCCD cc-pVDZ energy with B3LYP initial guess for the NO radical. sapt9; usapt example with empty beta. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. scf-hess5; DF SCF 6-31G analytical vs finite-difference tests Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:36049,Testability,test,tested,36049,"sts Tests DF UHF hessian code for Ca != Cb. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. omp2p5-1; OMP2.5 cc-pVDZ energy for the H2O molecule. dct4; DCT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dct6; DCT calculation for the triplet O2 using DC-06 and DC-12. Only two-step algorithm is tested. density-screen-2; RKS Density Matrix based-Integral Screening Test for benzene. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. cc51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and pro",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:37609,Testability,test,tests,37609,"c51; EOM-CC3/cc-pVTZ on H2O. dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. olccd1; OLCCD cc-pVDZ energy for the H2O molecule. nbo; Generation of NBO file. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetr",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38189,Testability,test,test,38189,"te difference of energies frequency, run in sow/reap mode. scf-guess-read3; Test if the the guess read in the same basis converges. dct2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. cubeprop; RHF orbitals and density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants di",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38508,Testability,test,test,38508,"density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38576,Testability,test,test,38576,"density for water. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. opt11; Transition-state optimizations of HOOH to both torsional transition states. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradi",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38915,Testability,test,test,38915,"Z energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:38957,Testability,test,test,38957,". ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. cc13d; Tests analytic CC2 gradients. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. fnocc6; Test method/basis with disk_df. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. cc37; CC2(UHF)/cc-pVDZ energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger e",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:39745,Testability,test,test,39745,"energy of H2O+. cc36; CC2(RHF)/cc-pVDZ energy of H2O. cepa1; cc-pvdz H2O Test CEPA(1) Energy. scf-hess2; UHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. This test should match RHF values exactly. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:40248,Testability,test,test,40248,"Energy Point, with n=2-25. scf-response2; Compute the dipole polarizability for water with custom basis set. tdscf-3; td-wb97x excitation energies of singlet states of h2o, wfn passing. cc52; CCSD Response for H2O2. omp3-3; OMP3 cc-pCVDZ energy with B3LYP initial guess for the NO radical. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. s",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:40790,Testability,test,test,40790,"ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:40824,Testability,test,test,40824,"ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:41041,Testability,test,test,41041,"ll and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/f",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:41172,Testability,test,test,41172,"O+ cation. dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cbs-parser; mtd/basis syntax examples. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. mbis-4; MBIS calculation on NaCl. cbs-xtpl-func; optimization with method defined via cbs. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dft-smoke; DFT Functional Smoke Test. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. fsapt-d; Tests SAPT0-D corrections, with a variety of damping functions/parameters. fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** ener",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:42841,Testability,test,tests,42841,"g automatic counterpoise correction. Monomers are specified using Cartesian coordinates. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. scf6; Tests RHF/ROHF/UHF SCF gradients. casscf-sp; CASSCF/6-31G** energy point. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. scf-auto-cholesky; Cholesky filter a complete basis. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dft-pruning; Tests all grid pruning options available and screening of small weights. Check against grid size. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). omp2p5-2; OMP2.5 cc-pVDZ energy for the H2O molecule. dct-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:44738,Testability,test,test,44738,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html:44853,Testability,test,tested,44853,"NONE, respectively. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). cubeprop-esp; RHF orbitals and density for water. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dft-grac; Gradient regularized asymptotic correction (GRAC) test. dct7; DCT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; <no title>. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_corepsi4.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_corepsi4.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html:374,Deployability,update,update,374,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html:498,Deployability,install,install,498,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html:633,Deployability,update,updated,633,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html:997,Deployability,update,updated,997,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html:166,Energy Efficiency,energy,energy,166,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html:466,Modifiability,plugin,plugins,466,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html:374,Deployability,update,update,374,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html:498,Deployability,install,install,498,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html:633,Deployability,update,updated,633,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html:997,Deployability,update,updated,997,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html:166,Energy Efficiency,energy,energy,166,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html:466,Modifiability,plugin,plugins,466,"﻿. DFTD3. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. DFTD3¶. Input File; Description. dftd3/energy; Exercises the various DFT-D corrections, both through python directly and through c++. dftd3/grad; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN, calling Grimme’s dftd3 program for -D2 gradients update reference for new BraggSlater radii. dftd3/psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dftd3/version; Exercises the various DFT-D corrections, both through python directly and through c++ all dft values updated to new BraggSlater radii. dftd3/nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DFTD3. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dftd3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dftd3.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dkh-1.html:456,Deployability,update,updated,456,"﻿. DKH. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DKH. DKH¶. Input File; Description. dkh/molpro-2order; DKH comparison Psi4 vs. Molpro from http://forum.psicode.org/t/problems-enabling-dkh/388/3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DKH. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dkh-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dkh-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dkh.html:456,Deployability,update,updated,456,"﻿. DKH. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DKH. DKH¶. Input File; Description. dkh/molpro-2order; DKH comparison Psi4 vs. Molpro from http://forum.psicode.org/t/problems-enabling-dkh/388/3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; DKH. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_dkh.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_dkh.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd-1.html:579,Deployability,update,updated,579,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_erd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd-1.html:335,Energy Efficiency,energy,energy,335,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_erd-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd.html:579,Deployability,update,updated,579,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_erd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd.html:335,Energy Efficiency,energy,energy,335,"﻿. ERD. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. ERD¶. Input File; Description. erd/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using ERD integrals. erd/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using ERD integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; ERD. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_erd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_erd.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp-1.html:636,Deployability,update,updated,636,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/pbeh3c; validate PBEh-3c against the literature. gcp/hf3c-gradients; HF3C fd and analytical gradient. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/hf3c-hessian; HF3C fd and analytical frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp-1.html:206,Security,validat,validate,206,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/pbeh3c; validate PBEh-3c against the literature. gcp/hf3c-gradients; HF3C fd and analytical gradient. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/hf3c-hessian; HF3C fd and analytical frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp-1.html:343,Testability,test,test,343,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/pbeh3c; validate PBEh-3c against the literature. gcp/hf3c-gradients; HF3C fd and analytical gradient. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/hf3c-hessian; HF3C fd and analytical frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gcp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp.html:636,Deployability,update,updated,636,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/pbeh3c; validate PBEh-3c against the literature. gcp/hf3c-gradients; HF3C fd and analytical gradient. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/hf3c-hessian; HF3C fd and analytical frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp.html:206,Security,validat,validate,206,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/pbeh3c; validate PBEh-3c against the literature. gcp/hf3c-gradients; HF3C fd and analytical gradient. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/hf3c-hessian; HF3C fd and analytical frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp.html:343,Testability,test,test,343,"﻿. GCP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. GCP¶. Input File; Description. gcp/hf3c; Verify HF-3c method over S22. gcp/pbeh3c; validate PBEh-3c against the literature. gcp/hf3c-gradients; HF3C fd and analytical gradient. gcp/dft-custom-hybrid; DFT (hybrids) + GCP test of implementations in: hybrid_superfuncs.py. gcp/hf3c-hessian; HF3C fd and analytical frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GCP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gcp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gcp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gdma-1.html:411,Deployability,update,updated,411,"﻿. GDMA. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GDMA. GDMA¶. Input File; Description. gdma/gdma1; Water RHF/cc-pVTZ distributed multipole analysis. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GDMA. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gdma-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gdma-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gdma.html:411,Deployability,update,updated,411,"﻿. GDMA. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GDMA. GDMA¶. Input File; Description. gdma/gdma1; Water RHF/cc-pVTZ distributed multipole analysis. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GDMA. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gdma.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gpu_dfcc-1.html:499,Deployability,update,updated,499,"﻿. GPU_DFCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GPU_DFCC. GPU_DFCC¶. Input File; Description. gpu_dfcc/gpudfcc1; aug-cc-pvdz H2O Test DF-CCSD vs GPU-DF-CCSD. gpu_dfcc/gpudfcc2; aug-cc-pvdz H2O Test DF-CCSD(T) vs GPU-DF-CCSD(T). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GPU_DFCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gpu_dfcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gpu_dfcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gpu_dfcc.html:499,Deployability,update,updated,499,"﻿. GPU_DFCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GPU_DFCC. GPU_DFCC¶. Input File; Description. gpu_dfcc/gpudfcc1; aug-cc-pvdz H2O Test DF-CCSD vs GPU-DF-CCSD. gpu_dfcc/gpudfcc2; aug-cc-pvdz H2O Test DF-CCSD(T) vs GPU-DF-CCSD(T). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; GPU_DFCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_gpu_dfcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_gpu_dfcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:771,Deployability,update,updated,771,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:171,Energy Efficiency,energy,energy,171,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:203,Energy Efficiency,energy,energy,203,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:179,Testability,test,test,179,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:233,Testability,test,test,233,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:296,Testability,test,test,296,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:354,Testability,test,test,354,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:417,Testability,test,test,417,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:483,Testability,test,test,483,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html:545,Testability,test,test,545,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:771,Deployability,update,updated,771,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:171,Energy Efficiency,energy,energy,171,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:203,Energy Efficiency,energy,energy,203,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:179,Testability,test,test,179,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:233,Testability,test,test,233,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:296,Testability,test,test,296,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:354,Testability,test,test,354,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:417,Testability,test,test,417,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:483,Testability,test,test,483,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html:545,Testability,test,test,545,"﻿. JSON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. JSON¶. Input File; Description. json/schema-1-energy; test QC_JSON Schema for energy. json/schema-1-orient; test QC_JSON Schema mol orientation. json/schema-1-properties; test QC_JSON Schema for properties. json/schema-1-throws; test QC_JSON Schema noncontiguous mol. json/schema-1-response; test QC_JSON Schema for response properties. json/schema-1-ghost; test QC_JSON Schema with ghost atoms. json/schema-1-gradient; test QC_JSON Schema for gradient. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; JSON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_json.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_json.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:1013,Deployability,update,updated,1013,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:375,Performance,perform,performed,375,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:653,Performance,perform,performed,653,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:221,Testability,test,testing,221,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:394,Testability,test,test,394,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:507,Testability,test,test,507,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html:672,Testability,test,test,672,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:1013,Deployability,update,updated,1013,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:375,Performance,perform,performed,375,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:653,Performance,perform,performed,653,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:221,Testability,test,testing,221,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:394,Testability,test,test,394,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:507,Testability,test,test,507,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html:672,Testability,test,test,672,"﻿. LIBEFP. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. LIBEFP¶. Input File; Description. libefp/qmefp-moldomains; EFP on mixed QM and EFP systems, testing that right parts of molecule get activated. libefp/qchem-qmefp-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem. libefp/efp-grad; EFP gradient many-EFP-fragment system (geom and E from libefp pol_3a test). Tests passing of efp torques. libefp/qchem-qmefp-puream-sp; EFP on mixed QM (water) and EFP (water + 2 * ammonia) system. An EFP-only calc performed first to test vales against q-chem, both for a native 6D and native 5D basis. libefp/qchem-efp-sp; EFP-only single-point, all components for benzene dimer. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; LIBEFP. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_libefp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_libefp.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html:784,Deployability,update,updated,784,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html:183,Energy Efficiency,energy,energy,183,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html:345,Energy Efficiency,energy,energy,345,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html:251,Performance,optimiz,optimization,251,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html:500,Performance,optimiz,optimization,500,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html:784,Deployability,update,updated,784,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html:183,Energy Efficiency,energy,energy,183,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html:345,Energy Efficiency,energy,energy,345,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html:251,Performance,optimiz,optimization,251,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html:500,Performance,optimiz,optimization,500,"﻿. MRCC. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. MRCC¶. Input File; Description. mrcc/ccsdt; CCSDT cc-pVDZ energy for the H2O molecule using MRCC. mrcc/optfreq; CCSDT cc-pVDZ optimization and frequencies for the H2O molecule using MRCC. mrcc/ccsdt_q_; CCSDT(Q) cc-pVDZ energy for the H2O molecule using MRCC. This example builds up from CCSD. First CCSD, then CCSDT, finally CCSDT(Q). mrcc/ccsd_t_; CCSD(T) cc-pVDZ geometry optimization for the H2O molecule using MRCC. mrcc/rohf_ccsdt_q_; rohf ccsdt(q) using mrcc. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; MRCC. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_mrcc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_mrcc.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html:468,Deployability,update,updated,468,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html:753,Deployability,update,updated,753,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html:1039,Deployability,update,updated,1039,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html:334,Performance,optimiz,optimization,334,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html:243,Testability,test,test,243,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html:645,Testability,test,test,645,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html:468,Deployability,update,updated,468,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html:753,Deployability,update,updated,753,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html:1039,Deployability,update,updated,1039,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html:334,Performance,optimiz,optimization,334,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html:243,Testability,test,test,243,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html:645,Testability,test,test,645,"﻿. PCMSOLVER. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. PCMSOLVER¶. Input File; Description. pcmsolver/alpha; PCM dipole polarizabilities. Ref. values from lsdaton test case: static_alpha_hf_H2O_eq_pcmsolver.out. pcmsolver/opt-fd; PCM-SCF STO-3G geometry optimization by finite differences, with Z-matrix input. pcmsolver/dipole; dipole moment for HF and B3LYP in presence of perturbation updated B3LYP values due to new BraggSlater radii. pcmsolver/ghost; ghost atoms for the pcmsolver addon. pcmsolver/scf; pcm. pcmsolver/tdscf; PCM TDSCF Ref. values from lsdaton test case: opa_hf_H2O_noneq_pcmsolver.out. pcmsolver/ccsd-pte; coupled-cluster with PCM. pcmsolver/dft; pcm updated totalenergy to new BraggSlater radii values. pcmsolver/uhf-tdscf; UHF PCM TDSCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PCMSOLVER. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_pcmsolver.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html:733,Deployability,update,updated,733,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/rhf-hessian; RHF Hessian code. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html:232,Usability,simpl,simple,232,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/rhf-hessian; RHF Hessian code. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html:463,Usability,simpl,simple,463,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/rhf-hessian; RHF Hessian code. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html:733,Deployability,update,updated,733,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/rhf-hessian; RHF Hessian code. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html:232,Usability,simpl,simple,232,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/rhf-hessian; RHF Hessian code. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html:463,Usability,simpl,simple,463,"﻿. PSI4NUMPY. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. PSI4NUMPY¶. Input File; Description. psi4numpy/rhf-hessian; RHF Hessian code. psi4numpy/dfmp2; A simple Psi 4 input script to compute MP2 from a RHF reference. psi4numpy/cphf; Tests out the CG solver with CPHF Polarizabilities. psi4numpy/fci; coded full CI vs. detci. psi4numpy/rhf-gradient; rhf gradient code. psi4numpy/rhf; A simple Psi 4 input script to compute a SCF reference using Psi4’s libJK. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PSI4NUMPY. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_psi4numpy.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:1817,Deployability,update,updated,1817,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:170,Energy Efficiency,energy,energy,170,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:185,Energy Efficiency,energy,energy,185,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:226,Energy Efficiency,energy,energy,226,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:752,Energy Efficiency,energy,energy,752,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:318,Security,access,access,318,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:702,Security,access,access,702,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:361,Testability,test,test,361,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:422,Testability,test,test,422,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:783,Testability,test,test,783,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html:1482,Testability,test,test,1482,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:1817,Deployability,update,updated,1817,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:170,Energy Efficiency,energy,energy,170,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:185,Energy Efficiency,energy,energy,185,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:226,Energy Efficiency,energy,energy,226,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:752,Energy Efficiency,energy,energy,752,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:318,Security,access,access,318,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:702,Security,access,access,702,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:361,Testability,test,test,361,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:422,Testability,test,test,422,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:783,Testability,test,test,783,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html:1482,Testability,test,test,1482,"﻿. PYTHON. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. PYTHON¶. Input File; Description. python/energy; PsiAPI energy example. python/databases; PsiAPI energy example. python/cc54; CCSD dipole with user-specified basis set. python/cc-amps; API access to CCSD amplitudes. python/mints13; test fragment decomposition + to/from_dict. python/mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. python/pubchem; PsiAPI pubchem access. python/curve; PsiAPI scanning a potential energy curve. python/mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. python/3-index-transforms; examine JK packing forms. python/mints14; Check for correctness of ESP values. The ESP values are calculated using one or four threads The one thread values are checked against the four thread values. The one thread values are also checked against the reference values (1 thread values computed, when generating this test). Caution: The reference values are not obtained using an actual physical reference, but rather generated by Psi4 at one point in time. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; PYTHON. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_python.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint-1.html:603,Deployability,update,updated,603,"﻿. SIMINT. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. SIMINT¶. Input File; Description. simint/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using SIMINT integrals. simint/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using SIMINT integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint-1.html:353,Energy Efficiency,energy,energy,353,"﻿. SIMINT. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. SIMINT¶. Input File; Description. simint/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using SIMINT integrals. simint/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using SIMINT integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint.html:603,Deployability,update,updated,603,"﻿. SIMINT. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. SIMINT¶. Input File; Description. simint/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using SIMINT integrals. simint/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using SIMINT integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint.html:353,Energy Efficiency,energy,energy,353,"﻿. SIMINT. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. SIMINT¶. Input File; Description. simint/scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set and using SIMINT integrals. simint/mp2-module; OMP2 cc-pVDZ energy for the H2O molecule and using SIMINT integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SIMINT. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_simint.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_snsmp2-1.html:479,Deployability,update,updated,479,"﻿. SNSMP2. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SNSMP2. SNSMP2¶. Input File; Description. snsmp2/cc-cc; sns-mp2 on ethane dimer. snsmp2/he-he; sns-mp2 on helium dimer. snsmp2/cf-o; snsmp2 on fluoromethane-water. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SNSMP2. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_snsmp2-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_snsmp2-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_snsmp2.html:479,Deployability,update,updated,479,"﻿. SNSMP2. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SNSMP2. SNSMP2¶. Input File; Description. snsmp2/cc-cc; sns-mp2 on ethane dimer. snsmp2/he-he; sns-mp2 on helium dimer. snsmp2/cf-o; snsmp2 on fluoromethane-water. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; SNSMP2. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_snsmp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_snsmp2.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf-1.html:842,Deployability,update,updated,842,"﻿. V2RDM_CASSCF. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. V2RDM_CASSCF¶. Input File; Description. v2rdm_casscf/v2rdm6; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm4; v2rdm_casscf 1,4-phenylenedinitrene/(10,10)/cc-pVDZ. v2rdm_casscf/v2rdm3; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK. v2rdm_casscf/v2rdm7; STO-3g benzene (6,6) guess orbital rotation test DQG. v2rdm_casscf/v2rdm1; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm5; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm2; cc-pvdz N2 (6,6) active space Test DQG. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf-1.html:449,Testability,test,test,449,"﻿. V2RDM_CASSCF. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. V2RDM_CASSCF¶. Input File; Description. v2rdm_casscf/v2rdm6; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm4; v2rdm_casscf 1,4-phenylenedinitrene/(10,10)/cc-pVDZ. v2rdm_casscf/v2rdm3; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK. v2rdm_casscf/v2rdm7; STO-3g benzene (6,6) guess orbital rotation test DQG. v2rdm_casscf/v2rdm1; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm5; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm2; cc-pvdz N2 (6,6) active space Test DQG. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf-1.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf.html:842,Deployability,update,updated,842,"﻿. V2RDM_CASSCF. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. V2RDM_CASSCF¶. Input File; Description. v2rdm_casscf/v2rdm6; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm4; v2rdm_casscf 1,4-phenylenedinitrene/(10,10)/cc-pVDZ. v2rdm_casscf/v2rdm3; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK. v2rdm_casscf/v2rdm7; STO-3g benzene (6,6) guess orbital rotation test DQG. v2rdm_casscf/v2rdm1; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm5; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm2; cc-pvdz N2 (6,6) active space Test DQG. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf.html
https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf.html:449,Testability,test,test,449,"﻿. V2RDM_CASSCF. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. V2RDM_CASSCF¶. Input File; Description. v2rdm_casscf/v2rdm6; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm4; v2rdm_casscf 1,4-phenylenedinitrene/(10,10)/cc-pVDZ. v2rdm_casscf/v2rdm3; H3 / cc-pvdz / D+D3 vs full CI, scf_type = PK. v2rdm_casscf/v2rdm7; STO-3g benzene (6,6) guess orbital rotation test DQG. v2rdm_casscf/v2rdm1; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm5; cc-pvdz N2 (6,6) active space Test DQG. v2rdm_casscf/v2rdm2; cc-pvdz N2 (6,6) active space Test DQG. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Test Suite and Sample Inputs; V2RDM_CASSCF. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/autodoc_testsuite_v2rdm_casscf.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:1344,Availability,avail,available,1344,"ectron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:1664,Availability,avail,available,1664," is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; a",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:2126,Availability,avail,availability,2126,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:11134,Deployability,update,updated,11134,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:4446,Energy Efficiency,energy,energy,4446,"STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:4473,Energy Efficiency,energy,energy,4473,"STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:4596,Energy Efficiency,energy,energy,4596,"is set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the d",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:4665,Energy Efficiency,energy,energy,4665,"structed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:6397,Integrability,depend,dependence,6397,"orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:6814,Integrability,rout,routes,6814,"sis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:8274,Modifiability,variab,variable,8274,"62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/psi4/share/psi4/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH. If the directory is the current working directory,; PSI4 will find it automatically, and the directory does not need; to be added to PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis ",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:3016,Performance,perform,performs,3016,"sis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; aut",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:6581,Performance,perform,performing,6581," on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after app",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:9811,Performance,perform,performs,9811,"e stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their inp",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:2678,Safety,avoid,avoid,2678,"Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carb",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:4003,Safety,detect,detect,4003,"e a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; o",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:10555,Safety,detect,detected,10555,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:10054,Testability,test,test,10054,"1627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Set",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:6150,Usability,simpl,simply,6150,"ry basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set wil",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets-1.html:10277,Usability,simpl,simply,10277,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets-1.html
https://psicode.org/psi4manual/1.5.0/basissets.html:1344,Availability,avail,available,1344,"ectron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from EMSL).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (e.g., 6D/7F) nor within a calculation; (e.g., cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct spherical/cartesian value for PUREAM; is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:1664,Availability,avail,available,1664," is set internally from the orbital basis. Built-In Basis Sets; Specifying basis sets; Built-in basis sets by family; Built-in basis sets by element; User-Defined basis sets; Auxiliary bases for built-in orbital basis sets. Built-In Basis Sets¶; A wide range of orbital basis sets are built into PSI4. These are; summarized in Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Karlsruhe,; Jensen,; and Other in Appendix Basis Sets by Family.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; a",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:2126,Availability,avail,availability,2126,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:11134,Deployability,update,updated,11134,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:4446,Energy Efficiency,energy,energy,4446,"STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:4473,Energy Efficiency,energy,energy,4473,"STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:4596,Energy Efficiency,energy,energy,4596,"is set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the d",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:4665,Energy Efficiency,energy,energy,4665,"structed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the BASIS keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:6397,Integrability,depend,dependence,6397,"orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:6814,Integrability,rout,routes,6814,"sis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:8274,Modifiability,variab,variable,8274,"62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after applying the following transformations. All letters lowercase; Replace all * with s; Replace all + with p; Replace all ( ) , with _ (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in psi4/psi4/share/psi4/basis/6-31ppgss.gbs,; and cc-pV(D+d)Z is stored in psi4/psi4/share/psi4/basis/cc-pv_dpd_z.gbs.; Only one basis set may be specified per file.; Copy the new basis set file into psi4/psi4/share/psi4/basis.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (2) Use new basis set file in arbitrary location.; Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; PSIPATH. If the directory is the current working directory,; PSI4 will find it automatically, and the directory does not need; to be added to PSIPATH.; Request the new basis set in an input file in the usual manner.; set basis new_basis_name. (3) Include new basis set in input file.; Construct for a basis set a section like the one below that includes; [basis name], PUREAM value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis ",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:3016,Performance,perform,performs,3016,"sis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; aut",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:6581,Performance,perform,performing,6581," on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set will run in (5D/7F) or (6D/10F).; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a .gbs extension,; after app",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:9811,Performance,perform,performs,9811,"e stand-alone basis file except for the addition of the basis name in; brackets.; [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their inp",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:2678,Safety,avoid,avoid,2678,"Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element.; PSI4 uses the angular momentum convention below that; skips the letter J. Note that Gaussian94 convention is; not to skip this letter.; PSI4 can use either convention for .gbs import (assuming; angular momentum levels are not skipped), but it will always output; in the HIK sequence. Another portion of the G94 format, labeling; angular momentum with L=l syntax is newly (August 2020); implemented, and this is preferred for L=7 and above to; avoid ambiguity.; L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... Mixing Basis Sets¶; While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis “block” can be used. We use a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carb",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:4003,Safety,detect,detect,4003,"e a snippet from the mints2 sample; input file, which performs a benzene SCF computation, to demonstrate this; feature.; basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as H1 are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled C1. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable.; In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from \(D_{6h}\) to \(C_{2v}\); PSI4 will detect this; automatically and run in the appropriate point group.; Basis blocks can also be named, e.g., basis; optional_basis_name {...} and the basis defined by it later; applied to another molecule.; # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the basis {...} block may also be used; for defining basis sets, as detailed in User-Defined Basis Sets.; Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; o",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:10555,Safety,detect,detected,10555,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:10054,Testability,test,test,10054,"1627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a PSI4 input file and surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Set",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:6150,Usability,simpl,simply,6150,"ry basis set automatically according to Auxiliary Basis Sets,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to PSI4,; the auxiliary basis will fall back on def2 quad-zeta fitting bases.; Note that if BASIS is known to be larger than quad-zeta,; PSI4 will not attempt to fall back on the def2 fitting bases.; The same basis “block” syntax can be; used to specify basis sets other than that used to define orbitals. For; example,; set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used:; df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. Decontracted Basis Sets¶; Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add “-decon” to the name; of the primary basis set (e.g. decontract).; set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the X2C Hamiltonian. User-Defined Basis Sets¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. There are three routes by which a basis set in G94 format can be introduced to PSI4‘s notice.; (1) Install new basis set file into PSI4 basis library.; Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word spherical or cartesian to indicate; whether the basis set wil",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets.html:10277,Usability,simpl,simply,10277,"surround it with the; command basis {...}, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use assign statements to actually request the basis set. This; basis {...} section replaces the usual set basis XXX line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax basis mybas {...},; and then the basis can be recalled later as set basis mybas.; To use a custom basis set as described in this section, it must be; defined prior to its use in a function that performs a computation.; basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case mints2 provides a complete example of; user-specified basis sets. Inputting effective core potentials (ECPs)¶; For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; Effective core potentials (ECPs) for more information about using ECPs and the; Def2-TZVP basis set definition; for an example of their input syntax. table of contents. Basis Sets; Built-In Basis Sets; Mixing Basis Sets; Decontracted Basis Sets; User-Defined Basis Sets; Inputting effective core potentials (ECPs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Psithon: Structuring an Input File; Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets.html
https://psicode.org/psi4manual/1.5.0/basissets_byelement-1.html:163,Availability,avail,availability,163,﻿. Basis Sets by Element. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element. Basis Sets by Element¶. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. Pople. sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs. 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31ppg; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31ppg_d_p_; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pgss; 6D/10F; H; He; Li; Be; B; C; N; O;,MatchSource.WIKI,psi4manual/1.5.0/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_byelement-1.html
https://psicode.org/psi4manual/1.5.0/basissets_byelement-1.html:56813,Deployability,update,updated,56813," P; S; Cl; Ar. psi3-dzp; 6D/10F; H. B; C; N; O; F; Ne. Al; Si; P; S; Cl. sadlej-lpol-fl; 5D/7F; H. C; N; O; F. dgauss-dzvp-autoaux; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. roos-ano-dz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_byelement-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_byelement-1.html
https://psicode.org/psi4manual/1.5.0/basissets_byelement.html:163,Availability,avail,availability,163,﻿. Basis Sets by Element. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element. Basis Sets by Element¶. Basis set availability by element in PSI4¶. Basis Set; PUREAM; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. Pople. sto-3g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I. 3-21g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs. 6-31gss; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31g; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31gs; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr. 6-31ppg; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31ppg_d_p_; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pg_d_p_; 6D/10F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca. 6-31pgss; 6D/10F; H; He; Li; Be; B; C; N; O;,MatchSource.WIKI,psi4manual/1.5.0/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_byelement.html
https://psicode.org/psi4manual/1.5.0/basissets_byelement.html:56813,Deployability,update,updated,56813," P; S; Cl; Ar. psi3-dzp; 6D/10F; H. B; C; N; O; F; Ne. Al; Si; P; S; Cl. sadlej-lpol-fl; 5D/7F; H. C; N; O; F. dgauss-dzvp-autoaux; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. sto-6g; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe. dz; 6D/10F; H. Li. B; C; N; O; F; Ne. Al; Si; P; S; Cl. roos-ano-dz; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn. weigand-jfit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. lanl2dz; 6D/10F; H. Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi. sad-fit; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne; Na; Mg; Al; Si; P; S; Cl; Ar; K; Ca; Sc; Ti; V; Cr; Mn; Fe; Co; Ni; Cu; Zn; Ga; Ge; As; Se; Br; Kr; Rb; Sr; Y; Zr; Nb; Mo; Tc; Ru; Rh; Pd; Ag; Cd; In; Sn; Sb; Te; I; Xe; Cs; Ba; La; Hf; Ta; W; Re; Os; Ir; Pt; Au; Hg; Tl; Pb; Bi; Po; At; Rn. psi3-tz2pf; 6D/10F; H. B; C; N; O; F. Al; Si; P; S; Cl. 7zapa-nr; 5D/7F; H; He; Li; Be; B; C; N; O; F; Ne. Mg; Al; Si; P; S; Cl; Ar. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Element. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_byelement.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_byelement.html
https://psicode.org/psi4manual/1.5.0/basissets_byfamily-1.html:20814,Deployability,update,updated,20814,"i; pcseg-0. aug-pcSseg-3; aug-pcsseg-3; def2-universal-jkfit; def2-qzvppd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Auxiliary Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_byfamily-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_byfamily-1.html
https://psicode.org/psi4manual/1.5.0/basissets_byfamily.html:20814,Deployability,update,updated,20814,"i; pcseg-0. aug-pcSseg-3; aug-pcsseg-3; def2-universal-jkfit; def2-qzvppd-ri; pcseg-0. aug-pcSseg-4; aug-pcsseg-4; aug-cc-pv5z-jkfit; aug-cc-pwcv5z-ri; pcseg-0. pcseg-0; pcseg-0; def2-universal-jkfit; def2-sv_p_-ri; —. pcseg-1; pcseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcseg-2; pcseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcseg-3; pcseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcseg-4; pcseg-4; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. pcSseg-0; pcsseg-0; def2-universal-jkfit; def2-sv_p_-ri; pcseg-0. pcSseg-1; pcsseg-1; def2-universal-jkfit; def2-svp-ri; pcseg-0. pcSseg-2; pcsseg-2; def2-universal-jkfit; def2-tzvpp-ri; pcseg-0. pcSseg-3; pcsseg-3; def2-universal-jkfit; def2-qzvpp-ri; pcseg-0. pcSseg-4; pcsseg-4; cc-pv5z-jkfit; cc-pwcv5z-ri; pcseg-0. minix; minix; def2-universal-jkfit; def2-svp-ri; —. DZ; dz; —; —; —. DZP; dzp; —; —; —. DZVP; dzvp; dgauss-dzvp-mix; dgauss-dzvp-autoaux; —. psi3-DZP; psi3-dzp; —; —; —. psi3-TZ2P; psi3-tz2p; —; —; —. psi3-TZ2PF; psi3-tz2pf; —; —; —. sadlej-lpol-dl; sadlej-lpol-dl; —; —; —. sadlej-lpol-ds; sadlej-lpol-ds; —; —; —. sadlej-lpol-fl; sadlej-lpol-fl; —; —; —. sadlej-lpol-fs; sadlej-lpol-fs; —; —; —. 2zapa-nr; 2zapa-nr; aug-cc-pvtz-jkfit; aug-cc-pvtz-ri; pcseg-0. 3zapa-nr; 3zapa-nr; aug-cc-pvqz-jkfit; aug-cc-pvqz-ri; pcseg-0. 4zapa-nr; 4zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv5z-ri; pcseg-0. 5zapa-nr; 5zapa-nr; aug-cc-pv5z-jkfit; aug-cc-pv6z-ri; pcseg-0. 6zapa-nr; 6zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. 7zapa-nr; 7zapa-nr; aug-cc-pv6z-ri; aug-cc-pv6z-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. cc-pvtz-f12; cc-pvtz-f12; cc-pvqz-jkfit; cc-pvqz-ri; pcseg-0. cc-pvqz-f12; cc-pvqz-f12; cc-pv5z-jkfit; cc-pv5z-ri; pcseg-0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Auxiliary Basis Sets. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_byfamily.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_byfamily.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:293,Availability,avail,available,293,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p).",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:534,Availability,avail,available,534,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p).",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:854,Availability,avail,available,854,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p).",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:1316,Availability,avail,availability,1316,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p). 6-311G(2d,2p). 6-311+G(2d,2p). 6-311++G(2d,2p). 6-311G(2df). 6-311+G(2df). 6-311++G(2df). 6-311G(2df,p). 6-311+G(2df,p). 6-311++G(2df,p). 6-311G(2df,2p). 6-311+G(2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:1466,Availability,avail,available,1466,"es, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p). 6-311G(2d,2p). 6-311+G(2d,2p). 6-311++G(2d,2p). 6-311G(2df). 6-311+G(2df). 6-311++G(2df). 6-311G(2df,p). 6-311+G(2df,p). 6-311++G(2df,p). 6-311G(2df,2p). 6-311+G(2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df,2p). 6-311++G(3df,2p). 6-311G(3df,2pd). 6-311+G(3df,2pd). 6-311++G(3df,2pd). 6-311G(3df,3pd)",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:3174,Availability,avail,available,3174,"2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df,2p). 6-311++G(3df,2p). 6-311G(3df,2pd). 6-311+G(3df,2pd). 6-311++G(3df,2pd). 6-311G(3df,3pd). 6-311+G(3df,3pd). 6-311++G(3df,3pd). Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space 4; valid basis sets. Li-Kr main group; H & He; D\(\zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ 2; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\). haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:3687,Availability,avail,available,3687,"zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ 2; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\). haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pC",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:3966,Availability,avail,available,3966,"XZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:4118,Availability,avail,available,4118,p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no di,MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:4439,Availability,avail,available,4439,"6; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. au",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:4834,Availability,avail,available,4834,")Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma repla",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5082,Availability,avail,available,5082," DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. I",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5291,Availability,avail,available,5291,"; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5486,Availability,avail,available,5486,"ffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Famil",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5589,Availability,avail,available,5589,"6; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:6520,Deployability,update,updated,6520,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5866,Testability,stub,stub,5866,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5882,Testability,stub,stub,5882,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:5967,Testability,stub,stub,5967,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html:6104,Testability,stub,stubXZ-JKFIT,6104,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables-1.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:293,Availability,avail,available,293,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p).",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:534,Availability,avail,available,534,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p).",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:854,Availability,avail,available,854,"﻿. Basis Sets by Family. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. Basis Sets by Family¶; Tables Pople,; Dunning,; Dunning (Douglas-Kroll),; Dunning (F12),; Karlsruhe,; Jensen,; Petersson,; and Other summarize the orbital basis sets available in; PSI4. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p).",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:1316,Availability,avail,availability,1316,"e degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p). 6-311G(2d,2p). 6-311+G(2d,2p). 6-311++G(2d,2p). 6-311G(2df). 6-311+G(2df). 6-311++G(2df). 6-311G(2df,p). 6-311+G(2df,p). 6-311++G(2df,p). 6-311G(2df,2p). 6-311+G(2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:1466,Availability,avail,available,1466,"es, and noncovalent interactions) and DTQ56 indicate the \(X\;=\zeta\) levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar’s [Papajak:2011:10] calendar; truncations described in Table Months Bases. Fitting bases; in Tables JKFIT,; RI, and DUAL; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting \((oo|\)-type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting \((ov|\)-type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at psi4/psi4/share/psi4/basis in the source. For basis set availability by; element and the default value for keyword PUREAM, consult; Appendix Basis Sets by Element. Summary of Pople-style orbital basis sets available in PSI4 1¶. no diffuse; heavy-augmented; augmented. basis set; alias; basis set; alias; basis set; alias. STO-3G. 3-21G. 6-31G. 6-31+G. 6-31++G. 6-31G(d); 6-31G*; 6-31+G(d); 6-31+G*; 6-31++G(d); 6-31++G*. 6-31G(d,p); 6-31G**; 6-31+G(d,p); 6-31+G**; 6-31++G(d,p); 6-31++G**. 6-311G. 6-311+G. 6-311++G. 6-311G(d); 6-311G*; 6-311+G(d); 6-311+G*; 6-311++G(d); 6-311++G*. 6-311G(d,p); 6-311G**; 6-311+G(d,p); 6-311+G**; 6-311++G(d,p); 6-311++G**. 6-311G(2d). 6-311+G(2d). 6-311++G(2d). 6-311G(2d,p). 6-311+G(2d,p). 6-311++G(2d,p). 6-311G(2d,2p). 6-311+G(2d,2p). 6-311++G(2d,2p). 6-311G(2df). 6-311+G(2df). 6-311++G(2df). 6-311G(2df,p). 6-311+G(2df,p). 6-311++G(2df,p). 6-311G(2df,2p). 6-311+G(2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df,2p). 6-311++G(3df,2p). 6-311G(3df,2pd). 6-311+G(3df,2pd). 6-311++G(3df,2pd). 6-311G(3df,3pd)",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:3174,Availability,avail,available,3174,"2df,2p). 6-311++G(2df,2p). 6-311G(2df,2pd). 6-311+G(2df,2pd). 6-311++G(2df,2pd). 6-311G(3df). 6-311+G(3df). 6-311++G(3df). 6-311G(3df,p). 6-311+G(3df,p). 6-311++G(3df,p). 6-311G(3df,2p). 6-311+G(3df,2p). 6-311++G(3df,2p). 6-311G(3df,2pd). 6-311+G(3df,2pd). 6-311++G(3df,2pd). 6-311G(3df,3pd). 6-311+G(3df,3pd). 6-311++G(3df,3pd). Levels of truncation for diffuse functions in standard basis sets¶. augmentation level; angular momenta in the diffuse space 4; valid basis sets. Li-Kr main group; H & He; D\(\zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ 2; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\). haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:3687,Availability,avail,available,3687,"zeta\); T\(\zeta\); Q\(\zeta\). aug-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\); s, p, \(\cdots\), \(\ell_{max}-1\); aDZ; aTZ; aQZ. heavy-aug-cc-pVXZ 2; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\), \(\ell_{max}\). haDZ; haTZ; haQZ. jun-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pC",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:3966,Availability,avail,available,3966,"XZ; s, p, \(\cdots\), \(\ell_{max}-2\), \(\ell_{max}-1\). jaDZ; jaTZ; jaQZ. may-cc-pVXZ; s, p, \(\cdots\), \(\ell_{max}-2\). maTZ; maQZ. \(\cdots\); s, p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:4118,Availability,avail,available,4118,p. aaQZ. cc-pVXZ. DZ; TZ; QZ. Summary of Dunning orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no di,MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:4439,Availability,avail,available,4439,"6; DTQ56; DTQ56; DTQ56; DTQ56. cc-pCV(X+d)Z; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56; DTQ56. cc-pwCVXZ; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning Douglas-Kroll orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pV(X+d)Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. au",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:4834,Availability,avail,available,4834,")Z-DK. cc-pCVXZ-DK; DTQ5. DTQ5; DTQ5. cc-pCV(X+d)Z-DK. cc-pwCVXZ-DK; –TQ5. –TQ5; –TQ5. cc-pwCV(X+d)Z-DK. Summary of Dunning F12 orbital basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-F12; DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma repla",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5082,Availability,avail,available,5082," DTQ. Summary of Dunning JK-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-JKFIT 3; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pV(X+d)Z-JKFIT; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. I",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5291,Availability,avail,available,5291,"; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pCVXZ-JKFIT 3. cc-pCV(X+d)Z-JKFIT. cc-pwCVXZ-JKFIT 3. cc-pwCV(X+d)Z-JKFIT. Summary of Dunning MP2-fitting basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5486,Availability,avail,available,5486,"ffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Famil",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5589,Availability,avail,available,5589,"6; DTQ56. cc-pV(X+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:6520,Deployability,update,updated,6520,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5866,Testability,stub,stub,5866,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5882,Testability,stub,stub,5882,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:5967,Testability,stub,stub,5967,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/basissets_tables.html:6104,Testability,stub,stubXZ-JKFIT,6104,"+d)Z-RI; DTQ56; 6; 56; Q56; TQ56; DTQ56; DTQ56; DTQ56. cc-pCVXZ-RI. cc-pCV(X+d)Z-RI. cc-pwCVXZ-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. cc-pwCV(X+d)Z-RI; DTQ5. 5; Q5; TQ5; DTQ5; DTQ5; DTQ5. Summary of Dunning dual-basis helper basis sets available in PSI4¶. basis set; no diffuse; feb; mar; apr; may; jun; heavy-aug 2; aug; d-aug. cc-pVXZ-DUAL; TQ. TQ; DTQ. cc-pV(X+d)Z-DUAL. cc-pCVXZ-DUAL. cc-pCV(X+d)Z-DUAL. cc-pwCVXZ-DUAL. cc-pwCV(X+d)Z-DUAL. Summary of Karlsruhe orbital basis sets available in PSI4¶. no diffuse; augmented. def2-SV(P). def2-SVP; def2-SVPD. def2-TZVP; def2-TZVPD. def2-TZVPP; def2-TZVPPD. def2-QZVP; def2-QZVPD. def2-QZVPP; def2-QZVPPD. Summary of Jensen orbital basis sets available in PSI4¶. basis set; no diffuse; augmented; tight; augmented, tight. pcseg-N; 01234 5. aug-pcseg-N. 01234. pcSseg-N. 01234. aug-pcSseg-N. 01234. Summary of Petersson orbital basis sets available in PSI4¶. basis set; augmented, tight. nZaPa-NR; 234567. Summary of other orbital basis sets available in PSI4¶. DZP. TZ2P. TZ2PF. Sadlej-LPol-ds. Sadlej-LPol-dl. Sadlej-LPol-fs. Sadlej-LPol-fl. Footnotes. 1; Corresponding basis set filenames have star replaced by “s”, plus replaced by “p”, and parenthesis and comma replaced by “_”. 2(1,2,3,4,5,6,7); The heavy-aug-cc-stub and jul-cc-stub basis sets are identical. 3(1,2,3); The JKFIT basis sets are designed in the cc-stub(X+d)Z; framework that includes an additional set of; d-functions for second-row p-block elements. Identical basis sets; with the cc-stubXZ-JKFIT label are provided for convenience. 4; D\(\zeta\) has \(\ell_{max}=2\) or d.; T\(\zeta\) has \(\ell_{max}=3\) or f.; Q\(\zeta\) has \(\ell_{max}=4\) or g, etc. 5; N in Jensen basis sets corresponds to \(N+1\zeta\) basis set. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Basis Sets by Family. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/basissets_tables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/basissets_tables.html
https://psicode.org/psi4manual/1.5.0/bibliography-1.html:13377,Deployability,update,updated,13377,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography-1.html
https://psicode.org/psi4manual/1.5.0/bibliography-1.html:12770,Energy Efficiency,charge,charge,12770,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography-1.html
https://psicode.org/psi4manual/1.5.0/bibliography-1.html:12777,Integrability,depend,dependent,12777,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/bibliography-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography-1.html
https://psicode.org/psi4manual/1.5.0/bibliography.html:13377,Deployability,update,updated,13377,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography.html
https://psicode.org/psi4manual/1.5.0/bibliography.html:12770,Energy Efficiency,charge,charge,12770,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography.html
https://psicode.org/psi4manual/1.5.0/bibliography.html:12777,Integrability,depend,dependent,12777,"ut. doi: 10.1021/acs.jctc.6b00456. Hesselmann:2014:094107; A. Hesselmann and T. Korona,; J. Chem. Phys. 141, 094107 (2014). Hylleraas:1930:209; E. Hylleraas; Z. Phys. 65, 209 (1930). Pulay:1986:357; P. Pulay and S. Saebø,; Theor. Chim. Acta 69, 357 (1986). Pinski:2015:034108; P. Pinski, C. Riplinger, E. Valeev, and F. Neese,; J. Chem. Phys. 143, 034108 (2015). Liakos:2015:1525; D. Liakos, M. Sparta, M. Kesharwani, J. Martin, and F. Neese,; J. Chem. Theory Comput. 11, 1525 (2015). Smith:2018:3504; 10.1021/acs.jctc.8b00286,; “PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development”,; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; J. Chem. Theory Comput. 14, 3504-3511 (2018). Schriber:2021:234107; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; J. Chem. Phys. 154, 234107 (2021). Caldeweyher:2019:154122; “A generally applicable atomic-charge dependent London dispersion correction”,; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; J. Chem. Phys. 150, 154122 (2019).; https://doi.org/10.1063/1.5090222. Haser:1989:104; M. Haser and R. Ahlrichs,; J. Comp. Chem. 10(1), 104 (1989).; doi: 10.1002/jcc.540100111. Thompson:2017:144101; T. H. Thompson and C. Ochsenfeld; J. Chem. Phys. 147, 144101 (2017).; doi: 10.1063/1.4994190. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Appendices; Bibliography. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/bibliography.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/bibliography.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:438,Availability,avail,available,438,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:574,Availability,down,download,574,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:724,Availability,avail,available,724,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:791,Deployability,install,installed,791,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:878,Deployability,install,installing,878,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:913,Deployability,install,installation,913,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1042,Deployability,install,installation,1042,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1151,Deployability,configurat,configuration,1151,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1515,Deployability,install,installation,1515,"ntact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:2202,Deployability,install,installation,2202,"and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:4397,Deployability,install,installation,4397,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:4553,Deployability,install,installation,4553,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:4691,Deployability,toggle,toggle,4691,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:5272,Deployability,update,updated,5272,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:361,Integrability,interface,interface,361,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1125,Integrability,wrap,wrapper,1125,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:3264,Integrability,depend,depends,3264,"to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:974,Modifiability,variab,variable,974,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1151,Modifiability,config,configuration,1151,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1616,Modifiability,variab,variable,1616,"and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1892,Modifiability,variab,variable,1892,"e; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computat",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1937,Modifiability,variab,variable,1937,"e; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computat",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:2147,Modifiability,variab,variable,2147,"and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:2372,Modifiability,variab,variable,2372,"nd generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:2432,Modifiability,variab,variable,2432,"ersion 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when en",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:2478,Modifiability,variab,variable,2478,"ersion 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when en",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:2637,Performance,perform,performed,2637,"install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:3119,Performance,optimiz,optimizations,3119,"BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerate",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:3724,Performance,perform,performance,3724,"uired; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface ",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:3954,Performance,perform,performed,3954,"k and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recomm",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:3592,Safety,detect,detect,3592,"utation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1393,Testability,test,tested,1393,"odule developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If b",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc-1.html:1432,Testability,test,tested,1432,"is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment vari",MatchSource.WIKI,psi4manual/1.5.0/brianqc-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc-1.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:438,Availability,avail,available,438,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:574,Availability,down,download,574,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:724,Availability,avail,available,724,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:791,Deployability,install,installed,791,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:878,Deployability,install,installing,878,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:913,Deployability,install,installation,913,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1042,Deployability,install,installation,1042,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1151,Deployability,configurat,configuration,1151,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1515,Deployability,install,installation,1515,"ntact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:2202,Deployability,install,installation,2202,"and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:4397,Deployability,install,installation,4397,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:4553,Deployability,install,installation,4553,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:4691,Deployability,toggle,toggle,4691,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:5272,Deployability,update,updated,5272,"; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recommended option values. Keywords; BRIANQC_ENABLE. Environment Variables. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:361,Integrability,interface,interface,361,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1125,Integrability,wrap,wrapper,1125,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:3264,Integrability,depend,depends,3264,"to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:974,Modifiability,variab,variable,974,"﻿. Interface to the BrianQC GPU module by the BrianQC team. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1151,Modifiability,config,configuration,1151,"  .    .  · ; 1.5;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities; Interface to the BrianQC GPU module by the BrianQC team. Interface to the BrianQC GPU module by the BrianQC team¶; Code author: Gergely Kis; Section author: Gergely Kis; PSI4 contains code to interface to the BrianQC GPU module developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To u",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1616,Modifiability,variab,variable,1616,"and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1892,Modifiability,variab,variable,1892,"e; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computat",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1937,Modifiability,variab,variable,1937,"e; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computat",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:2147,Modifiability,variab,variable,2147,"and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:2372,Modifiability,variab,variable,2372,"nd generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:2432,Modifiability,variab,variable,2432,"ersion 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when en",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:2478,Modifiability,variab,variable,2478,"ersion 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when en",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:2637,Performance,perform,performed,2637,"install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:3119,Performance,optimiz,optimizations,3119,"BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC¶; The operation of BrianQC is transparent from a user’s point of view; every; internal computation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerate",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:3724,Performance,perform,performance,3724,"uired; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface ",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:3954,Performance,perform,performed,3954,"k and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_ENABLE¶; Runtime toggle of whether to use BrianQC. table of contents. Interface to the BrianQC GPU module by the BrianQC team; Installing BrianQC; Building BrianQC’s user-built components; Building PSI4 with BrianQC; Using BrianQC from PSI4; When to enable BrianQC; Necessary and recomm",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:3592,Safety,detect,detect,3592,"utation is either performed by PSI4 (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of PSI4’s usual precision; parameters, like INTS_TOLERANCE and E_CONVERGENCE.; BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. HF and DFT single point energies; HF and DFT geometry optimizations; HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values¶; To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which PSI4 would detect by default), the; input geometry must contain the line symmetry c1 to force PSI4 to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. By default, PSI4 uses density-fitted preiterations for SCF, which BrianQC; doesn’t handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting DF_SCF_GUESS to False.; By default, PSI4 uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set SCF_TYPE to direct. Keywords¶. BRIANQC_ENABLE¶. Whether to enable using the BrianQC GPU module. Type: boolean; Default: false. Environment Variables¶. BRIANQC_SDK_INSTALL¶; Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. BRIANQC_INSTALL_PATH¶; Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1393,Testability,test,tested,1393,"odule developed; by the BrianQC team, which is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If b",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/brianqc.html:1432,Testability,test,tested,1432,"is available after a license agreement from; https://brianqc.com/. Installing BrianQC¶; Please contact BrianQC at https://brianqc.com/; to download the BrianQC GPU module and obtain a license.; Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the BrianQC manual; for a full list of prerequisites.; When installing BrianQC, choose the SDK installation by setting the; BRIANQC_SDK_INSTALL envoronment variable to 1. Building BrianQC’s user-built components¶; After the installation, build BrianQC’s example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build PSI4 with BrianQC. Create a build directory to keep the source tree clean. cd <brianqc_install_path>; mkdir build; cd build. Configure project and generate makefiles with CMake.; You will require Eigen (tested with version 3.1.2); and boost (tested with version 1.62). cmake .. Build the examples and samples. make. Test the installation by starting a small calculation.; Make sure to set the BRIANQC_INSTALL_PATH environment variable to <brianqc_install_path>!. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building PSI4 with BrianQC¶; When CMake-ing PSI4, set the ENABLE_BrianQC CMake variable to 1; and set the BrianQC_DIR CMake variable to the path where BrianQC’s; components have been built (usually <brianqc_install_path>/build), then build PSI4 normally. Using BrianQC from PSI4¶; To use BrianQC, the BRIANQC_INSTALL_PATH environment variable; must be set to the full path of your BrianQC installation.; There are two ways to enable BrianQC for a specific calculation:. setting the BRIANQC_ENABLE input option to True;; setting the BRIANQC_ENABLE environment variable to 1. If both the input option and the environment vari",MatchSource.WIKI,psi4manual/1.5.0/brianqc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/brianqc.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:538,Availability,down,download,538,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1162,Availability,avail,available,1162,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1435,Availability,error,errors,1435,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2822,Availability,error,errors,2822," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:409,Deployability,update,update,409,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:486,Deployability,install,install,486,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:527,Deployability,install,installer,527,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:560,Deployability,install,install,560,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:601,Deployability,install,installer,601,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:633,Deployability,install,install,633,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:698,Deployability,update,update,698,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:823,Deployability,install,installer,823,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1030,Deployability,install,install,1030,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1089,Deployability,install,install,1089,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1136,Deployability,configurat,configuration,1136,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1231,Deployability,install,install,1231,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1467,Deployability,configurat,configuration,1467,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2917,Deployability,install,installation,2917," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3106,Deployability,install,installation,3106,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3784,Deployability,install,installed,3784,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:4476,Deployability,update,updated,4476,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1600,Integrability,depend,dependencies,1600,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2349,Integrability,depend,dependencies,2349,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:980,Modifiability,config,configure,980,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1136,Modifiability,config,configuration,1136,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1334,Modifiability,config,configure,1334,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1467,Modifiability,config,configuration,1467,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1523,Modifiability,config,configure,1523,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1657,Modifiability,config,configure,1657,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1782,Modifiability,config,configure,1782,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1830,Modifiability,config,configure,1830,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2093,Modifiability,config,configure,2093,"detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda i",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2426,Modifiability,config,configure,2426,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2475,Modifiability,plugin,plugin,2475,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2541,Modifiability,config,configure,2541,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2581,Modifiability,config,configure,2581,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2624,Modifiability,config,configure,2624,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2664,Modifiability,config,configure,2664,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2705,Modifiability,config,configure,2705,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2748,Modifiability,config,configure,2748,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3265,Modifiability,config,configure,3265,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3425,Modifiability,variab,variables,3425,"lugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3536,Performance,queue,queue,3536,"lugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:1079,Testability,test,test,1079,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2814,Testability,test,testing,2814," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2853,Testability,test,tests,2853," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2891,Testability,test,tests,2891," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:2905,Testability,test,test,2905," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq-1.html:3949,Testability,log,logo,3949,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_faq-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq-1.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:538,Availability,down,download,538,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1162,Availability,avail,available,1162,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1435,Availability,error,errors,1435,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2822,Availability,error,errors,2822," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:409,Deployability,update,update,409,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:486,Deployability,install,install,486,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:527,Deployability,install,installer,527,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:560,Deployability,install,install,560,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:601,Deployability,install,installer,601,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:633,Deployability,install,install,633,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:698,Deployability,update,update,698,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:823,Deployability,install,installer,823,"﻿. Build & Run FAQ. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. Build & Run FAQ¶. Obtaining and Updating PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating th",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1030,Deployability,install,install,1030,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1089,Deployability,install,install,1089,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1136,Deployability,configurat,configuration,1136,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1231,Deployability,install,install,1231,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1467,Deployability,configurat,configuration,1467,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2917,Deployability,install,installation,2917," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:3106,Deployability,install,installation,3106,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:3784,Deployability,install,installed,3784,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:4476,Deployability,update,updated,4476,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1600,Integrability,depend,dependencies,1600,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2349,Integrability,depend,dependencies,2349,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:980,Modifiability,config,configure,980,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1136,Modifiability,config,configuration,1136,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1334,Modifiability,config,configure,1334,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1467,Modifiability,config,configuration,1467,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1523,Modifiability,config,configure,1523,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1657,Modifiability,config,configure,1657,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1782,Modifiability,config,configure,1782,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1830,Modifiability,config,configure,1830,"ier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2093,Modifiability,config,configure,2093,"detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda i",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2426,Modifiability,config,configure,2426,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2475,Modifiability,plugin,plugin,2475,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2541,Modifiability,config,configure,2541,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2581,Modifiability,config,configure,2581,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2624,Modifiability,config,configure,2624,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2664,Modifiability,config,configure,2664,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2705,Modifiability,config,configure,2705,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2748,Modifiability,config,configure,2748,"si4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS q",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:3265,Modifiability,config,configure,3265,"tran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:3425,Modifiability,variab,variables,3425,"lugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:3536,Performance,queue,queue,3536,"lugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:1079,Testability,test,test,1079,"vel-psi4-dir}; Find-the-code Quiz; Binary Installer; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; How to update and rebuild Psi4. Configuring and Installing PSI4 via Binary¶. How to install a Psi4 binary with the Psi4conda installer, download site; How to install a Psi4 binary with the Psi4conda installer, command-line; How to install a Psi4 binary into an Ana/Miniconda distribution; How to update a Psi4 binary; How to use conda to compile Psi4 faster and easier; What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; How to get high angular momentum integrals from conda. Configuring, Building, and Installing PSI4 via Source¶. Planning: how to configure Psi4 and invoke CMake; How to build and install Psi4, the compact version; How to build, test, and install Psi4, in detail; How to see what build configuration options are available; How to choose the compilation directory, {objdir}; How to install elsewhere than /usr/local/psi4; How to use conda to get a Psi4 development environment; How to configure code to use high angular momentum basis sets; How to see the actual compiling commands (or errors) with cmake; How to save configuration settings for a future compilation; How to configure a Psi4 build on Cray. Non-QC Dependencies¶. What are the tools and dependencies strictly required for building Psi4; How to configure Python for building Psi4; How to handle “runtime library may be hidden” when building with Anaconda Python; How to configure BLAS/LAPACK for building Psi4; How to configure C++ and C compilers for building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2814,Testability,test,testing,2814," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2853,Testability,test,tests,2853," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2891,Testability,test,tests,2891," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:2905,Testability,test,test,2905," building Psi4; What C and C++ compilers and versions are approved; How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; How to configure Fortran compilers for building Psi4; What Fortran compilers are approved; How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew. QC Dependencies and Extensions¶. What are the add-on capabilities for Psi4 and what are their dependencies; How to use a local Add-On repository in the Psi4 build; How to configure CheMPS2 for building Psi4; How to fix “plugin needed to handle lto object” when building CheMPS2; How to configure dkh for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlig",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_faq.html:3949,Testability,log,logo,3949,"h for building Psi4; How to configure libefp for building Psi4; How to configure erd for building Psi4; How to configure gdma for building Psi4; How to configure Libint for building Psi4; How to configure PCMSolver for building Psi4. Testing¶. How to see CTest testing errors; How to run a subset of tests; How to run a minute’s worth of tests; How to test a Psi4 installation. Runtime Setup¶. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation; How to run Psi4 as executable or Python module from conda installation; How to run Psi4 as executable after compilation using driver from source; How to set up the scratch directory; Why not to set PSIDATADIR; How to configure paths for PsiAPI; How to solve ModuleNotFoundError: No module named 'psi4'. Running PSI4¶. What command line options does Psi4 have; What environment variables affect Psi4; What Python is Psi4 running; What Psi4 version is running; How to use Psi4 within a PBS queue; How do I retain specific Psi4 scratch files. Runtime Errors and Debugging¶. How to use gdb and lldb with Psi4; How to compile for debugging; How to fix “undefined symbol: _Py_FalseStruct”. Managing Code¶. What is the directory layout of the installed or staged Psi4; What is the suggested GitHub workflow; How to highlight git merge conflicts in vi. Miscellaneous¶. How to refer to Psi4; How to get a Psi4 logo file. table of contents. Build & Run FAQ; Obtaining and Updating PSI4; Configuring and Installing PSI4 via Binary; Configuring, Building, and Installing PSI4 via Source; Non-QC Dependencies; QC Dependencies and Extensions; Testing; Runtime Setup; Running PSI4; Runtime Errors and Debugging; Managing Code; Miscellaneous. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Build & Run FAQ. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_faq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_faq.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:267,Availability,avail,available,267,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:705,Availability,avail,available,705,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2319,Availability,avail,available,2319,"mpile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2439,Availability,down,downloads,2439,"iler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/p",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:5099,Availability,down,download,5099,"add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:292,Deployability,install,installs,292,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:730,Deployability,install,installs,730,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:1289,Deployability,install,installer,1289,"able at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parent",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2662,Deployability,update,update,2662,"to Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2845,Deployability,install,installed,2845,"mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2942,Deployability,install,install,2942,"oto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remo",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:3274,Deployability,update,update,3274," parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:4556,Deployability,update,update,4556,"si4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Con",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:5924,Deployability,update,updated,5924,"add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2063,Modifiability,plugin,plugin,2063," architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2130,Modifiability,plugin,plugins,2130," with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:2230,Modifiability,plugin,plugins,2230," with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:977,Performance,optimiz,optimization,977,"ining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:1370,Performance,perform,performance,1370,"d the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on y",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:1086,Safety,avoid,avoid,1086,"ining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html:1597,Security,access,access,1597,"ory (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not a",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining-1.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:267,Availability,avail,available,267,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:705,Availability,avail,available,705,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2319,Availability,avail,available,2319,"mpile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2439,Availability,down,downloads,2439,"iler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/p",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:5099,Availability,down,download,5099,"add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:292,Deployability,install,installs,292,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:730,Deployability,install,installs,730,"﻿. Obtaining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop usi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:1289,Deployability,install,installer,1289,"able at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parent",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2662,Deployability,update,update,2662,"to Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2845,Deployability,install,installed,2845,"mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2942,Deployability,install,install,2942,"oto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remo",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:3274,Deployability,update,update,3274," parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c conda-forge. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4 -c psi4. Contribute Back; Not applicable as not under git control. Clone from GitHub Repository¶. Get Initially; The PSI4 repository at https://github.com/psi4/psi4 works like; every other GitHub repo.; Locally, clone as below.; # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:4556,Deployability,update,update,4556,"si4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Build directions; Get Updates; # on branch master; >>> git pull origin master. Contribute Back; Contributions cannot be made directly to the main repository. Fork; instead.; To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the Fork; button to store a PSI4 repository in your GitHub account.; >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Con",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:5924,Deployability,update,updated,5924,"add origin https://github.com/johndoe/psi4.git. Fork from GitHub Repository¶. Get Initially; Go to https://github.com/psi4/psi4, and hit the Fork button to store a; PSI4 repository in your GitHub account. Locally, proceed to clone:; # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. Set up a connection; between your forked repository and the parent repository.; >>> git remote add upstream https://github.com/psi4/psi4.git. Build directions; Get Updates; Locally, update your fork from the parent; repository and store on GitHub at your fork.; # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. Contribute Back; PSI4 contributions process here and; here.; Consider preparing your contribution in a branch; then issue a GitHub pull request. Tarball from GitHub Repository¶. Get Initially; Discouraged! From the PSI4 repository at https://github.com/psi4/psi4, hit the; “Clone or download” then “Download ZIP” button. Locally, unpack as; below.; >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. Build directions; Get Updates; Download new tarball and rebuild. Contribute Back; Not applicable as source not under git control. What is the suggested GitHub workflow¶. table of contents. Obtaining PSI4; How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}; Find-the-code Quiz; Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository; Tarball from GitHub Repository; What is the suggested GitHub workflow. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. © Copyright 2021, The Psi4 Project.; Last updated on Sunday, 28 November 2021 02:41AM.; Created using Sphinx 4.3.1.; . ",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2063,Modifiability,plugin,plugin,2063," architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2130,Modifiability,plugin,plugins,2130," with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:2230,Modifiability,plugin,plugins,2230," with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not applicable as binary is pre-built. Get Updates directions; >>> conda update psi4. Contribute Back; Not applicable as not under git control. Conda Binary Package¶. Get Initially; The pre-compiled conda packages at https://anaconda.org/psi4/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to directions. Locally, install into; a conda environment as below.; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env. >>> # nightly build; >>> conda create -n p4env psi4 -c psi4/label/dev; >>> # Windows; >>> conda create -n p4env psi4 -c psi4 -c",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:977,Performance,optimiz,optimization,977,"ining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:1370,Performance,perform,performance,1370,"d the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on y",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:1086,Safety,avoid,avoid,1086,"ining PSI4. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Obtaining PSI4. Obtaining PSI4¶. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid.; Take a quiz to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. Binary Installer; Conda Binary Package; Clone from GitHub Repository; Fork from GitHub Repository (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_obtaining.html:1597,Security,access,access,1597,"ory (only path to develop PSI4); Tarball from GitHub Repository. Find-the-code Quiz¶; A better decision tree is available at psicode.org/installs/latest,; though the below remains valid. I just want to run the code. I may tweak the Python, but I’m not; developing anything to contribute back to the code base. Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I’m willing to forgo; architecture tuning wizardry to avoid compiling it myself. I’m on Linux or Mac or Windows with Ubuntu Bash Shell. I’m familiar with conda and want to manage PSI4 as an; ordinary conda package. — Goto Binary-Package; I just want a PSI4 installer. — Goto; Binary-Installer. I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. I’m willing to have minimal dealings with git (e.g., commands git; clone and git pull) in return for easy access in future to new; features and bug fixes. — Goto Clone-from-GitHub; I don’t want to deal with this newfangled git, just give me a; tarball of the source code — Goto Tarball-from-GitHub. I want to run and develop in PSI4. In keeping with the open-source philosophy, I don’t mind my code being; as public as Psi4 itself during the development process. —; Goto Fork-from-GitHub; I want to develop using PSI4 infrastructure and libraries, not; on them; I think a plugin might do. I’ve got a PSI4 compilation. Use it, then consult plugins; I’d rather not compile PSI4 or I don’t have compilers —; Goto Binary-Package then consult; plugins through conda. I really like parentheses and/or DBOC, so I want Psi3. —; Psi3 is available from sourceforge, but you’re on your own. Binary Installer¶. Get Initially; Just go to http://www.psicode.org/downloads.html, select “Installer”,; “Stable Release”, and your choice of architecture and Python version,; and follow the instructions there. Build; Not a",MatchSource.WIKI,psi4manual/1.5.0/build_obtaining.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_obtaining.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:665,Availability,avail,available,665,"﻿. Compiling and Installing from Source. Navigation. Index. modules    .    .    .    .  · ; 1.5;  · . PSI4. Installation and Runtime Configuration; Compiling and Installing from Source. Compiling and Installing from Source¶; This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see psicode.org/installs/latest; (select “source”). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see psicode.org/installs/latest (select “conda”). Planning: how to configure Psi4 and invoke CMake¶; PSI4 is built through CMake. An abbreviated build guide can be found; within the source itself.; CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it’s very possible that; from top-level-psi4-dir source directory, you can call cmake -S.; -Bobjdir without any further arguments, and it will invoke cmake,; detect some appropriate defaults, configure the build, create a build; directory objdir, and complete, leaving you to only invoke; make or Ninja in the new build directory.; Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within core; dependencies and add-on dependencies to plan a set of arguments to cmake tailored to; your computer. Proceed to quick build or; detailed build. How to build and install Psi4, the compact version¶; This section outlines the main steps of configuring, compiling, and; installing PSI4. More detail is given here.; >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in de",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:2909,Availability,avail,available,2909,"tconf _NPROCESSORS_ONLN`; >>> make install. How to build, test, and install Psi4, in detail¶; 1. Plan Directories. Get ahold of the PSI4 codebase, and navigate to the top level source; directory, hereafter top-level-psi4-dir. How to obtain Psi4: start with find-the-code quiz, end in {top-level-psi4-dir}. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter objdir. How to choose the compilation directory, {objdir}. Choose an installation directory, hereafter prefix. How to install elsewhere than /usr/local/psi4. 2. Plan Configuration. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the too",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:3541,Availability,error,errors,3541,"equirements to make sure the; target computer has all the necessary dependencies installed. What are the tools and dependencies strictly required for building Psi4; What are the add-on capabilities for Psi4 and what are their dependencies. Prepare any necessary or desired configuration options for cmake,; hereafter [your configuration options]. How to see what build configuration options are available; Planning: how to configure Psi4 and invoke CMake. 3. Configure. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates objdir ready for compilation.; >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. 4. Compile. Compile the code (optional -j triggers parallel compilation). >>> cd {objdir}; >>> make -j`getconf _NPROCESSORS_ONLN`. 5. Test. Optionally, use CTest and Pytest to test the build. How to run a minute’s worth of tests; How to run a subset of tests; How to see CTest testing errors; How to test a Psi4 installation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:4539,Availability,down,download,4539,"nstallation. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. 6. Install. If tests pass, install the code.; >>> make install. 7. Configure Runtime. To run PSI4 after installation, you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; MPFR https://www.mpfr.org/. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCEle",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:4797,Availability,down,download,4797,", you need to configure a few variables:. How to run Psi4 as executable after compilation; How to run Psi4 as Python module after compilation. What are the tools and dependencies strictly required for building Psi4¶; The core PSI4 build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for PSI4 and any notes and warnings pertaining to it. C++ and C Compilers (C++14 compliant); Optimized BLAS and LAPACK libraries (preferably NOT one supplied by a standard; Linux distribution); Python interpreter and headers (3.6+) https://www.python.org/; CMake (3.15+) https://cmake.org/download/; NumPy (needed at runtime and buildtime) https://numpy.org/; System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for PSI4, but if not detected, the; build system will automatically download and build. gau2grid — [what is gau2grid?] [gau2grid min version]; Libint — [what is Libint?] [Libint min version] (Libint2 as of Nov 2020; added by v1.4). Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; MPFR https://www.mpfr.org/. Libxc — [what is Libxc?] [Libxc min version]; pybind11 — [what is Pybind11?] [Pybind11 min version]; QCElemental — [what is QCElemental?]; QCEngine — [what is QCEngine?] (March 2019; added by v1.4). Additionally, there are runtime-only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency o",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:6276,Availability,avail,available,6276,"only dependencies:. msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) https://www.perl.org/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing in parallel) https://docs.pytest.org/en/2.1.0/xdist.html. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver ",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:6346,Availability,down,download,6346,"f QCElemental; optional for QCElemental but required for PSI4); NumPy https://numpy.org/; networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for PSI4); pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) https://www.perl.org/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing in parallel) https://docs.pytest.org/en/2.1.0/xdist.html. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:6603,Availability,avail,available,6603,"tps://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental); pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). Dropped Dependencies:. Boost (September 2016; dropped by v1.1); deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). What are the add-on capabilities for Psi4 and what are their dependencies¶; Each of the items below is an independent additional capability that can; be built with PSI4. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to cmake. Note that many; are available pre-built from conda. PSI4 Testing. CTest https://cmake.org/download/; Perl (for some coupled-cluster CTest tests) https://www.perl.org/; pytest (for installed testing) http://doc.pytest.org/en/latest/; pytest-xdist (for installed testing in parallel) https://docs.pytest.org/en/2.1.0/xdist.html. PSI4 Documentation (available pre-built at psicode.org/psi4manual/master/index.html). Sphinx (3.5+) http://sphinx-doc.org; Perl (for some auto-documentation scripts) https://www.perl.org/; nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; See [“message” lines] for advice on obtaining docs dependencies. Ambit — https://github.com/jturney/ambit; CheMPS2 — [what is CheMPS2?] [CheMPS2 min version]. HDF5 https://support.hdfgroup.org/HDF5/; zlib http://www.zlib.net/. dkh — [what is dkh?] [dkh min version]. Fortran Compiler. gdma — [what is gdma?] [gdma min version]. Fortran Compiler. PCMSolver — [what is PCMSolver?]. Fortran Compiler; zlib http://www.zlib.net/. simint — [what is simint?] [simint min version]. Additionally, there are runtime-loaded capabilities:. PylibEFP & libefp — [what is LibEFP?] [LibEFP min version]; cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; gcp — [what is gCP?]; mrcc — [what is MPCC?",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:8482,Availability,avail,available,8482," cfour — [what is CFOUR?]; dftd3 — [what is DFTD3?]; gcp — [what is gCP?]; mrcc — [what is MPCC?]; v2rdm_casscf — [what is v2rdm_casscf?]; sns-mp2 — https://github.com/DEShawResearch/sns-mp2/commits/master; resp — https://github.com/cdsgroup/resp; gpu_dfcc — https://github.com/edeprince3/gpu_dfcc/commits/master; OpenFermion-Psi4 — https://github.com/quantumlib/OpenFermion; cppe — https://github.com/maxscheurer/cppe; mp2d — https://github.com/Chandemonium/MP2D; FockCI — https://github.com/shannonhouck/psi4fockci; cct3 — https://github.com/piecuch-group/cct3; adcc — https://github.com/adc-connect/adcc; BrianQC — https://www.brianqc.com/; i-PI — http://ipi-code.org/; psixas — https://github.com/Masterluke87/psixas; MDI — https://github.com/MolSSI-MDI/MDI_Library. How to use conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:9324,Availability,reliab,reliably,9324,"conda to get a Psi4 development environment¶; PSI4 has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package psi4-dev is available to gather the dependencies; and build tools needed to compiler PSI4 from source. Go to; psicode.org/installs/latest, select “source” and “nightly build” along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script psi4-path-advisor. Running; psi4-path-advisor --help shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake’s cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; objdir, you can build PSI4. Remember to activate this; conda environment during PSI4 running or development. There are a; few extra options to psi4-path-advisor to set up using conda’s GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it’s recommended to use the conda packages. The AM controlling keyword MAX_AM_ERI; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least MAX_AM_ERI zeta. See; psi4//external/upstream/libint2/CMakeLists.txt for a fuller; discussion of AM capabilities. Unless BUILD_Libint2_GENERATOR; is set to ON, an internal build of Libint2 will download a; pregenerated ",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
https://psicode.org/psi4manual/1.5.0/build_planning-1.html:10270,Availability,down,download,10270,"GNU; compilers (on Linux), conda’s Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda’s GNU compilers (on Linux).; >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. How to configure code to use high angular momentum basis sets¶; The Libint integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it’s recommended to use the conda packages. The AM controlling keyword MAX_AM_ERI; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least MAX_AM_ERI zeta. See; psi4//external/upstream/libint2/CMakeLists.txt for a fuller; discussion of AM capabilities. Unless BUILD_Libint2_GENERATOR; is set to ON, an internal build of Libint2 will download a; pregenerated tarball of at least MAX_AM_ERI AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it’s not recommended. All the AM generation settings would need to be; edited in the above CMakeLists.txt rather than passing them into; the PSI4 build directly. Build with Higher Angular Momentum; >>> cmake -DMAX_AM_ERI=6. Relevant CMake Options:; MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since PSI4 1.1, it is possible to build Libi",MatchSource.WIKI,psi4manual/1.5.0/build_planning-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.5.0/build_planning-1.html
