id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:7719,Integrability,interface,interface,7719,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:7808,Integrability,interface,interface,7808,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:7917,Integrability,interface,interface,7917,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:8097,Integrability,interface,interface,8097,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:8311,Integrability,interface,interface,8311,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:493,Modifiability,extend,extends,493,". IJExtension (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class IJExtension. java.lang.Object; qupath.imagej.gui.IJExtension. All Implemented Interfaces:; QuPathExtension. public class IJExtension; extends Object; implements QuPathExtension; QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; static StringProperty; imageJPath. Property representing the path to a local ImageJ installation, or null if no path has been set. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. Constructor Summary; Constructors. Constructor; Description; IJExtension();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static Overlay; extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter). Extract an ImageJ overlay for the specified region. static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; PathObject pathObject,; RegionRequest request,; boolean setROI). Similar to extractROI(ImageServer, ROI, RegionRequest, boolean), except that the title of the ImagePlus is set according to the parent object type (which is used to get the ROI). static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI). Extract a region of interest from an image as an ImageJ ImagePlus. static PathImage<ImagePlus>; extractROIWithOverlay(ImageServer<Buffe",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3153,Modifiability,inherit,inherited,3153,"gion as an ImagePlus, optionally setting ImageJ Rois corresponding to QuPath objects. String; getDescription(). A short description of the extension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path ha",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3292,Modifiability,inherit,inherited,3292,"ension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an i",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3859,Modifiability,plugin,plugins,3859,"ageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). Returns:; an ImageJ instance, or null if ImageJ could not be started. extractROI; public static PathImage<ImagePlus> extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI); throws IOException; Extract a region of interest from an image as an ImageJ ImagePlus. Parameters:; server - the image; pathROI - ; request - ; setROI - true if a ROI should be converted to the closest matching ImageJ Roi & set on the image, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3838,Performance,load,load,3838,"ageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). Returns:; an ImageJ instance, or null if ImageJ could not be started. extractROI; public static PathImage<ImagePlus> extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI); throws IOException; Extract a region of interest from an image as an ImageJ ImagePlus. Parameters:; server - the image; pathROI - ; request - ; setROI - true if a ROI should be converted to the closest matching ImageJ Roi & set on the image, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3227,Security,hash,hashCode,3227,"Path objects. String; getDescription(). A short description of the extension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String).",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:7486,Testability,test,test,7486,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html:593,Deployability,install,install,593,. IJExtension.IJExtensionCommands (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class IJExtension.IJExtensionCommands. java.lang.Object; qupath.imagej.gui.IJExtension.IJExtensionCommands. Enclosing class:; IJExtension. public static class IJExtension.IJExtensionCommands; extends Object; Commands to install with the ImageJ extension. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; actionCellDetection;  ; final org.controlsfx.control.action.Action; actionCellMembraneDetection. Deprecated. final org.controlsfx.control.action.Action; actionDoG;  ; final org.controlsfx.control.action.Action; actionExtractRegion;  ; final org.controlsfx.control.action.Action; actionImportROIs;  ; final org.controlsfx.control.action.Action; actionMacroRunner;  ; final org.controlsfx.control.action.Action; actionPixelCount. Deprecated. final org.controlsfx.control.action.Action; actionPlugins;  ; final org.controlsfx.control.action.Action; actionPositiveCellDetection;  ; final org.controlsfx.control.action.Action; actionSimpleTissueDetection. Deprecated. final org.controlsfx.control.action.Action; actionSLIC;  ; final org.controlsfx.control.action.Action; actionSnapshot;  ; final org.controlsfx.control.action.Action; actionSubcellularDetection. Deprecated. final org.controlsfx.control.action.Action; actionTiles;  ; final org.controlsfx.control.action.Action; SEP_0;  ; final org.controlsfx.control.action.Action; SEP_1;  ; final org.controlsfx.control.action.Action; SEP_2;  ; final org.controlsfx.control.action.Action; SEP_2B;  ; final org.controlsfx.control.action.Action; SEP_3;  ; final org.controlsfx.control.action.Action; SEP_4;  . Method Summar,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html:565,Modifiability,extend,extends,565,. IJExtension.IJExtensionCommands (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class IJExtension.IJExtensionCommands. java.lang.Object; qupath.imagej.gui.IJExtension.IJExtensionCommands. Enclosing class:; IJExtension. public static class IJExtension.IJExtensionCommands; extends Object; Commands to install with the ImageJ extension. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; actionCellDetection;  ; final org.controlsfx.control.action.Action; actionCellMembraneDetection. Deprecated. final org.controlsfx.control.action.Action; actionDoG;  ; final org.controlsfx.control.action.Action; actionExtractRegion;  ; final org.controlsfx.control.action.Action; actionImportROIs;  ; final org.controlsfx.control.action.Action; actionMacroRunner;  ; final org.controlsfx.control.action.Action; actionPixelCount. Deprecated. final org.controlsfx.control.action.Action; actionPlugins;  ; final org.controlsfx.control.action.Action; actionPositiveCellDetection;  ; final org.controlsfx.control.action.Action; actionSimpleTissueDetection. Deprecated. final org.controlsfx.control.action.Action; actionSLIC;  ; final org.controlsfx.control.action.Action; actionSnapshot;  ; final org.controlsfx.control.action.Action; actionSubcellularDetection. Deprecated. final org.controlsfx.control.action.Action; actionTiles;  ; final org.controlsfx.control.action.Action; SEP_0;  ; final org.controlsfx.control.action.Action; SEP_1;  ; final org.controlsfx.control.action.Action; SEP_2;  ; final org.controlsfx.control.action.Action; SEP_2B;  ; final org.controlsfx.control.action.Action; SEP_3;  ; final org.controlsfx.control.action.Action; SEP_4;  . Method Summar,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html:2012,Modifiability,inherit,inherited,2012,"mportROIs;  ; final org.controlsfx.control.action.Action; actionMacroRunner;  ; final org.controlsfx.control.action.Action; actionPixelCount. Deprecated. final org.controlsfx.control.action.Action; actionPlugins;  ; final org.controlsfx.control.action.Action; actionPositiveCellDetection;  ; final org.controlsfx.control.action.Action; actionSimpleTissueDetection. Deprecated. final org.controlsfx.control.action.Action; actionSLIC;  ; final org.controlsfx.control.action.Action; actionSnapshot;  ; final org.controlsfx.control.action.Action; actionSubcellularDetection. Deprecated. final org.controlsfx.control.action.Action; actionTiles;  ; final org.controlsfx.control.action.Action; SEP_0;  ; final org.controlsfx.control.action.Action; SEP_1;  ; final org.controlsfx.control.action.Action; SEP_2;  ; final org.controlsfx.control.action.Action; SEP_2B;  ; final org.controlsfx.control.action.Action; SEP_3;  ; final org.controlsfx.control.action.Action; SEP_4;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. SEP_0; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); public final org.controlsfx.control.action.Action SEP_0. actionSLIC; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); @ActionConfig(""Action.ImageJ.superpixelsSLIC""); public final org.controlsfx.control.action.Action actionSLIC. actionDoG; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); @ActionConfig(""Action.ImageJ.superpixelsDoG""); public final org.controlsfx.control.action.Action actionDoG. SEP_1; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); public final org.controlsfx.control.action.Action SEP_1. actionTiles; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); @ActionConfig(""Action.ImageJ.tilesToAnnotations""); public final org.controlsfx.control.action.Action actionTiles. actionCellDetection; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.CellDetection""}); @ActionConfig(""Action.Imag",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html:2086,Security,hash,hashCode,2086,"ner;  ; final org.controlsfx.control.action.Action; actionPixelCount. Deprecated. final org.controlsfx.control.action.Action; actionPlugins;  ; final org.controlsfx.control.action.Action; actionPositiveCellDetection;  ; final org.controlsfx.control.action.Action; actionSimpleTissueDetection. Deprecated. final org.controlsfx.control.action.Action; actionSLIC;  ; final org.controlsfx.control.action.Action; actionSnapshot;  ; final org.controlsfx.control.action.Action; actionSubcellularDetection. Deprecated. final org.controlsfx.control.action.Action; actionTiles;  ; final org.controlsfx.control.action.Action; SEP_0;  ; final org.controlsfx.control.action.Action; SEP_1;  ; final org.controlsfx.control.action.Action; SEP_2;  ; final org.controlsfx.control.action.Action; SEP_2B;  ; final org.controlsfx.control.action.Action; SEP_3;  ; final org.controlsfx.control.action.Action; SEP_4;  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. SEP_0; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); public final org.controlsfx.control.action.Action SEP_0. actionSLIC; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); @ActionConfig(""Action.ImageJ.superpixelsSLIC""); public final org.controlsfx.control.action.Action actionSLIC. actionDoG; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); @ActionConfig(""Action.ImageJ.superpixelsDoG""); public final org.controlsfx.control.action.Action actionDoG. SEP_1; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); public final org.controlsfx.control.action.Action SEP_1. actionTiles; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.Tiles""}); @ActionConfig(""Action.ImageJ.tilesToAnnotations""); public final org.controlsfx.control.action.Action actionTiles. actionCellDetection; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.CellDetection""}); @ActionConfig(""Action.ImageJ.cellDetection""); public final org.controlsfx.control.action.Action ac",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html:4107,Usability,simpl,simpleTissueDetection,4107,"ction; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.CellDetection""}); @ActionConfig(""Action.ImageJ.positiveCellDetection""); public final org.controlsfx.control.action.Action actionPositiveCellDetection. SEP_2; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.CellDetection""}); public final org.controlsfx.control.action.Action SEP_2. actionSubcellularDetection; @ActionMenu({""Menu.Analyze"",""Menu.Analyze.CellDetection""}); @ActionConfig(""Action.ImageJ.subcellularDetection""); @Deprecated; public final org.controlsfx.control.action.Action actionSubcellularDetection; Deprecated. SEP_2B; @ActionMenu(""Menu.Analyze""); public final org.controlsfx.control.action.Action SEP_2B. actionPixelCount; @ActionMenu({""Menu.Analyze"",""Menu.deprecated""}); @ActionConfig(""Action.ImageJ.pixelCount""); @Deprecated; public final org.controlsfx.control.action.Action actionPixelCount; Deprecated. actionSimpleTissueDetection; @ActionMenu({""Menu.Analyze"",""Menu.deprecated""}); @ActionConfig(""Action.ImageJ.simpleTissueDetection""); @Deprecated; public final org.controlsfx.control.action.Action actionSimpleTissueDetection; Deprecated. actionCellMembraneDetection; @ActionMenu({""Menu.Analyze"",""Menu.deprecated""}); @ActionConfig(""Action.ImageJ.cellAndMembraneDetection""); @Deprecated; public final org.controlsfx.control.action.Action actionCellMembraneDetection; Deprecated. actionExtractRegion; @ActionIcon(EXTRACT_REGION); @ActionMenu({""Menu.Extensions"",""ImageJ>""}); @ActionConfig(""Action.ImageJ.extractRegion""); public final org.controlsfx.control.action.Action actionExtractRegion. actionSnapshot; @ActionIcon(SCREENSHOT); @ActionMenu({""Menu.Extensions"",""ImageJ>""}); @ActionConfig(""Action.ImageJ.extractRegionSnapshot""); public final org.controlsfx.control.action.Action actionSnapshot. actionImportROIs; @ActionMenu({""Menu.Extensions"",""ImageJ>""}); @ActionConfig(""Action.ImageJ.importRois""); public final org.controlsfx.control.action.Action actionImportROIs. SEP_3; @ActionMenu({""Menu.Extensions"",""ImageJ>""}); public final org.con",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2397,Deployability,install,installed,2397,"lay. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3118,Deployability,update,update,3118,"nherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; mul",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2482,Integrability,interface,interface,2482,"tion of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String ar",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2740,Integrability,interface,interface,2740,"ument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3020,Integrability,interface,interface,3020,"ib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3250,Integrability,interface,interface,3250,"GUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:4373,Integrability,interface,interface,4373,"ner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process,",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:5507,Integrability,depend,depending,5507," and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:413,Modifiability,plugin,plugins,413,". ImageJMacroRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class ImageJMacroRunner. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; a",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:577,Modifiability,extend,extends,577,". ImageJMacroRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class ImageJMacroRunner. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; a",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:623,Modifiability,plugin,plugin,623,". ImageJMacroRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class ImageJMacroRunner. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; a",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1188,Modifiability,plugin,plugin,1188,"Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class ImageJMacroRunner. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1353,Modifiability,plugin,plugin,1353,"j.gui; Class ImageJMacroRunner. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath -",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1396,Modifiability,extend,extends,1396,"AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Detail",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1583,Modifiability,extend,extends,1583,"ng ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1823,Modifiability,plugin,plugin,1823,"s. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief des",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1928,Modifiability,plugin,plugin,1928,"nd Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(T",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1944,Modifiability,inherit,inherited,1944,"on; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageDat",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:1976,Modifiability,plugin,plugins,1976,"ableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2103,Modifiability,inherit,inherited,2103,"rate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can u",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2525,Modifiability,plugin,plugin,2525,"tion of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String ar",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2794,Modifiability,plugin,plugin,2794,"ument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3051,Modifiability,plugin,plugin,3051,"ib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3100,Modifiability,plugin,plugin,3100,"nherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; mul",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3632,Modifiability,plugin,plugin,3632,"ame of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to displa",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3771,Modifiability,plugin,plugin,3771,"rom interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnable",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3920,Modifiability,variab,variables,3920,"boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, ge",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:4020,Modifiability,plugin,plugins,4020,"ugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; a",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:4636,Modifiability,extend,extends,4636,"plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.;",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:5205,Modifiability,extend,extends,5205," and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:5531,Modifiability,plugin,plugin,5531," and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:668,Safety,detect,detected,668,". ImageJMacroRunner (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class ImageJMacroRunner. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.imagej.gui.ImageJMacroRunner. All Implemented Interfaces:; PathPlugin<BufferedImage>. public class ImageJMacroRunner; extends AbstractPlugin<BufferedImage>; QuPath plugin for running ImageJ macros & returning detected regions.; ; TODO: Support script recording. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJMacroRunner(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; a",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3844,Safety,abort,abort,3844,"description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Descri",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:4014,Safety,safe,safe,4014,"ugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; a",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:4479,Safety,detect,detected,4479,"a,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the ro",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:5486,Safety,detect,detection,5486," and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Specified by:; parseArgument in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getSupportedParentObjectClasses; protected Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(). addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2177,Security,hash,hashCode,2177," the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should blo",MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:536,Deployability,integrat,integration,536,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:616,Deployability,install,install,616,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:365,Integrability,interface,interface,365,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:536,Integrability,integrat,integration,536,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:677,Modifiability,plugin,plugin,677,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:722,Safety,detect,detected,722,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-tree.html:308,Modifiability,plugin,plugins,308,. qupath.imagej.gui Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.gui. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.imagej.gui.ImageJMacroRunner. qupath.imagej.gui.IJExtension (implements qupath.lib.gui.extensions.QuPathExtension); qupath.imagej.gui.IJExtension.IJExtensionCommands. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-tree.html:357,Modifiability,plugin,plugins,357,. qupath.imagej.gui Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.gui. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.imagej.gui.ImageJMacroRunner. qupath.imagej.gui.IJExtension (implements qupath.lib.gui.extensions.QuPathExtension); qupath.imagej.gui.IJExtension.IJExtensionCommands. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/gui/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:1644,Availability,mask,mask,1644,"tructor Summary; Constructors. Constructor; Description; MorphologicalReconstruction();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ByteProcessor; binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges). Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. static ImageProcessor; closingByReconstruction(ImageProcessor ip,; double radius). Apply a morphological closing by reconstruction. static ImageProcessor; findRegionalMaxima(ImageProcessor ip,; float threshold,; boolean outputBinary). Find regional maxima using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. bin",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:1995,Availability,mask,mask,1995," (based on ImageJ's FloodFiller) suitable for binary images only. static ImageProcessor; closingByReconstruction(ImageProcessor ip,; double radius). Apply a morphological closing by reconstruction. static ImageProcessor; findRegionalMaxima(ImageProcessor ip,; float threshold,; boolean outputBinary). Find regional maxima using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:2273,Availability,mask,mask,2273,"al reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor i",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:2342,Availability,mask,mask,2342,"al reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor i",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:3124,Availability,mask,mask,3124,"econstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMin",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:3346,Availability,mask,mask,3346,"s are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMinima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has regi",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:3415,Availability,mask,mask,3415,"s are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMinima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has regi",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:4593,Availability,mask,mask,4593,"mageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMinima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask); Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. Parameters:; fp - ; ipMask - . findRegionalMaxima; public static ImageProcessor findRegionalMaxima(ImageProcessor ip,; float threshold,; boolean outputBinary); Find regional maxima using morphological reconstruction. Parameters:; ip - input image; threshold - the extent to which a maximum must be greater than its surroundings; outputBinary - if true, the output is a binary image; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:525,Modifiability,extend,extends,525,". MorphologicalReconstruction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class MorphologicalReconstruction. java.lang.Object; qupath.imagej.processing.MorphologicalReconstruction. public class MorphologicalReconstruction; extends Object; Implementation of morphological reconstruction for ImageJ. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; MorphologicalReconstruction();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ByteProcessor; binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges). Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. static ImageProcessor; closingByReconstruction(ImageProcessor ip,; double radius). Apply a morphological closing by reconstruction. static ImageProcessor; findRegionalMaxima(ImageProcessor ip,; float threshold,; boolean outputBinary). Find regional maxima using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask i",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:2391,Modifiability,inherit,inherited,2391,"hat a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:2182,Security,validat,validateMarkerMask,2182,"nalMaxima(ImageProcessor ip,; float threshold,; boolean outputBinary). Find regional maxima using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Retur",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:2465,Security,hash,hashCode,2465,"g morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipM",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:3213,Security,validat,validateMarkerMask,3213,"s are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMinima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has regi",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:3255,Security,validat,validateMarkerMask,3255,"s are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMinima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has regi",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:461,Modifiability,extend,extends,461,". RoiLabeling (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class RoiLabeling. java.lang.Object; qupath.imagej.processing.RoiLabeling. public class RoiLabeling; extends Object; Collection of static methods to help work with ROIs, binary & labelled images in ImageJ.; ; This enables switching between different methods of representing regions as required. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RoiLabeling();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue). Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. static void; clearOutside(ImageProcessor ip,; Roi roi). Clear (i.e. static void; fillHoles(ByteProcessor bp). Fill holes in a binary image. static void; fillOutside(ImageProcessor ip,; Roi roi,; double value). Fill in a region outside a specified ROI. static ByteProcessor; findDirectionalMaxima(ImageProcessor ip). Create a binary image for pixels that have a higher value than their neighbors. static ByteProcessor; findDirectionalMinima(ImageProcessor ip). Create a binary image for pixels that have a lower value than their neighbors. static List<PolygonRoi>; getFilledPolygonROIs(ImageProcessor ip,; int wandMode). Get filled PolygonRois for connected pixels with the same value in an image. static List<PolygonRoi>; getFilledPolygonROIsExperimental(ImageProcessor ip). Experimental 8-connected ROI creation; non-zero pixels considered within objects. static Map<Float,PolygonRoi>; getFilledPolygonROIsFromLabels(ImageProcessor ip,; int wandMode). Get filled Polygon R",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:2288,Modifiability,extend,extends,2288," specified ROI. static ByteProcessor; findDirectionalMaxima(ImageProcessor ip). Create a binary image for pixels that have a higher value than their neighbors. static ByteProcessor; findDirectionalMinima(ImageProcessor ip). Create a binary image for pixels that have a lower value than their neighbors. static List<PolygonRoi>; getFilledPolygonROIs(ImageProcessor ip,; int wandMode). Get filled PolygonRois for connected pixels with the same value in an image. static List<PolygonRoi>; getFilledPolygonROIsExperimental(ImageProcessor ip). Experimental 8-connected ROI creation; non-zero pixels considered within objects. static Map<Float,PolygonRoi>; getFilledPolygonROIsFromLabels(ImageProcessor ip,; int wandMode). Get filled Polygon ROIs using distinct labels, creating a map between labels and ROIs. static ImageProcessor; labelImage(ImageProcessor ip,; float threshold,; boolean conn8). Create a labelled image from above-threshold pixels for an image. static ImageProcessor; labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois). Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. static Roi[]; labelsToConnectedROIs(ImageProcessor ipLabels,; int n). Create ROIs from labels in an image. static List<PolygonRoi>; labelsToFilledRoiList(ImageProcessor ipLabels,; boolean conn8). Convert a labelled image into a list of PolygonRois by tracing. static PolygonRoi[]; labelsToFilledROIs(ImageProcessor ipLabels,; int n). Convert a labelled image into a list of PolygonRois by tracing. static int; removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8). Remove objects containing < minPixels or > maxPixels. static void; removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8). Remove objects having small areas, defined in terms of pixels. static PolygonRoi; wandToRoi(Wand wand). Convert a traced outline from the ImageJ Wand into a PolygonRoi. Methods inherited from class java.lang.O",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:3232,Modifiability,inherit,inherited,3232,"sor; labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois). Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. static Roi[]; labelsToConnectedROIs(ImageProcessor ipLabels,; int n). Create ROIs from labels in an image. static List<PolygonRoi>; labelsToFilledRoiList(ImageProcessor ipLabels,; boolean conn8). Convert a labelled image into a list of PolygonRois by tracing. static PolygonRoi[]; labelsToFilledROIs(ImageProcessor ipLabels,; int n). Convert a labelled image into a list of PolygonRois by tracing. static int; removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8). Remove objects containing < minPixels or > maxPixels. static void; removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8). Remove objects having small areas, defined in terms of pixels. static PolygonRoi; wandToRoi(Wand wand). Convert a traced outline from the ImageJ Wand into a PolygonRoi. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. RoiLabeling; public RoiLabeling(). Method Details. findDirectionalMaxima; public static ByteProcessor findDirectionalMaxima(ImageProcessor ip); Create a binary image for pixels that have a higher value than their neighbors.; Comparisons are made horizontally, vertically and diagonally. Pixels meeting the criterion ; have the value 255, all others are 0. Parameters:; ip - ; Returns:. findDirectionalMinima; public static ByteProcessor findDirectionalMinima(ImageProcessor ip); Create a binary image for pixels that have a lower value than their neighbors.; Comparisons are made horizontally, vertically and diagonally. Pixels meeting the criterion ; have the value 255, all others are 0. Parameters:; ip - ; Returns:. getFilledPolygonROIsExperimental; public static List<PolygonRoi> getFilledPolygonROIsExperimental(ImageProcessor ip); Experimental 8-conn",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:7400,Modifiability,extend,extends,7400,"edPolygonROIs(ImageProcessor ip,; int wandMode); Get filled PolygonRois for connected pixels with the same value in an image.; Because this uses ImageJ's Wand tool, holes will be filled.; ; Note that this command applies any thresholds that were set in the ImageProcessor, returning ; only Rois for values within these limits. Therefore to identify only non-zero pixels in a labelled image; you may need to first call ip.setThreshold(0.5, Double.POSITIVE_INFINITY, ImageProcessor.NO_LUT_UPDATE);. Parameters:; ip - ; wandMode - ; Returns:. wandToRoi; public static PolygonRoi wandToRoi(Wand wand); Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:6271,Safety,detect,detected,6271,"mage into a list of PolygonRois by tracing.; ; Unlike labelsToFilledROIs, the order in which ROIs are returned is arbitrary.; ; Also, the multiple Rois may be created for the same label, if unconnected regions are used. Parameters:; ipLabels - ; conn8 - ; Returns:. labelsToConnectedROIs; public static Roi[] labelsToConnectedROIs(ImageProcessor ipLabels,; int n); Create ROIs from labels in an image. Parameters:; ipLabels - the labeled image; generally this should be a ByteProcessor or ShortProcessor; n - the total number of labels; often this is equal to the maximum value in the image; Returns:; an array of length n; output[i] is the ROI for label i+1, or null if no Roi is found; with that label. getFilledPolygonROIsFromLabels; public static Map<Float,PolygonRoi> getFilledPolygonROIsFromLabels(ImageProcessor ip,; int wandMode); Get filled Polygon ROIs using distinct labels, creating a map between labels and ROIs.; ; Note that discontinuous ROIs are not supported; if labelled regions are discontinuous,; then ROIs detected earlier will be discarded from the map. Parameters:; ip - ; wandMode - ; Returns:. getFilledPolygonROIs; public static List<PolygonRoi> getFilledPolygonROIs(ImageProcessor ip,; int wandMode); Get filled PolygonRois for connected pixels with the same value in an image.; Because this uses ImageJ's Wand tool, holes will be filled.; ; Note that this command applies any thresholds that were set in the ImageProcessor, returning ; only Rois for values within these limits. Therefore to identify only non-zero pixels in a labelled image; you may need to first call ip.setThreshold(0.5, Double.POSITIVE_INFINITY, ImageProcessor.NO_LUT_UPDATE);. Parameters:; ip - ; wandMode - ; Returns:. wandToRoi; public static PolygonRoi wandToRoi(Wand wand); Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is ba",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:3306,Security,hash,hashCode,3306,"l ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. static Roi[]; labelsToConnectedROIs(ImageProcessor ipLabels,; int n). Create ROIs from labels in an image. static List<PolygonRoi>; labelsToFilledRoiList(ImageProcessor ipLabels,; boolean conn8). Convert a labelled image into a list of PolygonRois by tracing. static PolygonRoi[]; labelsToFilledROIs(ImageProcessor ipLabels,; int n). Convert a labelled image into a list of PolygonRois by tracing. static int; removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8). Remove objects containing < minPixels or > maxPixels. static void; removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8). Remove objects having small areas, defined in terms of pixels. static PolygonRoi; wandToRoi(Wand wand). Convert a traced outline from the ImageJ Wand into a PolygonRoi. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. RoiLabeling; public RoiLabeling(). Method Details. findDirectionalMaxima; public static ByteProcessor findDirectionalMaxima(ImageProcessor ip); Create a binary image for pixels that have a higher value than their neighbors.; Comparisons are made horizontally, vertically and diagonally. Pixels meeting the criterion ; have the value 255, all others are 0. Parameters:; ip - ; Returns:. findDirectionalMinima; public static ByteProcessor findDirectionalMinima(ImageProcessor ip); Create a binary image for pixels that have a lower value than their neighbors.; Comparisons are made horizontally, vertically and diagonally. Pixels meeting the criterion ; have the value 255, all others are 0. Parameters:; ip - ; Returns:. getFilledPolygonROIsExperimental; public static List<PolygonRoi> getFilledPolygonROIsExperimental(ImageProcessor ip); Experimental 8-connected ROI creation; non-zero pixels considered within objects; ; TODO: I",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:870,Usability,clear,clearBoundary,870,". RoiLabeling (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class RoiLabeling. java.lang.Object; qupath.imagej.processing.RoiLabeling. public class RoiLabeling; extends Object; Collection of static methods to help work with ROIs, binary & labelled images in ImageJ.; ; This enables switching between different methods of representing regions as required. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RoiLabeling();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue). Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. static void; clearOutside(ImageProcessor ip,; Roi roi). Clear (i.e. static void; fillHoles(ByteProcessor bp). Fill holes in a binary image. static void; fillOutside(ImageProcessor ip,; Roi roi,; double value). Fill in a region outside a specified ROI. static ByteProcessor; findDirectionalMaxima(ImageProcessor ip). Create a binary image for pixels that have a higher value than their neighbors. static ByteProcessor; findDirectionalMinima(ImageProcessor ip). Create a binary image for pixels that have a lower value than their neighbors. static List<PolygonRoi>; getFilledPolygonROIs(ImageProcessor ip,; int wandMode). Get filled PolygonRois for connected pixels with the same value in an image. static List<PolygonRoi>; getFilledPolygonROIsExperimental(ImageProcessor ip). Experimental 8-connected ROI creation; non-zero pixels considered within objects. static Map<Float,PolygonRoi>; getFilledPolygonROIsFromLabels(ImageProcessor ip,; int wandMode). Get filled Polygon R",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:920,Usability,clear,clearValue,920,". RoiLabeling (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class RoiLabeling. java.lang.Object; qupath.imagej.processing.RoiLabeling. public class RoiLabeling; extends Object; Collection of static methods to help work with ROIs, binary & labelled images in ImageJ.; ; This enables switching between different methods of representing regions as required. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RoiLabeling();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue). Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. static void; clearOutside(ImageProcessor ip,; Roi roi). Clear (i.e. static void; fillHoles(ByteProcessor bp). Fill holes in a binary image. static void; fillOutside(ImageProcessor ip,; Roi roi,; double value). Fill in a region outside a specified ROI. static ByteProcessor; findDirectionalMaxima(ImageProcessor ip). Create a binary image for pixels that have a higher value than their neighbors. static ByteProcessor; findDirectionalMinima(ImageProcessor ip). Create a binary image for pixels that have a lower value than their neighbors. static List<PolygonRoi>; getFilledPolygonROIs(ImageProcessor ip,; int wandMode). Get filled PolygonRois for connected pixels with the same value in an image. static List<PolygonRoi>; getFilledPolygonROIsExperimental(ImageProcessor ip). Experimental 8-connected ROI creation; non-zero pixels considered within objects. static Map<Float,PolygonRoi>; getFilledPolygonROIsFromLabels(ImageProcessor ip,; int wandMode). Get filled Polygon R",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:1041,Usability,clear,clearOutside,1041," your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class RoiLabeling. java.lang.Object; qupath.imagej.processing.RoiLabeling. public class RoiLabeling; extends Object; Collection of static methods to help work with ROIs, binary & labelled images in ImageJ.; ; This enables switching between different methods of representing regions as required. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RoiLabeling();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue). Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. static void; clearOutside(ImageProcessor ip,; Roi roi). Clear (i.e. static void; fillHoles(ByteProcessor bp). Fill holes in a binary image. static void; fillOutside(ImageProcessor ip,; Roi roi,; double value). Fill in a region outside a specified ROI. static ByteProcessor; findDirectionalMaxima(ImageProcessor ip). Create a binary image for pixels that have a higher value than their neighbors. static ByteProcessor; findDirectionalMinima(ImageProcessor ip). Create a binary image for pixels that have a lower value than their neighbors. static List<PolygonRoi>; getFilledPolygonROIs(ImageProcessor ip,; int wandMode). Get filled PolygonRois for connected pixels with the same value in an image. static List<PolygonRoi>; getFilledPolygonROIsExperimental(ImageProcessor ip). Experimental 8-connected ROI creation; non-zero pixels considered within objects. static Map<Float,PolygonRoi>; getFilledPolygonROIsFromLabels(ImageProcessor ip,; int wandMode). Get filled Polygon ROIs using distinct labels, creating a map between labe",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:8613,Usability,clear,clearOutside,8613,"Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected objects remaining. fillOutside; public static void fillOutside(ImageProcessor ip,; Roi roi,; double value); Fill in a region outside a specified ROI. Parameters:; ip - ; roi - ; value - . clearOutside; public static void clearOutside(ImageProcessor ip,; Roi roi); Clear (i.e. set pixels to zero) in a region outside a specified ROI. Parameters:; ip - ; roi - . clearBoundary; public static void clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue); Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. Parameters:; bp - ; roi - ; clearValue - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:8646,Usability,clear,clearOutside,8646,"Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected objects remaining. fillOutside; public static void fillOutside(ImageProcessor ip,; Roi roi,; double value); Fill in a region outside a specified ROI. Parameters:; ip - ; roi - ; value - . clearOutside; public static void clearOutside(ImageProcessor ip,; Roi roi); Clear (i.e. set pixels to zero) in a region outside a specified ROI. Parameters:; ip - ; roi - . clearBoundary; public static void clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue); Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. Parameters:; bp - ; roi - ; clearValue - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:8786,Usability,clear,clearBoundary,8786,"Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected objects remaining. fillOutside; public static void fillOutside(ImageProcessor ip,; Roi roi,; double value); Fill in a region outside a specified ROI. Parameters:; ip - ; roi - ; value - . clearOutside; public static void clearOutside(ImageProcessor ip,; Roi roi); Clear (i.e. set pixels to zero) in a region outside a specified ROI. Parameters:; ip - ; roi - . clearBoundary; public static void clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue); Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. Parameters:; bp - ; roi - ; clearValue - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:8820,Usability,clear,clearBoundary,8820,"Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected objects remaining. fillOutside; public static void fillOutside(ImageProcessor ip,; Roi roi,; double value); Fill in a region outside a specified ROI. Parameters:; ip - ; roi - ; value - . clearOutside; public static void clearOutside(ImageProcessor ip,; Roi roi); Clear (i.e. set pixels to zero) in a region outside a specified ROI. Parameters:; ip - ; roi - . clearBoundary; public static void clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue); Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. Parameters:; bp - ; roi - ; clearValue - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:8870,Usability,clear,clearValue,8870,"Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected objects remaining. fillOutside; public static void fillOutside(ImageProcessor ip,; Roi roi,; double value); Fill in a region outside a specified ROI. Parameters:; ip - ; roi - ; value - . clearOutside; public static void clearOutside(ImageProcessor ip,; Roi roi); Clear (i.e. set pixels to zero) in a region outside a specified ROI. Parameters:; ip - ; roi - . clearBoundary; public static void clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue); Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. Parameters:; bp - ; roi - ; clearValue - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html:9006,Usability,clear,clearValue,9006,"Convert a traced outline from the ImageJ Wand into a PolygonRoi. Parameters:; wand - ; Returns:. fillHoles; public static void fillHoles(ByteProcessor bp); Fill holes in a binary image.; ; Assumes 255 is foreground, 0 is background.; ; Based on code in ImageJ's Binary class. Parameters:; bp - . labelROIs; public static ImageProcessor labelROIs(ImageProcessor ipLabels,; List<? extends Roi> rois); Label ROIs by filling each pixel with an integer value corresponding to the index of the Roi ; in the list + 1. Parameters:; ipLabels - ; rois - ; Returns:. labelImage; public static ImageProcessor labelImage(ImageProcessor ip,; float threshold,; boolean conn8); Create a labelled image from above-threshold pixels for an image. Parameters:; ip - ; threshold - ; conn8 - ; Returns:; labelled image, as a ShortProcessor (if possible) or FloatProcessor (if necessary). removeSmallAreas; public static void removeSmallAreas(ByteProcessor bp,; double minPixels,; boolean conn8); Remove objects having small areas, defined in terms of pixels. Parameters:; bp - ; minPixels - minimum number of pixels in an object that should be kept; conn8 - . removeByAreas; public static int removeByAreas(ByteProcessor bp,; double minPixels,; double maxPixels,; boolean conn8); Remove objects containing < minPixels or > maxPixels. Parameters:; bp - ; minPixels - ; maxPixels - ; conn8 - ; Returns:; the number of connected objects remaining. fillOutside; public static void fillOutside(ImageProcessor ip,; Roi roi,; double value); Fill in a region outside a specified ROI. Parameters:; ip - ; roi - ; value - . clearOutside; public static void clearOutside(ImageProcessor ip,; Roi roi); Clear (i.e. set pixels to zero) in a region outside a specified ROI. Parameters:; ip - ; roi - . clearBoundary; public static void clearBoundary(ByteProcessor bp,; Roi roi,; double clearValue); Starting from all white pixels (value = 255) on a ROI's boundary,; fill the pixels with black. Parameters:; bp - ; roi - ; clearValue - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/RoiLabeling.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/RoiLabeling.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html:5357,Availability,down,downsampling,5357," ; Returns:. thresholdAboveEquals; public static ByteProcessor thresholdAboveEquals(ImageProcessor ip,; float threshold); Created a binary image by thresholding pixels to find where ip1 >= threshold. Parameters:; ip - ; threshold - ; Returns:. thresholdBetween; public static ByteProcessor thresholdBetween(ImageProcessor ip,; float lowThreshold,; float highThreshold); Created a binary image by thresholding pixels to find where ip >= lowThreshold and ip <= highThreshold. Parameters:; ip - ; lowThreshold - ; highThreshold - ; Returns:. thresholdToROI; public static ROI thresholdToROI(BufferedImage img,; double minThreshold,; double maxThreshold,; int band,; RegionRequest request); Generate a QuPath ROI by thresholding an image channel image. Parameters:; img - the input image (any type); minThreshold - minimum threshold; pixels >= minThreshold will be included; maxThreshold - maximum threshold; pixels <= maxThreshold will be included; band - the image band to threshold (channel); request - a RegionRequest corresponding to this image, used to calibrate the coordinates. If null, ; we assume no downsampling and an origin at (0,0).; Returns:; See Also:. thresholdToROI(ImageProcessor, TileRequest). thresholdToROI; public static ROI thresholdToROI(Raster raster,; double minThreshold,; double maxThreshold,; int band,; TileRequest request); Generate a QuPath ROI by thresholding an image channel image, deriving coordinates from a TileRequest.; ; This can give a more accurate result than depending on a RegionRequest because it is possible to avoid some loss of precision. Parameters:; raster - ; minThreshold - ; maxThreshold - ; band - ; request - ; Returns:; See Also:. thresholdToROI(ImageProcessor, RegionRequest). thresholdToROI; public static ROI thresholdToROI(ImageProcessor ip,; RegionRequest request); Generate a QuPath ROI from an ImageProcessor.; ; It is assumed that the ImageProcessor has had its min and max threshold values set. Parameters:; ip - ; request - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/SimpleThresholding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html:5751,Integrability,depend,depending,5751," ; Returns:. thresholdAboveEquals; public static ByteProcessor thresholdAboveEquals(ImageProcessor ip,; float threshold); Created a binary image by thresholding pixels to find where ip1 >= threshold. Parameters:; ip - ; threshold - ; Returns:. thresholdBetween; public static ByteProcessor thresholdBetween(ImageProcessor ip,; float lowThreshold,; float highThreshold); Created a binary image by thresholding pixels to find where ip >= lowThreshold and ip <= highThreshold. Parameters:; ip - ; lowThreshold - ; highThreshold - ; Returns:. thresholdToROI; public static ROI thresholdToROI(BufferedImage img,; double minThreshold,; double maxThreshold,; int band,; RegionRequest request); Generate a QuPath ROI by thresholding an image channel image. Parameters:; img - the input image (any type); minThreshold - minimum threshold; pixels >= minThreshold will be included; maxThreshold - maximum threshold; pixels <= maxThreshold will be included; band - the image band to threshold (channel); request - a RegionRequest corresponding to this image, used to calibrate the coordinates. If null, ; we assume no downsampling and an origin at (0,0).; Returns:; See Also:. thresholdToROI(ImageProcessor, TileRequest). thresholdToROI; public static ROI thresholdToROI(Raster raster,; double minThreshold,; double maxThreshold,; int band,; TileRequest request); Generate a QuPath ROI by thresholding an image channel image, deriving coordinates from a TileRequest.; ; This can give a more accurate result than depending on a RegionRequest because it is possible to avoid some loss of precision. Parameters:; raster - ; minThreshold - ; maxThreshold - ; band - ; request - ; Returns:; See Also:. thresholdToROI(ImageProcessor, RegionRequest). thresholdToROI; public static ROI thresholdToROI(ImageProcessor ip,; RegionRequest request); Generate a QuPath ROI from an ImageProcessor.; ; It is assumed that the ImageProcessor has had its min and max threshold values set. Parameters:; ip - ; request - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/SimpleThresholding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html:489,Modifiability,extend,extends,489,". SimpleThresholding (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class SimpleThresholding. java.lang.Object; qupath.imagej.processing.SimpleThresholding. public class SimpleThresholding; extends Object; Collection of static methods to threshold images, either with single global thresholds or ; using the pixel values of a second image.; ; Output is a ByteProcessor where 255 represents 'positive' pixels, and zero represents the background. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleThresholding();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ByteProcessor; greaterThan(ImageProcessor ip1,; ImageProcessor ip2). Created a binary image by thresholding pixels to find where ip1 > ip2. static ByteProcessor; greaterThanOrEqual(ImageProcessor ip1,; ImageProcessor ip2). Created a binary image by thresholding pixels to find where ip1 >= ip2. static ByteProcessor; imagesEqual(ImageProcessor ip1,; ImageProcessor ip2). Created a binary image by identifying pixels where ip1 == ip2. static ByteProcessor; thresholdAbove(ImageProcessor ip,; float threshold). Created a binary image by thresholding pixels to find where ip1 > threshold. static ByteProcessor; thresholdAboveEquals(ImageProcessor ip,; float threshold). Created a binary image by thresholding pixels to find where ip1 >= threshold. static ByteProcessor; thresholdBelow(ImageProcessor ip,; float threshold). Created a binary image by thresholding pixels to find where ip1 < threshold. static ByteProcessor; thresholdBelowEquals(ImageProcessor ip,; float threshold). Created a binary image by thresholding pixels to find where ip1",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/SimpleThresholding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html:2758,Modifiability,inherit,inherited,2758,"t threshold). Created a binary image by thresholding pixels to find where ip1 < threshold. static ByteProcessor; thresholdBelowEquals(ImageProcessor ip,; float threshold). Created a binary image by thresholding pixels to find where ip1 <= threshold. static ByteProcessor; thresholdBetween(ImageProcessor ip,; float lowThreshold,; float highThreshold). Created a binary image by thresholding pixels to find where ip >= lowThreshold and ip <= highThreshold. static ROI; thresholdToROI(ImageProcessor ip,; RegionRequest request). Generate a QuPath ROI from an ImageProcessor. static ROI; thresholdToROI(BufferedImage img,; double minThreshold,; double maxThreshold,; int band,; RegionRequest request). Generate a QuPath ROI by thresholding an image channel image. static ROI; thresholdToROI(Raster raster,; double minThreshold,; double maxThreshold,; int band,; TileRequest request). Generate a QuPath ROI by thresholding an image channel image, deriving coordinates from a TileRequest. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SimpleThresholding; public SimpleThresholding(). Method Details. greaterThanOrEqual; public static ByteProcessor greaterThanOrEqual(ImageProcessor ip1,; ImageProcessor ip2); Created a binary image by thresholding pixels to find where ip1 >= ip2. Parameters:; ip1 - ; ip2 - ; Returns:. greaterThan; public static ByteProcessor greaterThan(ImageProcessor ip1,; ImageProcessor ip2); Created a binary image by thresholding pixels to find where ip1 > ip2. Parameters:; ip1 - ; ip2 - ; Returns:. thresholdBelow; public static ByteProcessor thresholdBelow(ImageProcessor ip,; float threshold); Created a binary image by thresholding pixels to find where ip1 < threshold. Parameters:; ip - ; threshold - ; Returns:. thresholdBelowEquals; public static ByteProcessor thresholdBelowEquals(ImageProcessor ip,; float threshold); Created a binary image by thresholding p",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/SimpleThresholding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html:5806,Safety,avoid,avoid,5806," ; Returns:. thresholdAboveEquals; public static ByteProcessor thresholdAboveEquals(ImageProcessor ip,; float threshold); Created a binary image by thresholding pixels to find where ip1 >= threshold. Parameters:; ip - ; threshold - ; Returns:. thresholdBetween; public static ByteProcessor thresholdBetween(ImageProcessor ip,; float lowThreshold,; float highThreshold); Created a binary image by thresholding pixels to find where ip >= lowThreshold and ip <= highThreshold. Parameters:; ip - ; lowThreshold - ; highThreshold - ; Returns:. thresholdToROI; public static ROI thresholdToROI(BufferedImage img,; double minThreshold,; double maxThreshold,; int band,; RegionRequest request); Generate a QuPath ROI by thresholding an image channel image. Parameters:; img - the input image (any type); minThreshold - minimum threshold; pixels >= minThreshold will be included; maxThreshold - maximum threshold; pixels <= maxThreshold will be included; band - the image band to threshold (channel); request - a RegionRequest corresponding to this image, used to calibrate the coordinates. If null, ; we assume no downsampling and an origin at (0,0).; Returns:; See Also:. thresholdToROI(ImageProcessor, TileRequest). thresholdToROI; public static ROI thresholdToROI(Raster raster,; double minThreshold,; double maxThreshold,; int band,; TileRequest request); Generate a QuPath ROI by thresholding an image channel image, deriving coordinates from a TileRequest.; ; This can give a more accurate result than depending on a RegionRequest because it is possible to avoid some loss of precision. Parameters:; raster - ; minThreshold - ; maxThreshold - ; band - ; request - ; Returns:; See Also:. thresholdToROI(ImageProcessor, RegionRequest). thresholdToROI; public static ROI thresholdToROI(ImageProcessor ip,; RegionRequest request); Generate a QuPath ROI from an ImageProcessor.; ; It is assumed that the ImageProcessor has had its min and max threshold values set. Parameters:; ip - ; request - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/SimpleThresholding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html:2832,Security,hash,hashCode,2832,"e ip1 < threshold. static ByteProcessor; thresholdBelowEquals(ImageProcessor ip,; float threshold). Created a binary image by thresholding pixels to find where ip1 <= threshold. static ByteProcessor; thresholdBetween(ImageProcessor ip,; float lowThreshold,; float highThreshold). Created a binary image by thresholding pixels to find where ip >= lowThreshold and ip <= highThreshold. static ROI; thresholdToROI(ImageProcessor ip,; RegionRequest request). Generate a QuPath ROI from an ImageProcessor. static ROI; thresholdToROI(BufferedImage img,; double minThreshold,; double maxThreshold,; int band,; RegionRequest request). Generate a QuPath ROI by thresholding an image channel image. static ROI; thresholdToROI(Raster raster,; double minThreshold,; double maxThreshold,; int band,; TileRequest request). Generate a QuPath ROI by thresholding an image channel image, deriving coordinates from a TileRequest. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SimpleThresholding; public SimpleThresholding(). Method Details. greaterThanOrEqual; public static ByteProcessor greaterThanOrEqual(ImageProcessor ip1,; ImageProcessor ip2); Created a binary image by thresholding pixels to find where ip1 >= ip2. Parameters:; ip1 - ; ip2 - ; Returns:. greaterThan; public static ByteProcessor greaterThan(ImageProcessor ip1,; ImageProcessor ip2); Created a binary image by thresholding pixels to find where ip1 > ip2. Parameters:; ip1 - ; ip2 - ; Returns:. thresholdBelow; public static ByteProcessor thresholdBelow(ImageProcessor ip,; float threshold); Created a binary image by thresholding pixels to find where ip1 < threshold. Parameters:; ip - ; threshold - ; Returns:. thresholdBelowEquals; public static ByteProcessor thresholdBelowEquals(ImageProcessor ip,; float threshold); Created a binary image by thresholding pixels to find where ip1 <= threshold. Parameters:; ip - ; threshold - ; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/SimpleThresholding.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/SimpleThresholding.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html:453,Modifiability,extend,extends,453,". Watershed (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.processing; Class Watershed. java.lang.Object; qupath.imagej.processing.Watershed. public class Watershed; extends Object; Implementation of 2D watershed transform for ImageJ. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Watershed();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8). Apply a watershed transform. static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; double minThreshold,; boolean conn8). Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. static void; watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8). Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Watershed; public Watershed(). Method Details. watershedExpandLabels; public static void watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8); Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging.; The expansion is performed in-place. Parameters:; ipLabels - labeled image, where values ≤ 0 represent the background; maxDistance - maximum expansion distance, in pixels; conn8 - if true, use 8-connectivity. doWatershed; public static void",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/Watershed.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html:1310,Modifiability,inherit,inherited,1310,"ARCH. Package qupath.imagej.processing; Class Watershed. java.lang.Object; qupath.imagej.processing.Watershed. public class Watershed; extends Object; Implementation of 2D watershed transform for ImageJ. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Watershed();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8). Apply a watershed transform. static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; double minThreshold,; boolean conn8). Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. static void; watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8). Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Watershed; public Watershed(). Method Details. watershedExpandLabels; public static void watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8); Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging.; The expansion is performed in-place. Parameters:; ipLabels - labeled image, where values ≤ 0 represent the background; maxDistance - maximum expansion distance, in pixels; conn8 - if true, use 8-connectivity. doWatershed; public static void doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8); Apply a watershed transform. Parameters:; ip - intensity image; ipLabels - starting locations; conn8 - if true, use 8-connectivity rather than 4-connectivity. doWatershed; public static void doWatershed(ImageProcessor ip,; ImageProcessor ipLab",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/Watershed.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html:1778,Performance,perform,performed,1778,"hodsConcrete Methods. Modifier and Type; Method; Description; static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8). Apply a watershed transform. static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; double minThreshold,; boolean conn8). Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. static void; watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8). Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Watershed; public Watershed(). Method Details. watershedExpandLabels; public static void watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8); Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging.; The expansion is performed in-place. Parameters:; ipLabels - labeled image, where values ≤ 0 represent the background; maxDistance - maximum expansion distance, in pixels; conn8 - if true, use 8-connectivity. doWatershed; public static void doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8); Apply a watershed transform. Parameters:; ip - intensity image; ipLabels - starting locations; conn8 - if true, use 8-connectivity rather than 4-connectivity. doWatershed; public static void doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; double minThreshold,; boolean conn8); Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. Parameters:; ip - intensity image; ipLabels - starting locations; minThreshold - minimum threshold; conn8 - if true, use 8-connectivity rather than 4-connectivity. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/Watershed.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html
https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html:1384,Security,hash,hashCode,1384,"t; qupath.imagej.processing.Watershed. public class Watershed; extends Object; Implementation of 2D watershed transform for ImageJ. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Watershed();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8). Apply a watershed transform. static void; doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; double minThreshold,; boolean conn8). Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. static void; watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8). Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Watershed; public Watershed(). Method Details. watershedExpandLabels; public static void watershedExpandLabels(ImageProcessor ipLabels,; double maxDistance,; boolean conn8); Expand non-zero regions in a labeled image up to a maximum distance, using a watershed transform to prevent region merging.; The expansion is performed in-place. Parameters:; ipLabels - labeled image, where values ≤ 0 represent the background; maxDistance - maximum expansion distance, in pixels; conn8 - if true, use 8-connectivity. doWatershed; public static void doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; boolean conn8); Apply a watershed transform. Parameters:; ip - intensity image; ipLabels - starting locations; conn8 - if true, use 8-connectivity rather than 4-connectivity. doWatershed; public static void doWatershed(ImageProcessor ip,; ImageProcessor ipLabels,; double minThreshold,; boolean conn8); Apply an intensity-constrain",MatchSource.WIKI,javadoc/docs/qupath/imagej/processing/Watershed.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/Watershed.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3385,Integrability,interface,interface,3385,"mageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3585,Integrability,interface,interface,3585,"List params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3865,Integrability,interface,interface,3865,"Plugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specif",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:6497,Integrability,interface,interface,6497,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:6744,Integrability,interface,interface,6744,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:427,Modifiability,plugin,plugins,427,". DoGSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getL",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:477,Modifiability,plugin,plugins,477,". DoGSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getL",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:538,Modifiability,plugin,plugins,538,". DoGSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getL",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:597,Modifiability,plugin,plugins,597,". DoGSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getL",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:830,Modifiability,extend,extends,830,". DoGSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getL",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:1245,Modifiability,inherit,inherited,1245,"| ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:1277,Modifiability,plugin,plugins,1277,"ethod. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are insta",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:1959,Modifiability,plugin,plugin,1959,"ershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInte",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2124,Modifiability,plugin,plugin,2124,"asonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWor",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2167,Modifiability,extend,extends,2167,"ified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2701,Modifiability,inherit,inherited,2701,"t. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2733,Modifiability,plugin,plugins,2733,"tParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item nam",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2800,Modifiability,inherit,inherited,2800," default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public Strin",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2832,Modifiability,plugin,plugins,2832,"aining any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2906,Modifiability,inherit,inherited,2906,"scription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line de",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:2938,Modifiability,plugin,plugins,2938,"scription of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3061,Modifiability,inherit,inherited,3061," results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPr",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3093,Modifiability,plugin,plugins,3093,"ame(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3231,Modifiability,inherit,inherited,3231,"). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: Abstrac",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3370,Modifiability,inherit,inherited,3370,"mageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3406,Modifiability,plugin,plugins,3406,"ms). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break la",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3628,Modifiability,plugin,plugin,3628,"List params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:5792,Modifiability,plugin,plugin,5792,"ileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:6798,Modifiability,plugin,plugin,6798,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:6935,Modifiability,extend,extends,6935,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3971,Safety,detect,detected,3971,"vePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<Bu",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:5464,Safety,detect,detected,5464,"cified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specifi",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:5612,Safety,detect,detections,5612,"protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<Buff",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:3305,Security,hash,hashCode,3305,"tected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. DoGSuperpixelsPlugin; public DoGSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be use",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html:888,Usability,simpl,simple,888,". DoGSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class DoGSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.DoGSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class DoGSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image.; ; This provides tile objects that generally correspond to regions containing reasonably similar ; intensities or textures, which might then be classified. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; DoGSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getL",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/DoGSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-summary.html:470,Usability,simpl,simple,470,". qupath.imagej.superpixels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.superpixels. package qupath.imagej.superpixels. Classes to generate superpixels. Classes. Class; Description; DoGSuperpixelsPlugin. A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image. SLICSuperpixelsPlugin. An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html:324,Modifiability,plugin,plugins,324,. qupath.imagej.superpixels Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.superpixels. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.superpixels.DoGSuperpixelsPlugin; qupath.imagej.superpixels.SLICSuperpixelsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html:373,Modifiability,plugin,plugins,373,. qupath.imagej.superpixels Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.superpixels. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.superpixels.DoGSuperpixelsPlugin; qupath.imagej.superpixels.SLICSuperpixelsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html:408,Modifiability,plugin,plugins,408,. qupath.imagej.superpixels Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.superpixels. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.superpixels.DoGSuperpixelsPlugin; qupath.imagej.superpixels.SLICSuperpixelsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html:468,Modifiability,plugin,plugins,468,. qupath.imagej.superpixels Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.superpixels. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.superpixels.DoGSuperpixelsPlugin; qupath.imagej.superpixels.SLICSuperpixelsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html:514,Modifiability,plugin,plugins,514,. qupath.imagej.superpixels Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.superpixels. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.superpixels.DoGSuperpixelsPlugin; qupath.imagej.superpixels.SLICSuperpixelsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html:561,Modifiability,plugin,plugins,561,. qupath.imagej.superpixels Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.superpixels. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.superpixels.DoGSuperpixelsPlugin; qupath.imagej.superpixels.SLICSuperpixelsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:1344,Availability,avail,available,1344,"magej.superpixels; Class SLICSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any informatio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:1571,Energy Efficiency,reduce,reduce,1571,"eractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLas",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3880,Integrability,interface,interface,3880,"mageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful i",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:4082,Integrability,interface,interface,4082,"st params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:4362,Integrability,interface,interface,4362,"ugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specif",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:6994,Integrability,interface,interface,6994,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:7241,Integrability,interface,interface,7241,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:429,Modifiability,plugin,plugins,429,". SLICSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class SLICSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Descriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:479,Modifiability,plugin,plugins,479,". SLICSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class SLICSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Descriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:540,Modifiability,plugin,plugins,540,". SLICSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class SLICSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Descriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:599,Modifiability,plugin,plugins,599,". SLICSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class SLICSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Descriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:834,Modifiability,extend,extends,834,". SLICSuperpixelsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.superpixels; Class SLICSuperpixelsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Descriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:1739,Modifiability,inherit,inherited,1739,"lugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all sele",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:1771,Modifiability,plugin,plugins,1771,"Plugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are inst",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:2454,Modifiability,plugin,plugin,2454," to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInte",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:2619,Modifiability,plugin,plugin,2619,"e to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWor",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:2662,Modifiability,extend,extends,2662,"ELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3196,Modifiability,inherit,inherited,3196,"t. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it m",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3228,Modifiability,plugin,plugins,3228,"tParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item n",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3295,Modifiability,inherit,inherited,3295," default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public Str",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3327,Modifiability,plugin,plugins,3327,"aining any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescript",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3401,Modifiability,inherit,inherited,3401,"scription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3433,Modifiability,plugin,plugins,3433,"scription of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3556,Modifiability,inherit,inherited,3556," results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. get",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3588,Modifiability,plugin,plugins,3588,"ame(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons;",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3726,Modifiability,inherit,inherited,3726,"). Get all selected objects that are instances of a supported class. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: Abstr",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3865,Modifiability,inherit,inherited,3865,"mageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful i",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3901,Modifiability,plugin,plugins,3901,"ms). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:4125,Modifiability,plugin,plugin,4125,"st params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:6289,Modifiability,plugin,plugin,6289,"ileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:7295,Modifiability,plugin,plugin,7295,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:7432,Modifiability,extend,extends,7432,"f the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:1522,Performance,perform,performed,1522,"eractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.superpixels.SLICSuperpixelsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SLICSuperpixelsPlugin; extends AbstractTileableDetectionPlugin<BufferedImage>; An implementation of SLIC superpixels, as described at http://ivrl.epfl.ch/research/superpixels; ; This largely follows the description at:; ; Radhakrishna Achanta, Appu Shaji, Kevin Smith, Aurelien Lucchi, Pascal Fua, and Sabine Süsstrunk ; SLIC Superpixels Compared to State-of-the-art Superpixel Methods ; IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 34, num. 11, p. 2274 - 2282, May 2012.; ; ; It doesn't follow the code made available by the authors, and differs in some details. ; ; For example, the 'spacing' parameter is also used to determine the resolution at which the superpixel computation ; is performed, and a Gaussian filter is used to help reduce textures in advance.; It is also possible to use color deconvolved images, rather than transforming RGB to CIELAB. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SLICSuperpixelsPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLas",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:4468,Safety,detect,detected,4468,"Plugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<Bu",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:5961,Safety,detect,detected,5961,"cified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specifi",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:6109,Safety,detect,detections,6109,"protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<Buff",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html:3800,Security,hash,hashCode,3800,"tected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SLICSuperpixelsPlugin; public SLICSuperpixelsPlugin(). Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be u",MatchSource.WIKI,javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/superpixels/SLICSuperpixelsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:1562,Availability,down,downsample,1562,"geJ with QuPath. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; IJTools();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static void; calibrateImagePlus(ImagePlus imp,; RegionRequest request,; ImageServer<BufferedImage> server). Set an ImagePlus's Calibration and FileInfo properties based on a RegionRequest and PathImageServer. static void; calibrateObject(PathObject pathObject,; Roi roi). Set the properties of a PathObject based upon an ImageJ Roi. static FloatProcessor[]; colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains). Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. static boolean; containsImageJRois(File file). Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; d",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:1778,Availability,down,downsample,1778,"ription; static void; calibrateImagePlus(ImagePlus imp,; RegionRequest request,; ImageServer<BufferedImage> server). Set an ImagePlus's Calibration and FileInfo properties based on a RegionRequest and PathImageServer. static void; calibrateObject(PathObject pathObject,; Roi roi). Set the properties of a PathObject based upon an ImageJ Roi. static FloatProcessor[]; colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains). Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. static boolean; containsImageJRois(File file). Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; do",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:1950,Availability,down,downsampleFactor,1950,"and PathImageServer. static void; calibrateObject(PathObject pathObject,; Roi roi). Set the properties of a PathObject based upon an ImageJ Roi. static FloatProcessor[]; colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains). Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. static boolean; containsImageJRois(File file). Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampl",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2142,Availability,down,downsampleFactor,2142,"olorDeconvolutionStains stains). Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. static boolean; containsImageJRois(File file). Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to a",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2328,Availability,down,downsampleFactor,2328,"file). Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2542,Availability,down,downsampleFactor,2542,"lls,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibrat",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2731,Availability,down,downsampleFactor,2731,"uclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static Pat",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2914,Availability,down,downsampleFactor,2914,"rtToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a P",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:3263,Availability,down,downsampleFactor,3263,"cific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a si",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:3419,Availability,down,downsampleFactor,3419," use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate opt",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:4556,Availability,down,downsampleFactor,4556,"ge<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsample",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:4732,Availability,down,downsampleFactor,4732," convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathI",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:4988,Availability,down,downsampleFactor,4988,"mage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; c",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:5239,Availability,down,downsampleFactor,5239,"gle band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; createImageStack(ImageProcessor... ips). Create an ImageStack containing the specified ImageProcessors. static PathImage<ImagePlus>; createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request). Create a PathImag",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:5406,Availability,down,downsampleFactor,5406,"nsity values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; createImageStack(ImageProcessor... ips). Create an ImageStack containing the specified ImageProcessors. static PathImage<ImagePlus>; createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request). Create a PathImage from an ImagePlus and region. static double; estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server). Estimate the downsample factor for an image region extrac",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:5537,Availability,down,downsampleFactor,5537,"igin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; createImageStack(ImageProcessor... ips). Create an ImageStack containing the specified ImageProcessors. static PathImage<ImagePlus>; createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request). Create a PathImage from an ImagePlus and region. static double; estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server). Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary. static ImagePlus; extractH",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:6342,Availability,down,downsample,6342,"pleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; createImageStack(ImageProcessor... ips). Create an ImageStack containing the specified ImageProcessors. static PathImage<ImagePlus>; createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request). Create a PathImage from an ImagePlus and region. static double; estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server). Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary. static ImagePlus; extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request). Extract a full ImageJ hyperstack for a specific region, using all z-slices and time points. static ImagePlus; extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request,; int zStart,; int zEnd,; int tStart,; int tEnd). Extract a full ImageJ hyperstack for a specific region, for specified ranges of z-slices and time points. static ImagePlane; getImagePlane(Roi roi,; ImagePlus imp). Get the ImagePlane of an ImageJ Roi, based upon its stored positions. static boolean; isMemorySufficient(RegionRequest region,; ImageData<BufferedImage> imageData). Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. static void; quickShowImage(String name,; Roi roi,; ImageProcessor... ips). Show an ImageProces",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:7191,Availability,avail,available,7191,"nd region. static double; estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server). Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary. static ImagePlus; extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request). Extract a full ImageJ hyperstack for a specific region, using all z-slices and time points. static ImagePlus; extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request,; int zStart,; int zEnd,; int tStart,; int tEnd). Extract a full ImageJ hyperstack for a specific region, for specified ranges of z-slices and time points. static ImagePlane; getImagePlane(Roi roi,; ImagePlus imp). Get the ImagePlane of an ImageJ Roi, based upon its stored positions. static boolean; isMemorySufficient(RegionRequest region,; ImageData<BufferedImage> imageData). Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. static void; quickShowImage(String name,; Roi roi,; ImageProcessor... ips). Show an ImageProcessor (or array of similar ImageProcessors as a stack). static void; quickShowImage(String name,; ImageProcessor... ips). Show an ImageProcessor (or array of similar ImageProcessors as a stack). static List<Roi>; readImageJRois(File file). Read ImageJ Rois from a .roi or a RoiSet.zip file. static void; setMemoryThreshold(double threshold);  ; static void; setTitleFromObject(PathImage<ImagePlus> pathImage,; PathObject pathObject). Set the name of an image based on a PathObject. static double; tryToParseMicrons(double value,; String unit). Based on a value and its units, try to get something suitable in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IJTools; public IJTools(). Method Details. setMemo",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:8635,Availability,avail,available,8635,"List<Roi>; readImageJRois(File file). Read ImageJ Rois from a .roi or a RoiSet.zip file. static void; setMemoryThreshold(double threshold);  ; static void; setTitleFromObject(PathImage<ImagePlus> pathImage,; PathObject pathObject). Set the name of an image based on a PathObject. static double; tryToParseMicrons(double value,; String unit). Based on a value and its units, try to get something suitable in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IJTools; public IJTools(). Method Details. setMemoryThreshold; public static void setMemoryThreshold(double threshold). Parameters:; threshold - - value in the interval ]0;1] defining the maximum remaining memory fraction an image can have ; when importing an image to ImageJ. isMemorySufficient; public static boolean isMemorySufficient(RegionRequest region,; ImageData<BufferedImage> imageData); throws Exception; Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. Parameters:; region - the requested region coming from; imageData - this BufferedImage; Returns:; true if the memory is sufficient; Throws:; Exception - either the fact that ImageJ cannot handle the image size or that the memory is insufficient. extractHyperstack; public static ImagePlus extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Extract a full ImageJ hyperstack for a specific region, using all z-slices and time points. Parameters:; server - ; request - ; Returns:; Throws:; IOException. extractHyperstack; public static ImagePlus extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request,; int zStart,; int zEnd,; int tStart,; int tEnd); throws IOException; Extract a full ImageJ hyperstack for a specific region, for specified ranges of z-slices and time points. Parameter",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:9684,Availability,down,downsample,9684,"equested region coming from; imageData - this BufferedImage; Returns:; true if the memory is sufficient; Throws:; Exception - either the fact that ImageJ cannot handle the image size or that the memory is insufficient. extractHyperstack; public static ImagePlus extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Extract a full ImageJ hyperstack for a specific region, using all z-slices and time points. Parameters:; server - ; request - ; Returns:; Throws:; IOException. extractHyperstack; public static ImagePlus extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request,; int zStart,; int zEnd,; int tStart,; int tEnd); throws IOException; Extract a full ImageJ hyperstack for a specific region, for specified ranges of z-slices and time points. Parameters:; server - server from which to extract pixels; request - region and downsample value; if null, the entire image is used; zStart - starting z-slice index (0-based index); zEnd - ending z-slice index (exclusive); tStart - starting timepoint index (0-based index); tEnd - ending timepoint index (exclusive); Returns:; the ImageJ hyperstack; Throws:; IOException. convertToFloatProcessor; public static ImageProcessor convertToFloatProcessor(SimpleImage image); Convert a SimpleImage to an ImageProcessor. Parameters:; image - ; Returns:. setTitleFromObject; public static void setTitleFromObject(PathImage<ImagePlus> pathImage,; PathObject pathObject); Set the name of an image based on a PathObject.; ; Useful whenever the ROI for an object is being extracted for display separately. Parameters:; pathImage - ; pathObject - . calibrateImagePlus; public static void calibrateImagePlus(ImagePlus imp,; RegionRequest request,; ImageServer<BufferedImage> server); Set an ImagePlus's Calibration and FileInfo properties based on a RegionRequest and PathImageServer.; It is assumed at the image contained in the ImagePlus has been correctly read from the server. Parameters:; imp -",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:10940,Availability,down,downsample,10940,"hrows:; IOException. convertToFloatProcessor; public static ImageProcessor convertToFloatProcessor(SimpleImage image); Convert a SimpleImage to an ImageProcessor. Parameters:; image - ; Returns:. setTitleFromObject; public static void setTitleFromObject(PathImage<ImagePlus> pathImage,; PathObject pathObject); Set the name of an image based on a PathObject.; ; Useful whenever the ROI for an object is being extracted for display separately. Parameters:; pathImage - ; pathObject - . calibrateImagePlus; public static void calibrateImagePlus(ImagePlus imp,; RegionRequest request,; ImageServer<BufferedImage> server); Set an ImagePlus's Calibration and FileInfo properties based on a RegionRequest and PathImageServer.; It is assumed at the image contained in the ImagePlus has been correctly read from the server. Parameters:; imp - ; request - ; server - . estimateDownsampleFactor; public static double estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server); Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary.; ; Note that the ratio of dimensions is only suitable if the full image has been extracted!. Parameters:; imp - ; server - ; Returns:. convertToPathObject; @Deprecated; public static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:11368,Availability,down,downsampleFactor,11368,"for an object is being extracted for display separately. Parameters:; pathImage - ; pathObject - . calibrateImagePlus; public static void calibrateImagePlus(ImagePlus imp,; RegionRequest request,; ImageServer<BufferedImage> server); Set an ImagePlus's Calibration and FileInfo properties based on a RegionRequest and PathImageServer.; It is assumed at the image contained in the ImagePlus has been correctly read from the server. Parameters:; imp - ; request - ; server - . estimateDownsampleFactor; public static double estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server); Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary.; ; Note that the ratio of dimensions is only suitable if the full image has been extracted!. Parameters:; imp - ; server - ; Returns:. convertToPathObject; @Deprecated; public static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling);",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:11721,Availability,down,downsampleFactor,11721,"lus has been correctly read from the server. Parameters:; imp - ; request - ; server - . estimateDownsampleFactor; public static double estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server); Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary.; ; Note that the ratio of dimensions is only suitable if the full image has been extracted!. Parameters:; imp - ; server - ; Returns:. convertToPathObject; @Deprecated; public static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static P",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:11891,Availability,down,downsampleFactor,11891,"ePlus imp,; ImageServer<?> server); Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary.; ; Note that the ratio of dimensions is only suitable if the full image has been extracted!. Parameters:; imp - ; server - ; Returns:. convertToPathObject; @Deprecated; public static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, u",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12124,Availability,avail,available,12124,"age has been extracted!. Parameters:; imp - ; server - ; Returns:. convertToPathObject; @Deprecated; public static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrig",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12229,Availability,avail,available,12229,"ic static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12256,Availability,down,downsampleFactor,12256,"ic static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12279,Availability,down,downsample,12279,"ic static PathObject convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). Create a PathObject for a specific ImageJ Roi.; This method has been deprecated, since its signature was misleading (the server was not used). Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; creator - ; plane - ; Returns:. convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12774,Availability,down,downsampleFactor,12774,"thObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12969,Availability,down,downsampleFactor,12969,"for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12992,Availability,down,downsample,12992,"for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:13510,Availability,down,downsampleFactor,13510,"bject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:13759,Availability,avail,available,13759,"n<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate th",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:13864,Availability,avail,available,13864,"Plus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample fac",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:13891,Availability,down,downsampleFactor,13891,"Plus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample fac",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:13914,Availability,down,downsample,13914,"Plus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample fac",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:14489,Availability,down,downsampleFactor,14489,"gin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object fo",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:14736,Availability,avail,available,14736,"herwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:14841,Availability,avail,available,14841,"herwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See A",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:14868,Availability,down,downsampleFactor,14868,"herwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See A",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:14891,Availability,down,downsample,14891,"herwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See A",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:15433,Availability,down,downsampleFactor,15433,"on(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:15558,Availability,down,downsampleFactor,15558,"J Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertTo",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:15581,Availability,down,downsample,15581,"J Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertTo",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:16111,Availability,down,downsampleFactor,16111," or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, double, double, ImagePlane). readImageJRois; public static List<Roi> readImageJRois(File file); Read ImageJ Rois from a .roi or a RoiSet.zip file. Parameters:; file - ; Returns:. containsImageJRois; public static boolean containsImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:16234,Availability,down,downsampleFactor,16234,"gePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, double, double, ImagePlane). readImageJRois; public static List<Roi> readImageJRois(File file); Read ImageJ Rois from a .roi or a RoiSet.zip file. Parameters:; file - ; Returns:. containsImageJRois; public static boolean containsImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObje",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:16257,Availability,down,downsample,16257,"gePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, double, double, ImagePlane). readImageJRois; public static List<Roi> readImageJRois(File file); Read ImageJ Rois from a .roi or a RoiSet.zip file. Parameters:; file - ; Returns:. containsImageJRois; public static boolean containsImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObje",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:17552,Availability,down,downsampleFactor,17552,"oi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, double, double, ImagePlane). readImageJRois; public static List<Roi> readImageJRois(File file); Read ImageJ Rois from a .roi or a RoiSet.zip file. Parameters:; file - ; Returns:. containsImageJRois; public static boolean containsImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObject based upon an ImageJ Roi.; This attempts to extract as much useful information as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nucle",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:17772,Availability,down,downsampleFactor,17772," Read ImageJ Rois from a .roi or a RoiSet.zip file. Parameters:; file - ; Returns:. containsImageJRois; public static boolean containsImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObject based upon an ImageJ Roi.; This attempts to extract as much useful information as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:17947,Availability,down,downsampleFactor,17947,"sImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObject based upon an ImageJ Roi.; This attempts to extract as much useful information as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:18165,Availability,down,downsampleFactor,18165,"id calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObject based upon an ImageJ Roi.; This attempts to extract as much useful information as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:18368,Availability,down,downsample,18368,"ion as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:18709,Availability,down,downsample,18709,"ameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; xOrigin - the x pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.xOrigin; yOrigin - the y pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and Qu",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:18726,Availability,down,downsample,18726,"ameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; xOrigin - the x pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.xOrigin; yOrigin - the y pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and Qu",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:19200,Availability,down,downsample,19200,"r - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; xOrigin - the x pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.xOrigin; yOrigin - the y pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.yOrigin; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. quickShowImage; public static void quickShowImage(String ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:19781,Availability,down,downsample,19781,"rom the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; xOrigin - the x pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.xOrigin; yOrigin - the y pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.yOrigin; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. quickShowImage; public static void quickShowImage(String name,; Roi roi,; ImageProcessor... ips); Show an ImageProcessor (or array of similar ImageProcessors as a stack).; This is really intended for use with debugging... it takes care of creating an ImagePlus; with the specified title, reseting brightness/contrast suitably, setting a roi (if required); and showing the result. Parameters:; name - ; roi - ; ips - . quickShowImage; public static void quickShowImage(String name,; ImageProcessor... ips); Show an ImageProcessor (or array of similar ImageProcessors as a stack).; This is really intended for use with debugging... it takes care of creating an ImagePlus; with the specified title, reseting brightness/contrast suitably and showing the result. Parameters:; name - ; ips - . tryToParseMicrons; public static double tryToParseM",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:19798,Availability,down,downsample,19798,"rom the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; xOrigin - the x pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.xOrigin; yOrigin - the y pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.yOrigin; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. quickShowImage; public static void quickShowImage(String name,; Roi roi,; ImageProcessor... ips); Show an ImageProcessor (or array of similar ImageProcessors as a stack).; This is really intended for use with debugging... it takes care of creating an ImagePlus; with the specified title, reseting brightness/contrast suitably, setting a roi (if required); and showing the result. Parameters:; name - ; roi - ; ips - . quickShowImage; public static void quickShowImage(String name,; ImageProcessor... ips); Show an ImageProcessor (or array of similar ImageProcessors as a stack).; This is really intended for use with debugging... it takes care of creating an ImagePlus; with the specified title, reseting brightness/contrast suitably and showing the result. Parameters:; name - ; ips - . tryToParseMicrons; public static double tryToParseM",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:23780,Availability,down,downsampleFactor,23780,"eredImage> server,; RegionRequest request); throws IOException; Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>.; ; The PathImage element wraps up handy metadata that can be used for translating ROIs. Parameters:; server - ; request - ; Returns:; Throws:; IOException. createPathImage; public static PathImage<ImagePlus> createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request); throws IOException; Create a PathImage from an ImagePlus and region.; If imp is null, it is read from the server. Parameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:23939,Availability,down,downsampleFactor,23939,"nt wraps up handy metadata that can be used for translating ROIs. Parameters:; server - ; request - ; Returns:; Throws:; IOException. createPathImage; public static PathImage<ImagePlus> createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request); throws IOException; Create a PathImage from an ImagePlus and region.; If imp is null, it is read from the server. Parameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI conve",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:24106,Availability,down,downsampleFactor,24106,"athImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request); throws IOException; Create a PathImage from an ImagePlus and region.; If imp is null, it is read from the server. Parameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:24312,Availability,down,downsampleFactor,24312,"ameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi;",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:24335,Availability,down,downsample,24335,"ameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi;",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:25149,Availability,down,downsampleFactor,25149,"ne); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in a",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:25269,Availability,down,downsampleFactor,25269,"ject, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane definin",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:25447,Availability,down,downsampleFactor,25447,"d t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:25792,Availability,down,downsampleFactor,25792,"l be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue); Calculate optical density values for the red, green and blue channels, then add these all together. Parameters:; cp - ; maxRed - ; maxGreen - ; maxBlue - ; Returns:. colorDeconvolve; public static FloatProcessor[] colorDeconvolve(ColorProcessor ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:25811,Availability,down,downsample,25811,"l be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue); Calculate optical density values for the red, green and blue channels, then add these all together. Parameters:; cp - ; maxRed - ; maxGreen - ; maxBlue - ; Returns:. colorDeconvolve; public static FloatProcessor[] colorDeconvolve(ColorProcessor ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:26004,Availability,down,downsampleFactor,26004," Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue); Calculate optical density values for the red, green and blue channels, then add these all together. Parameters:; cp - ; maxRed - ; maxGreen - ; maxBlue - ; Returns:. colorDeconvolve; public static FloatProcessor[] colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains); Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. Parameters:; cp - input RGB color image; stains - color deconvolution stain vectors; Returns:; array containing three FloatProcessors, representing the",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:26232,Availability,down,downsampleFactor,26232," - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue); Calculate optical density values for the red, green and blue channels, then add these all together. Parameters:; cp - ; maxRed - ; maxGreen - ; maxBlue - ; Returns:. colorDeconvolve; public static FloatProcessor[] colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains); Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. Parameters:; cp - input RGB color image; stains - color deconvolution stain vectors; Returns:; array containing three FloatProcessors, representing the deconvolved stains. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:4412,Energy Efficiency,green,green,4412,"ble downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampl",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:26507,Energy Efficiency,green,green,26507," - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue); Calculate optical density values for the red, green and blue channels, then add these all together. Parameters:; cp - ; maxRed - ; maxGreen - ; maxBlue - ; Returns:. colorDeconvolve; public static FloatProcessor[] colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains); Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. Parameters:; cp - input RGB color image; stains - color deconvolution stain vectors; Returns:; array containing three FloatProcessors, representing the deconvolved stains. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:22933,Integrability,wrap,wraps,22933,"ixels as an an ImageProcessor from a single band of a BufferedImage. Parameters:; img - ; band - ; Returns:. convertToImagePlus; public static PathImage<ImagePlus> convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request); throws IOException; Convert a BufferedImage into a PathImage<ImagePlus>.; ; An ImageServer and a RegionRequest are required to appropriate calibration. Parameters:; title - a name to use as the ImagePlus title.; server - the ImageServer from which the image was requested; img - the image to convert - if null this will be requested from server.; request - the region to request, or that was requested to provide img; Returns:; Throws:; IOException. convertToImagePlus; public static PathImage<ImagePlus> convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>.; ; The PathImage element wraps up handy metadata that can be used for translating ROIs. Parameters:; server - ; request - ; Returns:; Throws:; IOException. createPathImage; public static PathImage<ImagePlus> createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request); throws IOException; Create a PathImage from an ImagePlus and region.; If imp is null, it is read from the server. Parameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFa",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:435,Modifiability,extend,extends,435,". IJTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.tools; Class IJTools. java.lang.Object; qupath.imagej.tools.IJTools. public class IJTools; extends Object; Collection of static methods to help with using ImageJ with QuPath. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; IJTools();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static void; calibrateImagePlus(ImagePlus imp,; RegionRequest request,; ImageServer<BufferedImage> server). Set an ImagePlus's Calibration and FileInfo properties based on a RegionRequest and PathImageServer. static void; calibrateObject(PathObject pathObject,; Roi roi). Set the properties of a PathObject based upon an ImageJ Roi. static FloatProcessor[]; colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains). Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. static boolean; containsImageJRois(File file). Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an ann",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:3159,Modifiability,extend,extends,3159,"cific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a si",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:3331,Modifiability,extend,extends,3331," use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate opt",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:3531,Modifiability,extend,extends,3531,"agePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsamp",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:5664,Modifiability,extend,extends,5664,"vertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; createImageStack(ImageProcessor... ips). Create an ImageStack containing the specified ImageProcessors. static PathImage<ImagePlus>; createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request). Create a PathImage from an ImagePlus and region. static double; estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server). Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary. static ImagePlus; extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request). Extract a full ImageJ hyperstack for a specific region, using all z-slices and time points. static Image",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:5684,Modifiability,extend,extends,5684,"vertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi. static ROI; convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. static <T extends PathImage<? extends ImagePlus>>ROI; convertToROI(Roi roi,; T pathImage). Create a ROI from an ImageJ Roi. static ImagePlus; convertToUncalibratedImagePlus(String title,; BufferedImage img). Convert a BufferedImage to an ImagePlus, without pixel size information or other calibration. static ImageStack; createImageStack(ImageProcessor... ips). Create an ImageStack containing the specified ImageProcessors. static PathImage<ImagePlus>; createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request). Create a PathImage from an ImagePlus and region. static double; estimateDownsampleFactor(ImagePlus imp,; ImageServer<?> server). Estimate the downsample factor for an image region extracted from an image server, based upon ; the ratio of pixel sizes if possible or ratio of dimensions if necessary. static ImagePlus; extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest request). Extract a full ImageJ hyperstack for a specific region, using all z-slices and time points. static Image",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:8037,Modifiability,inherit,inherited,8037,"ts stored positions. static boolean; isMemorySufficient(RegionRequest region,; ImageData<BufferedImage> imageData). Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. static void; quickShowImage(String name,; Roi roi,; ImageProcessor... ips). Show an ImageProcessor (or array of similar ImageProcessors as a stack). static void; quickShowImage(String name,; ImageProcessor... ips). Show an ImageProcessor (or array of similar ImageProcessors as a stack). static List<Roi>; readImageJRois(File file). Read ImageJ Rois from a .roi or a RoiSet.zip file. static void; setMemoryThreshold(double threshold);  ; static void; setTitleFromObject(PathImage<ImagePlus> pathImage,; PathObject pathObject). Set the name of an image based on a PathObject. static double; tryToParseMicrons(double value,; String unit). Based on a value and its units, try to get something suitable in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IJTools; public IJTools(). Method Details. setMemoryThreshold; public static void setMemoryThreshold(double threshold). Parameters:; threshold - - value in the interval ]0;1] defining the maximum remaining memory fraction an image can have ; when importing an image to ImageJ. isMemorySufficient; public static boolean isMemorySufficient(RegionRequest region,; ImageData<BufferedImage> imageData); throws Exception; Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. Parameters:; region - the requested region coming from; imageData - this BufferedImage; Returns:; true if the memory is sufficient; Throws:; Exception - either the fact that ImageJ cannot handle the image size or that the memory is insufficient. extractHyperstack; public static Image",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:23431,Modifiability,extend,extends,23431,"mg - the image to convert - if null this will be requested from server.; request - the region to request, or that was requested to provide img; Returns:; Throws:; IOException. convertToImagePlus; public static PathImage<ImagePlus> convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>.; ; The PathImage element wraps up handy metadata that can be used for translating ROIs. Parameters:; server - ; request - ; Returns:; Throws:; IOException. createPathImage; public static PathImage<ImagePlus> createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request); throws IOException; Create a PathImage from an ImagePlus and region.; If imp is null, it is read from the server. Parameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:23692,Modifiability,extend,extends,23692,"eredImage> server,; RegionRequest request); throws IOException; Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>.; ; The PathImage element wraps up handy metadata that can be used for translating ROIs. Parameters:; server - ; request - ; Returns:; Throws:; IOException. createPathImage; public static PathImage<ImagePlus> createPathImage(ImageServer<BufferedImage> server,; ImagePlus imp,; RegionRequest request); throws IOException; Create a PathImage from an ImagePlus and region.; If imp is null, it is read from the server. Parameters:; server - ; imp - ; request - ; Returns:; Throws:; IOException. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; T pathImage); Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. Parameters:; pathROI - ; pathImage - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. Type Parameters:; T - ; Parameters:; pathROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:24881,Modifiability,extend,extends,24881,"hROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:24901,Modifiability,extend,extends,24901,"hROI - ; cal - ; downsampleFactor - ; Returns:; See Also:. convertToIJRoi(ROI, double, double, double). convertToROI; public static ROI convertToROI(Roi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi, using the Calibration object of an ImagePlus. Parameters:; roi - ImageJ Roi; cal - calibration object, including original information; downsampleFactor - the downsample factor of the original image; plane - plane defining c, z and t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:25343,Modifiability,extend,extends,25343,"d t indices; Returns:. getImagePlane; public static ImagePlane getImagePlane(Roi roi,; ImagePlus imp); Get the ImagePlane of an ImageJ Roi, based upon its stored positions. Parameters:; roi - ImageJ roi that may have c, z, t or position properties set.; imp - associated image; if not null, this will be used to convert the Roi's 'position' property, if non-zero; Returns:; the ImagePlane that is the best approximation of this Roi's position. convertToROI; public static <T extends PathImage<? extends ImagePlus>>; ROI convertToROI(Roi roi,; T pathImage); Create a ROI from an ImageJ Roi. Parameters:; roi - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2589,Safety,detect,detection,2589,"to cell objects. static SortedMap<Number,PathObject>; convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Ro",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2775,Safety,detect,detection,2775,"ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<Buffere",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:14536,Safety,detect,detection,14536,"gin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, ImagePlus). convertToDetection; public static PathObject convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object fo",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:16155,Safety,detect,detection,16155," or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, ImagePlus). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp); Create an annotation object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToAnnotation(Roi, double, double, double, ImagePlane). convertToDetection; public static PathObject convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp); Create a detection object for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(ImagePlus, ImageServer, Roi, double, Function, ImagePlane); convertToDetection(Roi, double, double, double, ImagePlane). readImageJRois; public static List<Roi> readImageJRois(File file); Read ImageJ Rois from a .roi or a RoiSet.zip file. Parameters:; file - ; Returns:. containsImageJRois; public static boolean containsImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:18081,Safety,detect,detection,18081,"ain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObject based upon an ImageJ Roi.; This attempts to extract as much useful information as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLab",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:8111,Security,hash,hashCode,8111,"gion,; ImageData<BufferedImage> imageData). Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. static void; quickShowImage(String name,; Roi roi,; ImageProcessor... ips). Show an ImageProcessor (or array of similar ImageProcessors as a stack). static void; quickShowImage(String name,; ImageProcessor... ips). Show an ImageProcessor (or array of similar ImageProcessors as a stack). static List<Roi>; readImageJRois(File file). Read ImageJ Rois from a .roi or a RoiSet.zip file. static void; setMemoryThreshold(double threshold);  ; static void; setTitleFromObject(PathImage<ImagePlus> pathImage,; PathObject pathObject). Set the name of an image based on a PathObject. static double; tryToParseMicrons(double value,; String unit). Based on a value and its units, try to get something suitable in microns. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IJTools; public IJTools(). Method Details. setMemoryThreshold; public static void setMemoryThreshold(double threshold). Parameters:; threshold - - value in the interval ]0;1] defining the maximum remaining memory fraction an image can have ; when importing an image to ImageJ. isMemorySufficient; public static boolean isMemorySufficient(RegionRequest region,; ImageData<BufferedImage> imageData); throws Exception; Check if sufficient memory is available to request pixels for a specific region, and the number ; of pixels is less than the maximum length of a Java array. Parameters:; region - the requested region coming from; imageData - this BufferedImage; Returns:; true if the memory is sufficient; Throws:; Exception - either the fact that ImageJ cannot handle the image size or that the memory is insufficient. extractHyperstack; public static ImagePlus extractHyperstack(ImageServer<BufferedImage> server,; RegionRequest",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/IJTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/package-summary.html:564,Integrability,wrap,wrapper,564,. qupath.imagej.tools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.tools. package qupath.imagej.tools. Helper classes and static methods for working with ImageJ images. Classes. Class; Description; IJTools. Collection of static methods to help with using ImageJ with QuPath. PixelImageIJ. Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/package-summary.html:628,Security,access,access,628,. qupath.imagej.tools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.tools. package qupath.imagej.tools. Helper classes and static methods for working with ImageJ images. Classes. Class; Description; IJTools. Collection of static methods to help with using ImageJ with QuPath. PixelImageIJ. Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/package-summary.html:557,Usability,simpl,simple,557,. qupath.imagej.tools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.tools. package qupath.imagej.tools. Helper classes and static methods for working with ImageJ images. Classes. Class; Description; IJTools. Collection of static methods to help with using ImageJ with QuPath. PixelImageIJ. Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:582,Integrability,wrap,wrapper,582,". PixelImageIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.tools; Class PixelImageIJ. java.lang.Object; qupath.imagej.tools.PixelImageIJ. All Implemented Interfaces:; SimpleImage, SimpleModifiableImage. public class PixelImageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:1528,Integrability,wrap,wrap,1528,"mageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boo",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:1622,Integrability,interface,interface,1622,"riented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representin",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:1717,Integrability,interface,interface,1717,"scription; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if tr",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:1908,Integrability,interface,interface,1908,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2002,Integrability,interface,interface,2002,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2204,Integrability,interface,interface,2204,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2276,Integrability,interface,interface,2276,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2368,Integrability,interface,interface,2368,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2442,Integrability,interface,interface,2442,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2550,Integrability,interface,interface,2550,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:2697,Integrability,interface,interface,2697,"Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Description copied from interface: SimpleImage; Get the image height. Specified by:; getHeight in interface SimpleImage; Returns:. getArray; public float[] getArray(boolean direct); Description copied from interface: SimpleModifiableImage; Request the pixel array representing all the pixels in this image, returned row-wise. Specified by:; getArray in interface SimpleModifiableImage; Parameters:; direct - if true, the internal array will be returned if possible; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:520,Modifiability,extend,extends,520,". PixelImageIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.tools; Class PixelImageIJ. java.lang.Object; qupath.imagej.tools.PixelImageIJ. All Implemented Interfaces:; SimpleImage, SimpleModifiableImage. public class PixelImageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:1273,Modifiability,inherit,inherited,1273,"etail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.tools; Class PixelImageIJ. java.lang.Object; qupath.imagej.tools.PixelImageIJ. All Implemented Interfaces:; SimpleImage, SimpleModifiableImage. public class PixelImageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interf",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:646,Security,access,access,646,". PixelImageIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.tools; Class PixelImageIJ. java.lang.Object; qupath.imagej.tools.PixelImageIJ. All Implemented Interfaces:; SimpleImage, SimpleModifiableImage. public class PixelImageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:1347,Security,hash,hashCode,1347,"s; Class PixelImageIJ. java.lang.Object; qupath.imagej.tools.PixelImageIJ. All Implemented Interfaces:; SimpleImage, SimpleModifiableImage. public class PixelImageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in interface SimpleModifiableImage; Parameters:; x - x-coordinate of the pixel to set; y - y-coordinate of the pixel to set; val - new pixel value. getWidth; public int getWidth(); Description copied from interface: SimpleImage; Get the image width. Specified by:; getWidth in interface SimpleImage; Returns:. getHeight; public int getHeight(); Descriptio",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html:575,Usability,simpl,simple,575,". PixelImageIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.tools; Class PixelImageIJ. java.lang.Object; qupath.imagej.tools.PixelImageIJ. All Implemented Interfaces:; SimpleImage, SimpleModifiableImage. public class PixelImageIJ; extends Object; implements SimpleModifiableImage; Very simple wrapper that allows some non-ImageJ-oriented QuPath commands to access ImageProcessor pixel values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelImageIJ(ImageProcessor ip). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; float[]; getArray(boolean direct). Request the pixel array representing all the pixels in this image, returned row-wise. int; getHeight(). Get the image height. float; getValue(int x,; int y). Get the value of a single pixel as a float. int; getWidth(). Get the image width. void; setValue(int x,; int y,; float val). Set the value of a single pixel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelImageIJ; public PixelImageIJ(ImageProcessor ip); Constructor. Parameters:; ip - ImageProcessor to wrap. Method Details. getValue; public float getValue(int x,; int y); Description copied from interface: SimpleImage; Get the value of a single pixel as a float. Specified by:; getValue in interface SimpleImage; Parameters:; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:. setValue; public void setValue(int x,; int y,; float val); Description copied from interface: SimpleModifiableImage; Set the value of a single pixel. Specified by:; setValue in",MatchSource.WIKI,javadoc/docs/qupath/imagej/tools/PixelImageIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/PixelImageIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:703,Modifiability,plugin,plugin,703,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:16,Safety,detect,detect,16,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:337,Safety,detect,detect,337,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:373,Safety,detect,detect,373,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:410,Safety,detect,detection,410,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:818,Safety,detect,detection,818,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html:931,Safety,detect,detection,931,". qupath.imagej.detect.cells (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.cells. package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. Classes. Class; Description; PositiveCellDetection. Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. SubcellularDetection. Experimental plugin to help with the quantification of subcellular structures. WatershedCellDetection. Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining. WatershedCellMembraneDetection. Cell detection that takes into consideration membrane staining. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:326,Modifiability,plugin,plugins,326,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:375,Modifiability,plugin,plugins,375,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:410,Modifiability,plugin,plugins,410,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:470,Modifiability,plugin,plugins,470,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:516,Modifiability,plugin,plugins,516,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:563,Modifiability,plugin,plugins,563,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:16,Safety,detect,detect,16,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:230,Safety,detect,detect,230,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:621,Safety,detect,detect,621,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:672,Safety,detect,detect,672,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:722,Safety,detect,detect,722,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html:781,Safety,detect,detect,781,. qupath.imagej.detect.cells Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.cells. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.plugins.AbstractTileableDetectionPlugin<T>. qupath.imagej.detect.cells.WatershedCellDetection. qupath.imagej.detect.cells.PositiveCellDetection. qupath.imagej.detect.cells.WatershedCellMembraneDetection. qupath.imagej.detect.cells.SubcellularDetection. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2722,Integrability,interface,interface,2722,"is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:3207,Integrability,interface,interface,3207,"DebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Wrap the detector to apply any required classification. Overrides:; createDetector in class WatershedCellDetection; Parameters:; imageData - ; params - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:3419,Integrability,interface,interface,3419,"DebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Wrap the detector to apply any required classification. Overrides:; createDetector in class WatershedCellDetection; Parameters:; imageData - ; params - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:3621,Integrability,interface,interface,3621,"DebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Wrap the detector to apply any required classification. Overrides:; createDetector in class WatershedCellDetection; Parameters:; imageData - ; params - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:430,Modifiability,plugin,plugins,430,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:480,Modifiability,plugin,plugins,480,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:541,Modifiability,plugin,plugins,541,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:600,Modifiability,plugin,plugins,600,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:887,Modifiability,extend,extends,887,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:1092,Modifiability,inherit,inherited,1092,"inks. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPl",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:1795,Modifiability,plugin,plugin,1795,"ractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details.",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:1823,Modifiability,inherit,inherited,1823,"in<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public Positive",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2035,Modifiability,inherit,inherited,2035,". Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractiveP",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2067,Modifiability,plugin,plugins,2067,"ield Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2134,Modifiability,inherit,inherited,2134,"ershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repe",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2166,Modifiability,plugin,plugins,2166,"tersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Speci",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2258,Modifiability,inherit,inherited,2258,"on(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; g",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2290,Modifiability,plugin,plugins,2290,"Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2398,Modifiability,inherit,inherited,2398,"jectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description c",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2430,Modifiability,plugin,plugins,2430,"; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: Path",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2568,Modifiability,inherit,inherited,2568,"List; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & d",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2707,Modifiability,inherit,inherited,2707,"is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2743,Modifiability,plugin,plugins,2743,"exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:. createDetector; protected ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:3462,Modifiability,plugin,plugin,3462,"DebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Wrap the detector to apply any required classification. Overrides:; createDetector in class WatershedCellDetection; Parameters:; imageData - ; params - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:358,Safety,detect,detect,358,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:670,Safety,detect,detect,670,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:721,Safety,detect,detect,721,". PositiveCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:1127,Safety,detect,detect,1127,"ss; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class PositiveCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:1520,Safety,detect,detector,1520,"ib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection; qupath.imagej.detect.cells.PositiveCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierar",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:1858,Safety,detect,detect,1858,"ss PositiveCellDetection; extends WatershedCellDetection; Alternative implementation of WatershedCellDetection that automatically applies 1 or 3 intensity thresholds to classify cells. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.imagej.detect.cells.WatershedCellDetection; parametersInitialized. Constructor Summary; Constructors. Constructor; Description; PositiveCellDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Wrap the detector to apply any required classification. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default cons",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:3861,Safety,detect,detector,3861,"DebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<BufferedImage>; Overrides:; getName in class WatershedCellDetection; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Wrap the detector to apply any required classification. Overrides:; createDetector in class WatershedCellDetection; Parameters:; imageData - ; params - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html:2642,Security,hash,hashCode,2642,"should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.imagej.detect.cells.WatershedCellDetection; getDebugMode, getDescription, getLastResultsDescription, getPreferredPixelSizeMicrons, getTileOverlap, parseArgument, setDebugMode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositiveCellDetection; public PositiveCellDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Overrides:; getDefaultParameterList in class WatershedCellDetection; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Specified by:; getName in interface PathPlugin<Buffere",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/PositiveCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2953,Deployability,update,update,2953," extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information tha",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2855,Integrability,interface,interface,2855,"Data<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData)",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:3085,Integrability,interface,interface,3085,"Data,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4022,Integrability,interface,interface,4022,"terface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from c",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4255,Integrability,interface,interface,4255,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4535,Integrability,interface,interface,4535,"thing/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Spe",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4808,Integrability,interface,interface,4808,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:5291,Integrability,depend,depending,5291,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:5772,Integrability,interface,interface,5772,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:428,Modifiability,plugin,plugins,428,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:478,Modifiability,plugin,plugins,478,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:706,Modifiability,extend,extends,706,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:769,Modifiability,plugin,plugin,769,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:881,Modifiability,inherit,inherited,881,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:913,Modifiability,plugin,plugins,913,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:1565,Modifiability,plugin,plugin,1565,"larDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:1730,Modifiability,plugin,plugin,1730,"tivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:1940,Modifiability,extend,extends,1940,"nstructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to updat",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2050,Modifiability,plugin,plugin,2050,"ction();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it h",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2170,Modifiability,plugin,plugin,2170,"bleTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<B",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2186,Modifiability,inherit,inherited,2186,"dImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:;",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2218,Modifiability,plugin,plugins,2218,"ect parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Re",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2341,Modifiability,inherit,inherited,2341,"terList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Run",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2373,Modifiability,plugin,plugins,2373,"mage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2500,Modifiability,inherit,inherited,2500,"String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overri",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2886,Modifiability,plugin,plugin,2886,"Data<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData)",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2935,Modifiability,plugin,plugin,2935," extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information tha",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4298,Modifiability,plugin,plugin,4298,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4862,Modifiability,plugin,plugin,4862,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:5315,Modifiability,plugin,plugin,5315,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:5692,Modifiability,extend,extends,5692,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:5859,Modifiability,plugin,plugin,5859,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:357,Safety,detect,detect,357,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:542,Safety,detect,detect,542,". SubcellularDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class SubcellularDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.cells.SubcellularDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SubcellularDetection; extends AbstractInteractivePlugin<BufferedImage>; Experimental plugin to help with the quantification of subcellular structures. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; SubcellularDetection();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:4641,Safety,detect,detected,4641,"ufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:5270,Safety,detect,detection,5270,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2574,Security,hash,hashCode,2574,"e & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Speci",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3606,Integrability,interface,interface,3606,"lysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plu",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:5436,Integrability,interface,interface,5436,"nPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:5669,Integrability,interface,interface,5669,"ly abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; T",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:5949,Integrability,interface,interface,5949,"hreads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected Ob",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:6222,Integrability,interface,interface,6222,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:432,Modifiability,plugin,plugins,432,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:482,Modifiability,plugin,plugins,482,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:543,Modifiability,plugin,plugins,543,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:602,Modifiability,plugin,plugins,602,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:889,Modifiability,extend,extends,889,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:2080,Modifiability,plugin,plugin,2080,"ls as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlug",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:2245,Modifiability,plugin,plugin,2245,"ead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggable",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:2830,Modifiability,plugin,plugin,2830,"DebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; pub",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:2919,Modifiability,inherit,inherited,2919," a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If th",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:2951,Modifiability,plugin,plugins,2951,"ntaining any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be s",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3018,Modifiability,inherit,inherited,3018,"ng; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at eac",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3050,Modifiability,plugin,plugins,3050," brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debu",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3142,Modifiability,inherit,inherited,3142,"ional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether d",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3174,Modifiability,plugin,plugins,3174,"iption of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Re",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3282,Modifiability,inherit,inherited,3282,"rredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3314,Modifiability,plugin,plugins,3314,"ata<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); D",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3452,Modifiability,inherit,inherited,3452,"rList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3591,Modifiability,inherit,inherited,3591,"lysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plu",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3627,Modifiability,plugin,plugins,3627,"ata will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it re",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:4461,Modifiability,plugin,plugin,4461,"rkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any infor",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:4600,Modifiability,plugin,plugin,4600,"wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<Buffere",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:4749,Modifiability,variab,variables,4749,"Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; Th",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:4849,Modifiability,plugin,plugins,4849,"an debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:5712,Modifiability,plugin,plugin,5712,"ly abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; T",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:6276,Modifiability,plugin,plugin,6276,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:8098,Modifiability,plugin,plugin,8098,"; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:359,Safety,detect,detect,359,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:672,Safety,detect,detect,672,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:970,Safety,detect,detection,970,". WatershedCellDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to rep",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:1116,Safety,detect,detection,1116,"on links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. Direct Known Subclasses:; PositiveCellDetection. public class WatershedCellDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Default command for cell detection within QuPath, assuming either a nuclear or cytoplasmic staining.; ; To automatically classify cells as positive or negative along with detection, see PositiveCellDetection.; ; To quantify membranous staining see WatershedCellMembraneDetection. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; parametersInitialized;  . Constructor Summary; Constructors. Constructor; Description; WatershedCellDetection();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. static boolean; getDebugMode(). Get whether debug mode is on or off. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:4673,Safety,abort,abort,4673,"d Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:4843,Safety,safe,safe,4843,"an debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Overrides:; parseArgument in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; p",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:6055,Safety,detect,detected,6055,"ePlugin<BufferedImage>; Parameters:; imageData - ; arg - ; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Des",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:7770,Safety,detect,detected,7770,"; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:7918,Safety,detect,detections,7918,"; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html:3526,Security,hash,hashCode,3526,"; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. static void; setDebugMode(boolean debug). Set whether to use debug mode. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Field Details. parametersInitialized; protected boolean parametersInitialized. Constructor Details. WatershedCellDetection; public WatershedCellDetection(). Method Details. setDebugMode; public static void setDebugMode(boolean debug); Set whether to use debug mode. If this is on, images will be shown during processing ; to visualize how the algorithm is working at each stage. Parameters:; debug - ; See Also:. getDebugMode(). getDebugMode; public static boolean getDebugMode(); Get whether debug mode is on or off. Returns:; See Also:. setDebugMode(boolean). parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:1140,Availability,robust,robust,1140,"nks. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> im",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3133,Integrability,interface,interface,3133,"erList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Descr",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3636,Integrability,interface,interface,3636,"tInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList par",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3869,Integrability,interface,interface,3869,"rkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; T",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:4149,Integrability,interface,interface,4149,"e qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected Ob",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:4422,Integrability,interface,interface,4422,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:448,Modifiability,plugin,plugins,448,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:498,Modifiability,plugin,plugins,498,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:559,Modifiability,plugin,plugins,559,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:618,Modifiability,plugin,plugins,618,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:872,Modifiability,extend,extends,872,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:1853,Modifiability,plugin,plugin,1853,"llMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.Abs",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2018,Modifiability,plugin,plugin,2018,"s (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object;",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2431,Modifiability,inherit,inherited,2431,"e>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2463,Modifiability,plugin,plugins,2463,"a<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInter",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2530,Modifiability,inherit,inherited,2530,"etector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2562,Modifiability,plugin,plugins,2562,"e specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2654,Modifiability,inherit,inherited,2654,"dImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlu",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2686,Modifiability,plugin,plugins,2686,"ould return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specif",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2809,Modifiability,inherit,inherited,2809,"(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName;",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2841,Modifiability,plugin,plugins,2841," of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:2979,Modifiability,inherit,inherited,2979,"getName(). Get the name of the plugin for display. protected double; getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3118,Modifiability,inherit,inherited,3118,"erList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Descr",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3154,Modifiability,plugin,plugins,3154,"rred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3912,Modifiability,plugin,plugin,3912,"rkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; T",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:4476,Modifiability,plugin,plugin,4476,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:6298,Modifiability,plugin,plugin,6298,"; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:367,Safety,detect,detect,367,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:688,Safety,detect,detect,688,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:933,Safety,detect,detection,933,". WatershedCellMembraneDetection (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.cells; Class WatershedCellMembraneDetection. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.lib.plugins.AbstractTileableDetectionPlugin<BufferedImage>; qupath.imagej.detect.cells.WatershedCellMembraneDetection. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class WatershedCellMembraneDetection; extends AbstractTileableDetectionPlugin<BufferedImage>; Cell detection that takes into consideration membrane staining.; ; This command only works (somewhat) for hematoxylin and DAB staining.; If membrane quantification is not required, WatershedCellDetection is more robust and versatile. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WatershedCellMembraneDetection(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ObjectDetector<BufferedImage>; createDetector(ImageData<BufferedImage> imageData,; ParameterList params). Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:4255,Safety,detect,detected,4255,"tershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getPreferredPixelSizeMicrons; protected double getPreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Des",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:5970,Safety,detect,detected,5970,"; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:6118,Safety,detect,detections,6118,"; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get the preferred pixel size that would be used for the specified ImageData and ParameterList.; ; This is useful in deciding whether to break large regions into smaller, parallelizable tiles. Specified by:; getPreferredPixelSizeMicrons in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. createDetector; protected ObjectDetector<BufferedImage> createDetector(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Create a new ObjectDetector, compatible with the specified ImageData and ParameterList. Specified by:; createDetector in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:. getTileOverlap; protected int getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params); Description copied from class: AbstractTileableDetectionPlugin; Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled.; ; If the overlap is 0, then tile boundaries are likely to be visible in the results.; ; If the overlap is > 0, then the overlap should also be > the expected largest size of a detected object -; otherwise objects may be lost of trimmed when overlaps are resolved. This is because (currently) ; the resolution of overlapping detections involves taking the largest one, rather than (for example) merging them.; ; (Merging may be permitted in later versions, but only where measurements are not made by the plugin -; since merged objects may require different measurements, e.g. for area or mean than can be easily computed; in a general way from the individual objects being merged). Specified by:; getTileOverlap in class AbstractTileableDetectionPlugin<BufferedImage>; Parameters:; imageData - ; params - ; Returns:; The overlap size in pixels, or 0 if overlapped tiles are not supported. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html:3053,Security,hash,hashCode,3053,"PreferredPixelSizeMicrons(ImageData<BufferedImage> imageData,; ParameterList params). Get the preferred pixel size that would be used for the specified ImageData and ParameterList. protected int; getTileOverlap(ImageData<BufferedImage> imageData,; ParameterList params). Get an appropriate overlap, in pixels, if analysis of the specified ImageData will be tiled. Methods inherited from class qupath.lib.plugins.AbstractTileableDetectionPlugin; addRunnableTasks. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. WatershedCellMembraneDetection; public WatershedCellMembraneDetection(); Default constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLa",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/WatershedCellMembraneDetection.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html:528,Modifiability,plugin,plugin,528,. qupath.imagej.detect.dearray (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.dearray. package qupath.imagej.detect.dearray. Classes to help with Tissue Microarray dearraying. Classes. Class; Description; TMADearrayer. Static methods used by the TMA dearrayer plugin. TMADearrayerPluginIJ. Plugin for automatically dearraying tissue microarrays (TMAs). ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html:16,Safety,detect,detect,16,. qupath.imagej.detect.dearray (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.dearray. package qupath.imagej.detect.dearray. Classes to help with Tissue Microarray dearraying. Classes. Class; Description; TMADearrayer. Static methods used by the TMA dearrayer plugin. TMADearrayerPluginIJ. Plugin for automatically dearraying tissue microarrays (TMAs). ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html:339,Safety,detect,detect,339,. qupath.imagej.detect.dearray (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.dearray. package qupath.imagej.detect.dearray. Classes to help with Tissue Microarray dearraying. Classes. Class; Description; TMADearrayer. Static methods used by the TMA dearrayer plugin. TMADearrayerPluginIJ. Plugin for automatically dearraying tissue microarrays (TMAs). ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html:377,Safety,detect,detect,377,. qupath.imagej.detect.dearray (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.dearray. package qupath.imagej.detect.dearray. Classes to help with Tissue Microarray dearraying. Classes. Class; Description; TMADearrayer. Static methods used by the TMA dearrayer plugin. TMADearrayerPluginIJ. Plugin for automatically dearraying tissue microarrays (TMAs). ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:330,Modifiability,plugin,plugins,330,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:379,Modifiability,plugin,plugins,379,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:414,Modifiability,plugin,plugins,414,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:474,Modifiability,plugin,plugins,474,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:16,Safety,detect,detect,16,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:232,Safety,detect,detect,232,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:523,Safety,detect,detect,523,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html:574,Safety,detect,detect,574,. qupath.imagej.detect.dearray Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.dearray. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.imagej.detect.dearray.TMADearrayerPluginIJ. qupath.imagej.detect.dearray.TMADearrayer. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:473,Modifiability,extend,extends,473,". TMADearrayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayer. java.lang.Object; qupath.imagej.detect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although thi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:530,Modifiability,plugin,plugin,530,". TMADearrayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayer. java.lang.Object; qupath.imagej.detect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although thi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:1410,Modifiability,inherit,inherited,1410,"etect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although this may be (slightly) rotated; and some cores may be missing (but at least a few should be present in all rows / columns of the grid). Parameters:; bp - - the TMA slide image, after thresholding.; coreDiameterPx - - approximate diameter of a single TMA core, in pixels; nHorizontal - - number of cores per row of the full grid; nVertical - - number of cores per column of the full grid; roi - - optional region of intere",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:4339,Modifiability,variab,variability,4339,"aryImage; public static ByteProcessor makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence); Make a binary image depicting (hopefully) the TMA cores.; The diameter of each core, in pixels, is used to determine filter sizes:; - for background estimation (morphological opening); - for morphological cleaning of the thresholded image; The threshold itself is computed using the triangle method. Parameters:; ip - - the TMA slide image - this should show cores as dark-on-light (or in colour).; Fluorescence images may be inverted beforehand.; coreDiameterPx - - typical diameter of a TMA core, given in pixels; roi - - optionally null; everything outside the ROI will be set to zero.; isFluorescence - - true if this is a fluorescence image, false if it is brightfield.; Returns:; ByteProcessor with detected regions having values 255, background having the value 0. fitCorePolygonToGrid; public static Polygon fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical); Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid.; Essentially this amounts to sorting the points starting from the top left,; continuing along each row.; In practice the process is more complicated (and less certain to be correct...); because coordinates in the same TMA row cannot be trusted to occur with the same image y coordinate,; similarly coordinates in the same TMA column can have different x coordinates. Parameters:; poly - - The original centroid coordinates; this should have exactly nHorizontal * nVertical points.; coreDiameterPx - - Approximate diameter of one TMA core (used to determine potential variability between core centroids); nHorizontal - - The number of cores in each row; nVertical - - The number of cores in each column; Returns:; A polygon of TMA cores, with the order going from top-left, one row at a time.; If the input polygon has the wrong number of points, null is returned. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:349,Safety,detect,detect,349,". TMADearrayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayer. java.lang.Object; qupath.imagej.detect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although thi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:417,Safety,detect,detect,417,". TMADearrayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayer. java.lang.Object; qupath.imagej.detect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although thi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:762,Safety,detect,detect,762,". TMADearrayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayer. java.lang.Object; qupath.imagej.detect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although thi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:804,Safety,detect,detectTMACoresFromBinary,804,". TMADearrayer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayer. java.lang.Object; qupath.imagej.detect.dearray.TMADearrayer. public class TMADearrayer; extends Object; Static methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although thi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:1615,Safety,detect,detectTMACoresFromBinary,1615,"  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although this may be (slightly) rotated; and some cores may be missing (but at least a few should be present in all rows / columns of the grid). Parameters:; bp - - the TMA slide image, after thresholding.; coreDiameterPx - - approximate diameter of a single TMA core, in pixels; nHorizontal - - number of cores per row of the full grid; nVertical - - number of cores per column of the full grid; roi - - optional region of interest determining where cores should be found (may be useful if edge artifacts are problematic); Returns:; Polygon in which points are arranged in order, row-by-row, starting from the top-left corner of the grid. makeBinar",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:1669,Safety,detect,detect,1669,"tic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although this may be (slightly) rotated; and some cores may be missing (but at least a few should be present in all rows / columns of the grid). Parameters:; bp - - the TMA slide image, after thresholding.; coreDiameterPx - - approximate diameter of a single TMA core, in pixels; nHorizontal - - number of cores per row of the full grid; nVertical - - number of cores per column of the full grid; roi - - optional region of interest determining where cores should be found (may be useful if edge artifacts are problematic); Returns:; Polygon in which points are arranged in order, row-by-row, starting from the top-left corner of the grid. makeBinaryImage; public static ByteProcessor",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:1710,Safety,detect,detectTMACoresFromBinary,1710,"CoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although this may be (slightly) rotated; and some cores may be missing (but at least a few should be present in all rows / columns of the grid). Parameters:; bp - - the TMA slide image, after thresholding.; coreDiameterPx - - approximate diameter of a single TMA core, in pixels; nHorizontal - - number of cores per row of the full grid; nVertical - - number of cores per column of the full grid; roi - - optional region of interest determining where cores should be found (may be useful if edge artifacts are problematic); Returns:; Polygon in which points are arranged in order, row-by-row, starting from the top-left corner of the grid. makeBinaryImage; public static ByteProcessor makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence); Make a binary image depicting (hopefully) the",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:3474,Safety,detect,detected,3474,"cts are problematic); Returns:; Polygon in which points are arranged in order, row-by-row, starting from the top-left corner of the grid. makeBinaryImage; public static ByteProcessor makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence); Make a binary image depicting (hopefully) the TMA cores.; The diameter of each core, in pixels, is used to determine filter sizes:; - for background estimation (morphological opening); - for morphological cleaning of the thresholded image; The threshold itself is computed using the triangle method. Parameters:; ip - - the TMA slide image - this should show cores as dark-on-light (or in colour).; Fluorescence images may be inverted beforehand.; coreDiameterPx - - typical diameter of a TMA core, given in pixels; roi - - optionally null; everything outside the ROI will be set to zero.; isFluorescence - - true if this is a fluorescence image, false if it is brightfield.; Returns:; ByteProcessor with detected regions having values 255, background having the value 0. fitCorePolygonToGrid; public static Polygon fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical); Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid.; Essentially this amounts to sorting the points starting from the top left,; continuing along each row.; In practice the process is more complicated (and less certain to be correct...); because coordinates in the same TMA row cannot be trusted to occur with the same image y coordinate,; similarly coordinates in the same TMA column can have different x coordinates. Parameters:; poly - - The original centroid coordinates; this should have exactly nHorizontal * nVertical points.; coreDiameterPx - - Approximate diameter of one TMA core (used to determine potential variability between core centroids); nHorizontal - - The number of cores in each row; nVertical - - The number of cores in each column; Returns:; A polyg",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html:1484,Security,hash,hashCode,1484,"tatic methods used by the TMA dearrayer plugin. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape; detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi). Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image. static Polygon; fitCorePolygonToGrid(Polygon poly,; double coreDiameterPx,; int nHorizontal,; int nVertical). Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. static ByteProcessor; makeBinaryImage(ImageProcessor ip,; double coreDiameterPx,; Roi roi,; boolean isFluorescence). Make a binary image depicting (hopefully) the TMA cores. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMADearrayer; public TMADearrayer(). Method Details. detectTMACoresFromBinary; public static qupath.imagej.detect.dearray.TMADearrayer.TMAGridShape detectTMACoresFromBinary(ByteProcessor bp,; double coreDiameterPx,; int nHorizontal,; int nVertical,; Roi roi); Detect TMA cores from a (low-resolution) whole slide image that has been thresholded to give a binary image.; Cores should be circular and arranged in a grid pattern, although this may be (slightly) rotated; and some cores may be missing (but at least a few should be present in all rows / columns of the grid). Parameters:; bp - - the TMA slide image, after thresholding.; coreDiameterPx - - approximate diameter of a single TMA core, in pixels; nHorizontal - - number of cores per row of the full grid; nVertical - - number of cores per column of the full grid; roi - - optional region of interest determining where cores should be found (may be useful if edge artifa",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2632,Integrability,interface,interface,2632," description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2934,Integrability,interface,interface,2934,"e> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4042,Integrability,interface,interface,4042,"pplied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description cop",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4275,Integrability,interface,interface,4275,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4555,Integrability,interface,interface,4555,"thing/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden in",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4828,Integrability,interface,interface,4828,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to th",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:5321,Integrability,depend,depending,5321,"ePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:430,Modifiability,plugin,plugins,430,". TMADearrayerPluginIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayerPluginIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.dearray.TMADearrayerPluginIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:480,Modifiability,plugin,plugins,480,". TMADearrayerPluginIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayerPluginIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.dearray.TMADearrayerPluginIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:710,Modifiability,extend,extends,710,". TMADearrayerPluginIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayerPluginIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.dearray.TMADearrayerPluginIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:1381,Modifiability,plugin,plugin,1381,"j.detect.dearray; Class TMADearrayerPluginIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.dearray.TMADearrayerPluginIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.li",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:1648,Modifiability,plugin,plugin,1648,", PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupat",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:1813,Modifiability,plugin,plugin,1813,"ys (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParen",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:1856,Modifiability,extend,extends,1856," Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSup",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2033,Modifiability,extend,extends,2033,"n; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may b",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2143,Modifiability,plugin,plugin,2143,"athObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2170,Modifiability,inherit,inherited,2170,"specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are req",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2202,Modifiability,plugin,plugins,2202,"nerate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.clas",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2325,Modifiability,inherit,inherited,2325,"he ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2357,Modifiability,plugin,plugins,2357," argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2478,Modifiability,inherit,inherited,2478,"uld return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2617,Modifiability,inherit,inherited,2617," description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks i",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2653,Modifiability,plugin,plugins,2653,"purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<Buffe",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2854,Modifiability,extend,extends,2854,"e> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:3021,Modifiability,plugin,plugin,3021,"e> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4318,Modifiability,plugin,plugin,4318,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4882,Modifiability,plugin,plugin,4882,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to th",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:5019,Modifiability,extend,extends,5019," by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPl",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:5345,Modifiability,plugin,plugin,5345,"ePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:5879,Modifiability,plugin,plugin,5879,"ePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:357,Safety,detect,detect,357,". TMADearrayerPluginIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayerPluginIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.dearray.TMADearrayerPluginIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:544,Safety,detect,detect,544,". TMADearrayerPluginIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.dearray; Class TMADearrayerPluginIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.imagej.detect.dearray.TMADearrayerPluginIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class TMADearrayerPluginIJ; extends AbstractInteractivePlugin<BufferedImage>; Plugin for automatically dearraying tissue microarrays (TMAs). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMADearrayerPluginIJ(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. protected void; addWorkflowStep(ImageData<BufferedImage> imageData,; String arg). Add a workflow step to the ImageData indicating the argument that this plugin was run with. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the P",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:4661,Safety,detect,detected,4661,"ufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:5300,Safety,detect,detection,5300,"ePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:6016,Safety,avoid,avoid,6016,"ePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:2552,Security,hash,hashCode,2552,"eded to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TMADearrayerPluginIJ; public TMADearrayerPluginIJ(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothin",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html:5968,Testability,log,logged,5968,"ePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. addWorkflowStep; protected void addWorkflowStep(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a workflow step at all. Overrides:; addWorkflowStep in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; arg - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/dearray/TMADearrayerPluginIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html:16,Safety,detect,detect,16,. qupath.imagej.detect.tissue (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.tissue. package qupath.imagej.detect.tissue. Classes to enable tissue detection by thresholding. Classes. Class; Description; PositivePixelCounterIJ. Simple command to detect regions with positive staining. SimpleTissueDetection2. Very basic global thresholding command to identify tissue regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html:338,Safety,detect,detect,338,. qupath.imagej.detect.tissue (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.tissue. package qupath.imagej.detect.tissue. Classes to enable tissue detection by thresholding. Classes. Class; Description; PositivePixelCounterIJ. Simple command to detect regions with positive staining. SimpleTissueDetection2. Very basic global thresholding command to identify tissue regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html:375,Safety,detect,detect,375,. qupath.imagej.detect.tissue (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.tissue. package qupath.imagej.detect.tissue. Classes to enable tissue detection by thresholding. Classes. Class; Description; PositivePixelCounterIJ. Simple command to detect regions with positive staining. SimpleTissueDetection2. Very basic global thresholding command to identify tissue regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html:415,Safety,detect,detection,415,. qupath.imagej.detect.tissue (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.tissue. package qupath.imagej.detect.tissue. Classes to enable tissue detection by thresholding. Classes. Class; Description; PositivePixelCounterIJ. Simple command to detect regions with positive staining. SimpleTissueDetection2. Very basic global thresholding command to identify tissue regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html:513,Safety,detect,detect,513,. qupath.imagej.detect.tissue (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.detect.tissue. package qupath.imagej.detect.tissue. Classes to enable tissue detection by thresholding. Classes. Class; Description; PositivePixelCounterIJ. Simple command to detect regions with positive staining. SimpleTissueDetection2. Very basic global thresholding command to identify tissue regions. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:328,Modifiability,plugin,plugins,328,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:377,Modifiability,plugin,plugins,377,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:412,Modifiability,plugin,plugins,412,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:472,Modifiability,plugin,plugins,472,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:518,Modifiability,plugin,plugins,518,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:16,Safety,detect,detect,16,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:231,Safety,detect,detect,231,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:568,Safety,detect,detect,568,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html:620,Safety,detect,detect,620,. qupath.imagej.detect.tissue Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.imagej.detect.tissue. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.imagej.detect.tissue.PositivePixelCounterIJ; qupath.imagej.detect.tissue.SimpleTissueDetection2. ,MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:964,Availability,down,downsample,964,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2607,Integrability,interface,interface,2607,"(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief descr",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3073,Integrability,interface,interface,3073,"from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> ta",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3306,Integrability,interface,interface,3306,"ath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anyth",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3564,Integrability,interface,interface,3564,"ng.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3808,Integrability,interface,interface,3808,"ng.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:433,Modifiability,plugin,plugins,433,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:483,Modifiability,plugin,plugins,483,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:544,Modifiability,plugin,plugins,544,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:775,Modifiability,extend,extends,775,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:1125,Modifiability,inherit,inherited,1125,"Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherit",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:1157,Modifiability,plugin,plugins,1157,"elp. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.p",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:1811,Modifiability,plugin,plugin,1811,"fferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultP",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:1976,Modifiability,plugin,plugin,1976,"values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2004,Modifiability,inherit,inherited,2004,"brated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat t",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2036,Modifiability,plugin,plugins,2036,"e more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2128,Modifiability,inherit,inherited,2128,"om class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; ge",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2160,Modifiability,plugin,plugins,2160,".AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in c",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2283,Modifiability,inherit,inherited,2283,"thod Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2315,Modifiability,plugin,plugins,2315,"stance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: Pa",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2453,Modifiability,inherit,inherited,2453,"PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names &",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2592,Modifiability,inherit,inherited,2592,"(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief descr",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2628,Modifiability,plugin,plugins,2628,"geData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpo",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3349,Modifiability,plugin,plugin,3349,"ath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anyth",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3618,Modifiability,plugin,plugin,3618,"ng.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:359,Safety,detect,detect,359,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:606,Safety,detect,detect,606,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:841,Safety,detect,detect,841,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:3914,Safety,detect,detected,3914,"ng.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:2527,Security,hash,hashCode,2527,"object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects, getSupportedParentObjectClasses. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. PositivePixelCounterIJ; public PositivePixelCounterIJ(). Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescripti",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html:916,Usability,simpl,simple,916,". PositivePixelCounterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class PositivePixelCounterIJ. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.PositivePixelCounterIJ. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class PositivePixelCounterIJ; extends AbstractDetectionPlugin<BufferedImage>; Simple command to detect regions with positive staining.; ; For versions <= v0.1.2 this gave simple measurements that were influenced by the downsample values used.; Later versions make calibrated measurements and give more flexibility in terms of output. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; PositivePixelCounterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Metho",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/PositivePixelCounterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:916,Availability,down,downsampling,916,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2689,Integrability,interface,interface,2689," description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from inter",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:3168,Integrability,interface,interface,3168,"path.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> ta",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:3401,Integrability,interface,interface,3401,"ns.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anyth",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:3681,Integrability,interface,interface,3681," inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedI",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:3954,Integrability,interface,interface,3954,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:5067,Integrability,interface,interface,5067,"s. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<BufferedImage>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:5423,Integrability,interface,interface,5423,"s. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<BufferedImage>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:433,Modifiability,plugin,plugins,433,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:483,Modifiability,plugin,plugins,483,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:544,Modifiability,plugin,plugins,544,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:775,Modifiability,extend,extends,775,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:1705,Modifiability,plugin,plugin,1705,"Image>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupat",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:1870,Modifiability,plugin,plugin,1870,"tify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterLi",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:1913,Modifiability,extend,extends,1913,"global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedIm",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2073,Modifiability,extend,extends,2073,"ctor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2183,Modifiability,plugin,plugin,2183,"n2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2210,Modifiability,inherit,inherited,2210," MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Spec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2242,Modifiability,plugin,plugins,2242,"odifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParam",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2365,Modifiability,inherit,inherited,2365,"ject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName()",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2397,Modifiability,plugin,plugins,2397,"). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2535,Modifiability,inherit,inherited,2535,"uld return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2674,Modifiability,inherit,inherited,2674," description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from inter",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2710,Modifiability,plugin,plugins,2710,"purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional)",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:3444,Modifiability,plugin,plugin,3444,"ns.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anyth",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:4008,Modifiability,plugin,plugin,4008,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:4617,Modifiability,extend,extends,4617,"s. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<BufferedImage>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:4987,Modifiability,extend,extends,4987,"s. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<BufferedImage>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:5154,Modifiability,plugin,plugin,5154,"s. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that are instances of a supported class. Overrides:; getParentObjects in class AbstractDetectionPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<BufferedImage>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:359,Safety,detect,detect,359,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:606,Safety,detect,detect,606,". SimpleTissueDetection2 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.detect.tissue; Class SimpleTissueDetection2. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.plugins.AbstractDetectionPlugin<BufferedImage>; qupath.imagej.detect.tissue.SimpleTissueDetection2. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class SimpleTissueDetection2; extends AbstractDetectionPlugin<BufferedImage>; Very basic global thresholding command to identify tissue regions.; ; Uses fixed approach to downsampling images & global threshold applied to RGB images only.; ; TODO: Provide choice of channels to threshold; TODO: Support 16-bit data. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; SimpleTissueDetection2(). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selec",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:3787,Safety,detect,detected,3787,"tion2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getParentObjects; protected Collection<? extends PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractDetectionPlugin; Get all selected objects that ar",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html:2609,Security,hash,hashCode,2609,"eded to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get all selected objects that are instances of a supported class. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. SimpleTissueDetection2; public SimpleTissueDetection2(); Constructor. Method Details. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; pu",MatchSource.WIKI,javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/tissue/SimpleTissueDetection2.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:3400,Availability,avail,available,3400,"tImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface Im",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:5124,Availability,down,downsample,5124,"ay depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; See Also:. Image",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:5638,Availability,down,downsampling,5638,". getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:2712,Integrability,interface,interface,2712,"ype(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. Collection<PathObject>; readPathObjects(). Read a collection of objects from the source. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This beh",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:3196,Integrability,interface,interface,3196,"tAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images)",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:3305,Integrability,interface,interface,3305,"tImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface Im",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:3877,Integrability,interface,interface,3877,"(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(Region",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:4132,Integrability,depend,depend,4132,"ls. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image r",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:4328,Integrability,interface,interface,4328,"ns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) tha",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:4922,Integrability,interface,interface,4922,"r images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be use",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:5960,Integrability,interface,interface,5960,"ing box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in int",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:6859,Integrability,interface,interface,6859,"ementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImag",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:7024,Integrability,interface,interface,7024," for which pixels are requested; Returns:; pixels for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class Abstrac",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:7167,Integrability,interface,interface,7167," for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:7323,Integrability,interface,interface,7323," for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:7972,Integrability,interface,interface,7972," for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from interface: ImageServer; A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Specified by:; getServerType in interface ImageServer<BufferedImage>; Returns:. getOriginalMetadata; public ImageServerMetadata getOriginalMetadata(); Description copied from interface: ImageServer; Get the original metadata read during creation of the server. This may or may not be correct. Specified by:; getOriginalMetadata in interface ImageServer<BufferedImage>; Returns:; See Also:. ImageServer.getMetadata(). createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Description copied from class: AbstractImageServer; Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Overrides:; close in class AbstractImageServer<BufferedImage>; Throws:; Exception. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:625,Modifiability,extend,extends,625,". ImageJServer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.servers; Class ImageJServer. java.lang.Object; qupath.lib.images.servers.AbstractImageServer<BufferedImage>; qupath.imagej.images.servers.ImageJServer. All Implemented Interfaces:; AutoCloseable, ImageServer<BufferedImage>, PathObjectReader. public class ImageJServer; extends AbstractImageServer<BufferedImage>; implements PathObjectReader; ImageServer that uses ImageJ's image-reading capabilities. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageJServer(URI uri,; String... args). Constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; static BufferedImage; convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel). Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint. protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; dumpMetadata(). Get a String representing the image metadata. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. Collection<PathObject>; readPathObjects(). Read a collection of objects from the source. BufferedIm",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:2107,Modifiability,inherit,inherited,2107," colorModel). Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint. protected String; createID(). Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath(). protected ImageServerBuilder.ServerBuilder<BufferedImage>; createServerBuilder(). Create a ServerBuilder, which can be used to construct an identical ImageServer. String; dumpMetadata(). Get a String representing the image metadata. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. Collection<PathObject>; readPathObjects(). Read a collection of objects from the source. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObj",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:2578,Modifiability,inherit,inherited,2578,"ageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. Collection<PathObject>; readPathObjects(). Read a collection of objects from the source. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is t",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:2697,Modifiability,inherit,inherited,2697,"ype(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. Collection<PathObject>; readPathObjects(). Read a collection of objects from the source. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This beh",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:5264,Modifiability,extend,extends,5264,"feredImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedI",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:5813,Safety,avoid,avoid,5813,"e readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; See Also:. ImageServer.readRegion(double, int, int, int, int, int, int); ImageServer.readRegion(double, int, int, int, int); ImageServer.readBufferedImage(RegionRequest). convertToBufferedImage; public static BufferedImage convertToBufferedImage(ImagePlus imp2,; int z,; int t,; ColorModel colorModel); Convert an ImagePlus to a BufferedImage, for a specific z-slice and timepoint.; ; Note that ImageJ uses 1-based indices for z and t! Therefore these should be >= 1.; ; A ColorModel can optionally be provided; otherwise, a default ColorModel will be ; created for the image (with may not be particularly suitable). Parameters:; imp2 - ; z - ; t - ; colorModel - ; Returns:. getServerType; public String getServerType(); Description copied from in",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:2642,Security,hash,hashCode,2642,"adata read during creation of the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Collection<URI>; getURIs(). Get the URIs for images required for this server. Collection<PathObject>; readPathObjects(). Read a collection of objects from the source. BufferedImage; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. Methods inherited from class qupath.lib.images.servers.AbstractImageServer; finalize, getAssociatedImage, getAssociatedImageList, getBuilder, getCache, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for al",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:3960,Usability,simpl,simplest,3960,"ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRe",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:4252,Usability,simpl,simple,4252,"tion of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface ImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the requ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:745,Integrability,interface,interfaces,745,". ImageJServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.servers; Class ImageJServerBuilder. java.lang.Object; qupath.imagej.images.servers.ImageJServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class ImageJServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that use ImageJ to read images. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; ImageJServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Detail",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:771,Integrability,interface,interface,771,". ImageJServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.servers; Class ImageJServerBuilder. java.lang.Object; qupath.imagej.images.servers.ImageJServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class ImageJServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that use ImageJ to read images. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; ImageJServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Detail",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:2181,Integrability,interface,interface,2181,"e>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJServerBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDes",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:2300,Integrability,interface,interface,2300,"redImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJServerBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:2588,Integrability,interface,interface,2588," images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJServerBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typical",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:2814,Integrability,interface,interface,2814,"rited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJServerBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Ch",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:2994,Integrability,interface,interface,2994,"verBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may ov",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3118,Integrability,interface,interface,3118,"RI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3245,Integrability,interface,interface,3245,"specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuild",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3371,Integrability,interface,interface,3371,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3508,Integrability,interface,interface,3508,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3675,Integrability,interface,interface,3675,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3823,Integrability,interface,interface,3823,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:4229,Integrability,interface,interface,4229,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:565,Modifiability,extend,extends,565,". ImageJServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.servers; Class ImageJServerBuilder. java.lang.Object; qupath.imagej.images.servers.ImageJServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class ImageJServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that use ImageJ to read images. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; ImageJServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Detail",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:756,Modifiability,inherit,inherited,756,". ImageJServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.servers; Class ImageJServerBuilder. java.lang.Object; qupath.imagej.images.servers.ImageJServerBuilder. All Implemented Interfaces:; ImageServerBuilder<BufferedImage>. public class ImageJServerBuilder; extends Object; implements ImageServerBuilder<BufferedImage>; Builder for ImageServers that use ImageJ to read images. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.images.servers.ImageServerBuilder; ImageServerBuilder.AbstractServerBuilder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; ImageJServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Detail",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:1852,Modifiability,inherit,inherited,1852,"Builder<T>, ImageServerBuilder.DefaultImageServerBuilder<T>, ImageServerBuilder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; ImageJServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJServerBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Pa",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:1926,Security,hash,hashCode,1926,"Builder.ServerBuilder<T>, ImageServerBuilder.UriImageSupport<T>. Constructor Summary; Constructors. Constructor; Description; ImageJServerBuilder();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<BufferedImage>; buildServer(URI uri,; String... args). Attempt to create ImageServer<T> from the specified path. ImageServerBuilder.UriImageSupport<BufferedImage>; checkImageSupport(URI uri,; String... args). Check whether a URI is supported by this builder. String; getDescription(). Get a short, human-readable description for display in a GUI. Class<BufferedImage>; getImageType(). Returns the base class for the images supported by this server. String; getName(). Get a human-readable name for the kind of ImageServer this builds. boolean; matchClassName(String... classNames). Check if this provider matches one or more specified classnames. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJServerBuilder; public ImageJServerBuilder(). Method Details. buildServer; public ImageServer<BufferedImage> buildServer(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Attempt to create ImageServer<T> from the specified path. Specified by:; buildServer in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:3969,Usability,simpl,simple,3969,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html:4050,Usability,intuit,intuitive,4050,"rgs - optional String arguments that may be used by the builder.; Returns:. checkImageSupport; public ImageServerBuilder.UriImageSupport<BufferedImage> checkImageSupport(URI uri,; String... args); Description copied from interface: ImageServerBuilder; Check whether a URI is supported by this builder.; ; This can be used to gain an estimate of how well the format is supported, and the number of images found. Specified by:; checkImageSupport in interface ImageServerBuilder<BufferedImage>; Parameters:; uri - ; args - optional String args (may be ignored); Returns:. getName; public String getName(); Description copied from interface: ImageServerBuilder; Get a human-readable name for the kind of ImageServer this builds. Specified by:; getName in interface ImageServerBuilder<BufferedImage>; Returns:. getDescription; public String getDescription(); Description copied from interface: ImageServerBuilder; Get a short, human-readable description for display in a GUI. Specified by:; getDescription in interface ImageServerBuilder<BufferedImage>; Returns:. getImageType; public Class<BufferedImage> getImageType(); Description copied from interface: ImageServerBuilder; Returns the base class for the images supported by this server. ; Typically this is BufferedImage.class. Specified by:; getImageType in interface ImageServerBuilder<BufferedImage>; Returns:. matchClassName; public boolean matchClassName(String... classNames); Description copied from interface: ImageServerBuilder; Check if this provider matches one or more specified classnames.; ; The default implementation checks the full and simple name of the class.; Subclasses may override this behavior to support more intuitive names, ; e.g. ""bioformats"", ""openslide"", ""imagej"", ""imageio"".; However, this should not be overused, so as to prevent future conflicts. Specified by:; matchClassName in interface ImageServerBuilder<BufferedImage>; Parameters:; classNames - ; Returns:; true if there is any classname match, false otherwise. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServerBuilder.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:2689,Integrability,interface,interface,2689,"; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlu",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:2891,Integrability,interface,interface,2891,"tput stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoint",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:3023,Integrability,interface,interface,3023,"dImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from inter",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:3193,Integrability,interface,interface,3193,". Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:3362,Integrability,interface,interface,3362,"to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:3821,Integrability,interface,interface,3821,"Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:3921,Integrability,interface,interface,3921," the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: Ima",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4032,Integrability,interface,interface,4032,"ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; support",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4130,Integrability,interface,interface,4130,"public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageSe",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4290,Integrability,interface,interface,4290,"nsions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4511,Integrability,interface,interface,4511,"sociated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> ser",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4662,Integrability,interface,interface,4662,"writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Speci",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4789,Integrability,interface,interface,4789,"); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:4916,Integrability,interface,interface,4916,"erface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: Imag",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:5049,Integrability,interface,interface,5049,"; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; i",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:5256,Integrability,interface,interface,5256,"an supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stre",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:5352,Integrability,interface,interface,5352,"itten.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<Buffere",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:5598,Integrability,interface,interface,5598," server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOExcepti",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:5691,Integrability,interface,interface,5691,"f writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedIma",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:5909,Integrability,interface,interface,5909,"ixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); thro",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:6002,Integrability,interface,interface,6002,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface Im",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:6258,Integrability,interface,interface,6258,"ows IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: Im",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:6363,Integrability,interface,interface,6363,":; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeIm",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:6590,Integrability,interface,interface,6590,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:6692,Integrability,interface,interface,6692,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:6921,Integrability,interface,interface,6921,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:7023,Integrability,interface,interface,7023,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:7202,Integrability,interface,interface,7202,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:7293,Integrability,interface,interface,7293,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:530,Modifiability,extend,extends,530,". TiffWriterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.writers; Class TiffWriterIJ. java.lang.Object; qupath.imagej.images.writers.TiffWriterIJ. All Implemented Interfaces:; ImageWriter<BufferedImage>. public class TiffWriterIJ; extends Object; ImageWriter implementation to write TIFF images using ImageJ. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TiffWriterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<BufferedImage>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<BufferedImage> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. v",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:2535,Modifiability,inherit,inherited,2535,"boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:2674,Modifiability,inherit,inherited,2674,"; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlu",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html:2609,Security,hash,hashCode,2609,"olean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. TiffWriterIJ; public TiffWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/TiffWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:2691,Integrability,interface,interface,2691,"; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:2891,Integrability,interface,interface,2891,"output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoint",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:3023,Integrability,interface,interface,3023,"redImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from inter",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:3193,Integrability,interface,interface,3193,"t). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:3362,Integrability,interface,interface,3362,"n to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:3821,Integrability,interface,interface,3821,"Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:3921,Integrability,interface,interface,3921," the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: Ima",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4032,Integrability,interface,interface,4032,"ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; support",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4130,Integrability,interface,interface,4130,"public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageSe",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4290,Integrability,interface,interface,4290,"nsions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4511,Integrability,interface,interface,4511,"sociated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> ser",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4662,Integrability,interface,interface,4662,"writeImage(ImagePlus imp,; OutputStream stream); throws IOException. Throws:; IOException. supportsT; public boolean supportsT(); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Speci",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4789,Integrability,interface,interface,4789,"); Description copied from interface: ImageWriter; Check if writer can handle multiple timepoints. Specified by:; supportsT in interface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:4916,Integrability,interface,interface,4916,"erface ImageWriter<BufferedImage>; Returns:. supportsZ; public boolean supportsZ(); Description copied from interface: ImageWriter; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: Imag",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:5049,Integrability,interface,interface,5049,"; Check if writer can handle multiple z-slices. Specified by:; supportsZ in interface ImageWriter<BufferedImage>; Returns:. supportsImageType; public boolean supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; i",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:5256,Integrability,interface,interface,5256,"an supportsImageType(ImageServer<BufferedImage> server); Description copied from interface: ImageWriter; Test whether images provided by a specified ImageServer can be successfully written.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stre",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:5352,Integrability,interface,interface,5352,"itten.; ; Reasons why it might not be are the number of channels and/or bit-depth. Specified by:; supportsImageType in interface ImageWriter<BufferedImage>; Parameters:; server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<Buffere",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:5598,Integrability,interface,interface,5598," server - ; Returns:. supportsPyramidal; public boolean supportsPyramidal(); Description copied from interface: ImageWriter; Returns true if the writer is capable of writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOExcepti",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:5691,Integrability,interface,interface,5691,"f writing pyramidal images. Specified by:; supportsPyramidal in interface ImageWriter<BufferedImage>; Returns:. supportsPixelSize; public boolean supportsPixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedIma",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:5909,Integrability,interface,interface,5909,"ixelSize(); Description copied from interface: ImageWriter; Returns true if the writer is capable of storing pixel size information. Specified by:; supportsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); thro",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:6002,Integrability,interface,interface,6002,"tsPixelSize in interface ImageWriter<BufferedImage>; Returns:. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface Im",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:6258,Integrability,interface,interface,6258,"ows IOException; Description copied from interface: ImageWriter; Write an image region to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: Im",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:6363,Integrability,interface,interface,6363,":; server - ; request - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeIm",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:6590,Integrability,interface,interface,6590,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:6692,Integrability,interface,interface,6692,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:6921,Integrability,interface,interface,6921,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:7023,Integrability,interface,interface,7023,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:7202,Integrability,interface,interface,7202,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:7293,Integrability,interface,interface,7293,"oid writeImage(ImageServer<BufferedImage> server,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; String pathOutput); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified path. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; pathOutput - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write an image region to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; region - ; stream - ; Throws:; IOException. writeImage; public void writeImage(BufferedImage img,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; img - ; stream - ; Throws:; IOException. writeImage; public void writeImage(ImageServer<BufferedImage> server,; OutputStream stream); throws IOException; Description copied from interface: ImageWriter; Write a full image to a specified output stream. Specified by:; writeImage in interface ImageWriter<BufferedImage>; Parameters:; server - ; stream - ; Throws:; IOException. getImageClass; public Class<BufferedImage> getImageClass(); Description copied from interface: ImageWriter; Get the class of supported images. Specified by:; getImageClass in interface ImageWriter<BufferedImage>; Returns:; ImageServer.getImageClass(). writeImage; public void writeImage(ImagePlus imp,; String pathOutput); throws IOException. Throws:; IOException. ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:526,Modifiability,extend,extends,526,". ZipWriterIJ (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.images.writers; Class ZipWriterIJ. java.lang.Object; qupath.imagej.images.writers.ZipWriterIJ. All Implemented Interfaces:; ImageWriter<BufferedImage>. public class ZipWriterIJ; extends Object; ImageWriter implementation to write zipped TIFF images using ImageJ. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ZipWriterIJ();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDetails(). Get further details of the writer, which may be displayed to a user. Collection<String>; getExtensions(). Get the file extensions used by the image writer. Class<BufferedImage>; getImageClass(). Get the class of supported images. String; getName(). Get the name of the image writer. boolean; supportsImageType(ImageServer<BufferedImage> server). Test whether images provided by a specified ImageServer can be successfully written. boolean; supportsPixelSize(). Returns true if the writer is capable of storing pixel size information. boolean; supportsPyramidal(). Returns true if the writer is capable of writing pyramidal images. boolean; supportsRGB(). Check if writer can handle RGB (it probably can...). boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path.",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:2537,Modifiability,inherit,inherited,2537,"boolean; supportsT(). Check if writer can handle multiple timepoints. boolean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a fi",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:2676,Modifiability,inherit,inherited,2676,"; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be returned first;. Returns:. writeImage; public void writeImage(ImagePlus ",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html:2611,Security,hash,hashCode,2611,"olean; supportsZ(). Check if writer can handle multiple z-slices. void; writeImage(ImagePlus imp,; OutputStream stream);  ; void; writeImage(ImagePlus imp,; String pathOutput);  ; void; writeImage(BufferedImage img,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(BufferedImage img,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; OutputStream stream). Write a full image to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; String pathOutput). Write a full image to a specified path. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest region,; OutputStream stream). Write an image region to a specified output stream. void; writeImage(ImageServer<BufferedImage> server,; RegionRequest request,; String pathOutput). Write an image region to a specified path. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.writers.ImageWriter; getDefaultExtension. Constructor Details. ZipWriterIJ; public ZipWriterIJ(). Method Details. getName; public String getName(); Description copied from interface: ImageWriter; Get the name of the image writer. Returns:. getDetails; public String getDetails(); Description copied from interface: ImageWriter; Get further details of the writer, which may be displayed to a user. Returns:. supportsRGB; public boolean supportsRGB(); Description copied from interface: ImageWriter; Check if writer can handle RGB (it probably can...). Returns:. getExtensions; public Collection<String> getExtensions(); Description copied from interface: ImageWriter; Get the file extensions used by the image writer.; These are returned without the leading 'dot'.; In the case where multiple extensions are associated with a file type ; (e.g. ""jpg"", ""jpeg"", ""tif"", ""tiff"") the preferred should be re",MatchSource.WIKI,javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/writers/ZipWriterIJ.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2454,Integrability,interface,interface,2454,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<Buffer",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:3413,Integrability,interface,interface,3413,"gins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:3646,Integrability,interface,interface,3646,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:3926,Integrability,interface,interface,3926,"thing/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:4199,Integrability,interface,interface,4199,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:4682,Integrability,depend,depending,4682,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:5163,Integrability,interface,interface,5163,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:427,Modifiability,plugin,plugins,427,". CoherenceFeaturePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class CoherenceFeaturePlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.CoherenceFeaturePlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class CoherenceFeaturePlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin to calculate coherence features for image tiles. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CoherenceFeaturePlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupat",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:477,Modifiability,plugin,plugins,477,". CoherenceFeaturePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class CoherenceFeaturePlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.CoherenceFeaturePlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class CoherenceFeaturePlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin to calculate coherence features for image tiles. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CoherenceFeaturePlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupat",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:704,Modifiability,extend,extends,704,". CoherenceFeaturePlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class CoherenceFeaturePlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.CoherenceFeaturePlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class CoherenceFeaturePlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin to calculate coherence features for image tiles. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CoherenceFeaturePlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupat",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:1463,Modifiability,plugin,plugin,1463,"ge>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.CoherenceFeaturePlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class CoherenceFeaturePlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin to calculate coherence features for image tiles. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CoherenceFeaturePlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:1628,Modifiability,plugin,plugin,1628,"feredImage>, PathPlugin<BufferedImage>. public class CoherenceFeaturePlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin to calculate coherence features for image tiles. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CoherenceFeaturePlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRun",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:1838,Modifiability,extend,extends,1838,"onstructors. Constructor; Description; CoherenceFeaturePlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to ru",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:1948,Modifiability,plugin,plugin,1948,"onstructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothin",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:1975,Modifiability,inherit,inherited,1975,"sConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; add",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2007,Modifiability,plugin,plugins,2007," and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class Abs",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2130,Modifiability,inherit,inherited,2130,"List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList g",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2162,Modifiability,plugin,plugins,2162,"a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(Ima",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2300,Modifiability,inherit,inherited,2300,"urn a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containi",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2439,Modifiability,inherit,inherited,2439,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<Buffer",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2475,Modifiability,plugin,plugins,2475," & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:3689,Modifiability,plugin,plugin,3689,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:4253,Modifiability,plugin,plugin,4253,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:4706,Modifiability,plugin,plugin,4706,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:5083,Modifiability,extend,extends,5083,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:5250,Modifiability,plugin,plugin,5250,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:4032,Safety,detect,detected,4032,"ufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:4661,Safety,detect,detection,4661,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html:2374,Security,hash,hashCode,2374," repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. CoherenceFeaturePlugin; public CoherenceFeaturePlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/CoherenceFeaturePlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:896,Availability,mask,masks,896,". HaralickFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class HaralickFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.HaralickFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class HaralickFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating Haralick texture features, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2843,Integrability,interface,interface,2843,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<Buffer",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:3802,Integrability,interface,interface,3802,"gins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:4035,Integrability,interface,interface,4035,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:4315,Integrability,interface,interface,4315,"thing/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:4588,Integrability,interface,interface,4588,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:5071,Integrability,depend,depending,5071,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:5552,Integrability,interface,interface,5552,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:427,Modifiability,plugin,plugins,427,". HaralickFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class HaralickFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.HaralickFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class HaralickFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating Haralick texture features, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:477,Modifiability,plugin,plugins,477,". HaralickFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class HaralickFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.HaralickFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class HaralickFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating Haralick texture features, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:704,Modifiability,extend,extends,704,". HaralickFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class HaralickFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.HaralickFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class HaralickFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating Haralick texture features, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:1852,Modifiability,plugin,plugin,1852,"OIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2017,Modifiability,plugin,plugin,2017,"ids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRun",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2227,Modifiability,extend,extends,2227,"onstructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to ru",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2337,Modifiability,plugin,plugin,2337,"onstructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothin",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2364,Modifiability,inherit,inherited,2364,"sConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; add",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2396,Modifiability,plugin,plugins,2396," and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class Abs",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2519,Modifiability,inherit,inherited,2519,"List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList g",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2551,Modifiability,plugin,plugins,2551,"a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(Ima",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2689,Modifiability,inherit,inherited,2689,"urn a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containi",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2828,Modifiability,inherit,inherited,2828,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<Buffer",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2864,Modifiability,plugin,plugins,2864," & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; get",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:4078,Modifiability,plugin,plugin,4078,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:4642,Modifiability,plugin,plugin,4642,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:5095,Modifiability,plugin,plugin,5095,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:5472,Modifiability,extend,extends,5472,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:5639,Modifiability,plugin,plugin,5639,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:821,Safety,detect,detections,821,". HaralickFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class HaralickFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.HaralickFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class HaralickFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating Haralick texture features, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:861,Safety,detect,detections,861,". HaralickFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class HaralickFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.HaralickFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class HaralickFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating Haralick texture features, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeaturesPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:4421,Safety,detect,detected,4421,"ufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:5050,Safety,detect,detection,5050,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html:2763,Security,hash,hashCode,2763," repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. HaralickFeaturesPlugin; public HaralickFeaturesPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/HaralickFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:928,Availability,mask,masks,928,". IntensityFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3509,Deployability,update,update,3509,"Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information tha",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3411,Integrability,interface,interface,3411,"arentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData)",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3641,Integrability,interface,interface,3641,"fferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:4578,Integrability,interface,interface,4578,"terface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:4811,Integrability,interface,interface,4811,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5091,Integrability,interface,interface,5091,"thing/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5364,Integrability,interface,interface,5364,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5847,Integrability,depend,depending,5847," display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there a",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:6328,Integrability,interface,interface,6328,"nterface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<BufferedImage>; Overrides:; alwaysPromptForObjects in class AbstractInteractivePlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:6733,Integrability,interface,interface,6733,"nterface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<BufferedImage>; Overrides:; alwaysPromptForObjects in class AbstractInteractivePlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:6948,Integrability,interface,interface,6948,"nterface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<BufferedImage>; Overrides:; alwaysPromptForObjects in class AbstractInteractivePlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:429,Modifiability,plugin,plugins,429,". IntensityFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:479,Modifiability,plugin,plugins,479,". IntensityFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:708,Modifiability,extend,extends,708,". IntensityFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:1277,Modifiability,inherit,inherited,1277,"od. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:1309,Modifiability,plugin,plugins,1309,"nstr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin fo",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2139,Modifiability,plugin,plugin,2139,"ple), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, noti",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2304,Modifiability,plugin,plugin,2304,"h.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2514,Modifiability,extend,extends,2514,"escription; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2624,Modifiability,plugin,plugin,2624,"eData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed proce",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2744,Modifiability,plugin,plugin,2744,"bjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2760,Modifiability,inherit,inherited,2760,"true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; ar",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2792,Modifiability,plugin,plugins,2792,"ested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnabl",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2891,Modifiability,inherit,inherited,2891,"erList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; Li",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:2923,Modifiability,plugin,plugins,2923,"List(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Descr",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3050,Modifiability,inherit,inherited,3050,"epeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3442,Modifiability,plugin,plugin,3442,"arentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData)",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3491,Modifiability,plugin,plugin,3491,"Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information tha",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:4854,Modifiability,plugin,plugin,4854,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5418,Modifiability,plugin,plugin,5418,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5871,Modifiability,plugin,plugin,5871," display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there a",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:6248,Modifiability,extend,extends,6248,"nterface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<BufferedImage>; Overrides:; alwaysPromptForObjects in class AbstractInteractivePlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:6415,Modifiability,plugin,plugin,6415,"nterface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. Specified by:; alwaysPromptForObjects in interface PathInteractivePlugin<BufferedImage>; Overrides:; alwaysPromptForObjects in class AbstractInteractivePlugin<BufferedImage>; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:853,Safety,detect,detections,853,". IntensityFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:893,Safety,detect,detections,893,". IntensityFeaturesPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class IntensityFeaturesPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.IntensityFeaturesPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class IntensityFeaturesPlugin; extends AbstractInteractivePlugin<BufferedImage>; Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.; ; The ROIs of the detections can be used directly as masks, or else the textures can alternatively be ; calculated within square or circular regions around the object centroids.; This latter option makes it possible to calculate a high density of tiles (for example), and then to ; compute textures at different resolutions independently of the tile size. Author:; Pete Bankhead. Field Summary. Fields inherited from class qupath.lib.plugins.AbstractInteractivePlugin; params. Constructor Summary; Constructors. Constructor; Description; IntensityFeaturesPlugin();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. boolean; alwaysPromptForObjects(). If this returns true, then a prompt is requested every time the command is run - ; even if there are valid parent objects already selected. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default Par",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5197,Safety,detect,detected,5197,"ufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:5826,Safety,detect,detection,5826,"on copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. alwaysPromptForObjects; public boolean alwaysPromptForObjects(); Description copied from interface: PathInteractivePlugin; If this returns true, then a ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3124,Security,hash,hashCode,3124,"n of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead.",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2534,Integrability,interface,interface,2534,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:3499,Integrability,interface,interface,3499,"athPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:3732,Integrability,interface,interface,3732,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4012,Integrability,interface,interface,4012,"thing/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Spe",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4285,Integrability,interface,interface,4285,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4768,Integrability,depend,depending,4768,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:5249,Integrability,interface,interface,5249,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:433,Modifiability,plugin,plugins,433,". LocalBinaryPatternsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class LocalBinaryPatternsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.LocalBinaryPatternsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class LocalBinaryPatternsPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possib",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:483,Modifiability,plugin,plugins,483,". LocalBinaryPatternsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class LocalBinaryPatternsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.LocalBinaryPatternsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class LocalBinaryPatternsPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possib",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:716,Modifiability,extend,extends,716,". LocalBinaryPatternsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class LocalBinaryPatternsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.LocalBinaryPatternsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class LocalBinaryPatternsPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possib",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:821,Modifiability,plugin,plugin,821,". LocalBinaryPatternsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class LocalBinaryPatternsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.LocalBinaryPatternsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class LocalBinaryPatternsPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possib",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:1543,Modifiability,plugin,plugin,1543,"ib.algorithms.LocalBinaryPatternsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class LocalBinaryPatternsPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interfac",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:1708,Modifiability,plugin,plugin,1708,"sPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:1918,Modifiability,extend,extends,1918,"tructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2028,Modifiability,plugin,plugin,2028,"onstructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2055,Modifiability,inherit,inherited,2055,"sConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2087,Modifiability,plugin,plugins,2087," and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in cla",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2210,Modifiability,inherit,inherited,2210,"List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public Parameter",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2242,Modifiability,plugin,plugins,2242,"a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterLi",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2380,Modifiability,inherit,inherited,2380,"urn a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList co",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2519,Modifiability,inherit,inherited,2519,"ption of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2555,Modifiability,plugin,plugins,2555," & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:3775,Modifiability,plugin,plugin,3775,"d void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4339,Modifiability,plugin,plugin,4339,"ription copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a c",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4792,Modifiability,plugin,plugin,4792,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:5169,Modifiability,extend,extends,5169,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:5336,Modifiability,plugin,plugin,5336,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4118,Safety,detect,detected,4118,"ufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<BufferedImage>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:4747,Safety,detect,detection,4747,"DefaultParameterList in class AbstractInteractivePlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. getParentObjects; protected Collection<PathObject> getParentObjects(ImageData<BufferedImage> imageData); Description copied from class: AbstractPlugin; Get a collection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:2454,Security,hash,hashCode,2454," repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. LocalBinaryPatternsPlugin; public LocalBinaryPatternsPlugin(); Default constructor. Method Details. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Spec",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html:853,Testability,test,tested,853,". LocalBinaryPatternsPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class LocalBinaryPatternsPlugin. java.lang.Object; qupath.lib.plugins.AbstractPlugin<BufferedImage>; qupath.lib.plugins.AbstractInteractivePlugin<BufferedImage>; qupath.lib.algorithms.LocalBinaryPatternsPlugin. All Implemented Interfaces:; PathInteractivePlugin<BufferedImage>, PathPlugin<BufferedImage>. public class LocalBinaryPatternsPlugin; extends AbstractInteractivePlugin<BufferedImage>; Calculate local binary pattern features.; ; TODO: This plugin has not been extensively tested and may be of limited use. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; LocalBinaryPatternsPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<BufferedImage> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. protected Collection<PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possib",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/LocalBinaryPatternsPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html:392,Modifiability,plugin,plugins,392,". qupath.lib.algorithms (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.algorithms. package qupath.lib.algorithms. Feature calculation plugins. Classes. Class; Description; CoherenceFeaturePlugin. Plugin to calculate coherence features for image tiles. HaralickFeaturesPlugin. Plugin for calculating Haralick texture features, within or around detections or tiles. IntensityFeaturesPlugin. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. LocalBinaryPatternsPlugin. Calculate local binary pattern features. TilerPlugin<T>. Simple plugin to create square tiles, which may later have measurements added. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html:854,Modifiability,plugin,plugin,854,". qupath.lib.algorithms (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.algorithms. package qupath.lib.algorithms. Feature calculation plugins. Classes. Class; Description; CoherenceFeaturePlugin. Plugin to calculate coherence features for image tiles. HaralickFeaturesPlugin. Plugin for calculating Haralick texture features, within or around detections or tiles. IntensityFeaturesPlugin. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. LocalBinaryPatternsPlugin. Calculate local binary pattern features. TilerPlugin<T>. Simple plugin to create square tiles, which may later have measurements added. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html:601,Safety,detect,detections,601,". qupath.lib.algorithms (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.algorithms. package qupath.lib.algorithms. Feature calculation plugins. Classes. Class; Description; CoherenceFeaturePlugin. Plugin to calculate coherence features for image tiles. HaralickFeaturesPlugin. Plugin for calculating Haralick texture features, within or around detections or tiles. IntensityFeaturesPlugin. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. LocalBinaryPatternsPlugin. Calculate local binary pattern features. TilerPlugin<T>. Simple plugin to create square tiles, which may later have measurements added. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html:742,Safety,detect,detections,742,". qupath.lib.algorithms (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.algorithms. package qupath.lib.algorithms. Feature calculation plugins. Classes. Class; Description; CoherenceFeaturePlugin. Plugin to calculate coherence features for image tiles. HaralickFeaturesPlugin. Plugin for calculating Haralick texture features, within or around detections or tiles. IntensityFeaturesPlugin. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. LocalBinaryPatternsPlugin. Calculate local binary pattern features. TilerPlugin<T>. Simple plugin to create square tiles, which may later have measurements added. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html:316,Modifiability,plugin,plugins,316,. qupath.lib.algorithms Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.algorithms. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.algorithms.TilerPlugin<T>. qupath.lib.algorithms.CoherenceFeaturePlugin; qupath.lib.algorithms.HaralickFeaturesPlugin; qupath.lib.algorithms.IntensityFeaturesPlugin; qupath.lib.algorithms.LocalBinaryPatternsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html:365,Modifiability,plugin,plugins,365,. qupath.lib.algorithms Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.algorithms. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.algorithms.TilerPlugin<T>. qupath.lib.algorithms.CoherenceFeaturePlugin; qupath.lib.algorithms.HaralickFeaturesPlugin; qupath.lib.algorithms.IntensityFeaturesPlugin; qupath.lib.algorithms.LocalBinaryPatternsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html:400,Modifiability,plugin,plugins,400,. qupath.lib.algorithms Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.algorithms. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.algorithms.TilerPlugin<T>. qupath.lib.algorithms.CoherenceFeaturePlugin; qupath.lib.algorithms.HaralickFeaturesPlugin; qupath.lib.algorithms.IntensityFeaturesPlugin; qupath.lib.algorithms.LocalBinaryPatternsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html:460,Modifiability,plugin,plugins,460,. qupath.lib.algorithms Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.algorithms. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.algorithms.TilerPlugin<T>. qupath.lib.algorithms.CoherenceFeaturePlugin; qupath.lib.algorithms.HaralickFeaturesPlugin; qupath.lib.algorithms.IntensityFeaturesPlugin; qupath.lib.algorithms.LocalBinaryPatternsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html:506,Modifiability,plugin,plugins,506,. qupath.lib.algorithms Class Hierarchy (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. Hierarchy For Package qupath.lib.algorithms. Package Hierarchies:. All Packages. Class Hierarchy. java.lang.Object. qupath.lib.plugins.AbstractPlugin<T> (implements qupath.lib.plugins.PathPlugin<T>). qupath.lib.plugins.AbstractInteractivePlugin<T> (implements qupath.lib.plugins.PathInteractivePlugin<T>). qupath.lib.plugins.AbstractDetectionPlugin<T>. qupath.lib.algorithms.TilerPlugin<T>. qupath.lib.algorithms.CoherenceFeaturePlugin; qupath.lib.algorithms.HaralickFeaturesPlugin; qupath.lib.algorithms.IntensityFeaturesPlugin; qupath.lib.algorithms.LocalBinaryPatternsPlugin. ,MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/package-tree.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/package-tree.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2336,Integrability,interface,interface,2336," needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2620,Integrability,interface,interface,2620,"isplay. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Descrip",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2976,Integrability,interface,interface,2976,"nherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:3411,Integrability,interface,interface,3411," Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTask",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:3620,Integrability,interface,interface,3620,"nterface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDescription; public String getDescription(); Description copied from i",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:3900,Integrability,interface,interface,3900,"that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:4621,Integrability,interface,interface,4621,"that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:408,Modifiability,plugin,plugins,408,". TilerPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class TilerPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.algorithms.TilerPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgumen",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:446,Modifiability,plugin,plugins,446,". TilerPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class TilerPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.algorithms.TilerPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgumen",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:495,Modifiability,plugin,plugins,495,". TilerPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class TilerPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.algorithms.TilerPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgumen",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:692,Modifiability,extend,extends,692,". TilerPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class TilerPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.algorithms.TilerPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgumen",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:735,Modifiability,plugin,plugin,735,". TilerPlugin (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.algorithms; Class TilerPlugin<T>. java.lang.Object; qupath.lib.plugins.AbstractPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.algorithms.TilerPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgumen",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1425,Modifiability,plugin,plugin,1425,"tPlugin<T>; qupath.lib.plugins.AbstractInteractivePlugin<T>; qupath.lib.plugins.AbstractDetectionPlugin<T>; qupath.lib.algorithms.TilerPlugin<T>. Type Parameters:; T - . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; pu",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1590,Modifiability,plugin,plugin,1590,"- . All Implemented Interfaces:; PathInteractivePlugin<T>, PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClas",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1629,Modifiability,extend,extends,1629," PathPlugin<T>. public class TilerPlugin<T>; extends AbstractDetectionPlugin<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractiveP",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1739,Modifiability,plugin,plugin,1739,"in<T>; Simple plugin to create square tiles, which may later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could h",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1766,Modifiability,inherit,inherited,1766," later have measurements added. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1798,Modifiability,plugin,plugins,1798,"ded. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1857,Modifiability,inherit,inherited,1857,"Constructor; Description; TilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are requ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:1889,Modifiability,plugin,plugins,1889,"ilerPlugin(). Default constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2012,Modifiability,inherit,inherited,2012,"iption; protected void; addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2044,Modifiability,plugin,plugins,2044,"RunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks). For a specified parent object, generate a task to run. ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObject",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2182,Modifiability,inherit,inherited,2182," ParameterList; getDefaultParameterList(ImageData<T> imageData). This should return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> image",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2321,Modifiability,inherit,inherited,2321," needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2357,Modifiability,plugin,plugins,2357,"actly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task e",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2540,Modifiability,extend,extends,2540,"isplay. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Descrip",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2707,Modifiability,plugin,plugin,2707,"isplay. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Descrip",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:3663,Modifiability,plugin,plugin,3663,"nterface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDescription; public String getDescription(); Description copied from i",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:4675,Modifiability,plugin,plugin,4675,"that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:4006,Safety,detect,detected,4006,"that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getLastResultsDescription; public String getLastResultsDescription(); Description copied from interface: PathPlugin; (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html:2256,Security,hash,hashCode,2256,"ould return a default ParameterList containing any information that is needed to repeat the task exactly. String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. Methods inherited from class qupath.lib.plugins.AbstractDetectionPlugin; getParentObjects. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate, runPlugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; runPlugin. Constructor Details. TilerPlugin; public TilerPlugin(); Default constructor. Method Details. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Specified by:; getSupportedParentObjectClasses in interface PathInteractivePlugin<T>; Overrides:; getSupportedParentObjectClasses in class AbstractDetectionPlugin<T>; Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This sh",MatchSource.WIKI,javadoc/docs/qupath/lib/algorithms/TilerPlugin.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/TilerPlugin.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html:3008,Availability,error,errors,3008,"hod Details. calibration; public DelaunayTools.Builder calibration(PixelCalibration cal); Specify pixel calibration, which is used to calibrate the x and y coordinates. Parameters:; cal - the calibration to use; Returns:; this builder. centroids; public DelaunayTools.Builder centroids(); Specify that the triangulation should be based on ROI centroids. Returns:; this builder. roiBounds; public DelaunayTools.Builder roiBounds(); Specify that the triangulation should be based on ROI boundary coordinates with the default densify factor. Returns:; this builder. roiBounds; public DelaunayTools.Builder roiBounds(double densify,; double erosion); Specify that the triangulation should be based on ROI boundary coordinates with a specified densify factor. Parameters:; densify - how much to 'densify' the coordinates; recommended default value is 4.0 (assuming uncalibrated pixels).; Decreasing the value will give a denser (and slower) triangulation; this can achieve more accuracy but ; also lead to numerical problems. Try adjusting this value only if the default results in errors.; erosion - amount to erode each Geometry in pixels. If non-zero, this can fix artifacts occurring at shared boundaries.; Returns:; this builder. preferNucleus; public DelaunayTools.Builder preferNucleus(boolean prefer); Specify that the triangulation should be based on nucleus ROIs where possible (only affects cell objects). Parameters:; prefer - if true, use the nucleus ROI for cell objects where possible; Returns:; this builder. coordinateExtractor; public DelaunayTools.Builder coordinateExtractor(Function<PathObject,Collection<Coordinate>> coordinateExtractor); Specify a default method of extracting coordinates for triangulation from an object, rather than centroids or the ROI boundary. Parameters:; coordinateExtractor - the custom coordinate extractor; Returns:; this builder. build; public DelaunayTools.Subdivision build(); Build the DelaunayTools.Subdivision with the current parameters. Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html:531,Modifiability,extend,extends,531,". DelaunayTools.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis; Class DelaunayTools.Builder. java.lang.Object; qupath.lib.analysis.DelaunayTools.Builder. Enclosing class:; DelaunayTools. public static class DelaunayTools.Builder; extends Object; Builder class to create a DelaunayTools.Subdivision based on Delaunay triangulation. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; DelaunayTools.Subdivision; build(). Build the DelaunayTools.Subdivision with the current parameters. DelaunayTools.Builder; calibration(PixelCalibration cal). Specify pixel calibration, which is used to calibrate the x and y coordinates. DelaunayTools.Builder; centroids(). Specify that the triangulation should be based on ROI centroids. DelaunayTools.Builder; coordinateExtractor(Function<PathObject,Collection<Coordinate>> coordinateExtractor). Specify a default method of extracting coordinates for triangulation from an object, rather than centroids or the ROI boundary. DelaunayTools.Builder; preferNucleus(boolean prefer). Specify that the triangulation should be based on nucleus ROIs where possible (only affects cell objects). DelaunayTools.Builder; roiBounds(). Specify that the triangulation should be based on ROI boundary coordinates with the default densify factor. DelaunayTools.Builder; roiBounds(double densify,; double erosion). Specify that the triangulation should be based on ROI boundary coordinates with a specified densify factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. calibration; public DelaunayTools.Builder calibration(Pix",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html:1797,Modifiability,inherit,inherited,1797,"with the current parameters. DelaunayTools.Builder; calibration(PixelCalibration cal). Specify pixel calibration, which is used to calibrate the x and y coordinates. DelaunayTools.Builder; centroids(). Specify that the triangulation should be based on ROI centroids. DelaunayTools.Builder; coordinateExtractor(Function<PathObject,Collection<Coordinate>> coordinateExtractor). Specify a default method of extracting coordinates for triangulation from an object, rather than centroids or the ROI boundary. DelaunayTools.Builder; preferNucleus(boolean prefer). Specify that the triangulation should be based on nucleus ROIs where possible (only affects cell objects). DelaunayTools.Builder; roiBounds(). Specify that the triangulation should be based on ROI boundary coordinates with the default densify factor. DelaunayTools.Builder; roiBounds(double densify,; double erosion). Specify that the triangulation should be based on ROI boundary coordinates with a specified densify factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. calibration; public DelaunayTools.Builder calibration(PixelCalibration cal); Specify pixel calibration, which is used to calibrate the x and y coordinates. Parameters:; cal - the calibration to use; Returns:; this builder. centroids; public DelaunayTools.Builder centroids(); Specify that the triangulation should be based on ROI centroids. Returns:; this builder. roiBounds; public DelaunayTools.Builder roiBounds(); Specify that the triangulation should be based on ROI boundary coordinates with the default densify factor. Returns:; this builder. roiBounds; public DelaunayTools.Builder roiBounds(double densify,; double erosion); Specify that the triangulation should be based on ROI boundary coordinates with a specified densify factor. Parameters:; densify - how much to 'densify' the coordinates; recommended default value is 4.0 (assuming uncalibrated pi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html:1871,Security,hash,hashCode,1871,"ibration cal). Specify pixel calibration, which is used to calibrate the x and y coordinates. DelaunayTools.Builder; centroids(). Specify that the triangulation should be based on ROI centroids. DelaunayTools.Builder; coordinateExtractor(Function<PathObject,Collection<Coordinate>> coordinateExtractor). Specify a default method of extracting coordinates for triangulation from an object, rather than centroids or the ROI boundary. DelaunayTools.Builder; preferNucleus(boolean prefer). Specify that the triangulation should be based on nucleus ROIs where possible (only affects cell objects). DelaunayTools.Builder; roiBounds(). Specify that the triangulation should be based on ROI boundary coordinates with the default densify factor. DelaunayTools.Builder; roiBounds(double densify,; double erosion). Specify that the triangulation should be based on ROI boundary coordinates with a specified densify factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. calibration; public DelaunayTools.Builder calibration(PixelCalibration cal); Specify pixel calibration, which is used to calibrate the x and y coordinates. Parameters:; cal - the calibration to use; Returns:; this builder. centroids; public DelaunayTools.Builder centroids(); Specify that the triangulation should be based on ROI centroids. Returns:; this builder. roiBounds; public DelaunayTools.Builder roiBounds(); Specify that the triangulation should be based on ROI boundary coordinates with the default densify factor. Returns:; this builder. roiBounds; public DelaunayTools.Builder roiBounds(double densify,; double erosion); Specify that the triangulation should be based on ROI boundary coordinates with a specified densify factor. Parameters:; densify - how much to 'densify' the coordinates; recommended default value is 4.0 (assuming uncalibrated pixels).; Decreasing the value will give a denser (and slower) triangulati",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Builder.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:459,Modifiability,extend,extends,459,". DelaunayTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis; Class DelaunayTools. java.lang.Object; qupath.lib.analysis.DelaunayTools. public class DelaunayTools; extends Object; Tools for creating and querying Delaunay triangulations and Voronoi diagrams. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DelaunayTools.Builder. Builder class to create a DelaunayTools.Subdivision based on Delaunay triangulation. static class ; DelaunayTools.Subdivision. Helper class for extracting information from a Delaunay triangulation computed from PathObjects. Constructor Summary; Constructors. Constructor; Description; DelaunayTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static BiPredicate<PathObject,PathObject>; boundaryDistancePredicate(double maxDistance,; boolean preferNucleus). BiPredicate that returns true for objects with ROI boundaries within a specified distance. static BiPredicate<PathObject,PathObject>; centroidDistancePredicate(double maxDistance,; boolean preferNucleus). BiPredicate that returns true for objects with ROI centroids within a specified distance. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object classifications based upon pre-computed clusters. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static List<PathObject>; createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:1585,Modifiability,extend,extends,1585,"; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DelaunayTools.Builder. Builder class to create a DelaunayTools.Subdivision based on Delaunay triangulation. static class ; DelaunayTools.Subdivision. Helper class for extracting information from a Delaunay triangulation computed from PathObjects. Constructor Summary; Constructors. Constructor; Description; DelaunayTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static BiPredicate<PathObject,PathObject>; boundaryDistancePredicate(double maxDistance,; boolean preferNucleus). BiPredicate that returns true for objects with ROI boundaries within a specified distance. static BiPredicate<PathObject,PathObject>; centroidDistancePredicate(double maxDistance,; boolean preferNucleus). BiPredicate that returns true for objects with ROI centroids within a specified distance. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object classifications based upon pre-computed clusters. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static List<PathObject>; createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI bounds). Create annotations surrounding objects within a specified subdivision based on Voronoi faces. static DelaunayTools.Subdivision; createFromCentroids(Collection<PathObject> pathObjects,; boolean preferNucleusROI). Create a DelaunayTools.Subdivision using the centroid coordinates of ROIs. static DelaunayTools.Subdivision; createFromGeometryCoordinates(Collection<PathObject> pathObjects,; boolean preferNucleusROI,; double densifyFactor). Create a DelaunayTools.Subdivision using the boundary coordinates of ROIs. static Collection<PathObject>; nameO",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:1761,Modifiability,extend,extends,1761,"unay triangulation. static class ; DelaunayTools.Subdivision. Helper class for extracting information from a Delaunay triangulation computed from PathObjects. Constructor Summary; Constructors. Constructor; Description; DelaunayTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static BiPredicate<PathObject,PathObject>; boundaryDistancePredicate(double maxDistance,; boolean preferNucleus). BiPredicate that returns true for objects with ROI boundaries within a specified distance. static BiPredicate<PathObject,PathObject>; centroidDistancePredicate(double maxDistance,; boolean preferNucleus). BiPredicate that returns true for objects with ROI centroids within a specified distance. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object classifications based upon pre-computed clusters. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static List<PathObject>; createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI bounds). Create annotations surrounding objects within a specified subdivision based on Voronoi faces. static DelaunayTools.Subdivision; createFromCentroids(Collection<PathObject> pathObjects,; boolean preferNucleusROI). Create a DelaunayTools.Subdivision using the centroid coordinates of ROIs. static DelaunayTools.Subdivision; createFromGeometryCoordinates(Collection<PathObject> pathObjects,; boolean preferNucleusROI,; double densifyFactor). Create a DelaunayTools.Subdivision using the boundary coordinates of ROIs. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object names based upon pre-computed clusters. static Collection<PathObject>; nameObjectsByCluster(Collection<Collectio",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:2600,Modifiability,extend,extends,2600,"ction<? extends PathObject>> clusters). Assign object classifications based upon pre-computed clusters. static Collection<PathObject>; classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static List<PathObject>; createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI bounds). Create annotations surrounding objects within a specified subdivision based on Voronoi faces. static DelaunayTools.Subdivision; createFromCentroids(Collection<PathObject> pathObjects,; boolean preferNucleusROI). Create a DelaunayTools.Subdivision using the centroid coordinates of ROIs. static DelaunayTools.Subdivision; createFromGeometryCoordinates(Collection<PathObject> pathObjects,; boolean preferNucleusROI,; double densifyFactor). Create a DelaunayTools.Subdivision using the boundary coordinates of ROIs. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object names based upon pre-computed clusters. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static DelaunayTools.Builder; newBuilder(Collection<PathObject> pathObjects). Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. static BiPredicate<PathObject,PathObject>; sameClassificationPredicate(). BiPredicate that returns true for objects that share the same classification. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DelaunayTools; public DelaunayTools(). Method Details. newBuilder; public static DelaunayTools.Builder newBuilder(Collection<PathObject> pathObjects); Create a new DelaunayTools.Builder to comput",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:2762,Modifiability,extend,extends,2762," extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static List<PathObject>; createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI bounds). Create annotations surrounding objects within a specified subdivision based on Voronoi faces. static DelaunayTools.Subdivision; createFromCentroids(Collection<PathObject> pathObjects,; boolean preferNucleusROI). Create a DelaunayTools.Subdivision using the centroid coordinates of ROIs. static DelaunayTools.Subdivision; createFromGeometryCoordinates(Collection<PathObject> pathObjects,; boolean preferNucleusROI,; double densifyFactor). Create a DelaunayTools.Subdivision using the boundary coordinates of ROIs. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object names based upon pre-computed clusters. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static DelaunayTools.Builder; newBuilder(Collection<PathObject> pathObjects). Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. static BiPredicate<PathObject,PathObject>; sameClassificationPredicate(). BiPredicate that returns true for objects that share the same classification. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DelaunayTools; public DelaunayTools(). Method Details. newBuilder; public static DelaunayTools.Builder newBuilder(Collection<PathObject> pathObjects); Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. Parameters:; pathObjects - ; Returns:. createFromCentroids; public static DelaunayTools.Subdivision createFromCentroids(Collection<PathOb",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:3230,Modifiability,inherit,inherited,3230,"ayTools.Subdivision using the centroid coordinates of ROIs. static DelaunayTools.Subdivision; createFromGeometryCoordinates(Collection<PathObject> pathObjects,; boolean preferNucleusROI,; double densifyFactor). Create a DelaunayTools.Subdivision using the boundary coordinates of ROIs. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object names based upon pre-computed clusters. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static DelaunayTools.Builder; newBuilder(Collection<PathObject> pathObjects). Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. static BiPredicate<PathObject,PathObject>; sameClassificationPredicate(). BiPredicate that returns true for objects that share the same classification. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DelaunayTools; public DelaunayTools(). Method Details. newBuilder; public static DelaunayTools.Builder newBuilder(Collection<PathObject> pathObjects); Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. Parameters:; pathObjects - ; Returns:. createFromCentroids; public static DelaunayTools.Subdivision createFromCentroids(Collection<PathObject> pathObjects,; boolean preferNucleusROI); Create a DelaunayTools.Subdivision using the centroid coordinates of ROIs.; ; Note: centroids must be distinct. If multiple objects have identical centroids, one or more objects may be lost ; from the resulting DelaunayTools.Subdivision. Parameters:; pathObjects - collection of objects from which to construct the DelaunayTools.Subdivision; preferNucleusROI - if true, prefer the nucleus ROI when extracting the centroid from a ce",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:7159,Modifiability,extend,extends,7159,"eferNucleus); BiPredicate that returns true for objects with ROI boundaries within a specified distance. Parameters:; maxDistance - maximum separation between ROI boundaries; preferNucleus - if true, prefer nucleus ROIs for cell objects; Returns:; true for object pairs with close boundaries. createAnnotationsFromSubdivision; public static List<PathObject> createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI bounds); Create annotations surrounding objects within a specified subdivision based on Voronoi faces.; This can be used to create annotations based upon existing detections. Parameters:; subdivision - subdivision representing object relationships; bounds - if provided, clip the annotations to fit within the ROI; Returns:; a list of annotations, one for each classification represented by objects within the subdivision within the bounds. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; Returns:; a collection of objects that have had their classifications set by this method. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extend",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:7752,Modifiability,extend,extends,7752,"tions based upon existing detections. Parameters:; subdivision - subdivision representing object relationships; bounds - if provided, clip the annotations to fit within the ROI; Returns:; a list of annotations, one for each classification represented by objects within the subdivision within the bounds. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; Returns:; a collection of objects that have had their classifications set by this method. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; However rather than set this as the object classification, it will be used to set the name and color of the object ; (so as to avoid overriding an existing classification).; Returns:; a ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:8166,Modifiability,extend,extends,8166,"usters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; Returns:; a collection of objects that have had their classifications set by this method. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; However rather than set this as the object classification, it will be used to set the name and color of the object ; (so as to avoid overriding an existing classification).; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object names based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:8925,Modifiability,extend,extends,8925,"assFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; Returns:; a collection of objects that have had their classifications set by this method. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; However rather than set this as the object classification, it will be used to set the name and color of the object ; (so as to avoid overriding an existing classification).; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object names based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:6769,Safety,detect,detections,6769,"ferNucleus); BiPredicate that returns true for objects with ROI centroids within a specified distance. Parameters:; maxDistance - maximum separation between ROI centroids; preferNucleus - if true, prefer nucleus centroids for cell objects; Returns:; true for object pairs with close centroids. boundaryDistancePredicate; public static BiPredicate<PathObject,PathObject> boundaryDistancePredicate(double maxDistance,; boolean preferNucleus); BiPredicate that returns true for objects with ROI boundaries within a specified distance. Parameters:; maxDistance - maximum separation between ROI boundaries; preferNucleus - if true, prefer nucleus ROIs for cell objects; Returns:; true for object pairs with close boundaries. createAnnotationsFromSubdivision; public static List<PathObject> createAnnotationsFromSubdivision(DelaunayTools.Subdivision subdivision,; ROI bounds); Create annotations surrounding objects within a specified subdivision based on Voronoi faces.; This can be used to create annotations based upon existing detections. Parameters:; subdivision - subdivision representing object relationships; bounds - if provided, clip the annotations to fit within the ROI; Returns:; a list of annotations, one for each classification represented by objects within the subdivision within the bounds. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; Returns:; a collection of objects that have had their classifications set by this method. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Colle",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:8684,Safety,avoid,avoid,8684,"assFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; Returns:; a collection of objects that have had their classifications set by this method. classifyObjectsByCluster; public static Collection<PathObject> classifyObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun); Assign object classifications based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; pathClassFun - function used to create a PathClass from a cluster number (determined by where it falls within the collection).; However rather than set this as the object classification, it will be used to set the name and color of the object ; (so as to avoid overriding an existing classification).; Returns:; a collection of objects that have had their classifications set by this method. nameObjectsByCluster; public static Collection<PathObject> nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters); Assign object names based upon pre-computed clusters. Parameters:; clusters - a collection of PathObject collections, each of which corresponds to a cluster of related objects.; Returns:; a collection of objects that have had their classifications set by this method. ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html:3304,Security,hash,hashCode,3304,"nayTools.Subdivision; createFromGeometryCoordinates(Collection<PathObject> pathObjects,; boolean preferNucleusROI,; double densifyFactor). Create a DelaunayTools.Subdivision using the boundary coordinates of ROIs. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters). Assign object names based upon pre-computed clusters. static Collection<PathObject>; nameObjectsByCluster(Collection<Collection<? extends PathObject>> clusters,; Function<Integer,PathClass> pathClassFun). Assign object classifications based upon pre-computed clusters. static DelaunayTools.Builder; newBuilder(Collection<PathObject> pathObjects). Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. static BiPredicate<PathObject,PathObject>; sameClassificationPredicate(). BiPredicate that returns true for objects that share the same classification. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DelaunayTools; public DelaunayTools(). Method Details. newBuilder; public static DelaunayTools.Builder newBuilder(Collection<PathObject> pathObjects); Create a new DelaunayTools.Builder to compute a triangulation using the specified objects. Parameters:; pathObjects - ; Returns:. createFromCentroids; public static DelaunayTools.Subdivision createFromCentroids(Collection<PathObject> pathObjects,; boolean preferNucleusROI); Create a DelaunayTools.Subdivision using the centroid coordinates of ROIs.; ; Note: centroids must be distinct. If multiple objects have identical centroids, one or more objects may be lost ; from the resulting DelaunayTools.Subdivision. Parameters:; pathObjects - collection of objects from which to construct the DelaunayTools.Subdivision; preferNucleusROI - if true, prefer the nucleus ROI when extracting the centroid from a cell; Returns:; a new DelaunayTools.Subdivision computed from the centroid",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html:547,Modifiability,extend,extends,547,". DelaunayTools.Subdivision (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis; Class DelaunayTools.Subdivision. java.lang.Object; qupath.lib.analysis.DelaunayTools.Subdivision. Enclosing class:; DelaunayTools. public static class DelaunayTools.Subdivision; extends Object; Helper class for extracting information from a Delaunay triangulation computed from PathObjects. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Map<PathObject,List<PathObject>>; getAllNeighbors(). Get a list of neighbors for all objects. List<Collection<PathObject>>; getClusters(BiPredicate<PathObject,PathObject> predicate). Get clusters of connected objects, where connections are made between neighboring objects that meet the specified predicate. Map<PathObject,List<PathObject>>; getFilteredNeighbors(BiPredicate<PathObject,PathObject> predicate). Get a list of neighbors for all objects, filtering out objects that do not meet specified criteria. List<PathObject>; getFilteredNeighbors(PathObject pathObject,; BiPredicate<PathObject,PathObject> predicate). Get a list of neighbors for a specified object, filtering out objects that do not meet specified criteria. ImagePlane; getImagePlane(). Get the ImagePlane for this subdivision. PathObject; getNearestNeighbor(PathObject pathObject). Get the nearest neighbor for the specified object. PathObject; getNearestNeighbor(PathObject pathObject,; BiPredicate<PathObject,PathObject> predicate). Get the nearest neighbor for the specified object, filtered by a predicate. List<PathObject>; getNeighbors(PathObject pathObject). Get all neighbors for a specified object. Collection<PathObject>; getPathObjects(). Get all the objects ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html:2245,Modifiability,inherit,inherited,2245,"ecified criteria. List<PathObject>; getFilteredNeighbors(PathObject pathObject,; BiPredicate<PathObject,PathObject> predicate). Get a list of neighbors for a specified object, filtering out objects that do not meet specified criteria. ImagePlane; getImagePlane(). Get the ImagePlane for this subdivision. PathObject; getNearestNeighbor(PathObject pathObject). Get the nearest neighbor for the specified object. PathObject; getNearestNeighbor(PathObject pathObject,; BiPredicate<PathObject,PathObject> predicate). Get the nearest neighbor for the specified object, filtered by a predicate. List<PathObject>; getNeighbors(PathObject pathObject). Get all neighbors for a specified object. Collection<PathObject>; getPathObjects(). Get all the objects associated with this subdivision. Map<PathObject,Geometry>; getVoronoiFaces(). Get a map of Voronoi faces as JTS Geometry objects. Map<PathObject,ROI>; getVoronoiROIs(Geometry clip). Get a map of Voronoi faces, convered to ROI objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getImagePlane; public ImagePlane getImagePlane(); Get the ImagePlane for this subdivision.; Because the subdivision is 2D, all object ROIs are expected to belong to the same plane. Returns:. getVoronoiFaces; public Map<PathObject,Geometry> getVoronoiFaces(); Get a map of Voronoi faces as JTS Geometry objects. Returns:; See Also:. getVoronoiROIs(Geometry). getVoronoiROIs; public Map<PathObject,ROI> getVoronoiROIs(Geometry clip); Get a map of Voronoi faces, convered to ROI objects. Parameters:; clip - optional region used to clip the total extent of the ROIs; Returns:; See Also:. getVoronoiFaces(). getPathObjects; public Collection<PathObject> getPathObjects(); Get all the objects associated with this subdivision. Returns:. getNearestNeighbor; public PathObject getNearestNeighbor(PathObject pathObject); Get the nearest neighbor for the specified object",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html:2319,Security,hash,hashCode,2319,"Object,; BiPredicate<PathObject,PathObject> predicate). Get a list of neighbors for a specified object, filtering out objects that do not meet specified criteria. ImagePlane; getImagePlane(). Get the ImagePlane for this subdivision. PathObject; getNearestNeighbor(PathObject pathObject). Get the nearest neighbor for the specified object. PathObject; getNearestNeighbor(PathObject pathObject,; BiPredicate<PathObject,PathObject> predicate). Get the nearest neighbor for the specified object, filtered by a predicate. List<PathObject>; getNeighbors(PathObject pathObject). Get all neighbors for a specified object. Collection<PathObject>; getPathObjects(). Get all the objects associated with this subdivision. Map<PathObject,Geometry>; getVoronoiFaces(). Get a map of Voronoi faces as JTS Geometry objects. Map<PathObject,ROI>; getVoronoiROIs(Geometry clip). Get a map of Voronoi faces, convered to ROI objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getImagePlane; public ImagePlane getImagePlane(); Get the ImagePlane for this subdivision.; Because the subdivision is 2D, all object ROIs are expected to belong to the same plane. Returns:. getVoronoiFaces; public Map<PathObject,Geometry> getVoronoiFaces(); Get a map of Voronoi faces as JTS Geometry objects. Returns:; See Also:. getVoronoiROIs(Geometry). getVoronoiROIs; public Map<PathObject,ROI> getVoronoiROIs(Geometry clip); Get a map of Voronoi faces, convered to ROI objects. Parameters:; clip - optional region used to clip the total extent of the ROIs; Returns:; See Also:. getVoronoiFaces(). getPathObjects; public Collection<PathObject> getPathObjects(); Get all the objects associated with this subdivision. Returns:. getNearestNeighbor; public PathObject getNearestNeighbor(PathObject pathObject); Get the nearest neighbor for the specified object. Parameters:; pathObject - the object whose neighbor is requested; Retu",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DelaunayTools.Subdivision.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:11261,Availability,avail,available,11261,"uble computeCoordinateDistance(Coordinate coord,; STRtree tree); Compute the distance to the nearest coordinate stored within an STRtree.; This assumes that all items in the tree are coordinates (and nothing else!). Parameters:; coord - the query coordinate; tree - the STRtree containing existing coordinates; Returns:; distance to the closest coordinate found in tree, or Double.POSITIVE_INFINITY is no coordinate is found; See Also:. createCoordinateCache(Collection). createCoordinateCache; public static STRtree createCoordinateCache(Collection<Coordinate> coords); Create an STRtree to enable nearest neighbor searching for a collection of coordinates. Parameters:; coords - the coordinates to insert into the tree; Returns:; the tree. computeDistance; public static double computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator); Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. Parameters:; coord - the coordinate; geometry - the target geometry; locator - a locator created for the target Geometry or null; if available, computations may be faster; Returns:; See Also:. computeDistance(Coordinate, Geometry, PointOnGeometryLocator, boolean). computeDistance; public static double computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance); Compute the shortest distance from a coordinate to a target geometry.; This is primarily intended for computing distances for exterior coordinates, however a signed distance can ; optionally be returned for interior coordinates. Parameters:; coord - the coordinate; geometry - the target geometry; locator - a locator created for the target Geometry or null; if available, computations may be faster; signedDistance - if false, return 0 for coordinates occurring inside areas;; if true, return a negative value representing the distance to the boundary of the area; Returns:; Since:; v0.4.0. ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:11906,Availability,avail,available,11906,"uble computeCoordinateDistance(Coordinate coord,; STRtree tree); Compute the distance to the nearest coordinate stored within an STRtree.; This assumes that all items in the tree are coordinates (and nothing else!). Parameters:; coord - the query coordinate; tree - the STRtree containing existing coordinates; Returns:; distance to the closest coordinate found in tree, or Double.POSITIVE_INFINITY is no coordinate is found; See Also:. createCoordinateCache(Collection). createCoordinateCache; public static STRtree createCoordinateCache(Collection<Coordinate> coords); Create an STRtree to enable nearest neighbor searching for a collection of coordinates. Parameters:; coords - the coordinates to insert into the tree; Returns:; the tree. computeDistance; public static double computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator); Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. Parameters:; coord - the coordinate; geometry - the target geometry; locator - a locator created for the target Geometry or null; if available, computations may be faster; Returns:; See Also:. computeDistance(Coordinate, Geometry, PointOnGeometryLocator, boolean). computeDistance; public static double computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance); Compute the shortest distance from a coordinate to a target geometry.; This is primarily intended for computing distances for exterior coordinates, however a signed distance can ; optionally be returned for interior coordinates. Parameters:; coord - the coordinate; geometry - the target geometry; locator - a locator created for the target Geometry or null; if available, computations may be faster; signedDistance - if false, return 0 for coordinates occurring inside areas;; if true, return a negative value representing the distance to the boundary of the area; Returns:; Since:; v0.4.0. ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:459,Modifiability,extend,extends,459,". DistanceTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis; Class DistanceTools. java.lang.Object; qupath.lib.analysis.DistanceTools. public class DistanceTools; extends Object; Static methods for calculating distances between objects. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DistanceTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; centroidToBoundsDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName). Calculate the distance between source object centroids and the boundary of specified target objects, adding the result to the measurement list of the source objects. static void; centroidToBoundsDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName,; boolean signedDistances). Calculate the (optionally signed) distance between source object centroids and the boundary of specified target objects, adding the result to the measurement list of the source objects. static void; centroidToCentroidDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName). Calculate the distance between source object centroids and the centroid of specified target objects, adding the result to the measurement list of the source objects. static double; computeCoordinateDistance(Coordinate coord,; Collection<Coordinate> targets). Compute the shortest distance from a coordinate to one of a collection of",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3904,Modifiability,inherit,inherited,3904,"st annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:2766,Safety,detect,detectionCentroidDistances,2766,"asurement list of the source objects. static double; computeCoordinateDistance(Coordinate coord,; Collection<Coordinate> targets). Compute the shortest distance from a coordinate to one of a collection of target coordinates. static double; computeCoordinateDistance(Coordinate coord,; STRtree tree). Compute the distance to the nearest coordinate stored within an STRtree. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator). Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation wi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:2873,Safety,detect,detection,2873,"e the shortest distance from a coordinate to one of a collection of target coordinates. static double; computeCoordinateDistance(Coordinate coord,; STRtree tree). Compute the distance to the nearest coordinate stored within an STRtree. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator). Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:2998,Safety,detect,detection,2998,"e the shortest distance from a coordinate to one of a collection of target coordinates. static double; computeCoordinateDistance(Coordinate coord,; STRtree tree). Compute the distance to the nearest coordinate stored within an STRtree. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator). Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3039,Safety,detect,detectionToAnnotationDistances,3039,"e coord,; STRtree tree). Compute the distance to the nearest coordinate stored within an STRtree. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator). Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; pu",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3150,Safety,detect,detection,3150," coord,; Geometry geometry,; PointOnGeometryLocator locator). Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> image",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3275,Safety,detect,detection,3275," coord,; Geometry geometry,; PointOnGeometryLocator locator). Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> image",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3316,Safety,detect,detectionToAnnotationDistances,3316,"if the coordinate occurs ; within. static double; computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classifi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3453,Safety,detect,detection,3453,"Distance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3578,Safety,detect,detection,3578,"Distance). Compute the shortest distance from a coordinate to a target geometry. static STRtree; createCoordinateCache(Collection<Coordinate> coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3619,Safety,detect,detectionToAnnotationDistancesSigned,3619," coords). Create an STRtree to enable nearest neighbor searching for a collection of coordinates. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3743,Safety,detect,detection,3743,"ta<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3868,Safety,detect,detection,3868,"ta<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4111,Safety,detect,detectionToAnnotationDistances,4111," to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances wi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4162,Safety,detect,detectionToAnnotationDistances,4162," to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances wi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4273,Safety,detect,detection,4273," to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances wi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4398,Safety,detect,detection,4398," to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances wi",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4689,Safety,detect,detectionToAnnotationDistances,4689," signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4750,Safety,detect,detectionToAnnotationDistancesSigned,4750,"om class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: C",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4807,Safety,detect,detectionToAnnotationDistancesSigned,4807,"om class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: C",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:4931,Safety,detect,detection,4931,"om class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: C",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:5056,Safety,detect,detection,5056,"om class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: C",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:5363,Safety,detect,detectionToAnnotationDistances,5363,"o the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object ",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:5424,Safety,detect,detectionToAnnotationDistances,5424,"8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the c",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:5475,Safety,detect,detectionToAnnotationDistances,5475,"8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the c",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:5612,Safety,detect,detection,5612,"8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the c",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:5737,Safety,detect,detection,5737,"8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; Since:; v0.4.0; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the c",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:6222,Safety,detect,detectionCentroidDistances,6222,"AnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8""). centroidToBoundsDistance2D; public static void centroidToBoundsDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName); Calculate the distance between source object centroids and the boundary of specified target objects, adding the result to the measurement list of the source objects.; Calculations are all made in 2D; distances will not be calculated between objects occurring on different z-planes of at different timepoints. Parameters:; sourceObjects - source objects; measurements will be ad",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:6269,Safety,detect,detectionCentroidDistances,6269,"AnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8""). centroidToBoundsDistance2D; public static void centroidToBoundsDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName); Calculate the distance between source object centroids and the boundary of specified target objects, adding the result to the measurement list of the source objects.; Calculations are all made in 2D; distances will not be calculated between objects occurring on different z-planes of at different timepoints. Parameters:; sourceObjects - source objects; measurements will be ad",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:6376,Safety,detect,detection,6376,"AnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8""). centroidToBoundsDistance2D; public static void centroidToBoundsDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName); Calculate the distance between source object centroids and the boundary of specified target objects, adding the result to the measurement list of the source objects.; Calculations are all made in 2D; distances will not be calculated between objects occurring on different z-planes of at different timepoints. Parameters:; sourceObjects - source objects; measurements will be ad",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:6501,Safety,detect,detection,6501,"AnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; signedDistances - optionally calculate signed distances, i.e. negative values for source centroids that occur inside target objects representing the distance to the target object boundary; Since:; v0.4.0. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8""). centroidToBoundsDistance2D; public static void centroidToBoundsDistance2D(Collection<PathObject> sourceObjects,; Collection<PathObject> targetObjects,; double pixelWidth,; double pixelHeight,; String measurementName); Calculate the distance between source object centroids and the boundary of specified target objects, adding the result to the measurement list of the source objects.; Calculations are all made in 2D; distances will not be calculated between objects occurring on different z-planes of at different timepoints. Parameters:; sourceObjects - source objects; measurements will be ad",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:3978,Security,hash,hashCode,3978,"result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames,; boolean signedDistances). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DistanceTools; public DistanceTools(). Method Details. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - if true, split the classification name. For example, if an image contains classifications for both ""CD3: CD4"" and ""CD3: CD8"",; distances will be calculated for all components (e.g. ""CD3"", ""CD4"" and ""CD8"").; See Also:. detectionToAnnotationDistances(ImageData, boolean, boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all detection object centroids to the closest annotation w",MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/DistanceTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/package-summary.html:765,Integrability,interface,interfaces,765,. qupath.lib.analysis (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.analysis. package qupath.lib.analysis. Classes to aid with analysis. Related Packages. Package; Description; qupath.lib.analysis.algorithms. Classes and static methods adding reusable processing and analysis functionality. qupath.lib.analysis.features. Classes to help with calculating features. qupath.lib.analysis.heatmaps. Classes and static methods associated with generating and querying heatmaps. qupath.lib.analysis.images. Helper interfaces and methods to write pixel processing algorithms. qupath.lib.analysis.stats. Calculate simple statistics from arrays. Classes. Class; Description; DelaunayTools. Tools for creating and querying Delaunay triangulations and Voronoi diagrams. DelaunayTools.Builder. Builder class to create a DelaunayTools.Subdivision based on Delaunay triangulation. DelaunayTools.Subdivision. Helper class for extracting information from a Delaunay triangulation computed from PathObjects. DistanceTools. Static methods for calculating distances between objects. ,MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/analysis/package-summary.html:863,Usability,simpl,simple,863,. qupath.lib.analysis (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.analysis. package qupath.lib.analysis. Classes to aid with analysis. Related Packages. Package; Description; qupath.lib.analysis.algorithms. Classes and static methods adding reusable processing and analysis functionality. qupath.lib.analysis.features. Classes to help with calculating features. qupath.lib.analysis.heatmaps. Classes and static methods associated with generating and querying heatmaps. qupath.lib.analysis.images. Helper interfaces and methods to write pixel processing algorithms. qupath.lib.analysis.stats. Calculate simple statistics from arrays. Classes. Class; Description; DelaunayTools. Tools for creating and querying Delaunay triangulations and Voronoi diagrams. DelaunayTools.Builder. Builder class to create a DelaunayTools.Subdivision based on Delaunay triangulation. DelaunayTools.Subdivision. Helper class for extracting information from a Delaunay triangulation computed from PathObjects. DistanceTools. Static methods for calculating distances between objects. ,MatchSource.WIKI,javadoc/docs/qupath/lib/analysis/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:737,Integrability,interface,interfaces,737,". Normalization (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.classifiers; Enum Class Normalization. java.lang.Object; java.lang.Enum<Normalization>; qupath.lib.classifiers.Normalization. All Implemented Interfaces:; Serializable, Comparable<Normalization>, Constable. public enum Normalization; extends Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the r",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:613,Modifiability,extend,extends,613,". Normalization (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.classifiers; Enum Class Normalization. java.lang.Object; java.lang.Enum<Normalization>; qupath.lib.classifiers.Normalization. All Implemented Interfaces:; Serializable, Comparable<Normalization>, Constable. public enum Normalization; extends Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the r",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:748,Modifiability,inherit,inherited,748,". Normalization (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.classifiers; Enum Class Normalization. java.lang.Object; java.lang.Enum<Normalization>; qupath.lib.classifiers.Normalization. All Implemented Interfaces:; Serializable, Comparable<Normalization>, Constable. public enum Normalization; extends Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the r",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:801,Modifiability,extend,extends,801,". Normalization (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.classifiers; Enum Class Normalization. java.lang.Object; java.lang.Enum<Normalization>; qupath.lib.classifiers.Normalization. All Implemented Interfaces:; Serializable, Comparable<Normalization>, Constable. public enum Normalization; extends Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the r",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:1456,Modifiability,inherit,inherited,1456,">; qupath.lib.classifiers.Normalization. All Implemented Interfaces:; Serializable, Comparable<Normalization>, Constable. public enum Normalization; extends Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the range 0-1 using min and max values. Method Details. values; public static Normalization[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static Normalization valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used ",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:1609,Modifiability,inherit,inherited,1609,"nds Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the range 0-1 using min and max values. Method Details. values; public static Normalization[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static Normalization valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html:1567,Security,hash,hashCode,1567,"ble, Comparable<Normalization>, Constable. public enum Normalization; extends Enum<Normalization>; Methods for normalizing features. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; MEAN_VARIANCE. Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX. Normalize into the range 0-1 using min and max values. NONE. Do not normalize features. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static Normalization; valueOf(String name). Returns the enum constant of this class with the specified name. static Normalization[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. NONE; public static final Normalization NONE; Do not normalize features. MEAN_VARIANCE; public static final Normalization MEAN_VARIANCE; Normalize by subtracting the mean and dividing by the standard deviation. MIN_MAX; public static final Normalization MIN_MAX; Normalize into the range 0-1 using min and max values. Method Details. values; public static Normalization[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static Normalization valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters a",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/Normalization.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/Normalization.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/package-summary.html:387,Integrability,interface,interfaces,387,". qupath.lib.classifiers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.classifiers. package qupath.lib.classifiers. Classes and interfaces to support machine learning classifiers.; ; This was the main package in QuPath v0.1.2 and earlier.; Since v0.2.0, the new subpackages have been created for pixel and object classifiers. Related Packages. Package; Description; qupath.lib.classifiers.object. Classes for object classification in QuPath. qupath.lib.classifiers.pixel. Core support for pixel classification. Enum Classes. Class; Description; Normalization. Methods for normalizing features. ",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/package-summary.html:417,Usability,learn,learning,417,". qupath.lib.classifiers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.classifiers. package qupath.lib.classifiers. Classes and interfaces to support machine learning classifiers.; ; This was the main package in QuPath v0.1.2 and earlier.; Since v0.2.0, the new subpackages have been created for pixel and object classifiers. Related Packages. Package; Description; qupath.lib.classifiers.object. Classes for object classification in QuPath. qupath.lib.classifiers.pixel. Core support for pixel classification. Enum Classes. Class; Description; Normalization. Methods for normalizing features. ",MatchSource.WIKI,javadoc/docs/qupath/lib/classifiers/package-summary.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/package-summary.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html:481,Modifiability,extend,extends,481,". ColorDeconvMatrix3x3 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorDeconvMatrix3x3. java.lang.Object; qupath.lib.color.ColorDeconvMatrix3x3. public class ColorDeconvMatrix3x3; extends Object; Simple class for representing - and inverting a 3x3 matrix. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ColorDeconvMatrix3x3(double[][] M). Constructor for a 3x3 matrix. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; double; determinant(). Calculate the determinant of the matrix. double[][]; inverse(). Calculate the 3x3 matrix inverse. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ColorDeconvMatrix3x3; public ColorDeconvMatrix3x3(double[][] M); throws IllegalArgumentException; Constructor for a 3x3 matrix. Parameters:; M - ; Throws:; IllegalArgumentException - if the matrix is not 3x3. Method Details. determinant; public double determinant(); Calculate the determinant of the matrix. Returns:. inverse; public double[][] inverse(); Calculate the 3x3 matrix inverse. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html:961,Modifiability,inherit,inherited,961,". ColorDeconvMatrix3x3 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorDeconvMatrix3x3. java.lang.Object; qupath.lib.color.ColorDeconvMatrix3x3. public class ColorDeconvMatrix3x3; extends Object; Simple class for representing - and inverting a 3x3 matrix. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ColorDeconvMatrix3x3(double[][] M). Constructor for a 3x3 matrix. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; double; determinant(). Calculate the determinant of the matrix. double[][]; inverse(). Calculate the 3x3 matrix inverse. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ColorDeconvMatrix3x3; public ColorDeconvMatrix3x3(double[][] M); throws IllegalArgumentException; Constructor for a 3x3 matrix. Parameters:; M - ; Throws:; IllegalArgumentException - if the matrix is not 3x3. Method Details. determinant; public double determinant(); Calculate the determinant of the matrix. Returns:. inverse; public double[][] inverse(); Calculate the 3x3 matrix inverse. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html:1035,Security,hash,hashCode,1035,". ColorDeconvMatrix3x3 (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorDeconvMatrix3x3. java.lang.Object; qupath.lib.color.ColorDeconvMatrix3x3. public class ColorDeconvMatrix3x3; extends Object; Simple class for representing - and inverting a 3x3 matrix. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ColorDeconvMatrix3x3(double[][] M). Constructor for a 3x3 matrix. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; double; determinant(). Calculate the determinant of the matrix. double[][]; inverse(). Calculate the 3x3 matrix inverse. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ColorDeconvMatrix3x3; public ColorDeconvMatrix3x3(double[][] M); throws IllegalArgumentException; Constructor for a 3x3 matrix. Parameters:; M - ; Throws:; IllegalArgumentException - if the matrix is not 3x3. Method Details. determinant; public double determinant(); Calculate the determinant of the matrix. Returns:. inverse; public double[][] inverse(); Calculate the 3x3 matrix inverse. Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvMatrix3x3.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:1223,Energy Efficiency,green,greenMax,1223,"d; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorDeconvolutionHelper. java.lang.Object; qupath.lib.color.ColorDeconvolutionHelper. public class ColorDeconvolutionHelper; extends Object; Static methods to assist with color deconvolution. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ColorDeconvolutionHelper();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; convertPixelsToOpticalDensities(float[] px,; double maxValue,; boolean use8BitLUT). For originally-8-bit images, optical densities can usually be computed faster by preallocating a LUT with the 0-255 required values. static double[]; estimateWhiteValues(int[] rgb). Estimate white (background) values for a brightfield image. static StainVector; generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax). Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. static float[]; getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px). Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. static float[]; getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px). Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. static int; getMedianRGB(int[] rgb). Determine median of RGB values. static float[]; getRedOpticalDensities(int[] rgb,; double maxValue,; float[] px). Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. static final double; makeOD(double val,; double max). Convert a single pixel value to an optical density as max(0, -log10(val/max). static final double; makeODByLUT(float val,; ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6081,Energy Efficiency,green,greenMax,6081,"at[] getRedOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getGreenOpticalDensities; public static float[] getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getBlueOpticalDensities; public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector ref",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6288,Energy Efficiency,green,greenMax,6288,"Value - ; px - optional array used for output; Returns:. getGreenOpticalDensities; public static float[] getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getBlueOpticalDensities; public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector refinement. Parameters:; rgb - ; stains - ; minStain - minimum optical density for each RGB channel (default 0.15); percentageClipped - ; Returns:. estimateWhiteValues; public static double[] estima",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:7628,Energy Efficiency,green,green,7628,"public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector refinement. Parameters:; rgb - ; stains - ; minStain - minimum optical density for each RGB channel (default 0.15); percentageClipped - ; Returns:. estimateWhiteValues; public static double[] estimateWhiteValues(int[] rgb); Estimate white (background) values for a brightfield image.; ; The algorithm computes histograms for each RGB channel, and takes the mode; of the histogram in the region of the histogram > the mean value for that channel. Parameters:; rgb - an array of packed RGB values; Returns:; an array containing estimated [red, green and blue] background values. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:497,Modifiability,extend,extends,497,". ColorDeconvolutionHelper (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorDeconvolutionHelper. java.lang.Object; qupath.lib.color.ColorDeconvolutionHelper. public class ColorDeconvolutionHelper; extends Object; Static methods to assist with color deconvolution. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ColorDeconvolutionHelper();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; convertPixelsToOpticalDensities(float[] px,; double maxValue,; boolean use8BitLUT). For originally-8-bit images, optical densities can usually be computed faster by preallocating a LUT with the 0-255 required values. static double[]; estimateWhiteValues(int[] rgb). Estimate white (background) values for a brightfield image. static StainVector; generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax). Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. static float[]; getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px). Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. static float[]; getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px). Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. static int; getMedianRGB(int[] rgb). Determine median of RGB values. static float[]; getRedOpticalDensities(int[] rgb,; double maxValue,; float[] px). Convert red channel of packed rgb pixel to optical density values, using a specified maximum v",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:2974,Modifiability,inherit,inherited,2974,"specified maximum value. static final double; makeOD(double val,; double max). Convert a single pixel value to an optical density as max(0, -log10(val/max). static final double; makeODByLUT(float val,; double[] OD_LUT). Convert a float pixel to an optical density value using a pre-computed lookup table. static final double; makeODByLUT(int val,; double[] OD_LUT). Convert an int pixel to an optical density value using a pre-computed lookup table. static double[]; makeODLUT(double maxValue). Create an optical density lookup table with 256 entries, normalizing to the specified background value. static double[]; makeODLUT(double maxValue,; int nValues). Create an optical density lookup table, normalizing to the specified background value. static ColorDeconvolutionStains; refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped). Attempt to automatically refine color deconvolution stains based upon pixel values. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorDeconvolutionHelper; public ColorDeconvolutionHelper(). Method Details. makeOD; public static final double makeOD(double val,; double max); Convert a single pixel value to an optical density as max(0, -log10(val/max). where val is clipped to be >= 1. Parameters:; val - ; max - ; Returns:. makeODByLUT; public static final double makeODByLUT(int val,; double[] OD_LUT); Convert an int pixel to an optical density value using a pre-computed lookup table. ; This is likely to be much faster than calling makeOD(double, double). Parameters:; val - ; OD_LUT - ; Returns:; See Also:. makeOD(double, double). makeODByLUT; public static final double makeODByLUT(float val,; double[] OD_LUT); Convert a float pixel to an optical density value using a pre-computed lookup table. ; This is likely to be much faster than calling makeOD(double, double), but involv",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6965,Safety,avoid,avoids,6965,"public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector refinement. Parameters:; rgb - ; stains - ; minStain - minimum optical density for each RGB channel (default 0.15); percentageClipped - ; Returns:. estimateWhiteValues; public static double[] estimateWhiteValues(int[] rgb); Estimate white (background) values for a brightfield image.; ; The algorithm computes histograms for each RGB channel, and takes the mode; of the histogram in the region of the histogram > the mean value for that channel. Parameters:; rgb - an array of packed RGB values; Returns:; an array containing estimated [red, green and blue] background values. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:3048,Security,hash,hashCode,3048," max). Convert a single pixel value to an optical density as max(0, -log10(val/max). static final double; makeODByLUT(float val,; double[] OD_LUT). Convert a float pixel to an optical density value using a pre-computed lookup table. static final double; makeODByLUT(int val,; double[] OD_LUT). Convert an int pixel to an optical density value using a pre-computed lookup table. static double[]; makeODLUT(double maxValue). Create an optical density lookup table with 256 entries, normalizing to the specified background value. static double[]; makeODLUT(double maxValue,; int nValues). Create an optical density lookup table, normalizing to the specified background value. static ColorDeconvolutionStains; refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped). Attempt to automatically refine color deconvolution stains based upon pixel values. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorDeconvolutionHelper; public ColorDeconvolutionHelper(). Method Details. makeOD; public static final double makeOD(double val,; double max); Convert a single pixel value to an optical density as max(0, -log10(val/max). where val is clipped to be >= 1. Parameters:; val - ; max - ; Returns:. makeODByLUT; public static final double makeODByLUT(int val,; double[] OD_LUT); Convert an int pixel to an optical density value using a pre-computed lookup table. ; This is likely to be much faster than calling makeOD(double, double). Parameters:; val - ; OD_LUT - ; Returns:; See Also:. makeOD(double, double). makeODByLUT; public static final double makeODByLUT(float val,; double[] OD_LUT); Convert a float pixel to an optical density value using a pre-computed lookup table. ; This is likely to be much faster than calling makeOD(double, double), but involves ; rounding the float first. Parameters:; val - ; OD_LUT - ; Returns:;",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6875,Security,validat,validated,6875,"public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector refinement. Parameters:; rgb - ; stains - ; minStain - minimum optical density for each RGB channel (default 0.15); percentageClipped - ; Returns:. estimateWhiteValues; public static double[] estimateWhiteValues(int[] rgb); Estimate white (background) values for a brightfield image.; ; The algorithm computes histograms for each RGB channel, and takes the mode; of the histogram in the region of the histogram > the mean value for that channel. Parameters:; rgb - an array of packed RGB values; Returns:; an array containing estimated [red, green and blue] background values. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:4919,Testability,log,log,4919,"eOD(double, double), but involves ; rounding the float first. Parameters:; val - ; OD_LUT - ; Returns:; See Also:. makeOD(double, double). makeODLUT; public static double[] makeODLUT(double maxValue); Create an optical density lookup table with 256 entries, normalizing to the specified background value. Parameters:; maxValue - ; Returns:; See Also:. makeOD(double, double); makeODByLUT(int, double[]). makeODLUT; public static double[] makeODLUT(double maxValue,; int nValues); Create an optical density lookup table, normalizing to the specified background value. Parameters:; maxValue - background (white value); nValues - number of values to include in the lookup table; Returns:. convertPixelsToOpticalDensities; public static void convertPixelsToOpticalDensities(float[] px,; double maxValue,; boolean use8BitLUT); For originally-8-bit images, optical densities can usually be computed faster by preallocating a LUT with the 0-255 required values.; Otherwise, log values need to be calculated for every pixel (which can be relatively slow). Parameters:; px - ; maxValue - ; use8BitLUT - . getRedOpticalDensities; public static float[] getRedOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getGreenOpticalDensities; public static float[] getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getBlueOpticalDensities; public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainV",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6834,Testability,test,testing,6834,"public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector refinement. Parameters:; rgb - ; stains - ; minStain - minimum optical density for each RGB channel (default 0.15); percentageClipped - ; Returns:. estimateWhiteValues; public static double[] estimateWhiteValues(int[] rgb); Estimate white (background) values for a brightfield image.; ; The algorithm computes histograms for each RGB channel, and takes the mode; of the histogram in the region of the histogram > the mean value for that channel. Parameters:; rgb - an array of packed RGB values; Returns:; an array containing estimated [red, green and blue] background values. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1042,Integrability,interface,interface,1042,"lutionStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorDeconvolutionStains.DefaultColorDeconvolutionStains. java.lang.Object; java.lang.Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; qupath.lib.color.ColorDeconvolutionStains.DefaultColorDeconvolutionStains. All Implemented Interfaces:; Serializable, Comparable<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>, Constable. Enclosing class:; ColorDeconvolutionStains. public static enum ColorDeconvolutionStains.DefaultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant D",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1118,Integrability,interface,interfaces,1118,"igation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorDeconvolutionStains.DefaultColorDeconvolutionStains. java.lang.Object; java.lang.Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; qupath.lib.color.ColorDeconvolutionStains.DefaultColorDeconvolutionStains. All Implemented Interfaces:; Serializable, Comparable<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>, Constable. Enclosing class:; ColorDeconvolutionStains. public static enum ColorDeconvolutionStains.DefaultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. H_E; public static final ColorDeconvolutionStains.DefaultColorDeconvolutio",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:910,Modifiability,extend,extends,910,". ColorDeconvolutionStains.DefaultColorDeconvolutionStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorDeconvolutionStains.DefaultColorDeconvolutionStains. java.lang.Object; java.lang.Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; qupath.lib.color.ColorDeconvolutionStains.DefaultColorDeconvolutionStains. All Implemented Interfaces:; Serializable, Comparable<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>, Constable. Enclosing class:; ColorDeconvolutionStains. public static enum ColorDeconvolutionStains.DefaultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1129,Modifiability,inherit,inherited,1129,"igation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorDeconvolutionStains.DefaultColorDeconvolutionStains. java.lang.Object; java.lang.Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; qupath.lib.color.ColorDeconvolutionStains.DefaultColorDeconvolutionStains. All Implemented Interfaces:; Serializable, Comparable<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>, Constable. Enclosing class:; ColorDeconvolutionStains. public static enum ColorDeconvolutionStains.DefaultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. H_E; public static final ColorDeconvolutionStains.DefaultColorDeconvolutio",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1182,Modifiability,extend,extends,1182,"; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorDeconvolutionStains.DefaultColorDeconvolutionStains. java.lang.Object; java.lang.Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; qupath.lib.color.ColorDeconvolutionStains.DefaultColorDeconvolutionStains. All Implemented Interfaces:; Serializable, Comparable<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>, Constable. Enclosing class:; ColorDeconvolutionStains. public static enum ColorDeconvolutionStains.DefaultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. H_E; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_E; Hematoxylin and eosin. H_DAB; public static",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1793,Modifiability,inherit,inherited,1793,"ass:; ColorDeconvolutionStains. public static enum ColorDeconvolutionStains.DefaultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. H_E; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_E; Hematoxylin and eosin. H_DAB; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_DAB; Hematoxylin and DAB. Method Details. values; public static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ColorDeconvolutionStains.DefaultColorDeconvolutionStains valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1946,Modifiability,inherit,inherited,1946,"tColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. H_E; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_E; Hematoxylin and eosin. H_DAB; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_DAB; Hematoxylin and DAB. Method Details. values; public static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ColorDeconvolutionStains.DefaultColorDeconvolutionStains valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be return",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html:1904,Security,hash,hashCode,1904,"aultColorDeconvolutionStains; extends Enum<ColorDeconvolutionStains.DefaultColorDeconvolutionStains>; Enum for common stain defaults.; ; TODO: Switch to using an interface and permitting alternatives. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; H_DAB. Hematoxylin and DAB. H_E. Hematoxylin and eosin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorDeconvolutionStains.DefaultColorDeconvolutionStains; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. H_E; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_E; Hematoxylin and eosin. H_DAB; public static final ColorDeconvolutionStains.DefaultColorDeconvolutionStains H_DAB; Hematoxylin and DAB. Method Details. values; public static ColorDeconvolutionStains.DefaultColorDeconvolutionStains[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ColorDeconvolutionStains.DefaultColorDeconvolutionStains valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not p",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.DefaultColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:3244,Availability,recover,recover,3244,"same StainVectors but new max (background) values. ColorDeconvolutionStains; changeName(String name). Create a new stains object with the same StainVectors but a new name. ColorDeconvolutionStains; changeStain(StainVector stainNew,; int stainNumber). Create a new stains object, identical to this one but for one StainVector having been changed. static String; getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces). Get a String representation of the stains and background. double[][]; getMatrixInverse(). Get matrix inverse, as useful for color deconvolution. double; getMaxBlue(). Get the maximum value for the blue channel (default = 255). double; getMaxGreen(). Get the maximum value for the green channel (default = 255). double; getMaxRed(). Get the maximum value for the red channel (default = 255). String; getName(). Get the stains name. StainVector; getStain(int n). Get a specified color deconvolution stain vector, where n should be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains). int; getStainNumber(StainVector stain). Get the number for a specific stain (1, 2 or 3). Collection<StainVector>; getStains(boolean includeResidual). Get a collection of all the stains. static boolean; isDAB(StainVector stain). Check if the name of a StainVector is ""dab"" or ""d"" (ignoring case). static boolean; isEosin(StainVector stain). Check if the name of a StainVector is ""eosin"", ""eos"" or ""e"" (ignoring case). boolean; isH_DAB(). Check if we have H-DAB staining, by checking the names of the first two stains and confirming that the third stain is a residual. boolean; isH_E(). Check if we have H&E staining, by checking the names of the first two stains and confirming that the third stain is a residual. static boolean; isHematoxylin(StainVector stain). Check if the name of a StainVector is ""haematoxylin"", ""hematoxylin"", ""haem"" or ""h"" (ignoring case). static ColorDeconvolutionStains; makeDefaultColo",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:8596,Availability,recover,recover,8596,"e have H-DAB staining, by checking the names of the first two stains and confirming that the third stain is a residual.; Note the order of the stains must be 1-Hematoxylin, 2-DAB, 3-residual (missing). Returns:. changeStain; public ColorDeconvolutionStains changeStain(StainVector stainNew,; int stainNumber); Create a new stains object, identical to this one but for one StainVector having been changed. Parameters:; stainNew - ; stainNumber - ; Returns:. changeName; public ColorDeconvolutionStains changeName(String name); Create a new stains object with the same StainVectors but a new name. Parameters:; name - ; Returns:. changeMaxValues; public ColorDeconvolutionStains changeMaxValues(double maxRed,; double maxGreen,; double maxBlue); Create a new stains object with the same StainVectors but new max (background) values. Parameters:; maxRed - ; maxGreen - ; maxBlue - ; Returns:. getStain; public StainVector getStain(int n); Get a specified color deconvolution stain vector, where n should be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains).; ; If only 2 stains are set (i.e. stain1 and stain2), then a third stain is computed; orthogonal to the first two, with the name 'residual'. Parameters:; n - ; Returns:; The requested stain vector, or null if n is out of range or the stain was not set. getStains; public Collection<StainVector> getStains(boolean includeResidual); Get a collection of all the stains. Parameters:; includeResidual - if true, include residual stains in the list. If false, only include non-residual stains.; Returns:; a collection of stains. getName; public String getName(); Get the stains name. Returns:. getStainNumber; public int getStainNumber(StainVector stain); Get the number for a specific stain (1, 2 or 3). Parameters:; stain - ; Returns:. getMaxRed; public double getMaxRed(); Get the maximum value for the red channel (default = 255). Returns:. getMaxGreen; public double getMaxGreen(); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:2929,Energy Efficiency,green,green,2929,"ith three stain vectors. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ColorDeconvolutionStains; changeMaxValues(double maxRed,; double maxGreen,; double maxBlue). Create a new stains object with the same StainVectors but new max (background) values. ColorDeconvolutionStains; changeName(String name). Create a new stains object with the same StainVectors but a new name. ColorDeconvolutionStains; changeStain(StainVector stainNew,; int stainNumber). Create a new stains object, identical to this one but for one StainVector having been changed. static String; getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces). Get a String representation of the stains and background. double[][]; getMatrixInverse(). Get matrix inverse, as useful for color deconvolution. double; getMaxBlue(). Get the maximum value for the blue channel (default = 255). double; getMaxGreen(). Get the maximum value for the green channel (default = 255). double; getMaxRed(). Get the maximum value for the red channel (default = 255). String; getName(). Get the stains name. StainVector; getStain(int n). Get a specified color deconvolution stain vector, where n should be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains). int; getStainNumber(StainVector stain). Get the number for a specific stain (1, 2 or 3). Collection<StainVector>; getStains(boolean includeResidual). Get a collection of all the stains. static boolean; isDAB(StainVector stain). Check if the name of a StainVector is ""dab"" or ""d"" (ignoring case). static boolean; isEosin(StainVector stain). Check if the name of a StainVector is ""eosin"", ""eos"" or ""e"" (ignoring case). boolean; isH_DAB(). Check if we have H-DAB staining, by checking the names of the first two stains and confirming that the third stain is a residual. boolean; isH_E(). Check if we have H&E staining, by checking the names of th",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:5725,Energy Efficiency,green,green,5725,"le for use as a stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HEMATOXYLIN; public static final String HEMATOXYLIN; Default name (and spelling) for hematoxylin stain. See Also:. Constant Field Values. EOSIN; public static final String EOSIN; Default name for eosin stain. See Also:. Constant Field Values. DAB; public static final String DAB; Default name for DAB stain. See Also:. Constant Field Values. Constructor Details. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; StainVector stain3,; double maxRed,; double maxGreen,; double maxBlue); Constructor for ColorDeconvolutionStains with three stain vectors. Parameters:; name - ; stain1 - ; stain2 - ; stain3 - ; maxRed - background (white) value for red channel; maxGreen - background (white) value for green channel; maxBlue - background (white) value for blue channel. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; double maxRed,; double maxGreen,; double maxBlue); Constructor for ColorDeconvolutionStains with two stain vectors. Parameters:; name - ; stain1 - ; stain2 - ; maxRed - background (white) value for red channel; maxGreen - background (white) value for green channel; maxBlue - background (white) value for blue channel. ColorDeconvolutionStains; public ColorDeconvolutionStains(); Default constructor, for Externalizable. Should not be used directly. Method Details. makeDefaultColorDeconvolutionStains; public static ColorDeconvolutionStains makeDefaultColorDeconvolutionStains(ColorDeconvolutionStains.DefaultColorDeconvolutionStains stains); Create a ColorDeconvolutionStains for a default stain combination, and default max values (255 for all channels). Parameters:; stains ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:6158,Energy Efficiency,green,green,6158,"inal String EOSIN; Default name for eosin stain. See Also:. Constant Field Values. DAB; public static final String DAB; Default name for DAB stain. See Also:. Constant Field Values. Constructor Details. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; StainVector stain3,; double maxRed,; double maxGreen,; double maxBlue); Constructor for ColorDeconvolutionStains with three stain vectors. Parameters:; name - ; stain1 - ; stain2 - ; stain3 - ; maxRed - background (white) value for red channel; maxGreen - background (white) value for green channel; maxBlue - background (white) value for blue channel. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; double maxRed,; double maxGreen,; double maxBlue); Constructor for ColorDeconvolutionStains with two stain vectors. Parameters:; name - ; stain1 - ; stain2 - ; maxRed - background (white) value for red channel; maxGreen - background (white) value for green channel; maxBlue - background (white) value for blue channel. ColorDeconvolutionStains; public ColorDeconvolutionStains(); Default constructor, for Externalizable. Should not be used directly. Method Details. makeDefaultColorDeconvolutionStains; public static ColorDeconvolutionStains makeDefaultColorDeconvolutionStains(ColorDeconvolutionStains.DefaultColorDeconvolutionStains stains); Create a ColorDeconvolutionStains for a default stain combination, and default max values (255 for all channels). Parameters:; stains - ; Returns:. isHematoxylin; public static boolean isHematoxylin(StainVector stain); Check if the name of a StainVector is ""haematoxylin"", ""hematoxylin"", ""haem"" or ""h"" (ignoring case). Parameters:; stain - ; Returns:. isEosin; public static boolean isEosin(StainVector stain); Check if the name of a StainVector is ""eosin"", ""eos"" or ""e"" (ignoring case). Parameters:; stain - ; Returns:. isDAB; public static boolean isDAB(StainVector stain",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:9549,Energy Efficiency,green,green,9549,"be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains).; ; If only 2 stains are set (i.e. stain1 and stain2), then a third stain is computed; orthogonal to the first two, with the name 'residual'. Parameters:; n - ; Returns:; The requested stain vector, or null if n is out of range or the stain was not set. getStains; public Collection<StainVector> getStains(boolean includeResidual); Get a collection of all the stains. Parameters:; includeResidual - if true, include residual stains in the list. If false, only include non-residual stains.; Returns:; a collection of stains. getName; public String getName(); Get the stains name. Returns:. getStainNumber; public int getStainNumber(StainVector stain); Get the number for a specific stain (1, 2 or 3). Parameters:; stain - ; Returns:. getMaxRed; public double getMaxRed(); Get the maximum value for the red channel (default = 255). Returns:. getMaxGreen; public double getMaxGreen(); Get the maximum value for the green channel (default = 255). Returns:. getMaxBlue; public double getMaxBlue(); Get the maximum value for the blue channel (default = 255). Returns:. getMatrixInverse; public double[][] getMatrixInverse(); Get matrix inverse, as useful for color deconvolution.; See static ColorDeconvolution classes for usage. Returns:. toString; public String toString(). Overrides:; toString in class Object. getColorDeconvolutionStainsAsString; public static String getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces); Get a String representation of the stains and background. Parameters:; stains - ; nDecimalPlaces - ; Returns:; See Also:. parseColorDeconvolutionStainsArg(String). parseColorDeconvolutionStainsArg; public static ColorDeconvolutionStains parseColorDeconvolutionStainsArg(String s); Parse color deconvolution stains from a JSON String, with keys 'Stain 1', 'Stain 2', (optionally) 'Stain 3' and 'Background'. Parameters:; s - ; Returns:",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:10899,Integrability,interface,interface,10899,"f stains. getName; public String getName(); Get the stains name. Returns:. getStainNumber; public int getStainNumber(StainVector stain); Get the number for a specific stain (1, 2 or 3). Parameters:; stain - ; Returns:. getMaxRed; public double getMaxRed(); Get the maximum value for the red channel (default = 255). Returns:. getMaxGreen; public double getMaxGreen(); Get the maximum value for the green channel (default = 255). Returns:. getMaxBlue; public double getMaxBlue(); Get the maximum value for the blue channel (default = 255). Returns:. getMatrixInverse; public double[][] getMatrixInverse(); Get matrix inverse, as useful for color deconvolution.; See static ColorDeconvolution classes for usage. Returns:. toString; public String toString(). Overrides:; toString in class Object. getColorDeconvolutionStainsAsString; public static String getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces); Get a String representation of the stains and background. Parameters:; stains - ; nDecimalPlaces - ; Returns:; See Also:. parseColorDeconvolutionStainsArg(String). parseColorDeconvolutionStainsArg; public static ColorDeconvolutionStains parseColorDeconvolutionStainsArg(String s); Parse color deconvolution stains from a JSON String, with keys 'Stain 1', 'Stain 2', (optionally) 'Stain 3' and 'Background'. Parameters:; s - ; Returns:; See Also:. getColorDeconvolutionStainsAsString(ColorDeconvolutionStains, int). parseStainValues; public static double[] parseStainValues(Locale locale,; String s); Parses 3 values, suitable for use as a stain vector. Parameters:; locale - ; s - ; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:11079,Integrability,interface,interface,11079,"f stains. getName; public String getName(); Get the stains name. Returns:. getStainNumber; public int getStainNumber(StainVector stain); Get the number for a specific stain (1, 2 or 3). Parameters:; stain - ; Returns:. getMaxRed; public double getMaxRed(); Get the maximum value for the red channel (default = 255). Returns:. getMaxGreen; public double getMaxGreen(); Get the maximum value for the green channel (default = 255). Returns:. getMaxBlue; public double getMaxBlue(); Get the maximum value for the blue channel (default = 255). Returns:. getMatrixInverse; public double[][] getMatrixInverse(); Get matrix inverse, as useful for color deconvolution.; See static ColorDeconvolution classes for usage. Returns:. toString; public String toString(). Overrides:; toString in class Object. getColorDeconvolutionStainsAsString; public static String getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces); Get a String representation of the stains and background. Parameters:; stains - ; nDecimalPlaces - ; Returns:; See Also:. parseColorDeconvolutionStainsArg(String). parseColorDeconvolutionStainsArg; public static ColorDeconvolutionStains parseColorDeconvolutionStainsArg(String s); Parse color deconvolution stains from a JSON String, with keys 'Stain 1', 'Stain 2', (optionally) 'Stain 3' and 'Background'. Parameters:; s - ; Returns:; See Also:. getColorDeconvolutionStainsAsString(ColorDeconvolutionStains, int). parseStainValues; public static double[] parseStainValues(Locale locale,; String s); Parses 3 values, suitable for use as a stain vector. Parameters:; locale - ; s - ; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:556,Modifiability,extend,extends,556,". ColorDeconvolutionStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorDeconvolutionStains. java.lang.Object; qupath.lib.color.ColorDeconvolutionStains. All Implemented Interfaces:; Externalizable, Serializable. public class ColorDeconvolutionStains; extends Object; implements Externalizable; Helper class for storing stain vectors and maximum channel values to be used for color deconvolution.; ; The maximum channel values are the RGB values corresponding to pixels that have no staining of any kind; (i.e. all light has passed through... the pixel should look close to white).; By default, these are 255. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorDeconvolutionStains.DefaultColorDeconvolutionStains. Enum for common stain defaults. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DAB. Default name for DAB stain. static final String; EOSIN. Default name for eosin stain. static final String; HEMATOXYLIN. Default name (and spelling) for hematoxylin stain. Constructor Summary; Constructors. Constructor; Description; ColorDeconvolutionStains(). Default constructor, for Externalizable. ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; double maxRed,; double maxGreen,; double maxBlue). Constructor for ColorDeconvolutionStains with two stain vectors. ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; StainVector stain3,; double maxRed,; double maxGreen,; double maxBlue). Constructor for ColorDeconvolutionStains with three stain vectors. Method Summary. All MethodsStatic MethodsInstanc",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:4827,Modifiability,inherit,inherited,4827,"in is a residual. boolean; isH_E(). Check if we have H&E staining, by checking the names of the first two stains and confirming that the third stain is a residual. static boolean; isHematoxylin(StainVector stain). Check if the name of a StainVector is ""haematoxylin"", ""hematoxylin"", ""haem"" or ""h"" (ignoring case). static ColorDeconvolutionStains; makeDefaultColorDeconvolutionStains(ColorDeconvolutionStains.DefaultColorDeconvolutionStains stains). Create a ColorDeconvolutionStains for a default stain combination, and default max values (255 for all channels). static ColorDeconvolutionStains; parseColorDeconvolutionStainsArg(String s). Parse color deconvolution stains from a JSON String, with keys 'Stain 1', 'Stain 2', (optionally) 'Stain 3' and 'Background'. static double[]; parseStainValues(Locale locale,; String s). Parses 3 values, suitable for use as a stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HEMATOXYLIN; public static final String HEMATOXYLIN; Default name (and spelling) for hematoxylin stain. See Also:. Constant Field Values. EOSIN; public static final String EOSIN; Default name for eosin stain. See Also:. Constant Field Values. DAB; public static final String DAB; Default name for DAB stain. See Also:. Constant Field Values. Constructor Details. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; StainVector stain3,; double maxRed,; double maxGreen,; double maxBlue); Constructor for ColorDeconvolutionStains with three stain vectors. Parameters:; name - ; stain1 - ; stain2 - ; stain3 - ; maxRed - background (white) value for red channel; maxGreen - background (white) value for green channel; maxBlue - background (white) value for blue channel. ColorDeconvolutionStains; public ColorDecon",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:3244,Safety,recover,recover,3244,"same StainVectors but new max (background) values. ColorDeconvolutionStains; changeName(String name). Create a new stains object with the same StainVectors but a new name. ColorDeconvolutionStains; changeStain(StainVector stainNew,; int stainNumber). Create a new stains object, identical to this one but for one StainVector having been changed. static String; getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces). Get a String representation of the stains and background. double[][]; getMatrixInverse(). Get matrix inverse, as useful for color deconvolution. double; getMaxBlue(). Get the maximum value for the blue channel (default = 255). double; getMaxGreen(). Get the maximum value for the green channel (default = 255). double; getMaxRed(). Get the maximum value for the red channel (default = 255). String; getName(). Get the stains name. StainVector; getStain(int n). Get a specified color deconvolution stain vector, where n should be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains). int; getStainNumber(StainVector stain). Get the number for a specific stain (1, 2 or 3). Collection<StainVector>; getStains(boolean includeResidual). Get a collection of all the stains. static boolean; isDAB(StainVector stain). Check if the name of a StainVector is ""dab"" or ""d"" (ignoring case). static boolean; isEosin(StainVector stain). Check if the name of a StainVector is ""eosin"", ""eos"" or ""e"" (ignoring case). boolean; isH_DAB(). Check if we have H-DAB staining, by checking the names of the first two stains and confirming that the third stain is a residual. boolean; isH_E(). Check if we have H&E staining, by checking the names of the first two stains and confirming that the third stain is a residual. static boolean; isHematoxylin(StainVector stain). Check if the name of a StainVector is ""haematoxylin"", ""hematoxylin"", ""haem"" or ""h"" (ignoring case). static ColorDeconvolutionStains; makeDefaultColo",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:8596,Safety,recover,recover,8596,"e have H-DAB staining, by checking the names of the first two stains and confirming that the third stain is a residual.; Note the order of the stains must be 1-Hematoxylin, 2-DAB, 3-residual (missing). Returns:. changeStain; public ColorDeconvolutionStains changeStain(StainVector stainNew,; int stainNumber); Create a new stains object, identical to this one but for one StainVector having been changed. Parameters:; stainNew - ; stainNumber - ; Returns:. changeName; public ColorDeconvolutionStains changeName(String name); Create a new stains object with the same StainVectors but a new name. Parameters:; name - ; Returns:. changeMaxValues; public ColorDeconvolutionStains changeMaxValues(double maxRed,; double maxGreen,; double maxBlue); Create a new stains object with the same StainVectors but new max (background) values. Parameters:; maxRed - ; maxGreen - ; maxBlue - ; Returns:. getStain; public StainVector getStain(int n); Get a specified color deconvolution stain vector, where n should be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains).; ; If only 2 stains are set (i.e. stain1 and stain2), then a third stain is computed; orthogonal to the first two, with the name 'residual'. Parameters:; n - ; Returns:; The requested stain vector, or null if n is out of range or the stain was not set. getStains; public Collection<StainVector> getStains(boolean includeResidual); Get a collection of all the stains. Parameters:; includeResidual - if true, include residual stains in the list. If false, only include non-residual stains.; Returns:; a collection of stains. getName; public String getName(); Get the stains name. Returns:. getStainNumber; public int getStainNumber(StainVector stain); Get the number for a specific stain (1, 2 or 3). Parameters:; stain - ; Returns:. getMaxRed; public double getMaxRed(); Get the maximum value for the red channel (default = 255). Returns:. getMaxGreen; public double getMaxGreen(); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:4901,Security,hash,hashCode,4901,"by checking the names of the first two stains and confirming that the third stain is a residual. static boolean; isHematoxylin(StainVector stain). Check if the name of a StainVector is ""haematoxylin"", ""hematoxylin"", ""haem"" or ""h"" (ignoring case). static ColorDeconvolutionStains; makeDefaultColorDeconvolutionStains(ColorDeconvolutionStains.DefaultColorDeconvolutionStains stains). Create a ColorDeconvolutionStains for a default stain combination, and default max values (255 for all channels). static ColorDeconvolutionStains; parseColorDeconvolutionStainsArg(String s). Parse color deconvolution stains from a JSON String, with keys 'Stain 1', 'Stain 2', (optionally) 'Stain 3' and 'Background'. static double[]; parseStainValues(Locale locale,; String s). Parses 3 values, suitable for use as a stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HEMATOXYLIN; public static final String HEMATOXYLIN; Default name (and spelling) for hematoxylin stain. See Also:. Constant Field Values. EOSIN; public static final String EOSIN; Default name for eosin stain. See Also:. Constant Field Values. DAB; public static final String DAB; Default name for DAB stain. See Also:. Constant Field Values. Constructor Details. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain2,; StainVector stain3,; double maxRed,; double maxGreen,; double maxBlue); Constructor for ColorDeconvolutionStains with three stain vectors. Parameters:; name - ; stain1 - ; stain2 - ; stain3 - ; maxRed - background (white) value for red channel; maxGreen - background (white) value for green channel; maxBlue - background (white) value for blue channel. ColorDeconvolutionStains; public ColorDeconvolutionStains(String name,; StainVector stain1,; StainVector stain",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.ColorMap.html:432,Integrability,interface,interface,432,". ColorMaps.ColorMap (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Interface ColorMaps.ColorMap. Enclosing class:; ColorMaps. public static interface ColorMaps.ColorMap; colormap, which acts as an interpolating lookup table with an arbitrary range. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; Integer; getColor(double value,; double minValue,; double maxValue). Get a packed ARGB representation of the (interpolated) color at the specified value,. String; getName(). Get the name of the colormap. Method Details. getName; String getName(); Get the name of the colormap. Returns:. getColor; Integer getColor(double value,; double minValue,; double maxValue); Get a packed ARGB representation of the (interpolated) color at the specified value,. Parameters:; value - value that should be colorized; minValue - minimum display value, corresponding to the first color in the lookup table of this map; maxValue - maximum display value, corresponding to the first last in the lookup table of this map; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.ColorMap.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.ColorMap.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1696,Availability,avail,available,1696,"olorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:3795,Availability,avail,available,3795,"public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing all the currently-available colormaps. Returns:; the available colormaps. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; double[] r,; double[] g,; double[] b); Create a colormap using floating point values for red, green and blue.; These should be in the range 0-1. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int[] r,; int[] g,; int[] b); Create a colormap using integer values for red, green and blue.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int r,; int g,; int b); Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. gammaColorMap; public static ColorMaps.ColorMap gammaColorMap(C",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:3830,Availability,avail,available,3830,"ps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing all the currently-available colormaps. Returns:; the available colormaps. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; double[] r,; double[] g,; double[] b); Create a colormap using floating point values for red, green and blue.; These should be in the range 0-1. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int[] r,; int[] g,; int[] b); Create a colormap using integer values for red, green and blue.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int r,; int g,; int b); Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. gammaColorMap; public static ColorMaps.ColorMap gammaColorMap(ColorMaps.ColorMap map,; double gamma); Apply gamma to a colormap.; T",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1974,Deployability,install,installColorMaps,1974,"p; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2067,Deployability,install,installColorMaps,2067,"loating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array o",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2442,Deployability,install,installColorMaps,2442,"lack. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(Co",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2482,Deployability,install,installColorMaps,2482,"lack. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(Co",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2746,Deployability,install,installColorMaps,2746," boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing al",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2786,Deployability,install,installColorMaps,2786," boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing al",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1102,Energy Efficiency,green,green,1102,"igation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorMaps. java.lang.Object; qupath.lib.color.ColorMaps. public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMap",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1252,Energy Efficiency,green,green,1252,"; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorMaps. java.lang.Object; qupath.lib.color.ColorMaps. public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1392,Energy Efficiency,green,green,1392," public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:4023,Energy Efficiency,green,green,4023,"lors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing all the currently-available colormaps. Returns:; the available colormaps. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; double[] r,; double[] g,; double[] b); Create a colormap using floating point values for red, green and blue.; These should be in the range 0-1. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int[] r,; int[] g,; int[] b); Create a colormap using integer values for red, green and blue.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int r,; int g,; int b); Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. gammaColorMap; public static ColorMaps.ColorMap gammaColorMap(ColorMaps.ColorMap map,; double gamma); Apply gamma to a colormap.; The resulting colormap normalizes the input value according to the specified min and max, ; then applies value = Math.pow(value, gamm",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:4280,Energy Efficiency,green,green,4280,"map. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing all the currently-available colormaps. Returns:; the available colormaps. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; double[] r,; double[] g,; double[] b); Create a colormap using floating point values for red, green and blue.; These should be in the range 0-1. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int[] r,; int[] g,; int[] b); Create a colormap using integer values for red, green and blue.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int r,; int g,; int b); Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. gammaColorMap; public static ColorMaps.ColorMap gammaColorMap(ColorMaps.ColorMap map,; double gamma); Apply gamma to a colormap.; The resulting colormap normalizes the input value according to the specified min and max, ; then applies value = Math.pow(value, gamma) before passing this to the ; wrapped ColorMaps.ColorMap. Parameters:; map - base colormap; gamma - gamma value; Returns:; transformed colormap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:4529,Energy Efficiency,green,green,4529,"map. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing all the currently-available colormaps. Returns:; the available colormaps. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; double[] r,; double[] g,; double[] b); Create a colormap using floating point values for red, green and blue.; These should be in the range 0-1. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int[] r,; int[] g,; int[] b); Create a colormap using integer values for red, green and blue.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int r,; int g,; int b); Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. gammaColorMap; public static ColorMaps.ColorMap gammaColorMap(ColorMaps.ColorMap map,; double gamma); Apply gamma to a colormap.; The resulting colormap normalizes the input value according to the specified min and max, ; then applies value = Math.pow(value, gamma) before passing this to the ; wrapped ColorMaps.ColorMap. Parameters:; map - base colormap; gamma - gamma value; Returns:; transformed colormap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:665,Integrability,interface,interface,665,". ColorMaps (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorMaps. java.lang.Object; qupath.lib.color.ColorMaps. public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... pa",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:4997,Integrability,wrap,wrapped,4997,"map. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing all the currently-available colormaps. Returns:; the available colormaps. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; double[] r,; double[] g,; double[] b); Create a colormap using floating point values for red, green and blue.; These should be in the range 0-1. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int[] r,; int[] g,; int[] b); Create a colormap using integer values for red, green and blue.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. createColorMap; public static ColorMaps.ColorMap createColorMap(String name,; int r,; int g,; int b); Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black.; These should be in the range 0-255. Parameters:; name - ; r - ; g - ; b - ; Returns:. gammaColorMap; public static ColorMaps.ColorMap gammaColorMap(ColorMaps.ColorMap map,; double gamma); Apply gamma to a colormap.; The resulting colormap normalizes the input value according to the specified min and max, ; then applies value = Math.pow(value, gamma) before passing this to the ; wrapped ColorMaps.ColorMap. Parameters:; map - base colormap; gamma - gamma value; Returns:; transformed colormap. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:437,Modifiability,extend,extends,437,". ColorMaps (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorMaps. java.lang.Object; qupath.lib.color.ColorMaps. public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... pa",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2243,Modifiability,inherit,inherited,2243," green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of t",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2317,Security,hash,hashCode,2317," int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap;",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorMaps.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html:475,Modifiability,extend,extends,475,". ColorModelFactory (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModelFactory. java.lang.Object; qupath.lib.color.ColorModelFactory. public final class ColorModelFactory; extends Object; Factory methods to help create ColorModels for use with BufferedImages. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorModel; createColorModel(PixelType type,; int nChannels,; boolean alphaResidual,; int... colors). Create a new ColorModel that can be used to display an image where pixels per channel reflect ; probabilities, either as float or byte. static ColorModel; createColorModel(PixelType type,; List<ImageChannel> channels). Create a ColorModel for displaying an image with the specified channel colors. static ColorModel; createColorModel(PixelType pixelType,; ColorMaps.ColorMap map,; int band). Create a color model from a ColorMaps.ColorMap. static ColorModel; createColorModel(PixelType pixelType,; ColorMaps.ColorMap map,; int band,; double min,; double max,; int alphaChannel,; DoubleToIntFunction alphaFun). Create a color model from a ColorMaps.ColorMap, scaled within a defined range and with an optional additional alpha channel used to ; determine opacity. static DoubleToIntFunction; createGammaFunction(double gamma,; double min,; double max). Create a gamma function between a given range, which can be used to determine a suitable alpha value for an image ; that should have opacity based upon pixel values. static DoubleToIntFunction; createGammaFunction(double gamma,; PixelType type). Create a gamma function for a specific pixel type, which can be used to determine a suitable alpha value for",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModelFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html:3678,Modifiability,inherit,inherited,3678,"en range, which can be used to determine a suitable alpha value for an image ; that should have opacity based upon pixel values. static DoubleToIntFunction; createLinearFunction(PixelType type). Create a linear function for a specific pixel type, which can be used to determine a suitable alpha value for an image ; that should have opacity based upon pixel values. static ColorModel; getDummyColorModel(int bpp). Get a dummy ColorModel instance. static IndexColorModel; getIndexedClassificationColorModel(Map<Integer,PathClass> channels). Get a ColorModel suitable for showing output pixel classifications, using an 8-bit or 16-bit labeled image. static ColorModel; getProbabilityColorModel32Bit(List<ImageChannel> channels). Get a ColorModel suitable for showing 32-bit (pseudo-)probabilities for multiple channels. static ColorModel; getProbabilityColorModel8Bit(List<ImageChannel> channels). Get a ColorModel suitable for showing 8-bit pseudo-probabilities for multiple channels. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getIndexedClassificationColorModel; public static IndexColorModel getIndexedClassificationColorModel(Map<Integer,PathClass> channels); Get a ColorModel suitable for showing output pixel classifications, using an 8-bit or 16-bit labeled image. Parameters:; channels - ; Returns:. createIndexedColorModel; public static ColorModel createIndexedColorModel(Map<Integer,Integer> labelColors,; boolean includeAlpha); Create an indexed colormap for a labelled (indexed color) image. Parameters:; labelColors - map with integer labels as keys and packed (A)RGB colors as values.; includeAlpha - if true, allow alpha values to be included in the colormap; Returns:. createIndexedColorModel8bit; public static IndexColorModel createIndexedColorModel8bit(ColorMaps.ColorMap map); Create an 8-bit IndexColorModel from a ColorMaps.ColorMap. Parameters:; map - ; Returns:. cre",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModelFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html:7869,Performance,cache,cached,7869," determine a suitable alpha value for an image ; that should have opacity based upon pixel values. Parameters:; gamma - ; type - ; Returns:; See Also:. createColorModel(PixelType, ColorMap, int, double, double, int, DoubleToIntFunction). createGammaFunction; public static DoubleToIntFunction createGammaFunction(double gamma,; double min,; double max); Create a gamma function between a given range, which can be used to determine a suitable alpha value for an image ; that should have opacity based upon pixel values. Parameters:; gamma - ; min - ; max - ; Returns:; See Also:. createColorModel(PixelType, ColorMap, int, double, double, int, DoubleToIntFunction). getProbabilityColorModel8Bit; public static ColorModel getProbabilityColorModel8Bit(List<ImageChannel> channels); Get a ColorModel suitable for showing 8-bit pseudo-probabilities for multiple channels.; ; The range of values is assumed to be 0-255, treated as probabilities rescaled from 0-1.; A cached model will be retrieved where possible, rather than generating a new one. Parameters:; channels - ; Returns:. getProbabilityColorModel32Bit; public static ColorModel getProbabilityColorModel32Bit(List<ImageChannel> channels); Get a ColorModel suitable for showing 32-bit (pseudo-)probabilities for multiple channels.; ; The range of values is assumed to be 0-1.; A cached model will be retrieved where possible, rather than generating a new one. Parameters:; channels - ; Returns:. getDummyColorModel; public static ColorModel getDummyColorModel(int bpp); Get a dummy ColorModel instance.; ; This isn't very highly recommended; it is here to help in cases where a BufferedImage ; is required, but really only a raster is needed.; The actual color used is undefined (but it will likely be black). Parameters:; bpp - ; Returns:. createColorModel; public static ColorModel createColorModel(PixelType type,; int nChannels,; boolean alphaResidual,; int... colors); Create a new ColorModel that can be used to display an image where pixe",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModelFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html:8241,Performance,cache,cached,8241,"ction between a given range, which can be used to determine a suitable alpha value for an image ; that should have opacity based upon pixel values. Parameters:; gamma - ; min - ; max - ; Returns:; See Also:. createColorModel(PixelType, ColorMap, int, double, double, int, DoubleToIntFunction). getProbabilityColorModel8Bit; public static ColorModel getProbabilityColorModel8Bit(List<ImageChannel> channels); Get a ColorModel suitable for showing 8-bit pseudo-probabilities for multiple channels.; ; The range of values is assumed to be 0-255, treated as probabilities rescaled from 0-1.; A cached model will be retrieved where possible, rather than generating a new one. Parameters:; channels - ; Returns:. getProbabilityColorModel32Bit; public static ColorModel getProbabilityColorModel32Bit(List<ImageChannel> channels); Get a ColorModel suitable for showing 32-bit (pseudo-)probabilities for multiple channels.; ; The range of values is assumed to be 0-1.; A cached model will be retrieved where possible, rather than generating a new one. Parameters:; channels - ; Returns:. getDummyColorModel; public static ColorModel getDummyColorModel(int bpp); Get a dummy ColorModel instance.; ; This isn't very highly recommended; it is here to help in cases where a BufferedImage ; is required, but really only a raster is needed.; The actual color used is undefined (but it will likely be black). Parameters:; bpp - ; Returns:. createColorModel; public static ColorModel createColorModel(PixelType type,; int nChannels,; boolean alphaResidual,; int... colors); Create a new ColorModel that can be used to display an image where pixels per channel reflect ; probabilities, either as float or byte.; ; It is assumed that the probabilities sum to 1; if they sum to less than 1, alphaResidual ; can be used to make 'unknown' pixels transparent/translucent rather than black. Parameters:; type - type for individual pixels; nChannels - Number of color channels.; alphaResidual - If true, the alpha value is sc",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModelFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html:3752,Security,hash,hashCode,3752,"mage ; that should have opacity based upon pixel values. static DoubleToIntFunction; createLinearFunction(PixelType type). Create a linear function for a specific pixel type, which can be used to determine a suitable alpha value for an image ; that should have opacity based upon pixel values. static ColorModel; getDummyColorModel(int bpp). Get a dummy ColorModel instance. static IndexColorModel; getIndexedClassificationColorModel(Map<Integer,PathClass> channels). Get a ColorModel suitable for showing output pixel classifications, using an 8-bit or 16-bit labeled image. static ColorModel; getProbabilityColorModel32Bit(List<ImageChannel> channels). Get a ColorModel suitable for showing 32-bit (pseudo-)probabilities for multiple channels. static ColorModel; getProbabilityColorModel8Bit(List<ImageChannel> channels). Get a ColorModel suitable for showing 8-bit pseudo-probabilities for multiple channels. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getIndexedClassificationColorModel; public static IndexColorModel getIndexedClassificationColorModel(Map<Integer,PathClass> channels); Get a ColorModel suitable for showing output pixel classifications, using an 8-bit or 16-bit labeled image. Parameters:; channels - ; Returns:. createIndexedColorModel; public static ColorModel createIndexedColorModel(Map<Integer,Integer> labelColors,; boolean includeAlpha); Create an indexed colormap for a labelled (indexed color) image. Parameters:; labelColors - map with integer labels as keys and packed (A)RGB colors as values.; includeAlpha - if true, allow alpha values to be included in the colormap; Returns:. createIndexedColorModel8bit; public static IndexColorModel createIndexedColorModel8bit(ColorMaps.ColorMap map); Create an 8-bit IndexColorModel from a ColorMaps.ColorMap. Parameters:; map - ; Returns:. createIndexedColorModel8bit; public static IndexColorModel createIndexedCol",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModelFactory.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModelFactory.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.ColorModelBuilder.html:456,Integrability,interface,interface,456,. ColorModels.ColorModelBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Interface ColorModels.ColorModelBuilder. Enclosing class:; ColorModels. public static interface ColorModels.ColorModelBuilder; Simple builder to create a ColorModel. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ColorModel; build(). Build a ColorModel. Method Details. build; ColorModel build(); Build a ColorModel. Returns:. ,MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.ColorModelBuilder.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.ColorModelBuilder.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html:531,Modifiability,extend,extends,531,". ColorModels.DisplayBand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModels.DisplayBand. java.lang.Object; qupath.lib.color.ColorModels.DisplayBand. Enclosing class:; ColorModels. public static class ColorModels.DisplayBand; extends Object; Helper class to the display of a single channel (band) in a ColorModel.; This exists to avoid passing a plethora of parameters to ColorModels.createColorModelBuilder(DisplayBand, DisplayBand). Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html:764,Modifiability,inherit,inherited,764,". ColorModels.DisplayBand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModels.DisplayBand. java.lang.Object; qupath.lib.color.ColorModels.DisplayBand. Enclosing class:; ColorModels. public static class ColorModels.DisplayBand; extends Object; Helper class to the display of a single channel (band) in a ColorModel.; This exists to avoid passing a plethora of parameters to ColorModels.createColorModelBuilder(DisplayBand, DisplayBand). Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html:635,Safety,avoid,avoid,635,". ColorModels.DisplayBand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModels.DisplayBand. java.lang.Object; qupath.lib.color.ColorModels.DisplayBand. Enclosing class:; ColorModels. public static class ColorModels.DisplayBand; extends Object; Helper class to the display of a single channel (band) in a ColorModel.; This exists to avoid passing a plethora of parameters to ColorModels.createColorModelBuilder(DisplayBand, DisplayBand). Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html:838,Security,hash,hashCode,838,". ColorModels.DisplayBand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModels.DisplayBand. java.lang.Object; qupath.lib.color.ColorModels.DisplayBand. Enclosing class:; ColorModels. public static class ColorModels.DisplayBand; extends Object; Helper class to the display of a single channel (band) in a ColorModel.; This exists to avoid passing a plethora of parameters to ColorModels.createColorModelBuilder(DisplayBand, DisplayBand). Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.DisplayBand.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html:645,Integrability,interface,interface,645,". ColorModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModels. java.lang.Object; qupath.lib.color.ColorModels. public class ColorModels; extends Object; Helper class for creating a JSON-serializable way to generate a ColorModel. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorModels.ColorModelBuilder. Simple builder to create a ColorModel. static class ; ColorModels.DisplayBand. Helper class to the display of a single channel (band) in a ColorModel. Constructor Summary; Constructors. Constructor; Description; ColorModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay,; double gamma). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.ColorModelBuilder; createColorModelBuilder(ColorModels.DisplayBand mainChannel,; ColorModels.DisplayBand alphaChannel). Create a ColorModels.ColorModelBuilder with a main channel and an optional alpha channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorModels; public ColorModels(). Method Details. createColorModelBuilder; public static ColorModels.ColorModelBuilder createColorModelBuilder(ColorModel",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html:445,Modifiability,extend,extends,445,". ColorModels (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorModels. java.lang.Object; qupath.lib.color.ColorModels. public class ColorModels; extends Object; Helper class for creating a JSON-serializable way to generate a ColorModel. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorModels.ColorModelBuilder. Simple builder to create a ColorModel. static class ; ColorModels.DisplayBand. Helper class to the display of a single channel (band) in a ColorModel. Constructor Summary; Constructors. Constructor; Description; ColorModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay,; double gamma). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.ColorModelBuilder; createColorModelBuilder(ColorModels.DisplayBand mainChannel,; ColorModels.DisplayBand alphaChannel). Create a ColorModels.ColorModelBuilder with a main channel and an optional alpha channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorModels; public ColorModels(). Method Details. createColorModelBuilder; public static ColorModels.ColorModelBuilder createColorModelBuilder(ColorModel",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html:1695,Modifiability,inherit,inherited,1695,"to create a ColorModel. static class ; ColorModels.DisplayBand. Helper class to the display of a single channel (band) in a ColorModel. Constructor Summary; Constructors. Constructor; Description; ColorModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay,; double gamma). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.ColorModelBuilder; createColorModelBuilder(ColorModels.DisplayBand mainChannel,; ColorModels.DisplayBand alphaChannel). Create a ColorModels.ColorModelBuilder with a main channel and an optional alpha channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorModels; public ColorModels(). Method Details. createColorModelBuilder; public static ColorModels.ColorModelBuilder createColorModelBuilder(ColorModels.DisplayBand mainChannel,; ColorModels.DisplayBand alphaChannel); Create a ColorModels.ColorModelBuilder with a main channel and an optional alpha channel. Parameters:; mainChannel - the main channel to display (colormap will be used); alphaChannel - an optional alpha channel (colormap will be ignored); Returns:; the ColorModels.ColorModelBuilder. createBand; public static ColorModels.DisplayBand createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay); Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). Parameters:; colorMapName - name of the ColorMaps.ColorMap; band - image band (the BufferedImage term - QuPath often refe",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html:1769,Security,hash,hashCode,1769,"lass to the display of a single channel (band) in a ColorModel. Constructor Summary; Constructors. Constructor; Description; ColorModels();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.DisplayBand; createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay,; double gamma). Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). static ColorModels.ColorModelBuilder; createColorModelBuilder(ColorModels.DisplayBand mainChannel,; ColorModels.DisplayBand alphaChannel). Create a ColorModels.ColorModelBuilder with a main channel and an optional alpha channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorModels; public ColorModels(). Method Details. createColorModelBuilder; public static ColorModels.ColorModelBuilder createColorModelBuilder(ColorModels.DisplayBand mainChannel,; ColorModels.DisplayBand alphaChannel); Create a ColorModels.ColorModelBuilder with a main channel and an optional alpha channel. Parameters:; mainChannel - the main channel to display (colormap will be used); alphaChannel - an optional alpha channel (colormap will be ignored); Returns:; the ColorModels.ColorModelBuilder. createBand; public static ColorModels.DisplayBand createBand(String colorMapName,; int band,; double minDisplay,; double maxDisplay); Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). Parameters:; colorMapName - name of the ColorMaps.ColorMap; band - image band (the BufferedImage term - QuPath often refers to this as a channel); minDisplay - value associated with the first e",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorModels.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorModels.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:1065,Energy Efficiency,green,green,1065,"Script is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorToolsAwt. java.lang.Object; qupath.lib.color.ColorToolsAwt. public class ColorToolsAwt; extends Object; Helper class for converting between packed RGB colors and Java's AWT representation, as well as creating some ColorModels for BufferedImages. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Color; TRANSLUCENT_BLACK. Black, with 50% opacity. static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified o",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:4598,Energy Efficiency,green,green,4598,"ecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Parameters:; rgb - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker vers",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:4783,Energy Efficiency,green,green,4783,"c static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. getTranslucentColor; public static Color getTranslucentColor(Color color); Get a (slightly) translucent version of the specified color.; ; If possible,",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:4795,Energy Efficiency,green,green,4795,"c static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. getTranslucentColor; public static Color getTranslucentColor(Color color); Get a (slightly) translucent version of the specified color.; ; If possible,",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:453,Modifiability,extend,extends,453,". ColorToolsAwt (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorToolsAwt. java.lang.Object; qupath.lib.color.ColorToolsAwt. public class ColorToolsAwt; extends Object; Helper class for converting between packed RGB colors and Java's AWT representation, as well as creating some ColorModels for BufferedImages. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Color; TRANSLUCENT_BLACK. Black, with 50% opacity. static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opac",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:2810,Modifiability,inherit,inherited,2810,"olorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified opacity, based on the packed RGB values in an Integer. static IndexColorModel; getIndexColorModel(StainVector stain). Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). static IndexColorModel; getIndexColorModel(StainVector stain,; boolean whiteBackground). Get an IndexColorModel representing a color deconvolution stain. static Color; getMoreTranslucentColor(Color color). Get a (slightly more) translucent version of the specified color. static Color; getTranslucentColor(Color color). Get a (slightly) translucent version of the specified color. static Color; scaleColor(Color color,; double factor). Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TRANSLUCENT_WHITE; public static final Color TRANSLUCENT_WHITE; White, with 50% opacity. TRANSLUCENT_BLACK; public static final Color TRANSLUCENT_BLACK; Black, with 50% opacity. Constructor Details. ColorToolsAwt; public ColorToolsAwt(). Method Details. getCachedColor; public static Color getCachedColor(int r,; int g,; int b,; int a); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; a - ; Returns:. getCachedColor; public static Color getCachedColor(int r,; int g,; int b); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:1646,Performance,cache,cached,1646,"Fields. Modifier and Type; Field; Description; static final Color; TRANSLUCENT_BLACK. Black, with 50% opacity. static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified opacity, based on the packed RGB values in an Integer. static IndexColorModel; getIndexColorModel(StainVector stain). Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). static IndexColorModel; getIndexColorModel(StainVector stain,; boolean whiteBackground). Get an IndexColorModel representing a color deconvolution stain. static Color; getMoreTranslucentColor(Color color). Get a (slightly more) translucent version of the specified color. static Color; getTranslucentColor(Color color). Get a (slightly) translucent version of the specified color. static Color; sca",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:1726,Performance,cache,cached,1726," static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified opacity, based on the packed RGB values in an Integer. static IndexColorModel; getIndexColorModel(StainVector stain). Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). static IndexColorModel; getIndexColorModel(StainVector stain,; boolean whiteBackground). Get an IndexColorModel representing a color deconvolution stain. static Color; getMoreTranslucentColor(Color color). Get a (slightly more) translucent version of the specified color. static Color; getTranslucentColor(Color color). Get a (slightly) translucent version of the specified color. static Color; scaleColor(Color color,; double factor). Get a scaled version of the specified color, where the RGB values are in",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:3733,Performance,cache,cached,3733,"sion of the specified color, where the RGB values are independently scaled by a specified factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TRANSLUCENT_WHITE; public static final Color TRANSLUCENT_WHITE; White, with 50% opacity. TRANSLUCENT_BLACK; public static final Color TRANSLUCENT_BLACK; Black, with 50% opacity. Constructor Details. ColorToolsAwt; public ColorToolsAwt(). Method Details. getCachedColor; public static Color getCachedColor(int r,; int g,; int b,; int a); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; a - ; Returns:. getCachedColor; public static Color getCachedColor(int r,; int g,; int b); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Parameters:; rgb - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RG",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:3936,Performance,cache,cached,3936," wait, wait. Field Details. TRANSLUCENT_WHITE; public static final Color TRANSLUCENT_WHITE; White, with 50% opacity. TRANSLUCENT_BLACK; public static final Color TRANSLUCENT_BLACK; Black, with 50% opacity. Constructor Details. ColorToolsAwt; public ColorToolsAwt(). Method Details. getCachedColor; public static Color getCachedColor(int r,; int g,; int b,; int a); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; a - ; Returns:. getCachedColor; public static Color getCachedColor(int r,; int g,; int b); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Parameters:; rgb - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:5414,Performance,cache,cached,5414,"r model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. getTranslucentColor; public static Color getTranslucentColor(Color color); Get a (slightly) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. scaleColor; public static Color scaleColor(Color color,; double factor); Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor.; ; The alpha value is preserved unchanged. Parameters:; color - ; factor - ; Returns:. getColorWithOpacity; public static Color getColorWithOpacity(Integer rgb,; double opacity); Get a color with a specified opacity, based on the packed RGB values in an Integer. Parameters:; rgb - ; opacity - ; R",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:5657,Performance,cache,cached,5657," Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. getTranslucentColor; public static Color getTranslucentColor(Color color); Get a (slightly) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. scaleColor; public static Color scaleColor(Color color,; double factor); Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor.; ; The alpha value is preserved unchanged. Parameters:; color - ; factor - ; Returns:. getColorWithOpacity; public static Color getColorWithOpacity(Integer rgb,; double opacity); Get a color with a specified opacity, based on the packed RGB values in an Integer. Parameters:; rgb - ; opacity - ; Returns:. getColorWithOpacity; public static Color getColorWithOpacity(Color color,; double opacity); Get a color with a specified opacity, setting the alpha channel accordingly. Parameters:; color - ; opacity - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:5873,Performance,cache,cached,5873," Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. getTranslucentColor; public static Color getTranslucentColor(Color color); Get a (slightly) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. scaleColor; public static Color scaleColor(Color color,; double factor); Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor.; ; The alpha value is preserved unchanged. Parameters:; color - ; factor - ; Returns:. getColorWithOpacity; public static Color getColorWithOpacity(Integer rgb,; double opacity); Get a color with a specified opacity, based on the packed RGB values in an Integer. Parameters:; rgb - ; opacity - ; Returns:. getColorWithOpacity; public static Color getColorWithOpacity(Color color,; double opacity); Get a color with a specified opacity, setting the alpha channel accordingly. Parameters:; color - ; opacity - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:1386,Safety,avoid,avoid,1386,"ang.Object; qupath.lib.color.ColorToolsAwt. public class ColorToolsAwt; extends Object; Helper class for converting between packed RGB colors and Java's AWT representation, as well as creating some ColorModels for BufferedImages. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Color; TRANSLUCENT_BLACK. Black, with 50% opacity. static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified opacity, based on the packed RGB values in an Integer. static IndexColorModel; getIndexColorModel(StainVector stain). Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). static IndexColorModel; getIndexColorModel(StainVector stain,; boolean whiteBackground). Get an IndexColorModel representing a co",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:1551,Safety,avoid,avoid,1551,"tation, as well as creating some ColorModels for BufferedImages. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Color; TRANSLUCENT_BLACK. Black, with 50% opacity. static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified opacity, based on the packed RGB values in an Integer. static IndexColorModel; getIndexColorModel(StainVector stain). Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). static IndexColorModel; getIndexColorModel(StainVector stain,; boolean whiteBackground). Get an IndexColorModel representing a color deconvolution stain. static Color; getMoreTranslucentColor(Color color). Get a (slightly more) translucent version of the specified color. static Color; getTrans",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:3349,Safety,avoid,avoid,3349,"ctor stain,; boolean whiteBackground). Get an IndexColorModel representing a color deconvolution stain. static Color; getMoreTranslucentColor(Color color). Get a (slightly more) translucent version of the specified color. static Color; getTranslucentColor(Color color). Get a (slightly) translucent version of the specified color. static Color; scaleColor(Color color,; double factor). Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TRANSLUCENT_WHITE; public static final Color TRANSLUCENT_WHITE; White, with 50% opacity. TRANSLUCENT_BLACK; public static final Color TRANSLUCENT_BLACK; Black, with 50% opacity. Constructor Details. ColorToolsAwt; public ColorToolsAwt(). Method Details. getCachedColor; public static Color getCachedColor(int r,; int g,; int b,; int a); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; a - ; Returns:. getCachedColor; public static Color getCachedColor(int r,; int g,; int b); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Parameters:; rgb - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it do",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:3575,Safety,avoid,avoid,3575,"olor; getTranslucentColor(Color color). Get a (slightly) translucent version of the specified color. static Color; scaleColor(Color color,; double factor). Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TRANSLUCENT_WHITE; public static final Color TRANSLUCENT_WHITE; White, with 50% opacity. TRANSLUCENT_BLACK; public static final Color TRANSLUCENT_BLACK; Black, with 50% opacity. Constructor Details. ColorToolsAwt; public ColorToolsAwt(). Method Details. getCachedColor; public static Color getCachedColor(int r,; int g,; int b,; int a); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; a - ; Returns:. getCachedColor; public static Color getCachedColor(int r,; int g,; int b); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Parameters:; rgb - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; p",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:2884,Security,hash,hashCode,2884,"ied opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified opacity, based on the packed RGB values in an Integer. static IndexColorModel; getIndexColorModel(StainVector stain). Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). static IndexColorModel; getIndexColorModel(StainVector stain,; boolean whiteBackground). Get an IndexColorModel representing a color deconvolution stain. static Color; getMoreTranslucentColor(Color color). Get a (slightly more) translucent version of the specified color. static Color; getTranslucentColor(Color color). Get a (slightly) translucent version of the specified color. static Color; scaleColor(Color color,; double factor). Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TRANSLUCENT_WHITE; public static final Color TRANSLUCENT_WHITE; White, with 50% opacity. TRANSLUCENT_BLACK; public static final Color TRANSLUCENT_BLACK; Black, with 50% opacity. Constructor Details. ColorToolsAwt; public ColorToolsAwt(). Method Details. getCachedColor; public static Color getCachedColor(int r,; int g,; int b,; int a); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; a - ; Returns:. getCachedColor; public static Color getCachedColor(int r,; int g,; int b); Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). Parameters:; r - ; g - ; b - ; Returns:. getCachedColor; public static Color getCachedColor(Integer rgb); Get cached color. Assumed not to have alpha set, unless the relevant bits are non-zero. Parameters:; rgb - ; Returns:. getCachedColor; public static Color getCach",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:1212,Energy Efficiency,green,green,1212,"d; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorTransformer.ColorTransformMethod. java.lang.Object; java.lang.Enum<ColorTransformer.ColorTransformMethod>; qupath.lib.color.ColorTransformer.ColorTransformMethod. All Implemented Interfaces:; Serializable, Comparable<ColorTransformer.ColorTransformMethod>, Constable. Enclosing class:; ColorTransformer. public static enum ColorTransformer.ColorTransformMethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hema",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:1358,Energy Efficiency,green,green,1358,"tants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorTransformer.ColorTransformMethod. java.lang.Object; java.lang.Enum<ColorTransformer.ColorTransformMethod>; qupath.lib.color.ColorTransformer.ColorTransformMethod. All Implemented Interfaces:; Serializable, Comparable<ColorTransformer.ColorTransformMethod>, Constable. Enclosing class:; ColorTransformer. public static enum ColorTransformer.ColorTransformMethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_No",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:1777,Energy Efficiency,green,green,1777,"ethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stai",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:1798,Energy Efficiency,green,green,1798,"ethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stai",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:2397,Energy Efficiency,reduce,reduce,2397," color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.la",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:2461,Energy Efficiency,green,green,2461,"r deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringCla",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:2605,Energy Efficiency,green,green,2605,"ult H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait,",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:2682,Energy Efficiency,green,green,2682,"ersion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. Original; public static final ColorTransformer.ColorTransform",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:4402,Energy Efficiency,green,green,4402,"ng.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. Original; public static final ColorTransformer.ColorTransformMethod Original; Original image. Red; public static final ColorTransformer.ColorTransformMethod Red; Red channel only. Green; public static final ColorTransformer.ColorTransformMethod Green; Green channel only. Blue; public static final ColorTransformer.ColorTransformMethod Blue; Blue channel only. Red_OD; public static final ColorTransformer.ColorTransformMethod Red_OD; Red channel optical densities. Green_OD; public static final ColorTransformer.ColorTransformMethod Green_OD; Green channel optical densities. Blue_OD; public static final ColorTransformer.ColorTransformMethod Blue_OD; Blue channel optical densities. RGB_mean; public static final ColorTransformer.ColorTransformMethod RGB_mean; Mean of red, green and blue channels. Hue; public static final ColorTransformer.ColorTransformMethod Hue; Hue value (from RGB-HSB transform). Saturation; public static final ColorTransformer.ColorTransformMethod Saturation; Saturation value (from RGB-HSB transform). Brightness; public static final ColorTransformer.ColorTransformMethod Brightness; Brightness value (from RGB-HSB transform). Stain_1; public static final ColorTransformer.ColorTransformMethod Stain_1; First stain after color deconvolution. Stain_2; public static final ColorTransformer.ColorTransformMethod Stain_2; Second stain after color deconvolution. Stain_3; public static final ColorTransformer.ColorTransformMethod Stain_3; Third stain after color deconvolution. Optical_density_sum; public static final ColorTransformer.ColorTransformMethod Optical_density_sum; Sum of red, green and blue optical densities. Hematoxylin_H_E; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E; Hematoxylin after color dec",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:5239,Energy Efficiency,green,green,5239,"nal ColorTransformer.ColorTransformMethod Blue_OD; Blue channel optical densities. RGB_mean; public static final ColorTransformer.ColorTransformMethod RGB_mean; Mean of red, green and blue channels. Hue; public static final ColorTransformer.ColorTransformMethod Hue; Hue value (from RGB-HSB transform). Saturation; public static final ColorTransformer.ColorTransformMethod Saturation; Saturation value (from RGB-HSB transform). Brightness; public static final ColorTransformer.ColorTransformMethod Brightness; Brightness value (from RGB-HSB transform). Stain_1; public static final ColorTransformer.ColorTransformMethod Stain_1; First stain after color deconvolution. Stain_2; public static final ColorTransformer.ColorTransformMethod Stain_2; Second stain after color deconvolution. Stain_3; public static final ColorTransformer.ColorTransformMethod Stain_3; Third stain after color deconvolution. Optical_density_sum; public static final ColorTransformer.ColorTransformMethod Optical_density_sum; Sum of red, green and blue optical densities. Hematoxylin_H_E; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E; Hematoxylin after color deconvolution with default H&E stains. Eosin_H_E; public static final ColorTransformer.ColorTransformMethod Eosin_H_E; Eosin after color deconvolution with default H&E stains. Hematoxylin_H_DAB; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_DAB; Hematoxylin after color deconvolution with default H-DAB stains. DAB_H_DAB; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB; DAB after color deconvolution with default H-DAB stains. Hematoxylin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E_8_bit; Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Eosin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Eosin_H_E_8_bit; Eosin after color deconvolution with default H&E stains and conversion to 8-bit. He",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:6734,Energy Efficiency,green,green,6734,"ith default H-DAB stains. DAB_H_DAB; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB; DAB after color deconvolution with default H-DAB stains. Hematoxylin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E_8_bit; Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Eosin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Eosin_H_E_8_bit; Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Hematoxylin_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_DAB_8_bit; Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. DAB_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorT",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:6873,Energy Efficiency,green,green,6873,"ains. Hematoxylin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E_8_bit; Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Eosin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Eosin_H_E_8_bit; Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Hematoxylin_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_DAB_8_bit; Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. DAB_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorTransformer.ColorTransformMethod[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:6894,Energy Efficiency,green,green,6894,"ains. Hematoxylin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E_8_bit; Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Eosin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Eosin_H_E_8_bit; Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Hematoxylin_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_DAB_8_bit; Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. DAB_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorTransformer.ColorTransformMethod[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:7050,Energy Efficiency,green,green,7050,"ult H&E stains and conversion to 8-bit. Eosin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Eosin_H_E_8_bit; Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Hematoxylin_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_DAB_8_bit; Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. DAB_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorTransformer.ColorTransformMethod[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ColorTransformer.ColorTransformMethod valueOf(String name",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:7331,Energy Efficiency,reduce,reduce,7331,"d Hematoxylin_H_DAB_8_bit; Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. DAB_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorTransformer.ColorTransformMethod[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ColorTransformer.ColorTransformMethod valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:7462,Energy Efficiency,green,green,7462,"t; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorTransformer.ColorTransformMethod[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static ColorTransformer.ColorTransformMethod valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the specified name; Throws:; IllegalArgumentException - if this enum class has no constant with the speci",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:949,Integrability,interface,interfaces,949,". ColorTransformer.ColorTransformMethod (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorTransformer.ColorTransformMethod. java.lang.Object; java.lang.Enum<ColorTransformer.ColorTransformMethod>; qupath.lib.color.ColorTransformer.ColorTransformMethod. All Implemented Interfaces:; Serializable, Comparable<ColorTransformer.ColorTransformMethod>, Constable. Enclosing class:; ColorTransformer. public static enum ColorTransformer.ColorTransformMethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hem",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:788,Modifiability,extend,extends,788,". ColorTransformer.ColorTransformMethod (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorTransformer.ColorTransformMethod. java.lang.Object; java.lang.Enum<ColorTransformer.ColorTransformMethod>; qupath.lib.color.ColorTransformer.ColorTransformMethod. All Implemented Interfaces:; Serializable, Comparable<ColorTransformer.ColorTransformMethod>, Constable. Enclosing class:; ColorTransformer. public static enum ColorTransformer.ColorTransformMethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hem",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:960,Modifiability,inherit,inherited,960,". ColorTransformer.ColorTransformMethod (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorTransformer.ColorTransformMethod. java.lang.Object; java.lang.Enum<ColorTransformer.ColorTransformMethod>; qupath.lib.color.ColorTransformer.ColorTransformMethod. All Implemented Interfaces:; Serializable, Comparable<ColorTransformer.ColorTransformMethod>, Constable. Enclosing class:; ColorTransformer. public static enum ColorTransformer.ColorTransformMethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hem",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:1013,Modifiability,extend,extends,1013,"er.ColorTransformMethod (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class ColorTransformer.ColorTransformMethod. java.lang.Object; java.lang.Enum<ColorTransformer.ColorTransformMethod>; qupath.lib.color.ColorTransformer.ColorTransformMethod. All Implemented Interfaces:; Serializable, Comparable<ColorTransformer.ColorTransformMethod>, Constable. Enclosing class:; ColorTransformer. public static enum ColorTransformer.ColorTransformMethod; extends Enum<ColorTransformer.ColorTransformMethod>; Enum consisting of color transforms that may be applied to RGB images. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; Black. All pixels black. Blue. Blue channel only. Blue_chromaticity. Blue chromaticity value, blue / max(1, red + green + blue). Blue_OD. Blue channel optical densities. Brightness. Brightness value (from RGB-HSB transform). Brown. Brown value, (blue - (red + green)*0.3f). DAB_H_DAB. DAB after color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:3364,Modifiability,inherit,inherited,3364,"malized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. Original; public static final ColorTransformer.ColorTransformMethod Original; Original image. Red; public static final ColorTransformer.ColorTransformMethod Red; Red channel only. Green; public static final ColorTransformer.ColorTransformMethod Green; Green channel only. Blue; public static final ColorTransformer.ColorTransformMethod Blue; Blue channel only. Red_OD; public static final ColorTransformer.ColorTransformMethod Red_OD; Red channel optical densities. Green_OD; public static final ColorTransformer.ColorTransformMethod Green_OD; Green channel optical densities. Blue_OD; public static final ColorTransformer.ColorTransformMethod Blue_OD; Blue channel optical densities. RGB_mean; public static final ColorTransformer.ColorTransformM",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:3517,Modifiability,inherit,inherited,3517," Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. Original; public static final ColorTransformer.ColorTransformMethod Original; Original image. Red; public static final ColorTransformer.ColorTransformMethod Red; Red channel only. Green; public static final ColorTransformer.ColorTransformMethod Green; Green channel only. Blue; public static final ColorTransformer.ColorTransformMethod Blue; Blue channel only. Red_OD; public static final ColorTransformer.ColorTransformMethod Red_OD; Red channel optical densities. Green_OD; public static final ColorTransformer.ColorTransformMethod Green_OD; Green channel optical densities. Blue_OD; public static final ColorTransformer.ColorTransformMethod Blue_OD; Blue channel optical densities. RGB_mean; public static final ColorTransformer.ColorTransformMethod RGB_mean; Mean of red, green and blue channels. Hue; public static final ColorTransformer.ColorTransformMethod Hue; Hue value (from RGB-HSB transfo",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:3475,Security,hash,hashCode,3475,"m of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. Original; public static final ColorTransformer.ColorTransformMethod Original; Original image. Red; public static final ColorTransformer.ColorTransformMethod Red; Red channel only. Green; public static final ColorTransformer.ColorTransformMethod Green; Green channel only. Blue; public static final ColorTransformer.ColorTransformMethod Blue; Blue channel only. Red_OD; public static final ColorTransformer.ColorTransformMethod Red_OD; Red channel optical densities. Green_OD; public static final ColorTransformer.ColorTransformMethod Green_OD; Green channel optical densities. Blue_OD; public static final ColorTransformer.ColorTransformMethod Blue_OD; Blue channel optical densities. RGB_mean; public static final ColorTransformer.ColorTransformMethod RGB_mean; Mean of red, green and blue channels. Hue; public static final ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:1756,Energy Efficiency,green,green,1756," IHC data.; More details on each method (in particular 'Blue normalized', here 'Blue chromaticity') are provided in:; ; Brey, E. M., Lalani, Z., Johnston, C., Wong, M., McIntire, L. V., Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput). Deconvolve RGB array with one set of stain vectors, and reconvolve with another. static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput,; float scale,; float offset). Deconvolve RGB array with one set of stain vectors, and reconvolve with another - with optional scaling. static float; colorDeconvolveRGBPixel(int rgb,; ColorDeconvolutionStains stains,; int channel). Calculate the color deconvolved value for a single pixel, stored as a packed (A)RGB int. static ColorModel; g",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:1924,Energy Efficiency,green,green,1924,"Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput). Deconvolve RGB array with one set of stain vectors, and reconvolve with another. static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput,; float scale,; float offset). Deconvolve RGB array with one set of stain vectors, and reconvolve with another - with optional scaling. static float; colorDeconvolveRGBPixel(int rgb,; ColorDeconvolutionStains stains,; int channel). Calculate the color deconvolved value for a single pixel, stored as a packed (A)RGB int. static ColorModel; getDefaultColorModel(ColorTransformer.ColorTransformMethod method). This does not guarantee a ColorModel will be returned!; If it is not, then a default grayscale LUT should be used. stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4475,Energy Efficiency,green,greenChromaticity,4475," stains). Get the value of a single packed RGB pixel after applying a specified color transform method, with color deconvolution stains provided. static float[]; getSimpleTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a pac",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4511,Energy Efficiency,green,green,4511,"a specified color transform method, with color deconvolution stains provided. static float[]; getSimpleTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4561,Energy Efficiency,green,green,4561,"a specified color transform method, with color deconvolution stains provided. static float[]; getSimpleTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4582,Energy Efficiency,green,green,4582,"a specified color transform method, with color deconvolution stains provided. static float[]; getSimpleTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4611,Energy Efficiency,green,greenOverBlue,4611,"s provided. static float[]; getSimpleTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation value from RGB-to-HSB transform. static void; transformRGB(int[] ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4643,Energy Efficiency,green,green,4643,"t[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation value from RGB-to-HSB transform. static void; transformRGB(int[] buf,; int[] bufOutput,; ColorTransformer.ColorTransformMet",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4690,Energy Efficiency,green,green,4690,"t[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation value from RGB-to-HSB transform. static void; transformRGB(int[] buf,; int[] bufOutput,; ColorTransformer.ColorTransformMet",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:5397,Energy Efficiency,green,green,5397,"orDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation value from RGB-to-HSB transform. static void; transformRGB(int[] buf,; int[] bufOutput,; ColorTransformer.ColorTransformMethod method,; float offset,; float scale,; boolean useColorLUT). Apply a specified color transform to a packed (A)RGB array and output another (A)RGB array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformer; public ColorTransformer(). Method Details. getODNormalizedColor; public static int getODNormalizedColor(int rgb,; double minOD,; float offset,; float scale); Create a 'normalized' color for visualization.; ; This is achieved by converting RGB values to optical densities, putting the RGB ODs into; a 3x1 vector and normalizing this to unit length, then rescal",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:9848,Energy Efficiency,green,green,9848,"bStain - ; od_lut_red - ; od_lut_green - ; od_lut_blue - ; Returns:. getStainProjection; public static float getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Calculate magnitude of projection of pixel OD onto stain OD. Parameters:; rgb - ; rStain - ; gStain - ; bStain - ; od_lut_red - ; od_lut_green - ; od_lut_blue - ; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brow",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10271,Energy Efficiency,green,green,10271,"ain - ; gStain - ; bStain - ; od_lut_red - ; od_lut_green - ; od_lut_blue - ; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. P",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10317,Energy Efficiency,green,greenChromaticity,10317," density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10356,Energy Efficiency,green,greenChromaticity,10356," density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10392,Energy Efficiency,green,green,10392," density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10442,Energy Efficiency,green,green,10442," density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10463,Energy Efficiency,green,green,10463," density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10651,Energy Efficiency,green,green,10651,"DensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:;",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10697,Energy Efficiency,green,greenOverBlue,10697,"ed - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:; rgb - ; method - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method,; ColorDeconvolutionStains stains); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10732,Energy Efficiency,green,greenOverBlue,10732,"ed - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:; rgb - ; method - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method,; ColorDeconvolutionStains stains); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10764,Energy Efficiency,green,green,10764,"ed - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:; rgb - ; method - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method,; ColorDeconvolutionStains stains); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10811,Energy Efficiency,green,green,10811,"ed - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:; rgb - ; method - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method,; ColorDeconvolutionStains stains); Get the",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10943,Energy Efficiency,green,green,10943,"tions; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:; rgb - ; method - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method,; ColorDeconvolutionStains stains); Get the value of a single packed RGB pixel after applying a specified color transform method, with color deconvolution stains provided. Parameters:; rg",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:465,Modifiability,extend,extends,465,". ColorTransformer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorTransformer. java.lang.Object; qupath.lib.color.ColorTransformer. public class ColorTransformer; extends Object; Static methods for computing a range of color transforms for packed RGB values.; ; Several straightforward methods of manipulating RGB channels that may be used to enhance (or suppress); primarily DAB staining, or otherwise assist in exploring IHC data.; More details on each method (in particular 'Blue normalized', here 'Blue chromaticity') are provided in:; ; Brey, E. M., Lalani, Z., Johnston, C., Wong, M., McIntire, L. V., Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; Col",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:645,Modifiability,enhance,enhance,645,". ColorTransformer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorTransformer. java.lang.Object; qupath.lib.color.ColorTransformer. public class ColorTransformer; extends Object; Static methods for computing a range of color transforms for packed RGB values.; ; Several straightforward methods of manipulating RGB channels that may be used to enhance (or suppress); primarily DAB staining, or otherwise assist in exploring IHC data.; More details on each method (in particular 'Blue normalized', here 'Blue chromaticity') are provided in:; ; Brey, E. M., Lalani, Z., Johnston, C., Wong, M., McIntire, L. V., Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; Col",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:1203,Modifiability,flexible,flexible,1203,"l:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorTransformer. java.lang.Object; qupath.lib.color.ColorTransformer. public class ColorTransformer; extends Object; Static methods for computing a range of color transforms for packed RGB values.; ; Several straightforward methods of manipulating RGB channels that may be used to enhance (or suppress); primarily DAB staining, or otherwise assist in exploring IHC data.; More details on each method (in particular 'Blue normalized', here 'Blue chromaticity') are provided in:; ; Brey, E. M., Lalani, Z., Johnston, C., Wong, M., McIntire, L. V., Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput). Deconvolve RGB array with one set of stain vectors, and reconvolve with another. stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:5837,Modifiability,inherit,inherited,5837,"et,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation value from RGB-to-HSB transform. static void; transformRGB(int[] buf,; int[] bufOutput,; ColorTransformer.ColorTransformMethod method,; float offset,; float scale,; boolean useColorLUT). Apply a specified color transform to a packed (A)RGB array and output another (A)RGB array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformer; public ColorTransformer(). Method Details. getODNormalizedColor; public static int getODNormalizedColor(int rgb,; double minOD,; float offset,; float scale); Create a 'normalized' color for visualization.; ; This is achieved by converting RGB values to optical densities, putting the RGB ODs into; a 3x1 vector and normalizing this to unit length, then rescaling the result to give an RGB representation.; Because of the somewhat strange rescaling involved, the final RGB values produced should not be over-interpreted -; this is really intended for visualization, such as when interactively looking for regions of single stains; when selecting color deconvolution stain vectors. Parameters:; rgb - original 8-bit RGB values; minOD - the minimum OD; pixels with an OD less than this will be considered unstained, and shown as white; offset",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:13022,Performance,perform,perform,13022,"Model cm); Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. Parameters:; v - the 'raw' pixel value; offset - an offset to subtract from the value; scale - a scaling factor to apply after the offset subtraction; cm - a ColorModel used to determine the output packed RGB value; Returns:; a packed RGB value after applying the transformations to v. getDefaultColorModel; public static ColorModel getDefaultColorModel(ColorTransformer.ColorTransformMethod method); This does not guarantee a ColorModel will be returned!; If it is not, then a default grayscale LUT should be used. Parameters:; method - ; Returns:. transformRGB; public static void transformRGB(int[] buf,; int[] bufOutput,; ColorTransformer.ColorTransformMethod method,; float offset,; float scale,; boolean useColorLUT); Apply a specified color transform to a packed (A)RGB array and output another (A)RGB array.; ; The aim is to perform fast transformations for visualization purposes, and not to obtain the 'raw' transformed values. Parameters:; buf - ; bufOutput - ; method - ; offset - ; scale - ; useColorLUT - ; See Also:. ColorTools. colorDeconvolveRGBPixel; public static float colorDeconvolveRGBPixel(int rgb,; ColorDeconvolutionStains stains,; int channel); Calculate the color deconvolved value for a single pixel, stored as a packed (A)RGB int. Parameters:; rgb - ; stains - ; channel - ; Returns:. colorDeconvolveReconvolveRGBArray; public static int[] colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput); Deconvolve RGB array with one set of stain vectors, and reconvolve with another.; ; This supports in-place operation, i.e. buf and bufOutput can be the same array.; Otherwise, if bufOutput == null, a new output array will be created. Parameters:; buf - ; stainsInput - ; stainsOutput - ; discardResidual - ; bufOutput - ; Returns:. colorD",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:5911,Security,hash,hashCode,5911,"plying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation value from RGB-to-HSB transform. static void; transformRGB(int[] buf,; int[] bufOutput,; ColorTransformer.ColorTransformMethod method,; float offset,; float scale,; boolean useColorLUT). Apply a specified color transform to a packed (A)RGB array and output another (A)RGB array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorTransformer; public ColorTransformer(). Method Details. getODNormalizedColor; public static int getODNormalizedColor(int rgb,; double minOD,; float offset,; float scale); Create a 'normalized' color for visualization.; ; This is achieved by converting RGB values to optical densities, putting the RGB ODs into; a 3x1 vector and normalizing this to unit length, then rescaling the result to give an RGB representation.; Because of the somewhat strange rescaling involved, the final RGB values produced should not be over-interpreted -; this is really intended for visualization, such as when interactively looking for regions of single stains; when selecting color deconvolution stain vectors. Parameters:; rgb - original 8-bit RGB values; minOD - the minimum OD; pixels with an OD less than this will be considered unstained, and shown as white; offset - brightness and contrast offset; scale - brightness and contrast scale",MatchSource.WIKI,javadoc/docs/qupath/lib/color/ColorTransformer.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:808,Integrability,interface,interface,808,". StainVector.DefaultStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class StainVector.DefaultStains. java.lang.Object; java.lang.Enum<StainVector.DefaultStains>; qupath.lib.color.StainVector.DefaultStains. All Implemented Interfaces:; Serializable, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:884,Integrability,interface,interfaces,884,". StainVector.DefaultStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class StainVector.DefaultStains. java.lang.Object; java.lang.Enum<StainVector.DefaultStains>; qupath.lib.color.StainVector.DefaultStains. All Implemented Interfaces:; Serializable, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:711,Modifiability,extend,extends,711,". StainVector.DefaultStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class StainVector.DefaultStains. java.lang.Object; java.lang.Enum<StainVector.DefaultStains>; qupath.lib.color.StainVector.DefaultStains. All Implemented Interfaces:; Serializable, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:895,Modifiability,inherit,inherited,895,". StainVector.DefaultStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class StainVector.DefaultStains. java.lang.Object; java.lang.Enum<StainVector.DefaultStains>; qupath.lib.color.StainVector.DefaultStains. All Implemented Interfaces:; Serializable, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:948,Modifiability,extend,extends,948,". StainVector.DefaultStains (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.color; Enum Class StainVector.DefaultStains. java.lang.Object; java.lang.Enum<StainVector.DefaultStains>; qupath.lib.color.StainVector.DefaultStains. All Implemented Interfaces:; Serializable, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public stat",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:1491,Modifiability,inherit,inherited,1491,"path.lib.color.StainVector.DefaultStains. All Implemented Interfaces:; Serializable, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public static StainVector.DefaultStains[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static StainVector.DefaultStains valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:1644,Modifiability,inherit,inherited,1644,"StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public static StainVector.DefaultStains[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static StainVector.DefaultStains valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the specified name; Throws:; Ille",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html:1602,Security,hash,hashCode,1602,"able, Comparable<StainVector.DefaultStains>, Constable. Enclosing class:; StainVector. public static enum StainVector.DefaultStains; extends Enum<StainVector.DefaultStains>; Enum representing default stains.; ; TODO: Replace with interface, add stain vectors directly. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; DAB. DAB. EOSIN. Eosin. HEMATOXYLIN. Hematoxylin. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static StainVector.DefaultStains; valueOf(String name). Returns the enum constant of this class with the specified name. static StainVector.DefaultStains[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. HEMATOXYLIN; public static final StainVector.DefaultStains HEMATOXYLIN; Hematoxylin. EOSIN; public static final StainVector.DefaultStains EOSIN; Eosin. DAB; public static final StainVector.DefaultStains DAB; DAB. Method Details. values; public static StainVector.DefaultStains[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static StainVector.DefaultStains valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be ret",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.DefaultStains.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:1629,Energy Efficiency,green,green,1629," terms of RGB optical densities. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; StainVector.DefaultStains. Enum representing default stains. Constructor Summary; Constructors. Constructor; Description; StainVector(). Default constructor, required for Externalizable interface. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; arrayAsString(Locale locale). Get a String representation of the stain vector array, formatting according to the specified Locale. static double; computeAngle(StainVector s1,; StainVector s2). Calculate the angle between two stain vectors, in degrees. static StainVector; createStainVector(String name,; double r,; double g,; double b). Create a stain vector. static double[]; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (normalized) stain vector. boolean; isResidual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, requir",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:1846,Energy Efficiency,green,green,1846,"y; Constructors. Constructor; Description; StainVector(). Default constructor, required for Externalizable interface. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; arrayAsString(Locale locale). Get a String representation of the stain vector array, formatting according to the specified Locale. static double; computeAngle(StainVector s1,; StainVector s2). Calculate the angle between two stain vectors, in degrees. static StainVector; createStainVector(String name,; double r,; double g,; double b). Create a stain vector. static double[]; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (normalized) stain vector. boolean; isResidual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, required for Externalizable interface. Method Details. makeDefaultStainVector; public static StainVector makeDefaultStainVector(StainVector.DefaultStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static Stain",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:3061,Energy Efficiency,green,green,3061,"dual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, required for Externalizable interface. Method Details. makeDefaultStainVector; public static StainVector makeDefaultStainVector(StainVector.DefaultStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static StainVector createStainVector(String name,; double r,; double g,; double b); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vector. Returns:. getGreen; public double getGreen(); Get the green component of the (normalized) stain vector. Returns:. getBlue; public double getBlue(); Get the blue component of the (normalized) stain vector. Returns:. getArray; public double[] getArray(); Get the stain vector as a 3 element array (red, green, blue). Returns:. getColor; public int getColor(); Get a Color that (roughly) corresponds to color represented by this stain vector.; It may be used to create a color lookup table. Returns:. arrayAsString; public String arrayAsString(Locale locale);",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:3540,Energy Efficiency,green,green,3540,"tails. StainVector; public StainVector(); Default constructor, required for Externalizable interface. Method Details. makeDefaultStainVector; public static StainVector makeDefaultStainVector(StainVector.DefaultStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static StainVector createStainVector(String name,; double r,; double g,; double b); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vector. Returns:. getGreen; public double getGreen(); Get the green component of the (normalized) stain vector. Returns:. getBlue; public double getBlue(); Get the blue component of the (normalized) stain vector. Returns:. getArray; public double[] getArray(); Get the stain vector as a 3 element array (red, green, blue). Returns:. getColor; public int getColor(); Get a Color that (roughly) corresponds to color represented by this stain vector.; It may be used to create a color lookup table. Returns:. arrayAsString; public String arrayAsString(Locale locale); Get a String representation of the stain vector array, formatting according to the specified Locale. Parameters:; locale - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. computeAngle; public static double computeAngle(StainVector s1,; StainVector s2); Calculate the angle between two stain vectors, in degrees. Parameters:; s1 - ; s2 - ; Returns:. cross3; public static double[] cross3(double[] u,; double[] v); Compute the cross product of two vectors. Parame",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:3787,Energy Efficiency,green,green,3787,"ltStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static StainVector createStainVector(String name,; double r,; double g,; double b); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vector. Returns:. getGreen; public double getGreen(); Get the green component of the (normalized) stain vector. Returns:. getBlue; public double getBlue(); Get the blue component of the (normalized) stain vector. Returns:. getArray; public double[] getArray(); Get the stain vector as a 3 element array (red, green, blue). Returns:. getColor; public int getColor(); Get a Color that (roughly) corresponds to color represented by this stain vector.; It may be used to create a color lookup table. Returns:. arrayAsString; public String arrayAsString(Locale locale); Get a String representation of the stain vector array, formatting according to the specified Locale. Parameters:; locale - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. computeAngle; public static double computeAngle(StainVector s1,; StainVector s2); Calculate the angle between two stain vectors, in degrees. Parameters:; s1 - ; s2 - ; Returns:. cross3; public static double[] cross3(double[] u,; double[] v); Compute the cross product of two vectors. Parameters:; u - ; v - ; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; publi",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:973,Integrability,interface,interface,973,". StainVector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class StainVector. java.lang.Object; qupath.lib.color.StainVector. All Implemented Interfaces:; Externalizable, Serializable. public class StainVector; extends Object; implements Externalizable; Representation of a color deconvolution stain vector, defined in terms of RGB optical densities. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; StainVector.DefaultStains. Enum representing default stains. Constructor Summary; Constructors. Constructor; Description; StainVector(). Default constructor, required for Externalizable interface. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; arrayAsString(Locale locale). Get a String representation of the stain vector array, formatting according to the specified Locale. static double; computeAngle(StainVector s1,; StainVector s2). Calculate the angle between two stain vectors, in degrees. static StainVector; createStainVector(String name,; double r,; double g,; double b). Create a stain vector. static double[]; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:2633,Integrability,interface,interface,2633,"vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (normalized) stain vector. boolean; isResidual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, required for Externalizable interface. Method Details. makeDefaultStainVector; public static StainVector makeDefaultStainVector(StainVector.DefaultStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static StainVector createStainVector(String name,; double r,; double g,; double b); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vector. Returns:. getGreen; public double getGreen(); Get the green component of the (normalized) stain vector. Return",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:4683,Integrability,interface,interface,4683,"); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vector. Returns:. getGreen; public double getGreen(); Get the green component of the (normalized) stain vector. Returns:. getBlue; public double getBlue(); Get the blue component of the (normalized) stain vector. Returns:. getArray; public double[] getArray(); Get the stain vector as a 3 element array (red, green, blue). Returns:. getColor; public int getColor(); Get a Color that (roughly) corresponds to color represented by this stain vector.; It may be used to create a color lookup table. Returns:. arrayAsString; public String arrayAsString(Locale locale); Get a String representation of the stain vector array, formatting according to the specified Locale. Parameters:; locale - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. computeAngle; public static double computeAngle(StainVector s1,; StainVector s2); Calculate the angle between two stain vectors, in degrees. Parameters:; s1 - ; s2 - ; Returns:. cross3; public static double[] cross3(double[] u,; double[] v); Compute the cross product of two vectors. Parameters:; u - ; v - ; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:4863,Integrability,interface,interface,4863,"); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vector. Returns:. getGreen; public double getGreen(); Get the green component of the (normalized) stain vector. Returns:. getBlue; public double getBlue(); Get the blue component of the (normalized) stain vector. Returns:. getArray; public double[] getArray(); Get the stain vector as a 3 element array (red, green, blue). Returns:. getColor; public int getColor(); Get a Color that (roughly) corresponds to color represented by this stain vector.; It may be used to create a color lookup table. Returns:. arrayAsString; public String arrayAsString(Locale locale); Get a String representation of the stain vector array, formatting according to the specified Locale. Parameters:; locale - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. computeAngle; public static double computeAngle(StainVector s1,; StainVector s2); Calculate the angle between two stain vectors, in degrees. Parameters:; s1 - ; s2 - ; Returns:. cross3; public static double[] cross3(double[] u,; double[] v); Compute the cross product of two vectors. Parameters:; u - ; v - ; Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:504,Modifiability,extend,extends,504,". StainVector (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class StainVector. java.lang.Object; qupath.lib.color.StainVector. All Implemented Interfaces:; Externalizable, Serializable. public class StainVector; extends Object; implements Externalizable; Representation of a color deconvolution stain vector, defined in terms of RGB optical densities. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; StainVector.DefaultStains. Enum representing default stains. Constructor Summary; Constructors. Constructor; Description; StainVector(). Default constructor, required for Externalizable interface. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; arrayAsString(Locale locale). Get a String representation of the stain vector array, formatting according to the specified Locale. static double; computeAngle(StainVector s1,; StainVector s2). Calculate the angle between two stain vectors, in degrees. static StainVector; createStainVector(String name,; double r,; double g,; double b). Create a stain vector. static double[]; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:2407,Modifiability,inherit,inherited,2407,"le r,; double g,; double b). Create a stain vector. static double[]; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (normalized) stain vector. boolean; isResidual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, required for Externalizable interface. Method Details. makeDefaultStainVector; public static StainVector makeDefaultStainVector(StainVector.DefaultStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static StainVector createStainVector(String name,; double r,; double g,; double b); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public dou",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:2481,Security,hash,hashCode,2481,"; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (normalized) stain vector. boolean; isResidual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, required for Externalizable interface. Method Details. makeDefaultStainVector; public static StainVector makeDefaultStainVector(StainVector.DefaultStains stain); Get a default stain vector. Parameters:; stain - ; Returns:. createStainVector; public static StainVector createStainVector(String name,; double r,; double g,; double b); Create a stain vector. Parameters:; name - the name of the stain; r - the stain vector red component; g - the stain vector green component; b - the stain vector blue component; Returns:. isResidual; public boolean isResidual(); Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. Returns:. getName; public String getName(); Returns the name of the stain vector. Returns:. getRed; public double getRed(); Get the red component of the (normalized) stain vecto",MatchSource.WIKI,javadoc/docs/qupath/lib/color/StainVector.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2052,Availability,down,down,2052,"B int value. static final Integer; MASK_BLUE. Mask for use when extracting the blue component from a packed (A)RGB int value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB v",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2169,Availability,down,down,2169,"t value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a pac",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:9240,Availability,down,down,9240,"55; only the lower 8 bits are used.; ; Warning! Note the order of the input values.; This differs from the (deprecated) method makeRGBA(int, int, int, int). Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedARGB(int, int, int, int). packClippedARGB; public static int packClippedARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values, clipping to the range 0-255.; ; Input a, r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value.; ; Warning! Note the order of the input values.; This differs from the (deprecated) method makeRGBA(int, int, int, int). Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packARGB(int, int, int, int). do8BitRangeCheck; public static int do8BitRangeCheck(int v); Clip an input value to be an integer in the range 0-255. Parameters:; v - ; Returns:. do8BitRangeCheck; public static int do8BitRangeCheck(float v); Clip an input value to be an integer in the range 0-255 (with rounding down). Parameters:; v - ; Returns:. do8BitRangeCheck; public static int do8BitRangeCheck(double v); Clip an input value to be an integer in the range 0-255 (with rounding down). Parameters:; v - ; Returns:. alpha; public static int alpha(int argb); Extract the 8-bit alpha value from a packed ARGB value. Parameters:; argb - ; Returns:. red; public static int red(int rgb); Extract the 8-bit red value from a packed RGB value. Parameters:; rgb - ; Returns:. green; public static int green(int rgb); Extract the 8-bit green value from a packed RGB value. Parameters:; rgb - ; Returns:. blue; public static int blue(int rgb); Extract the 8-bit blue value from a packed RGB value. Parameters:; rgb - ; Returns:. makeScaledRGB; public static int makeScaledRGB(int rgb,; double scale); Scale the RGB channels for a color by a fixed amount.; ; This is useful for brightening/darkening an input color. Parameters:; rgb - ; scale - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:9411,Availability,down,down,9411," Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedARGB(int, int, int, int). packClippedARGB; public static int packClippedARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values, clipping to the range 0-255.; ; Input a, r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value.; ; Warning! Note the order of the input values.; This differs from the (deprecated) method makeRGBA(int, int, int, int). Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packARGB(int, int, int, int). do8BitRangeCheck; public static int do8BitRangeCheck(int v); Clip an input value to be an integer in the range 0-255. Parameters:; v - ; Returns:. do8BitRangeCheck; public static int do8BitRangeCheck(float v); Clip an input value to be an integer in the range 0-255 (with rounding down). Parameters:; v - ; Returns:. do8BitRangeCheck; public static int do8BitRangeCheck(double v); Clip an input value to be an integer in the range 0-255 (with rounding down). Parameters:; v - ; Returns:. alpha; public static int alpha(int argb); Extract the 8-bit alpha value from a packed ARGB value. Parameters:; argb - ; Returns:. red; public static int red(int rgb); Extract the 8-bit red value from a packed RGB value. Parameters:; rgb - ; Returns:. green; public static int green(int rgb); Extract the 8-bit green value from a packed RGB value. Parameters:; rgb - ; Returns:. blue; public static int blue(int rgb); Extract the 8-bit blue value from a packed RGB value. Parameters:; rgb - ; Returns:. makeScaledRGB; public static int makeScaledRGB(int rgb,; double scale); Scale the RGB channels for a color by a fixed amount.; ; This is useful for brightening/darkening an input color. Parameters:; rgb - ; scale - ; Returns:. clip255; public static int clip255(double val); Convert a double value to an int, flooring and clipping to the range 0-255. Parameters:; val - ; Returns:. ",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:848,Energy Efficiency,green,green,848,". ColorTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.common; Class ColorTools. java.lang.Object; qupath.lib.common.ColorTools. public final class ColorTools; extends Object; Static functions to help work with RGB(A) colors using packed ints. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Integer; BLACK. Packed int representing black. static final Integer; BLUE. Packed int representing blue. static final Integer; CYAN. Packed int representing cyan. static final Integer; GREEN. Packed int representing green. static final Integer; MAGENTA. Packed int representing magenta. static final Integer; MASK_ALPHA. Mask for use when extracting the alpha component from a packed ARGB int value. static final Integer; MASK_BLUE. Mask for use when extracting the blue component from a packed (A)RGB int value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value ",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:1212,Energy Efficiency,green,green,1212," Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.common; Class ColorTools. java.lang.Object; qupath.lib.common.ColorTools. public final class ColorTools; extends Object; Static functions to help work with RGB(A) colors using packed ints. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Integer; BLACK. Packed int representing black. static final Integer; BLUE. Packed int representing blue. static final Integer; CYAN. Packed int representing cyan. static final Integer; GREEN. Packed int representing green. static final Integer; MAGENTA. Packed int representing magenta. static final Integer; MASK_ALPHA. Mask for use when extracting the alpha component from a packed ARGB int value. static final Integer; MASK_BLUE. Mask for use when extracting the blue component from a packed (A)RGB int value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip a",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2282,Energy Efficiency,green,green,2282,"ASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2316,Energy Efficiency,green,green,2316," red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into re",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3328,Energy Efficiency,green,green,3328," value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public st",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3484,Energy Efficiency,green,green,3484,"akeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public ",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3608,Energy Efficiency,green,green,3608,"rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public static final Integer YELLOW; Packed int representing yellow. MASK_ALPHA; public static final Integer MASK_ALPHA; Mask for use when ex",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3765,Energy Efficiency,green,green,3765,"alue from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public static final Integer YELLOW; Packed int representing yellow. MASK_ALPHA; public static final Integer MASK_ALPHA; Mask for use when extracting the alpha component from a packed ARGB int value. MASK_RED; public static final Integer MASK_RED; Mask for use when extracting the red com",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:4251,Energy Efficiency,green,green,4251,"it red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public static final Integer YELLOW; Packed int representing yellow. MASK_ALPHA; public static final Integer MASK_ALPHA; Mask for use when extracting the alpha component from a packed ARGB int value. MASK_RED; public static final Integer MASK_RED; Mask for use when extracting the red component from a packed (A)RGB int value. MASK_GREEN; public static final Integer MASK_GREEN; Mask for use when extracting the green component from a packed (A)RGB int value. MASK_BLUE; public static final Integer MASK_BLUE; Mask for use when extracting the blue component from a packed (A)RGB int value. Method Details. makeRGB; @Deprecated; public static int makeRGB(int r,; int g,; int b); Deprecated.; Use packRGB(int, int, int) or packClippedRGB(i",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:4896,Energy Efficiency,green,green,4896,"ls, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public static final Integer YELLOW; Packed int representing yellow. MASK_ALPHA; public static final Integer MASK_ALPHA; Mask for use when extracting the alpha component from a packed ARGB int value. MASK_RED; public static final Integer MASK_RED; Mask for use when extracting the red component from a packed (A)RGB int value. MASK_GREEN; public static final Integer MASK_GREEN; Mask for use when extracting the green component from a packed (A)RGB int value. MASK_BLUE; public static final Integer MASK_BLUE; Mask for use when extracting the blue component from a packed (A)RGB int value. Method Details. makeRGB; @Deprecated; public static int makeRGB(int r,; int g,; int b); Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. Make a packed RGB value from specified input values.; ; Input r, g and b should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are.; ; The alpha value is 255. Parameters:; r - ; g - ; b - ; Returns:. packRGB; public static int packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, in",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:5969,Energy Efficiency,green,green,5969,"c static final Integer MASK_BLUE; Mask for use when extracting the blue component from a packed (A)RGB int value. Method Details. makeRGB; @Deprecated; public static int makeRGB(int r,; int g,; int b); Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. Make a packed RGB value from specified input values.; ; Input r, g and b should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are.; ; The alpha value is 255. Parameters:; r - ; g - ; b - ; Returns:. packRGB; public static int packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6190,Energy Efficiency,green,green,6190,"precated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. Make a packed RGB value from specified input values.; ; Input r, g and b should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are.; ; The alpha value is 255. Parameters:; r - ; g - ; b - ; Returns:. packRGB; public static int packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to t",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6326,Energy Efficiency,green,green,6326,"55 - but no checking is applied.; Rather, the input values are simply shifted as they are.; ; The alpha value is 255. Parameters:; r - ; g - ; b - ; Returns:. packRGB; public static int packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are c",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6538,Energy Efficiency,green,green,6538,"packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6759,Energy Efficiency,green,green,6759," range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r,; int g,; int b,; int a); Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. Make a packed ",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6902,Energy Efficiency,green,green,6902,"ckRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r,; int g,; int b,; int a); Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. Make a packed ARGB value from specified input values.; ; Input r, g, b and a should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are. Pa",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:7700,Energy Efficiency,green,green,7700," public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r,; int g,; int b,; int a); Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. Make a packed ARGB value from specified input values.; ; Input r, g, b and a should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are. Parameters:; r - ; g - ; b - ; a - ; Returns:; See Also:. packARGB(int, int, int, int). packARGB; public static int packARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values.; ; Input a, r, g, and b should be in the range 0-255; only the lower 8 bits are used.; ; Warning! Note the order of the input values.; This differs from the (deprecated) method makeRGBA(int, int, int, int). Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedARGB(int, int, int, int). packClippedARGB; public static int packClippedARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values, clipping to the range 0-255.; ; Input a, r, g, and b should be in the range 0-255, bu",MatchSource.WIKI,javadoc/docs/qupath/lib/common/ColorTools.html,qupath,qupath,v0.5.1,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html
