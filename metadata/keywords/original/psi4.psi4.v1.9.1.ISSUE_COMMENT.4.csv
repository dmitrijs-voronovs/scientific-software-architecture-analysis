id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/issues/680#issuecomment-295595920:332,Testability,log,logical,332,"I'm afraid I have a habit of finding obscure bugs! :-) I'd forgotten about needing the additional vectors for linear bends. I'll poke about a bit more to see if I can track it down a bit more. As an aside, is there any real advantage of ""multi"" mode over ""single"" mode, apart form the former appearing to be (in my mind!) more of a logical way of thinking? I'll do some more tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295595920
https://github.com/psi4/psi4/issues/680#issuecomment-295595920:375,Testability,test,tests,375,"I'm afraid I have a habit of finding obscure bugs! :-) I'd forgotten about needing the additional vectors for linear bends. I'll poke about a bit more to see if I can track it down a bit more. As an aside, is there any real advantage of ""multi"" mode over ""single"" mode, apart form the former appearing to be (in my mind!) more of a logical way of thinking? I'll do some more tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295595920
https://github.com/psi4/psi4/issues/680#issuecomment-295755959:334,Availability,reliab,reliable,334,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959
https://github.com/psi4/psi4/issues/680#issuecomment-295755959:701,Availability,redundant,redundant,701,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959
https://github.com/psi4/psi4/issues/680#issuecomment-295755959:701,Safety,redund,redundant,701,"At the moment, the only advantage would be the cleaner separation of intra- and inter- fragment motions which could result in better convergence behavior, particularly for weakly bound complexes. My plan has been to exploit this separation by doing some fancier things such as steepest descent in the inter- modes at the same time as reliable molecular methods (like RFO) for the intra- modes. Another needed feature is a better guess for the inter- modes based on Leonard-Jones potentials or molecular mechanics, etc.. But since these have not been implemented, there is perhaps limited point to using 'multi' at present. The overall motivation is that the methods that are ideal for intra- motions (redundant internals based on chemical bonding, RFO, BFGS...) do not work well for inter- motions with flat potentials.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295755959
https://github.com/psi4/psi4/issues/680#issuecomment-296160675:55,Availability,fault,fault,55,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675
https://github.com/psi4/psi4/issues/680#issuecomment-296160675:1459,Availability,fault,fault,1459,"One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a bit more in the spirit of object orientation. I'm a little puzzled as to why it detected a new linear bend in Frag 2 (one that was already there!) but not in Frag 1, i.e. whether it found it but ignored it had distorted far enough away from being linear, in which case, surely it should have deleted it and replaced it with a normal bend! I'll keep on digging...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675
https://github.com/psi4/psi4/issues/680#issuecomment-296160675:188,Safety,detect,detected,188,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675
https://github.com/psi4/psi4/issues/680#issuecomment-296160675:416,Safety,detect,detects,416,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675
https://github.com/psi4/psi4/issues/680#issuecomment-296160675:963,Safety,detect,detects,963,"Sounds good.; A bit more info on why I'm getting a seg fault that might help...I'm not expecting a quick solution but it might help with the process in the long run. The two fragments are detected properly and internal coords determined and printed out including one lin bend in each fragment (plus their complements) (listed as L/l(3,12,13) and L/l(18,25,26)). One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675
https://github.com/psi4/psi4/issues/680#issuecomment-296160675:2080,Safety,detect,detected,2080,"One RFO step is taken and MOLECULE::validate_angles() detects no ""new"" lin bends on Frag 1 but one ""new"" one in Frag 2: L/l(18,25,26)) (that are already there!). These get added through the INTCO_EXCEPTion handler and a rebuild of internal coordinates is triggered. MOLECULE::add_intrafragment_simples_by_connectivity() calls FRAG::add_simples_by_connectivity() for each fragment(), and then FRAG::add_bend_by_connectivity(). The latter function loops through opt::INTCO_EXCEPT::linear_angles[], adding any new lin bends that are not currently defined for that fragment. On the first pass through, it detects 57 int coords in each fragment; on the second, Frag 1 has 59 (the two extra linear bends...) and Frag 2 has 57. The problem is that opt::INTCO_EXCEPT::linear_angles[] is indexed for the whole molecule, whereas FRAG is indexed just for that fragment, i.e. atom_offsets are used whenever int coords are printed, etc. The linear bend to be added as an exception, L/l(18,25,26), does not exist in Frag 1 (it only has 13 atoms!) so gets added to it. When the int coords are printed out, a seg fault results when an attempt is made to calculate a value using coordinates off the end of the Frag arrays. I'm not sure of the easiest solution here: INTCO_EXCEPT only has molecule-based rather than fragment-based indexing. It could have a fragment index added to it and then use fragment-based indexing for the new lin bends. I think this would also need each FRAG object to contain it's fragment index and/or an atom_offset to the first atom within it. A more involved solution might have an INTCO_EXCEPT per fragment so that it's all a bit more in the spirit of object orientation. I'm a little puzzled as to why it detected a new linear bend in Frag 2 (one that was already there!) but not in Frag 1, i.e. whether it found it but ignored it had distorted far enough away from being linear, in which case, surely it should have deleted it and replaced it with a normal bend! I'll keep on digging...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-296160675
https://github.com/psi4/psi4/pull/681#issuecomment-295384269:87,Availability,Ping,Ping,87,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269
https://github.com/psi4/psi4/pull/681#issuecomment-295384269:106,Availability,down,down,106,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269
https://github.com/psi4/psi4/pull/681#issuecomment-295384269:42,Deployability,patch,patched,42,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269
https://github.com/psi4/psi4/pull/681#issuecomment-295521147:321,Availability,avail,available,321,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147
https://github.com/psi4/psi4/pull/681#issuecomment-295521147:194,Energy Efficiency,reduce,reduced,194,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147
https://github.com/psi4/psi4/pull/681#issuecomment-295521147:250,Energy Efficiency,charge,charge,250,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147
https://github.com/psi4/psi4/pull/681#issuecomment-295521147:150,Integrability,interface,interface,150,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:694,Availability,avail,available,694,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:21,Energy Efficiency,charge,charge,21,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:105,Energy Efficiency,charge,charge,105,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:138,Energy Efficiency,charge,charge,138,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:247,Energy Efficiency,charge,charge,247,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:564,Energy Efficiency,reduce,reduced,564,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:620,Energy Efficiency,charge,charge,620,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:517,Integrability,interface,interface,517,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295524802:225,Security,access,accessing,225,"Changing the nuclear charge is the easiest thing to do. But it makes me; nervous because now the nuclear charge is not really the nuclear charge,; and others who are not ""in the know"" could fail to take account of this; when accessing the nuclear charge. On Apr 19, 2017 8:58 PM, ""fevangelista"" <notifications@github.com> wrote:. > @andysim <https://github.com/andysim>: I am super excited about this; > code! I was wondering if you could answer a few questions so that I can; > start to think about how to write the interface with forte. How do you; > handle the reduced number of electrons? Do you redefine the atomic charge; > (Z) or just subtract the number of core electrons? Is this info available; > from Wavefunction? Let us know if we can be of any help!; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/681#issuecomment-295521147>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QducGsSjAdZ3Wa5g8-sa46HZa75tbks5rxq3MgaJpZM4NCEGk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295524802
https://github.com/psi4/psi4/pull/681#issuecomment-295538468:55,Energy Efficiency,charge,charges,55,"I think there might be advantages to modifying nuclear charges (e.g. to compute interactions with point charges, nuclear-nuclear repulsion, etc.) Perhaps we could have an effective or ecp nuclear charge stored for each atom.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295538468
https://github.com/psi4/psi4/pull/681#issuecomment-295538468:104,Energy Efficiency,charge,charges,104,"I think there might be advantages to modifying nuclear charges (e.g. to compute interactions with point charges, nuclear-nuclear repulsion, etc.) Perhaps we could have an effective or ecp nuclear charge stored for each atom.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295538468
https://github.com/psi4/psi4/pull/681#issuecomment-295538468:196,Energy Efficiency,charge,charge,196,"I think there might be advantages to modifying nuclear charges (e.g. to compute interactions with point charges, nuclear-nuclear repulsion, etc.) Perhaps we could have an effective or ecp nuclear charge stored for each atom.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295538468
https://github.com/psi4/psi4/pull/681#issuecomment-295549661:34,Energy Efficiency,charge,charge,34,"@CDSherrill modifying the nuclear charge is the correct thing to do, to be consistent with the ECP formulation, where some of the nuclear charge is folded into the definition of the core. I have verified this by running other codes with and without ECPs; this changes the nuclear repulsion energy in all cases. I'll drop a note in the manual that anybody doing advanced stuff should use [this funciton](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.h#L286) if they want the ""real"" charge. @fevangelista sorry this took me some time to get working. I'll throw some finite difference gradients in there either tonight or tomorrow. The energies should be all correct, so feel free to play with this. Wavefunction has an [`ecpbasisset()`](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/wavefunction.h#L312) that you can query to find the [total number of core electrons excluded](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L262) or [the number of core electrons excluded on a given atom](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L259). Between these functions and that I linked above, you should have all the info you need. Please let me know if you need any extra information / code to get your work done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295549661
https://github.com/psi4/psi4/pull/681#issuecomment-295549661:138,Energy Efficiency,charge,charge,138,"@CDSherrill modifying the nuclear charge is the correct thing to do, to be consistent with the ECP formulation, where some of the nuclear charge is folded into the definition of the core. I have verified this by running other codes with and without ECPs; this changes the nuclear repulsion energy in all cases. I'll drop a note in the manual that anybody doing advanced stuff should use [this funciton](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.h#L286) if they want the ""real"" charge. @fevangelista sorry this took me some time to get working. I'll throw some finite difference gradients in there either tonight or tomorrow. The energies should be all correct, so feel free to play with this. Wavefunction has an [`ecpbasisset()`](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/wavefunction.h#L312) that you can query to find the [total number of core electrons excluded](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L262) or [the number of core electrons excluded on a given atom](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L259). Between these functions and that I linked above, you should have all the info you need. Please let me know if you need any extra information / code to get your work done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295549661
https://github.com/psi4/psi4/pull/681#issuecomment-295549661:290,Energy Efficiency,energy,energy,290,"@CDSherrill modifying the nuclear charge is the correct thing to do, to be consistent with the ECP formulation, where some of the nuclear charge is folded into the definition of the core. I have verified this by running other codes with and without ECPs; this changes the nuclear repulsion energy in all cases. I'll drop a note in the manual that anybody doing advanced stuff should use [this funciton](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.h#L286) if they want the ""real"" charge. @fevangelista sorry this took me some time to get working. I'll throw some finite difference gradients in there either tonight or tomorrow. The energies should be all correct, so feel free to play with this. Wavefunction has an [`ecpbasisset()`](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/wavefunction.h#L312) that you can query to find the [total number of core electrons excluded](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L262) or [the number of core electrons excluded on a given atom](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L259). Between these functions and that I linked above, you should have all the info you need. Please let me know if you need any extra information / code to get your work done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295549661
https://github.com/psi4/psi4/pull/681#issuecomment-295549661:508,Energy Efficiency,charge,charge,508,"@CDSherrill modifying the nuclear charge is the correct thing to do, to be consistent with the ECP formulation, where some of the nuclear charge is folded into the definition of the core. I have verified this by running other codes with and without ECPs; this changes the nuclear repulsion energy in all cases. I'll drop a note in the manual that anybody doing advanced stuff should use [this funciton](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.h#L286) if they want the ""real"" charge. @fevangelista sorry this took me some time to get working. I'll throw some finite difference gradients in there either tonight or tomorrow. The energies should be all correct, so feel free to play with this. Wavefunction has an [`ecpbasisset()`](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/wavefunction.h#L312) that you can query to find the [total number of core electrons excluded](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L262) or [the number of core electrons excluded on a given atom](https://github.com/andysim/psi4/blob/ecp/psi4/src/psi4/libmints/basisset.h#L259). Between these functions and that I linked above, you should have all the info you need. Please let me know if you need any extra information / code to get your work done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295549661
https://github.com/psi4/psi4/pull/683#issuecomment-296413930:56,Modifiability,variab,variables,56,For Wavefunction objects we suggest moving over to the `variables` attribute. See the [Wavefunction](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L232) and [MP2](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L180) classes. Ultimately we want all variables to move here and remove the global object.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296413930
https://github.com/psi4/psi4/pull/683#issuecomment-296413930:302,Modifiability,variab,variables,302,For Wavefunction objects we suggest moving over to the `variables` attribute. See the [Wavefunction](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L232) and [MP2](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L180) classes. Ultimately we want all variables to move here and remove the global object.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296413930
https://github.com/psi4/psi4/pull/683#issuecomment-296845920:2,Availability,echo,echo,2,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920
https://github.com/psi4/psi4/pull/683#issuecomment-296845920:357,Availability,avail,available,357,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920
https://github.com/psi4/psi4/pull/683#issuecomment-296845920:77,Energy Efficiency,energy,energy,77,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920
https://github.com/psi4/psi4/pull/683#issuecomment-296845920:40,Modifiability,variab,variables,40,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920
https://github.com/psi4/psi4/pull/683#issuecomment-296845920:101,Modifiability,variab,variables,101,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920
https://github.com/psi4/psi4/pull/684#issuecomment-296414530:194,Usability,simpl,simple,194,"I think @loriab intended to put the GPLv2 text verbatim into LICENSE, but with the text in CITATION indicating that we also permit newer GPLs. That way, GitHub could parse LICENSE and provide a simple digest to users, but the CITATION code would clarify our intent. Adding the extra text to LICENSE removes any ambiguity resulting from the mismatch between these files and, it appears, doesn't break GitHub's license parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/684#issuecomment-296414530
https://github.com/psi4/psi4/pull/684#issuecomment-296445736:266,Security,access,accessible,266,"Ok, after @susilehtola's heads-up and some Googling, I think I now have a working solution. The COPYING file now contains GPLv2 **verbatim** (no mention of newer ones). I got rid of both LICENSE and CITATION and essentially stuck them into README.md so they're very accessible; the statement that newer GPL versions are allowed is in this README.md file. Removing LICENSE also forces the GitHub parser to parse CITATION, so that it correctly accredits us with the GPLv2 license. As you can see, this took a few failed attempts, so this should be squashed when merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/684#issuecomment-296445736
https://github.com/psi4/psi4/pull/685#issuecomment-297152955:48,Availability,down,down,48,"You're gaining quite the reputation for hunting down difficult and obscure bugs. Thanks a lot! At first glance, I think you're right about the `size_t` being a good solution, but I'll hold off saying anything definitive about that until I can look at it in a less sleep deprived state.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297152955
https://github.com/psi4/psi4/pull/685#issuecomment-297155704:154,Availability,down,down,154,"Good catch!. David. On Tue, Apr 25, 2017 at 4:20 PM, Andy Simmonett <notifications@github.com>; wrote:. > You're gaining quite the reputation for hunting down difficult and obscure; > bugs. Thanks a lot! At first glance, I think you're right about the size_t; > being a good solution, but I'll hold off saying anything definitive about; > that until I can look at it in a less sleep deprived state.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/685#issuecomment-297152955>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhY_fd5Pi2IM3dRb0-ShVYHzaVFtks5rzlWdgaJpZM4NH_3A>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297155704
https://github.com/psi4/psi4/pull/685#issuecomment-297214526:194,Availability,down,down,194,"@andysim I agree that `size_t` is probably a better solution, but I will have to take a closer look to say for sure. . @lazaroid I agree that there are probably more int overflows to be tracked down in DPD, any that you find you are welcome to patch I will go hunting as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297214526
https://github.com/psi4/psi4/pull/685#issuecomment-297214526:244,Deployability,patch,patch,244,"@andysim I agree that `size_t` is probably a better solution, but I will have to take a closer look to say for sure. . @lazaroid I agree that there are probably more int overflows to be tracked down in DPD, any that you find you are welcome to patch I will go hunting as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/685#issuecomment-297214526
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:11,Deployability,release,release,11,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:687,Deployability,release,release,687,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1097,Integrability,Depend,Dependencies,1097,"primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1155,Integrability,depend,dependencies,1155,"primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1267,Integrability,depend,dependencies,1267," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1357,Integrability,depend,dependencies,1357," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1398,Modifiability,plugin,plugins,1398," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1524,Modifiability,plugin,plugins,1524," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:284,Performance,load,loading,284,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297864305:885,Usability,feedback,feedback,885,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305
https://github.com/psi4/psi4/issues/688#issuecomment-297866382:83,Deployability,release,release,83,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382
https://github.com/psi4/psi4/issues/688#issuecomment-297866382:301,Deployability,integrat,integrations,301,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382
https://github.com/psi4/psi4/issues/688#issuecomment-297866382:301,Integrability,integrat,integrations,301,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382
https://github.com/psi4/psi4/issues/688#issuecomment-297866382:247,Modifiability,plugin,plugins,247,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382
https://github.com/psi4/psi4/issues/688#issuecomment-297996300:15,Usability,feedback,feedback,15,"Thanks for the feedback, @loriab!. LGPL is good from my perspective.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297996300
https://github.com/psi4/psi4/issues/688#issuecomment-301915147:205,Deployability,release,released,205,"Not according to [this](https://www.gnu.org/licenses/gpl-howto.en.html); ""You should also include a copy of the license itself somewhere in the distribution of your program. All programs, whether they are released under the GPL or LGPL, should include the text version of the GPL. In GNU programs the license is usually in a file called COPYING. If you are releasing your program under the LGPL, you should also include the text version of the LGPL, usually in a file called COPYING.LESSER. Please note that, since the LGPL is a set of additional permissions on top of the GPL, it's important to include both licenses so users have all the materials they need to understand their rights.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-301915147
https://github.com/psi4/psi4/issues/693#issuecomment-298386000:91,Usability,clear,clear,91,"Or yeah, I guess the generator is GPL and the generated library is LGPL. But that's not so clear in v1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298386000
https://github.com/psi4/psi4/issues/693#issuecomment-298445553:25,Deployability,release,release,25,@loriab I pushed a 1.2.0 release candidate with the desired license change. Please let me know if you see any additional issues. I will then tag it to release-1-2-0.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298445553
https://github.com/psi4/psi4/issues/693#issuecomment-298445553:151,Deployability,release,release-,151,@loriab I pushed a 1.2.0 release candidate with the desired license change. Please let me know if you see any additional issues. I will then tag it to release-1-2-0.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298445553
https://github.com/psi4/psi4/issues/693#issuecomment-298452280:54,Deployability,integrat,integrate,54,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280
https://github.com/psi4/psi4/issues/693#issuecomment-298452280:54,Integrability,integrat,integrate,54,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280
https://github.com/psi4/psi4/issues/693#issuecomment-298452280:256,Safety,detect,detect,256,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280
https://github.com/psi4/psi4/issues/693#issuecomment-298456904:757,Integrability,rout,route,757,"@evaleev, are you at all interested in accepting into your repository CMake as an alternate build system? We know from @susilehtola that Psi4 can run with libint1 from either your repo with GNUMake or our repo with CMake. Looking over the directory structures (which have un-synced over the years), I _think_ I could arrange CMake alongside your existing build system (CMake files and GNUMake files would just ignore each other) at the cost of a few extra files and a [directory](https://github.com/psi4/libint/tree/master/cmake). Then psi4/libint could be deleted and there would once again be only one source of Libint truth. So if you're interested in CMake now or one day, I'll give it a try and submit a PR. If not, that's fine, and I'll go the simple route and apply your relicensing to psi4/libint. FYI @jturney @andysim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298456904
https://github.com/psi4/psi4/issues/693#issuecomment-298456904:750,Usability,simpl,simple,750,"@evaleev, are you at all interested in accepting into your repository CMake as an alternate build system? We know from @susilehtola that Psi4 can run with libint1 from either your repo with GNUMake or our repo with CMake. Looking over the directory structures (which have un-synced over the years), I _think_ I could arrange CMake alongside your existing build system (CMake files and GNUMake files would just ignore each other) at the cost of a few extra files and a [directory](https://github.com/psi4/libint/tree/master/cmake). Then psi4/libint could be deleted and there would once again be only one source of Libint truth. So if you're interested in CMake now or one day, I'll give it a try and submit a PR. If not, that's fine, and I'll go the simple route and apply your relicensing to psi4/libint. FYI @jturney @andysim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298456904
https://github.com/psi4/psi4/issues/693#issuecomment-301566033:135,Safety,avoid,avoid,135,"Completed. And Psi4 now pulls from evaleev/libint branch v1, rather than psi4/libint. The latter will be made private at some point to avoid confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-301566033
https://github.com/psi4/psi4/pull/695#issuecomment-300271087:179,Modifiability,config,configurable,179,"Drat, didn't think about `MAXNODE` differences btwn repos, and it only shows up `MAX_AM_ERI` >=7. Anyone ever need to reset it higher than the psi4 settings? If so, I can make it configurable. ```; # psi4/libint; /libint/src/libint_compiler/emit_order.c:#define MAXNODE 20000; /libint/src/libderiv_compiler/emit_deriv12_managers.c:#define MAXNODE 20000; /libint/src/libderiv_compiler/emit_deriv1_managers.c:#define MAXNODE 20000; ```. ```; # evaleev/libint; /libint/src/bin/libint/emit_order.c:#define MAXNODE 20000; /libint/src/bin/libderiv/emit_deriv12_managers.c:#define MAXNODE 10000; /libint/src/bin/libderiv/emit_deriv1_managers.c:#define MAXNODE 5000; /libint/src/bin/libr12/emit_gr_order.c:#define MAXNODE 3000; /libint/src/bin/libr12/emit_grt_order.c:#define MAXNODE 20000; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300271087
https://github.com/psi4/psi4/pull/695#issuecomment-300335205:184,Deployability,patch,patch,184,"@susilehtola Right, I was just trying to work out the settings to get an AM=8 build, which is as high as I ever expect to go. This mostly (for me) affects the conda build (which I can patch), but it will also place a hard limit on the AM that Psi4 can build internally. I suppose I should look at your Fedora build to see what's useful. I agree that I don't see why a large constant in the generator should harm the efficiency of the built libraries. I just wish I would have thought of this issue _before_ declaring everything was ready to go this morning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300335205
https://github.com/psi4/psi4/pull/695#issuecomment-300338800:7,Deployability,patch,patch,7,So the patch I use in Fedora is; http://pkgs.fedoraproject.org/cgit/rpms/libint.git/tree/libint-1.1.5-maxnode.patch. which makes building with options; --with-libint-max-am=10 --with-libint-opt-am=6 \; --with-libderiv-max-am1=6 --with-libderiv-max-am2=5 \; --with-libr12-max-am=5 --with-libr12-opt-am=4; work. I guess I haven't tried playing with the libderiv max am's too much...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300338800
https://github.com/psi4/psi4/pull/695#issuecomment-300338800:110,Deployability,patch,patch,110,So the patch I use in Fedora is; http://pkgs.fedoraproject.org/cgit/rpms/libint.git/tree/libint-1.1.5-maxnode.patch. which makes building with options; --with-libint-max-am=10 --with-libint-opt-am=6 \; --with-libderiv-max-am1=6 --with-libderiv-max-am2=5 \; --with-libr12-max-am=5 --with-libr12-opt-am=4; work. I guess I haven't tried playing with the libderiv max am's too much...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300338800
https://github.com/psi4/psi4/pull/695#issuecomment-300573061:0,Deployability,Update,Update,0,"Update:; * There'll be another commit to this to fix some docs. Today, there's 1.2 libint in the conda channels, so we'll be able to look at travis/distelli built on that rather than the internal builds that the above reflects.; * Thanks for the config params, @susilehtola. The CMake ties libderiv AM to libint AM, so you may not have hit some of the problems. What I'm seeing now is that psi4/libint allows an AM=8 build (libderiv AM = libint AM - 1), but evaleev/libint/v1 segfaults in the libderiv generator execution. So I'm investigating the differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300573061
https://github.com/psi4/psi4/pull/695#issuecomment-300573061:246,Modifiability,config,config,246,"Update:; * There'll be another commit to this to fix some docs. Today, there's 1.2 libint in the conda channels, so we'll be able to look at travis/distelli built on that rather than the internal builds that the above reflects.; * Thanks for the config params, @susilehtola. The CMake ties libderiv AM to libint AM, so you may not have hit some of the problems. What I'm seeing now is that psi4/libint allows an AM=8 build (libderiv AM = libint AM - 1), but evaleev/libint/v1 segfaults in the libderiv generator execution. So I'm investigating the differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300573061
https://github.com/psi4/psi4/pull/695#issuecomment-300614426:44,Modifiability,variab,variable,44,"@susilehtola , AM is `MAX_AM_ERI` the CMake variable. Its translation to the quantities that appear in libint.h and libderiv.h is [here](https://github.com/evaleev/libint/blob/v1/README_CMake.md#building)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300614426
https://github.com/psi4/psi4/issues/697#issuecomment-300761080:22,Testability,test,tests,22,Should I also modify `tests/pytest/test_addons.py` to mirror the contents of `pcmsolver/scf/input.dat` so that it doesn't rely on `P::e.globals`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300761080
https://github.com/psi4/psi4/issues/697#issuecomment-300801278:66,Modifiability,variab,variables,66,Maybe duplicate the test so that it tests `P::e.globals` and `Wfn.variables`. Or leave it as-is. It was a handy check that the globals was missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300801278
https://github.com/psi4/psi4/issues/697#issuecomment-300801278:20,Testability,test,test,20,Maybe duplicate the test so that it tests `P::e.globals` and `Wfn.variables`. Or leave it as-is. It was a handy check that the globals was missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300801278
https://github.com/psi4/psi4/issues/697#issuecomment-300801278:36,Testability,test,tests,36,Maybe duplicate the test so that it tests `P::e.globals` and `Wfn.variables`. Or leave it as-is. It was a handy check that the globals was missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300801278
https://github.com/psi4/psi4/issues/697#issuecomment-300808824:61,Modifiability,variab,variables,61,"OK, now it's such that one of the three test cases uses `Wfn.variables` while the other two still use `P::e.globals`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300808824
https://github.com/psi4/psi4/issues/697#issuecomment-300808824:40,Testability,test,test,40,"OK, now it's such that one of the three test cases uses `Wfn.variables` while the other two still use `P::e.globals`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300808824
https://github.com/psi4/psi4/pull/698#issuecomment-300589507:286,Energy Efficiency,energy,energy,286,"Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least. Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300589507
https://github.com/psi4/psi4/pull/698#issuecomment-300589507:266,Modifiability,rewrite,rewrite,266,"Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least. Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300589507
https://github.com/psi4/psi4/pull/698#issuecomment-300648648:787,Energy Efficiency,energy,energy,787,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648
https://github.com/psi4/psi4/pull/698#issuecomment-300648648:767,Modifiability,rewrite,rewrite,767,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648
https://github.com/psi4/psi4/pull/698#issuecomment-300648648:86,Security,access,accessible,86,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648
https://github.com/psi4/psi4/pull/699#issuecomment-300673605:541,Integrability,interface,interface,541,"I'm looking around in the same area, and I think it might be a nice option to allow natural orbital occupancies to be gathered from the SCF wavefunction when the densities are requested as keyword arguments. In the current code, if you specify `density_a`, the occupancies are taken from the `core.Wavefunction.nmopi` which is the number of molecular orbitals per irrep. In the `write.cc` file in `libmints` which is called when `set print mos` and `set molden_write True` are set, the occupancy is reported correctly. If you use the molden interface directly, I think you would simply need to compute the reference wavefunction first, return this wavefunction, and pass it into molden with a new kwarg `scf_wfn` which would then use `core.HF.occupation_a()` and `core.HF.occupation_b()` to get the correct occupations. Then you could pass the SCF wavefunction into the post-SCF methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300673605
https://github.com/psi4/psi4/pull/699#issuecomment-300673605:579,Usability,simpl,simply,579,"I'm looking around in the same area, and I think it might be a nice option to allow natural orbital occupancies to be gathered from the SCF wavefunction when the densities are requested as keyword arguments. In the current code, if you specify `density_a`, the occupancies are taken from the `core.Wavefunction.nmopi` which is the number of molecular orbitals per irrep. In the `write.cc` file in `libmints` which is called when `set print mos` and `set molden_write True` are set, the occupancy is reported correctly. If you use the molden interface directly, I think you would simply need to compute the reference wavefunction first, return this wavefunction, and pass it into molden with a new kwarg `scf_wfn` which would then use `core.HF.occupation_a()` and `core.HF.occupation_b()` to get the correct occupations. Then you could pass the SCF wavefunction into the post-SCF methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300673605
https://github.com/psi4/psi4/pull/699#issuecomment-300684695:606,Security,expose,exposed,606,"@mzott When you use the python side molden driver passing `density_a` or `density_b`it will generate molden files for the natural orbitals, the occupancies of the NOs will be determined at the same time as the natural orbitals are computed (via diagonalization of the provided density matrices). When densitites aren't provided the molden driver is going to generate a file with the canonical molecular orbitals and take the occupations from the `occupation_a/b` functions. In both cases the same method you mention in write.cc is used to write the data to file. The method and the class it belongs to are exposed python side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300684695
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:808,Availability,avail,available,808,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:900,Energy Efficiency,energy,energy,900,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:151,Integrability,interface,interface,151,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:203,Integrability,rout,route,203,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:375,Integrability,rout,route,375,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:241,Testability,test,test,241,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:309,Testability,test,test,309,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:1180,Testability,test,test,1180,"output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:1250,Testability,test,test,1250,"output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:1309,Testability,test,test,1309,"output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:1328,Testability,test,test,1328,"output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:1401,Testability,test,test,1401,"output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matrix(""NO Alpha Rotation Matrix"", nmopi, nmopi)`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/699#issuecomment-300777718:34,Usability,clear,clear,34,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718
https://github.com/psi4/psi4/pull/700#issuecomment-300683881:116,Energy Efficiency,energy,energy,116,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881
https://github.com/psi4/psi4/pull/700#issuecomment-300683881:374,Energy Efficiency,energy,energy,374,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881
https://github.com/psi4/psi4/pull/700#issuecomment-300683881:191,Integrability,rout,routine,191,"There is one slight problem, though. The orbitals appear to be blocked by symmetry group, so they don't come out in energy ordering. I would need to modify the bitstring part of the dump_vec routine to map the bitstrings into Aufbau order. I couldn't find with a quick look if there's already something that would give me a mapping between detci's orbital numbering vs. the energy ordering. I note that I could build the mapping from calcinfo's scfeigval members, but is there a cleaner way to do this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-300683881
https://github.com/psi4/psi4/pull/700#issuecomment-301102993:434,Testability,test,test,434,"Doesnt look like there is a function that lays around. Prototype code below:. ```; std::vector <std::tuple<double, int, int>> order;; for (int h = 0; h < nirrep_; h++) {; for (int i = 0; i < (int) positions[h].size(); i++) {; order.push_back(std::tuple<double, int, int>(epsilon->get(h, positions[h][i]), i, h));; }; }. std::sort(order.begin(), order.end(), std::less < std::tuple < double, int, int > > ());; ```. Can you also add a test for this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301102993
https://github.com/psi4/psi4/pull/700#issuecomment-301204873:31,Testability,test,tested,31,"I'm not sure how this could be tested, since the dumps are pretty lengthy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301204873
https://github.com/psi4/psi4/pull/700#issuecomment-301206187:289,Testability,test,tests,289,"I don't know how detailed the FCIDUMPs are to know if this'd be easy or hard, but would a `compare_fcidump` like [compare_cubes](https://github.com/psi4/psi4/blob/da39266fcb0b84203cdd9a3935e6e98600a688a4/psi4/driver/p4util/util.py#L364) as used in https://github.com/psi4/psi4/blob/master/tests/cubeprop/input.dat be appropriate?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301206187
https://github.com/psi4/psi4/pull/700#issuecomment-301224703:179,Deployability,configurat,configurations,179,"So the dump file just contains the CI vector coefficients and bitstrings. The problem is that due to finite numerical precision the ordering of the vectors may change, as several configurations may have the same coefficient. I can probably write a check for that but it'll easily be O(N^2) so I'll have to restrict to rather small calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301224703
https://github.com/psi4/psi4/pull/700#issuecomment-301224703:179,Modifiability,config,configurations,179,"So the dump file just contains the CI vector coefficients and bitstrings. The problem is that due to finite numerical precision the ordering of the vectors may change, as several configurations may have the same coefficient. I can probably write a check for that but it'll easily be O(N^2) so I'll have to restrict to rather small calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301224703
https://github.com/psi4/psi4/pull/700#issuecomment-301282245:366,Deployability,configurat,configurations,366,"OK, this should be working 100% now. The output looks correct on all the systems I've run so far, and I've added tests. I initially tried to use H2O, but it seems there's something weird going on with the CI wave functions there. Namely, when the CI wave function appears to flip its overall sign between the computed and the reference wave function, there are some configurations that *do not* flip their sign. I guess this must be some weird thing to do with symmetry, in that the wave function can individually flip signs within symmetry subblocks...?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301282245
https://github.com/psi4/psi4/pull/700#issuecomment-301282245:366,Modifiability,config,configurations,366,"OK, this should be working 100% now. The output looks correct on all the systems I've run so far, and I've added tests. I initially tried to use H2O, but it seems there's something weird going on with the CI wave functions there. Namely, when the CI wave function appears to flip its overall sign between the computed and the reference wave function, there are some configurations that *do not* flip their sign. I guess this must be some weird thing to do with symmetry, in that the wave function can individually flip signs within symmetry subblocks...?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301282245
https://github.com/psi4/psi4/pull/700#issuecomment-301282245:113,Testability,test,tests,113,"OK, this should be working 100% now. The output looks correct on all the systems I've run so far, and I've added tests. I initially tried to use H2O, but it seems there's something weird going on with the CI wave functions there. Namely, when the CI wave function appears to flip its overall sign between the computed and the reference wave function, there are some configurations that *do not* flip their sign. I guess this must be some weird thing to do with symmetry, in that the wave function can individually flip signs within symmetry subblocks...?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301282245
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:475,Deployability,configurat,configuration,475,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:552,Deployability,configurat,configuration,552,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:299,Energy Efficiency,energy,energy,299,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:398,Energy Efficiency,energy,energy,398,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:475,Modifiability,config,configuration,475,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:552,Modifiability,config,configuration,552,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:168,Testability,test,test,168,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301289886:161,Usability,simpl,simple,161,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886
https://github.com/psi4/psi4/pull/700#issuecomment-301847966:218,Availability,down,down,218,"Hi @susilehtola, I'm sorry it doesn't look like we'll get to this in 1.1. We're busy preparing for a conference later this week, but I'll alert @CDSherrill in person that this could do with a look after the furor dies down. Do you have any known barrier-to-1.1 issues? The plan is to tag later today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301847966
https://github.com/psi4/psi4/pull/700#issuecomment-301918665:31,Deployability,patch,patches,31,"@loriab I was able to port the patches to the newest snapshot, good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301918665
https://github.com/psi4/psi4/pull/700#issuecomment-301918898:173,Energy Efficiency,energy,energy,173,Then I suspect that the degeneracy of the orbitals might be the cause of the problem. If the orbitals are degenerate then any arbitrary rotation would give you the same SCF energy but different CI wave functions. Am I missing something?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301918898
https://github.com/psi4/psi4/pull/704#issuecomment-301347085:7,Security,hash,hash,7,switch hash to f936ef3 upon rebase,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/704#issuecomment-301347085
https://github.com/psi4/psi4/pull/706#issuecomment-301900431:70,Modifiability,variab,variables,70,"I know that I do not need to use ""long int"" for ""naoccA"" and ""navirA"" variables. However, there are many variables (eg. V^3 type) that requires the usage of long int. Instead of changing specific variables one by one, I have just applied a ""find/replace"". You are right that size_t would be a better solution. But long int is also okay as it is used in the ccenergy and fnocc modules. Further, in the near future I will replace ccsd_triples.cc file with a newer version which includes (T) gradients. At that stage I will consider to use the ""size_t"" instead of ""long int"". Hence, I think that the present change is okay.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/706#issuecomment-301900431
https://github.com/psi4/psi4/pull/706#issuecomment-301900431:105,Modifiability,variab,variables,105,"I know that I do not need to use ""long int"" for ""naoccA"" and ""navirA"" variables. However, there are many variables (eg. V^3 type) that requires the usage of long int. Instead of changing specific variables one by one, I have just applied a ""find/replace"". You are right that size_t would be a better solution. But long int is also okay as it is used in the ccenergy and fnocc modules. Further, in the near future I will replace ccsd_triples.cc file with a newer version which includes (T) gradients. At that stage I will consider to use the ""size_t"" instead of ""long int"". Hence, I think that the present change is okay.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/706#issuecomment-301900431
https://github.com/psi4/psi4/pull/706#issuecomment-301900431:196,Modifiability,variab,variables,196,"I know that I do not need to use ""long int"" for ""naoccA"" and ""navirA"" variables. However, there are many variables (eg. V^3 type) that requires the usage of long int. Instead of changing specific variables one by one, I have just applied a ""find/replace"". You are right that size_t would be a better solution. But long int is also okay as it is used in the ccenergy and fnocc modules. Further, in the near future I will replace ccsd_triples.cc file with a newer version which includes (T) gradients. At that stage I will consider to use the ""size_t"" instead of ""long int"". Hence, I think that the present change is okay.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/706#issuecomment-301900431
https://github.com/psi4/psi4/issues/708#issuecomment-301913196:25,Availability,checkpoint,checkpoints,25,"Looks like the formatted checkpoints don't carry post-SCF densities, though, which would be nice. Also, it looks like psi4 spits out also spin-restricted checkpoints in spin-polarized form. For a more thorough study, I could try and check if the formatted checkpoints pass inspection through ERKALE, which I've checked in a previous life against the code that shall not be mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301913196
https://github.com/psi4/psi4/issues/708#issuecomment-301913196:154,Availability,checkpoint,checkpoints,154,"Looks like the formatted checkpoints don't carry post-SCF densities, though, which would be nice. Also, it looks like psi4 spits out also spin-restricted checkpoints in spin-polarized form. For a more thorough study, I could try and check if the formatted checkpoints pass inspection through ERKALE, which I've checked in a previous life against the code that shall not be mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301913196
https://github.com/psi4/psi4/issues/708#issuecomment-301913196:256,Availability,checkpoint,checkpoints,256,"Looks like the formatted checkpoints don't carry post-SCF densities, though, which would be nice. Also, it looks like psi4 spits out also spin-restricted checkpoints in spin-polarized form. For a more thorough study, I could try and check if the formatted checkpoints pass inspection through ERKALE, which I've checked in a previous life against the code that shall not be mentioned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301913196
https://github.com/psi4/psi4/issues/708#issuecomment-301914256:114,Modifiability,enhance,enhancements,114,fchk in Psi4 is mainly data transfer for gdma (for which we had a few fchk from the code you allude to). The fchk enhancements are good for psi4/psi4#402 and maybe as a starter project for our developers workshop this week.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/708#issuecomment-301914256
https://github.com/psi4/psi4/issues/710#issuecomment-302114845:14,Deployability,update,update,14,"On the first, update v2rdm_casscf for fix (`conda update v2rdm_casscf -c psi4`). On the second, so long as you have activated the environment or added the installer to path, you should be good to go. http://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation Otherwise, `psi4 --psiapi-path` will give you the commands to make it importable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-302114845
https://github.com/psi4/psi4/issues/710#issuecomment-302114845:50,Deployability,update,update,50,"On the first, update v2rdm_casscf for fix (`conda update v2rdm_casscf -c psi4`). On the second, so long as you have activated the environment or added the installer to path, you should be good to go. http://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation Otherwise, `psi4 --psiapi-path` will give you the commands to make it importable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-302114845
https://github.com/psi4/psi4/issues/710#issuecomment-302114845:155,Deployability,install,installer,155,"On the first, update v2rdm_casscf for fix (`conda update v2rdm_casscf -c psi4`). On the second, so long as you have activated the environment or added the installer to path, you should be good to go. http://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation Otherwise, `psi4 --psiapi-path` will give you the commands to make it importable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-302114845
https://github.com/psi4/psi4/issues/710#issuecomment-302114845:315,Deployability,install,installation,315,"On the first, update v2rdm_casscf for fix (`conda update v2rdm_casscf -c psi4`). On the second, so long as you have activated the environment or added the installer to path, you should be good to go. http://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation Otherwise, `psi4 --psiapi-path` will give you the commands to make it importable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-302114845
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:39,Deployability,update,updated,39,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:208,Performance,load,loaded,208,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:441,Performance,cache,cachedir,441,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:452,Performance,cache,cache,452,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:123,Testability,test,test,123,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:265,Testability,test,test,265,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:554,Testability,test,tests,554,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:652,Testability,test,tests,652,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:735,Testability,test,tests,735,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:819,Testability,test,tests,819,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:905,Testability,test,tests,905,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:989,Testability,test,tests,989,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1074,Testability,test,tests,1074,"ms to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1162,Testability,test,tests,1162,"n3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ======",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1244,Testability,test,tests,1244,"====================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds =====",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1329,Testability,test,tests,1329,"=====; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfail",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1412,Testability,test,tests,1412,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1497,Testability,test,tests,1497,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1588,Testability,test,tests,1588,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1676,Testability,test,tests,1676,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1763,Testability,test,tests,1763,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1848,Testability,test,tests,1848,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1932,Testability,test,tests,1932,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:2019,Testability,test,tests,2019,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:2105,Testability,test,tests,2105,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/issues/710#issuecomment-305441942:2307,Testability,test,tests,2307,"3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfailed are worrying, though. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942
https://github.com/psi4/psi4/pull/712#issuecomment-302948800:197,Deployability,update,update,197,"Ok, so you've got two branches, ""devdevel_bugs"" and ""cepa_test"" and they both have the same commits. Make note of which commit hashes ought to be in each PR. Then go back to your master branch and update it wrt upstream master (`git checkout master`, `git pull --rebase upstream master`). Make a _new_ branch and apply only the appropriate commits (`git checkout -b cepa_new`, `git cherry-pick aaaa`, `git cherry-pick dddd`). Then push the new branch onto github using the name of the old branch so that the new set of fewer commits show up under the existing PR. It'll have to be a force push because you're rewriting the history of the github branch (`git push -f cepa_new:cepa_test`). Then go back to master (`git checkout master`) and repeat with the t1/d1 commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/712#issuecomment-302948800
https://github.com/psi4/psi4/pull/712#issuecomment-302948800:127,Security,hash,hashes,127,"Ok, so you've got two branches, ""devdevel_bugs"" and ""cepa_test"" and they both have the same commits. Make note of which commit hashes ought to be in each PR. Then go back to your master branch and update it wrt upstream master (`git checkout master`, `git pull --rebase upstream master`). Make a _new_ branch and apply only the appropriate commits (`git checkout -b cepa_new`, `git cherry-pick aaaa`, `git cherry-pick dddd`). Then push the new branch onto github using the name of the old branch so that the new set of fewer commits show up under the existing PR. It'll have to be a force push because you're rewriting the history of the github branch (`git push -f cepa_new:cepa_test`). Then go back to master (`git checkout master`) and repeat with the t1/d1 commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/712#issuecomment-302948800
https://github.com/psi4/psi4/issues/713#issuecomment-308200699:13,Deployability,update,update,13,@tsexton Any update on this? I can do a quick fix if you are busy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/713#issuecomment-308200699
https://github.com/psi4/psi4/issues/713#issuecomment-309066051:72,Deployability,update,updated,72,The old citation for PBE0 was the same as the one given for PBE. I have updated it and submitted a pull request.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/713#issuecomment-309066051
https://github.com/psi4/psi4/issues/714#issuecomment-302571941:0,Energy Efficiency,energy,energy,0,energy('lccd') calls fnocc's CEPA(0) (without singles). You can get an equivalent energy (for closed shells) for. set reference uhf; set ao_basis none; set dcft_functional cepa0; set algorithm twostep; print energy('dcft'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302571941
https://github.com/psi4/psi4/issues/714#issuecomment-302571941:82,Energy Efficiency,energy,energy,82,energy('lccd') calls fnocc's CEPA(0) (without singles). You can get an equivalent energy (for closed shells) for. set reference uhf; set ao_basis none; set dcft_functional cepa0; set algorithm twostep; print energy('dcft'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302571941
https://github.com/psi4/psi4/issues/714#issuecomment-302571941:208,Energy Efficiency,energy,energy,208,energy('lccd') calls fnocc's CEPA(0) (without singles). You can get an equivalent energy (for closed shells) for. set reference uhf; set ao_basis none; set dcft_functional cepa0; set algorithm twostep; print energy('dcft'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302571941
https://github.com/psi4/psi4/issues/714#issuecomment-302572305:0,Testability,test,test,0,test cepa4 tests detci's cisd vs fnocc's cisd already.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302572305
https://github.com/psi4/psi4/issues/714#issuecomment-302572305:11,Testability,test,tests,11,test cepa4 tests detci's cisd vs fnocc's cisd already.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302572305
https://github.com/psi4/psi4/issues/714#issuecomment-381769227:110,Testability,test,tests,110,👍 A much shorter version (since cc much less widespread than mp2) of https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat would be great! And feel free to do a better job reusing testing code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-381769227
https://github.com/psi4/psi4/issues/714#issuecomment-381769227:194,Testability,test,testing,194,👍 A much shorter version (since cc much less widespread than mp2) of https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat would be great! And feel free to do a better job reusing testing code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-381769227
https://github.com/psi4/psi4/issues/716#issuecomment-303173793:181,Availability,fault,fault,181,We can probably do away with all of the ULI stuff and move to `size_t` which should correctly map to `unsigned long long int` for 64 bit systems. Let us know about tracking the seg fault further... can you make a gist that reproduces this error?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-303173793
https://github.com/psi4/psi4/issues/716#issuecomment-303173793:239,Availability,error,error,239,We can probably do away with all of the ULI stuff and move to `size_t` which should correctly map to `unsigned long long int` for 64 bit systems. Let us know about tracking the seg fault further... can you make a gist that reproduces this error?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-303173793
https://github.com/psi4/psi4/issues/716#issuecomment-308200431:29,Availability,down,down,29,@rmcgibbo Did you track this down any further?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-308200431
https://github.com/psi4/psi4/issues/716#issuecomment-308205184:146,Integrability,wrap,wraps,146,"Yeah, the issue is that https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699` improperly wraps around when `memory_` < `2*two_memory`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/716#issuecomment-308205184
https://github.com/psi4/psi4/pull/718#issuecomment-303893263:62,Usability,feedback,feedback,62,I think this PR is ready to go now. Thanks in advance for any feedback.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303893263
https://github.com/psi4/psi4/pull/718#issuecomment-303894263:297,Availability,avail,available,297,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263
https://github.com/psi4/psi4/pull/718#issuecomment-303894263:172,Safety,sanity check,sanity check,172,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263
https://github.com/psi4/psi4/pull/718#issuecomment-303894263:132,Testability,test,tests,132,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263
https://github.com/psi4/psi4/pull/718#issuecomment-303894263:225,Testability,test,test,225,"Thanks for handling this, Ashutosh. Libtrans is showing its age, so it's great to see it being modernized. There are many CI and CC tests that don't run on Travis, so as a sanity check it'd be great if you could run the full test suite from the build directory: `ctest -j 12` if you have 12 cores available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303894263
https://github.com/psi4/psi4/pull/718#issuecomment-303895041:38,Testability,test,test,38,"Thanks for the suggestion, Andy. Some test cases do fail and I am going to let you know once I resolve the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895041
https://github.com/psi4/psi4/pull/718#issuecomment-303895469:86,Testability,test,tests,86,"Good idea, Andy. @ashutoshvt, just in case you haven't rebased recently, there were 5 tests in full tests that weren't passing for a while but are fixed now in upstream. So rebase before investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895469
https://github.com/psi4/psi4/pull/718#issuecomment-303895469:100,Testability,test,tests,100,"Good idea, Andy. @ashutoshvt, just in case you haven't rebased recently, there were 5 tests in full tests that weren't passing for a while but are fixed now in upstream. So rebase before investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895469
https://github.com/psi4/psi4/pull/718#issuecomment-303895491:134,Availability,failure,failures,134,"Have you pulled in master in the last day or so? @dgasmith committed some fixes for the full test suite, which corrected about 5 or 6 failures. As far as I know, the full suite should pass with that change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895491
https://github.com/psi4/psi4/pull/718#issuecomment-303895491:93,Testability,test,test,93,"Have you pulled in master in the last day or so? @dgasmith committed some fixes for the full test suite, which corrected about 5 or 6 failures. As far as I know, the full suite should pass with that change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895491
https://github.com/psi4/psi4/pull/718#issuecomment-303896265:115,Testability,test,tests,115,Indeed. Happily with the new `.devN` versioning scheme we're not guaranteeing that `master` is always passing full tests. (conda pkgs _are_ so guaranteed.) Glad all healed now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303896265
https://github.com/psi4/psi4/pull/718#issuecomment-303925660:138,Availability,failure,failure,138,All test cases pass now (using ctest). There wasn't any problem in the code. It was an issue in my perl environment settings which caused failure of some cc test cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303925660
https://github.com/psi4/psi4/pull/718#issuecomment-303925660:4,Testability,test,test,4,All test cases pass now (using ctest). There wasn't any problem in the code. It was an issue in my perl environment settings which caused failure of some cc test cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303925660
https://github.com/psi4/psi4/pull/718#issuecomment-303925660:157,Testability,test,test,157,All test cases pass now (using ctest). There wasn't any problem in the code. It was an issue in my perl environment settings which caused failure of some cc test cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303925660
https://github.com/psi4/psi4/issues/719#issuecomment-303779960:46,Safety,detect,detective,46,"Wow, thanks for the very detailed report, and detective work. Feel free to make changes if you'd like have have a shot at fixing this. If not, I'm going to be reworking the basis set parsing within the next week, to avoid all the duplication between Python and C++, so I can make the appropriate changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303779960
https://github.com/psi4/psi4/issues/719#issuecomment-303779960:216,Safety,avoid,avoid,216,"Wow, thanks for the very detailed report, and detective work. Feel free to make changes if you'd like have have a shot at fixing this. If not, I'm going to be reworking the basis set parsing within the next week, to avoid all the duplication between Python and C++, so I can make the appropriate changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303779960
https://github.com/psi4/psi4/issues/719#issuecomment-303780789:50,Availability,down,down,50,"I know it takes a long time to track these things down, so thank you very much for the effort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303780789
https://github.com/psi4/psi4/issues/719#issuecomment-303783502:436,Performance,load,loading,436,"One of the root causes for this that you might be able to clean up is that there are two different ""naming conventions"" for custom basis sets.; - The names used as keys in `qcdb.libmintsbasisset.basishorde` are `LOW` and `HIGH`.; - Once the basis set is instantiated, the `name()` of it in C++ is more like `file /path/to/sto-3g.gbs` or `file /path/to/cc-pvdz.gbs`. That's what's behind the trickiness here, because file 180 that we're loading back up contains the C++ name, but to retrive it from the horde, we need the other name. For built-in basis sets, this is done with [by just some fragile string manipulations](https://github.com/psi4/psi4/blob/9d1564e67837bbf7f348c1600aa2c353457671ec/psi4/driver/procrouting/proc.py#L1294-L1295), but this kind of trick doesn't work for custom basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/719#issuecomment-303783502
https://github.com/psi4/psi4/pull/720#issuecomment-303909419:77,Availability,avail,available,77,"@loriab, I am excited to test this feature more extensively. When it will be available in the conda build can you please let me know?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/720#issuecomment-303909419
https://github.com/psi4/psi4/pull/720#issuecomment-303909419:25,Testability,test,test,25,"@loriab, I am excited to test this feature more extensively. When it will be available in the conda build can you please let me know?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/720#issuecomment-303909419
https://github.com/psi4/psi4/pull/721#issuecomment-304083044:352,Testability,test,tests,352,"Is this something I broke?. ```; $ python ../.scripts/travis_print_failing.py; <<< Failing outputs follow. >>>; python-mints9 failed. Here is the output:; Traceback (most recent call last):; File ""../.scripts/travis_print_failing.py"", line 32, in <module>; with open(badoutfile, 'r') as ofile:; FileNotFoundError: [Errno 2] No such file or directory: 'tests/python-mints9/output.dat'; The command ""python ../.scripts/travis_print_failing.py"" exited with 1.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304083044
https://github.com/psi4/psi4/pull/721#issuecomment-304134806:160,Availability,error,error,160,"@rmcgibbo I can't see why anything you have done would cause the output file to disappear, it's more likely that some changes you made have caused that test to error out before the output file was created. . Can you run mints9 locally and see what it spits out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304134806
https://github.com/psi4/psi4/pull/721#issuecomment-304134806:152,Testability,test,test,152,"@rmcgibbo I can't see why anything you have done would cause the output file to disappear, it's more likely that some changes you made have caused that test to error out before the output file was created. . Can you run mints9 locally and see what it spits out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304134806
https://github.com/psi4/psi4/pull/721#issuecomment-304401397:89,Testability,test,test,89,"I'm not sure why it caused the output file to disappear, but there was an actual failing test case that i could see when running locally, which should be fixed now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304401397
https://github.com/psi4/psi4/pull/721#issuecomment-304529137:36,Deployability,configurat,configurations,36,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137
https://github.com/psi4/psi4/pull/721#issuecomment-304529137:36,Modifiability,config,configurations,36,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137
https://github.com/psi4/psi4/pull/721#issuecomment-304529137:67,Safety,timeout,timeout,67,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137
https://github.com/psi4/psi4/pull/721#issuecomment-304529137:31,Testability,test,test,31,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137
https://github.com/psi4/psi4/pull/721#issuecomment-305057458:445,Testability,test,test,445,"Thanks again for looking into this, and sorry I've not been weighing in at all the last few days - busy with a couple of other projects. I'll give it a good look over tonight when I get a few moments to give it the attention it deserves, but it looks great at first glance. I'll be working on trying to clean up the basis set parsing stuff next week, so I'd like this to be pulled in before I work on that, especially with your super useful new test case. I think @loriab and @dgasmith should also review when they get chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305057458
https://github.com/psi4/psi4/pull/721#issuecomment-305325000:86,Availability,ping,ping,86,"@andysim: I may have some extra bandwidth to assist with the basis set cleanup if you ping me at that time. Improving support for ECPs is also something I'm particularly interested in, and a place where the C++- and Python-side basis set machinery has recently slightly diverged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305325000
https://github.com/psi4/psi4/pull/721#issuecomment-305336864:995,Integrability,rout,routines,995,"@rmcgibbo, that'd be excellent. I'll make my changes on an open PR that I'll tag you in so you can see them, even if you don't have time to chime in. The old Psi4 approach was to parse and store basis sets C++ side. Then the parsing and storage (GShell, ShellInfo and the like) got copied to Python, with greatly improved parsing / file handling. I'd like to now get rid of the resulting duplication by having only parsing / filesystem code in python, and handing some hardwired data structure to the C++ constructor for building / storage. Then, I think the basis set storage (unused, AFAIK) in Python should be nuked, as should the parsing stuff in C++. It should make the whole process less confusing, I hope. I also want to move the ECP basis set to a member of regular Basis sets; the janky setup right now was done by me, mostly to test the integrals. Now we have the right answer, it's time to clean things up -- especially the multiple return values in the python basis set construction routines. Any thoughts / suggestions you have are most welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305336864
https://github.com/psi4/psi4/pull/721#issuecomment-305336864:838,Testability,test,test,838,"@rmcgibbo, that'd be excellent. I'll make my changes on an open PR that I'll tag you in so you can see them, even if you don't have time to chime in. The old Psi4 approach was to parse and store basis sets C++ side. Then the parsing and storage (GShell, ShellInfo and the like) got copied to Python, with greatly improved parsing / file handling. I'd like to now get rid of the resulting duplication by having only parsing / filesystem code in python, and handing some hardwired data structure to the C++ constructor for building / storage. Then, I think the basis set storage (unused, AFAIK) in Python should be nuked, as should the parsing stuff in C++. It should make the whole process less confusing, I hope. I also want to move the ECP basis set to a member of regular Basis sets; the janky setup right now was done by me, mostly to test the integrals. Now we have the right answer, it's time to clean things up -- especially the multiple return values in the python basis set construction routines. Any thoughts / suggestions you have are most welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305336864
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:1250,Availability,Error,Error,1250,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:310,Deployability,Install,Install,310,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:481,Deployability,Install,Install,481,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:693,Deployability,Install,Install,693,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:878,Deployability,Install,Install,878,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:1073,Deployability,Install,Install,1073,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:531,Energy Efficiency,energy,energy,531,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:557,Energy Efficiency,energy,energy,557,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304462078:119,Performance,perform,performance,119,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:434,Deployability,Update,Update,434,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:228,Energy Efficiency,energy,energy,228,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:397,Energy Efficiency,energy,energy,397,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:441,Energy Efficiency,energy,energy,441,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:598,Energy Efficiency,ENERGY,ENERGY,598,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:622,Energy Efficiency,energy,energy,622,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:681,Energy Efficiency,Energy,Energy,681,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:162,Testability,test,test,162,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304474246:262,Testability,test,test,262,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246
https://github.com/psi4/psi4/pull/722#issuecomment-304475473:239,Availability,redundant,redundant,239,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473
https://github.com/psi4/psi4/pull/722#issuecomment-304475473:239,Safety,redund,redundant,239,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473
https://github.com/psi4/psi4/pull/722#issuecomment-304475473:127,Security,access,access,127,I just fixed the issue with xrange and the frozen MOs. Will go over some of @dgasmith's comments soon. I just realized I could access the spaces from ciwfn instead of mcscf_obj. I'll remove the python bindings that I added since they seem redundant now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304475473
https://github.com/psi4/psi4/pull/722#issuecomment-304537094:629,Security,access,access,629,"I pushed a fix to the molden1 test. The issue with the dipole moment is more complex. I think the OPDM and the MOs are certainly not consistent. . One solution would be to converge the orbitals and then do the following:; - transform orbs. to either canonical or natural basis; - transform integrals; - solve the CI problem; - compute 1/2-RDMs. @dgasmith: since you are more familiar with the mcscf code, can you think of a place where we can put these orbital transformations (semi/nat) before the computation of the OPDM? Better, if you have a few minutes could you try to implement the above code?. Also, is there a way I can access the full Fock matrix with frozen docc and virt blocks? This is of course irrelevant now, but I am thinking that in the future if we try to do gradients of MRPTs it might be better if we have all blocks diagonalize the Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304537094
https://github.com/psi4/psi4/pull/722#issuecomment-304537094:30,Testability,test,test,30,"I pushed a fix to the molden1 test. The issue with the dipole moment is more complex. I think the OPDM and the MOs are certainly not consistent. . One solution would be to converge the orbitals and then do the following:; - transform orbs. to either canonical or natural basis; - transform integrals; - solve the CI problem; - compute 1/2-RDMs. @dgasmith: since you are more familiar with the mcscf code, can you think of a place where we can put these orbital transformations (semi/nat) before the computation of the OPDM? Better, if you have a few minutes could you try to implement the above code?. Also, is there a way I can access the full Fock matrix with frozen docc and virt blocks? This is of course irrelevant now, but I am thinking that in the future if we try to do gradients of MRPTs it might be better if we have all blocks diagonalize the Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304537094
https://github.com/psi4/psi4/pull/722#issuecomment-304539496:390,Deployability,update,update,390,To do the above you just need to copy [these lines.](https://github.com/fevangelista/psi4/blob/aac087f1c604787c1dd85d42bf2fcdc366ae858e/psi4/driver/procrouting/mcscf/mcscf_solver.py#L201-L210). Looking at the loops im not entirely sure that we can avoid another CI iteration/density build. . For better or worse the `SOSCF` module by and large does not handle frozen spaces. When you call `update` you can probably just set the `Cocc` and `Cvir` spaces to span the full space. The only catch is that you would need to turn off the tech that tries to save the frozen Fock and inactive Fock matrix when it is formed in other places. This would be the functions `set_AO_IFock` and `set_frozen_orbitals` and the booleans that they set. Maybe you want an option like `clean_focks` or some-such that will reset these booleans. The code will compute these quantities itself and the `Cocc` expansion to also include frozen orbitals should just work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304539496
https://github.com/psi4/psi4/pull/722#issuecomment-304539496:248,Safety,avoid,avoid,248,To do the above you just need to copy [these lines.](https://github.com/fevangelista/psi4/blob/aac087f1c604787c1dd85d42bf2fcdc366ae858e/psi4/driver/procrouting/mcscf/mcscf_solver.py#L201-L210). Looking at the loops im not entirely sure that we can avoid another CI iteration/density build. . For better or worse the `SOSCF` module by and large does not handle frozen spaces. When you call `update` you can probably just set the `Cocc` and `Cvir` spaces to span the full space. The only catch is that you would need to turn off the tech that tries to save the frozen Fock and inactive Fock matrix when it is formed in other places. This would be the functions `set_AO_IFock` and `set_frozen_orbitals` and the booleans that they set. Maybe you want an option like `clean_focks` or some-such that will reset these booleans. The code will compute these quantities itself and the `Cocc` expansion to also include frozen orbitals should just work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304539496
https://github.com/psi4/psi4/pull/722#issuecomment-304748159:54,Energy Efficiency,energy,energy,54,"One more try... The two RASSCF tests fail because the energy is not invariant with respect to arbitrary rotations of active orbitals. I'll put an if statement that checks if a calculation type is RASSCF. The DFCASSCF test was affected by the new algorithm to compute CI natural orbitals. The new one does not scramble different orbital classes, which is what I suspect happened with the old code. All the entries in the `nov0` array are the same but are sorted differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304748159
https://github.com/psi4/psi4/pull/722#issuecomment-304748159:31,Testability,test,tests,31,"One more try... The two RASSCF tests fail because the energy is not invariant with respect to arbitrary rotations of active orbitals. I'll put an if statement that checks if a calculation type is RASSCF. The DFCASSCF test was affected by the new algorithm to compute CI natural orbitals. The new one does not scramble different orbital classes, which is what I suspect happened with the old code. All the entries in the `nov0` array are the same but are sorted differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304748159
https://github.com/psi4/psi4/pull/722#issuecomment-304748159:217,Testability,test,test,217,"One more try... The two RASSCF tests fail because the energy is not invariant with respect to arbitrary rotations of active orbitals. I'll put an if statement that checks if a calculation type is RASSCF. The DFCASSCF test was affected by the new algorithm to compute CI natural orbitals. The new one does not scramble different orbital classes, which is what I suspect happened with the old code. All the entries in the `nov0` array are the same but are sorted differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304748159
https://github.com/psi4/psi4/pull/722#issuecomment-304900748:129,Testability,test,test,129,@fevangelista If its Travis thats failing you can go in and restart individual ones on their website instead of retriggering the test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304900748
https://github.com/psi4/psi4/pull/722#issuecomment-305353983:66,Testability,test,tests,66,Just cleaned from obsolete code/comments. Ready to go when passes tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305353983
https://github.com/psi4/psi4/pull/722#issuecomment-305376168:867,Deployability,integrat,integrated,867,"I do like the ability to do slices (and it's the correct name IMO). Perhaps if View is not used much we can just cut it out and promote the Slice class which is probably ultimately more extensible. . Sorry to grab you for more changes, but you keep bringing up good ones :). -Daniel Smith; Sent from my iPhone. . > On May 31, 2017, at 22:55, fevangelista <notifications@github.com> wrote:; > ; > @fevangelista commented on this pull request.; > ; > In psi4/src/psi4/libmints/matrix.cc:; > ; > > + double value = block->get(h,p,q);; > + set(h,p + rows_start[h],q + cols_start[h],value);; > + }; > + }; > + }; > +}; > +; > +/**; > + * Set a matrix block; > + *; > + * @param rows Rows slice; > + * @param cols Columns slice; > + * @return SharedMatrix object; > + */; > +void set_block(Slice rows,Slice cols,SharedMatrix block);; > +; > For what I can see View was not integrated extensively and it is used only in exactly three lines of psi4. View is really a shared pointer plus a set of start/end Dimension objects. It uses pointers to store what are dimension-like objects and should be modernized. Slice here is just a set of start/end Dimension objects. Indeed I think it might be a good idea to write View using Slice (perhaps my choice of class name is not idea, we could also call it DimensionRange, Range, etc.). So I think this is not a case of repetition.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305376168
https://github.com/psi4/psi4/pull/722#issuecomment-305376168:867,Integrability,integrat,integrated,867,"I do like the ability to do slices (and it's the correct name IMO). Perhaps if View is not used much we can just cut it out and promote the Slice class which is probably ultimately more extensible. . Sorry to grab you for more changes, but you keep bringing up good ones :). -Daniel Smith; Sent from my iPhone. . > On May 31, 2017, at 22:55, fevangelista <notifications@github.com> wrote:; > ; > @fevangelista commented on this pull request.; > ; > In psi4/src/psi4/libmints/matrix.cc:; > ; > > + double value = block->get(h,p,q);; > + set(h,p + rows_start[h],q + cols_start[h],value);; > + }; > + }; > + }; > +}; > +; > +/**; > + * Set a matrix block; > + *; > + * @param rows Rows slice; > + * @param cols Columns slice; > + * @return SharedMatrix object; > + */; > +void set_block(Slice rows,Slice cols,SharedMatrix block);; > +; > For what I can see View was not integrated extensively and it is used only in exactly three lines of psi4. View is really a shared pointer plus a set of start/end Dimension objects. It uses pointers to store what are dimension-like objects and should be modernized. Slice here is just a set of start/end Dimension objects. Indeed I think it might be a good idea to write View using Slice (perhaps my choice of class name is not idea, we could also call it DimensionRange, Range, etc.). So I think this is not a case of repetition.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305376168
https://github.com/psi4/psi4/pull/722#issuecomment-305670159:101,Testability,test,tests,101,"@dgasmith: Yes this is ready to go. I just pushed two minor commits that clean existing code so once tests past all can be merged. I think there is potentially more we can do with Slices (merging, getting Slices from MO spaces, which would simplify even further some of the get/set_ commands) but I think that needs some experimentation. Thanks for all the useful feedback!; This also closes issue #723.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305670159
https://github.com/psi4/psi4/pull/722#issuecomment-305670159:240,Usability,simpl,simplify,240,"@dgasmith: Yes this is ready to go. I just pushed two minor commits that clean existing code so once tests past all can be merged. I think there is potentially more we can do with Slices (merging, getting Slices from MO spaces, which would simplify even further some of the get/set_ commands) but I think that needs some experimentation. Thanks for all the useful feedback!; This also closes issue #723.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305670159
https://github.com/psi4/psi4/pull/722#issuecomment-305670159:364,Usability,feedback,feedback,364,"@dgasmith: Yes this is ready to go. I just pushed two minor commits that clean existing code so once tests past all can be merged. I think there is potentially more we can do with Slices (merging, getting Slices from MO spaces, which would simplify even further some of the get/set_ commands) but I think that needs some experimentation. Thanks for all the useful feedback!; This also closes issue #723.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305670159
https://github.com/psi4/psi4/pull/725#issuecomment-305321675:89,Safety,avoid,avoid,89,"Ah, of course. I forgot that was already in upstream. Btw, in general if anyone wants to avoid ""undefined"" version, just `git fetch upstream` to get the tags. Undefined version doesn't hurt a thing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/725#issuecomment-305321675
https://github.com/psi4/psi4/issues/727#issuecomment-305643837:31,Deployability,update,update,31,"Thanks! Could you instead just update the files tight-cc-pwcvXz.gbs and tight-cc-pwcvXz-ri.gbs that live [here](https://github.com/psi4/psi4/tree/master/psi4/share/psi4/basis/primitives)? Those are the ""w-core"" and ""w-core-ri"" that get composed (e.g., [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L336-L337) and [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L456-L457)) into the actual basis set files to keep everything consistent. I'll run the scripts afterward to do the composing, so don't feel you need to follow the README in primitives/ . Let me know if you've any questions – I wasn't an experienced scripter when I put this together. On Andy's comments, any comment that you add about the origin to the top of the primitives/*.gbs files will get carried through to the final basis set file. And you're not (I think) creating new basis sets, just adding elements to existing basis sets, so there shouldn't be any need to set fitting defaults for orbital bases. @susilehtola, I am exceedingly grateful for EMSL. But if I trusted their internal consistency on basis sets that should contain the same info, I wouldn't have the crazy basis file summing scheme in Psi4. Admittedly, I haven't reexamined EMSL in a few years.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305643837
https://github.com/psi4/psi4/issues/727#issuecomment-305644835:359,Deployability,update,update,359,"Awesome. Thanks for all the info. I hadn't realized the ""main"" user-facing basis set files were formed by scripts that composed other files, so I wouldn't have done this properly had I not asked :). I'll do this tomorrow. Sent from my iPhone. > On Jun 1, 2017, at 7:00 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Thanks! Could you instead just update the files tight-cc-pwcvXz.gbs and tight-cc-pwcvXz-ri.gbs that live here? Those are the ""w-core"" and ""w-core-ri"" that get composed (e.g., here and here) into the actual basis set files to keep everything consistent. I'll run the scripts afterward to do the composing, so don't feel you need to follow the README in primitives/ . Let me know if you've any questions – I wasn't an experienced scripter when I put this together.; > ; > On Andy's comments, any comment that you add about the origin to the top of the primitives/*.gbs files will get carried through to the final basis set file. And you're not (I think) creating new basis sets, just adding elements to existing basis sets, so there shouldn't be any need to set fitting defaults for orbital bases.; > ; > @susilehtola, I am exceedingly grateful for EMSL. But if I trusted their internal consistency on basis sets that should contain the same info, I wouldn't have the crazy basis file summing scheme in Psi4. Admittedly, I haven't reexamined EMSL in a few years.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305644835
https://github.com/psi4/psi4/issues/727#issuecomment-305862396:466,Deployability,update,updated,466,"@loriab: Unfortunately, I don't think it's quite as simple as updating only the `tight-cc-pwcvXz.gbs` and `tight-cc-pwcvXz-ri.gbs` in the `primatives/`. The Psi4 `primatives/basis-cc-pvXz.gbs` files also disagree in a couple cases for these elements with the cc-pVXZ basis sets from Peterson's website. For Lithium cc-pVDZ, for example, it looks like we have basis from `T.H. Dunning, Jr. J. Chem. Phys. 90, 1007 (1989)`, but the higher angular momentum shells were updated in `Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).`. So, in order to add the cc-pwCVXZ bases for Li, Be, Na, and Mg, I'm going to need the tight functions, but also update the `primatives/basis-cc-pvXz.gbs` files, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305862396
https://github.com/psi4/psi4/issues/727#issuecomment-305862396:694,Deployability,update,update,694,"@loriab: Unfortunately, I don't think it's quite as simple as updating only the `tight-cc-pwcvXz.gbs` and `tight-cc-pwcvXz-ri.gbs` in the `primatives/`. The Psi4 `primatives/basis-cc-pvXz.gbs` files also disagree in a couple cases for these elements with the cc-pVXZ basis sets from Peterson's website. For Lithium cc-pVDZ, for example, it looks like we have basis from `T.H. Dunning, Jr. J. Chem. Phys. 90, 1007 (1989)`, but the higher angular momentum shells were updated in `Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).`. So, in order to add the cc-pwCVXZ bases for Li, Be, Na, and Mg, I'm going to need the tight functions, but also update the `primatives/basis-cc-pvXz.gbs` files, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305862396
https://github.com/psi4/psi4/issues/727#issuecomment-305862396:52,Usability,simpl,simple,52,"@loriab: Unfortunately, I don't think it's quite as simple as updating only the `tight-cc-pwcvXz.gbs` and `tight-cc-pwcvXz-ri.gbs` in the `primatives/`. The Psi4 `primatives/basis-cc-pvXz.gbs` files also disagree in a couple cases for these elements with the cc-pVXZ basis sets from Peterson's website. For Lithium cc-pVDZ, for example, it looks like we have basis from `T.H. Dunning, Jr. J. Chem. Phys. 90, 1007 (1989)`, but the higher angular momentum shells were updated in `Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).`. So, in order to add the cc-pwCVXZ bases for Li, Be, Na, and Mg, I'm going to need the tight functions, but also update the `primatives/basis-cc-pvXz.gbs` files, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305862396
https://github.com/psi4/psi4/issues/727#issuecomment-305864188:246,Deployability,update,update,246,"So the fundamental basis sets cc-pvXz need updating for those elements b/c the definitions changed (for some AM) in a later paper? So long as the `cc-pwCVXZ = cc-pVXZ + w-core` and others arithmetic in the NOTES still holds, sounds good to me to update both sets of files. And thanks for checking consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305864188
https://github.com/psi4/psi4/pull/728#issuecomment-306291837:284,Integrability,contract,contractions,284,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837
https://github.com/psi4/psi4/pull/728#issuecomment-306291837:343,Integrability,contract,contractions,343,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837
https://github.com/psi4/psi4/pull/728#issuecomment-306291837:415,Integrability,depend,dependence,415,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837
https://github.com/psi4/psi4/pull/728#issuecomment-306291837:591,Performance,optimiz,optimized,591,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837
https://github.com/psi4/psi4/pull/728#issuecomment-306291837:397,Safety,avoid,avoid,397,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837
https://github.com/psi4/psi4/pull/728#issuecomment-306291837:216,Usability,simpl,simply,216,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:203,Availability,redundant,redundant,203,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:59,Integrability,contract,contraction,59,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:353,Integrability,contract,contraction,353,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:49,Performance,optimiz,optimized,49,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:283,Performance,perform,performance,283,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:365,Performance,optimiz,optimization,365,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307875382:203,Safety,redund,redundant,203,"It seems like in a couple of cases we go from an optimized contraction to one that is not. For example, here a s-gaussian with exponent 0.0230700 was added to the core orbital. However, this function is redundant because it is already included in the basis. This introduces a slight performance penalty when computing integrals. Do we have a policy for contraction optimization?. ```; -Na 0 ; -S 11 1.00; - 31700.0000000 0.458878D-03 ; - 4755.0000000 0.355070D-02 ; - 1082.0000000 0.182618D-01 ; - 306.4000000 0.716650D-01 ; - 99.5300000 0.212346D+00 ; - 35.4200000 0.416203D+00 ; - 13.3000000 0.373020D+00 ; - 4.3920000 0.625054D-01 ; - 1.6760000 -0.624532D-02 ; - 0.5889000 0.243374D-02 ; - 0.0564000 -0.442381D-03 ; ```. ```; +Na 0; +S 12 1.00; + 31700.0000000 4.5887800e-04; + 4755.0000000 3.5507000e-03; + 1082.0000000 1.8261800e-02; + 306.4000000 7.1665000e-02; + 99.5300000 2.1234600e-01; + 35.4200000 4.1620300e-01; + 13.3000000 3.7302000e-01; + 4.3920000 6.2505400e-02; + 1.6760000 -6.2453200e-03; + 0.5889000 2.4337400e-03; + 0.0564000 -4.4238100e-04; + 0.0230700 2.4192400e-04. S 1 1.00; - 0.0230700 1.0000000 ; + 0.0230700 1.0000000e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307875382
https://github.com/psi4/psi4/pull/728#issuecomment-307878490:83,Integrability,contract,contractions,83,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490
https://github.com/psi4/psi4/pull/728#issuecomment-307878490:308,Integrability,contract,contractions,308,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490
https://github.com/psi4/psi4/pull/728#issuecomment-307878490:73,Performance,optimiz,optimized,73,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490
https://github.com/psi4/psi4/pull/728#issuecomment-307878490:299,Performance,optimiz,optimize,299,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490
https://github.com/psi4/psi4/pull/728#issuecomment-307878490:10,Usability,clear,clear,10,"We have a clear policy (at least for what was originally added) of using optimized contractions from EMSL. From [Kirk Peterson's website](http://tyr0.chem.wsu.edu/~kipeters/basis.html), we don't have that option, so we get what he supplies. Not sure what to do about it, unless implement a fn to re-optimize contractions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307878490
https://github.com/psi4/psi4/pull/728#issuecomment-307880460:229,Integrability,contract,contractions,229,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460
https://github.com/psi4/psi4/pull/728#issuecomment-307880460:464,Integrability,contract,contractions,464,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460
https://github.com/psi4/psi4/pull/728#issuecomment-307880460:219,Performance,optimiz,optimized,219,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460
https://github.com/psi4/psi4/pull/728#issuecomment-307880460:455,Performance,optimiz,optimize,455,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460
https://github.com/psi4/psi4/pull/728#issuecomment-307880460:153,Usability,clear,clear,153,"Perhaps Kirk would be willing to add this feature for us. On Mon, Jun 12, 2017 at 2:32 PM, Lori A. Burns <notifications@github.com>; wrote:. > We have a clear policy (at least for what was originally added) of using; > optimized contractions from EMSL. From Kirk Peterson's website; > <http://tyr0.chem.wsu.edu/%7Ekipeters/basis.html>, we don't have that; > option, so we get what he supplies. Not sure what to do about it, unless; > implement a fn to re-optimize contractions.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/728#issuecomment-307878490>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdij1x5IEyCPr7tRTjpEHhtNZnbNuks5sDYQzgaJpZM4NuweP>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307880460
https://github.com/psi4/psi4/pull/728#issuecomment-307915395:121,Integrability,contract,contractions,121,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395
https://github.com/psi4/psi4/pull/728#issuecomment-307915395:45,Performance,optimiz,optimization,45,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395
https://github.com/psi4/psi4/pull/728#issuecomment-307915395:75,Usability,simpl,simple,75,"Looking at the EMSL outputs with and without optimization, it looks like a simple case of ripping out any functions from contractions that are already present as standalone functions. This should be really easy to put together in Python if we need it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307915395
https://github.com/psi4/psi4/pull/728#issuecomment-307928747:161,Integrability,contract,contractions,161,"Admittedly I can't support this (I see what Andy sees), but I think there are many cases where the coefficients change between optimized and unoptimized general contractions. Also, Distelli just doesn't acknowledge this PR. It's built others recently, so I don't know what its problem is. Can override again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307928747
https://github.com/psi4/psi4/pull/728#issuecomment-307928747:127,Performance,optimiz,optimized,127,"Admittedly I can't support this (I see what Andy sees), but I think there are many cases where the coefficients change between optimized and unoptimized general contractions. Also, Distelli just doesn't acknowledge this PR. It's built others recently, so I don't know what its problem is. Can override again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307928747
https://github.com/psi4/psi4/pull/728#issuecomment-308221334:788,Energy Efficiency,energy,energy,788,"Regarding the PTE test case, I get the following `Integral setup` running the code on `master`:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 50; Number of atomic orbitals: 19; Number of basis functions: 18; ; Integral cutoff 1.00e-12; Number of threads: 1; ```; while this one with the code on this PR:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 55; Number of atomic orbitals: 19; Number of basis functions: 18; Integral cutoff 1.00e-12; Number of threads: 1; ```; The SCF results are the same within 10^-11 The CC results are different already at the first iteration of the T amplitude solver, _i.e._ the MP2 correlation energy. This despite the fact that the SCF energies reported by the two versions at the end of cctransort are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-308221334
https://github.com/psi4/psi4/pull/728#issuecomment-308221334:18,Testability,test,test,18,"Regarding the PTE test case, I get the following `Integral setup` running the code on `master`:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 50; Number of atomic orbitals: 19; Number of basis functions: 18; ; Integral cutoff 1.00e-12; Number of threads: 1; ```; while this one with the code on this PR:; ```; Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 8; Number of primitives: 55; Number of atomic orbitals: 19; Number of basis functions: 18; Integral cutoff 1.00e-12; Number of threads: 1; ```; The SCF results are the same within 10^-11 The CC results are different already at the first iteration of the T amplitude solver, _i.e._ the MP2 correlation energy. This despite the fact that the SCF energies reported by the two versions at the end of cctransort are the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-308221334
https://github.com/psi4/psi4/pull/728#issuecomment-308229047:162,Energy Efficiency,energy,energy,162,"@robertodr: I think the only real difference in the PR for the cc-pVDZ basis is a change in the exponent of a d function. No d orbitals are occupied in Mg, so an energy difference would show up only in the correlation energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-308229047
https://github.com/psi4/psi4/pull/728#issuecomment-308229047:218,Energy Efficiency,energy,energy,218,"@robertodr: I think the only real difference in the PR for the cc-pVDZ basis is a change in the exponent of a d function. No d orbitals are occupied in Mg, so an energy difference would show up only in the correlation energy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-308229047
https://github.com/psi4/psi4/pull/729#issuecomment-306576172:23,Usability,clear,clearer,23,"Yes, it is correct and clearer. I am going to add that now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/729#issuecomment-306576172
https://github.com/psi4/psi4/pull/729#issuecomment-306951600:52,Testability,test,tests,52,"@dgasmith yup, its ready to go. I ran ctest and all tests passed. I will go ahead and rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/729#issuecomment-306951600
https://github.com/psi4/psi4/issues/731#issuecomment-306527489:66,Availability,error,error,66,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489
https://github.com/psi4/psi4/issues/731#issuecomment-306527489:72,Integrability,message,messages,72,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489
https://github.com/psi4/psi4/issues/731#issuecomment-306527489:114,Usability,simpl,simplify,114,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489
https://github.com/psi4/psi4/issues/731#issuecomment-410339120:65,Security,Validat,ValidationError,65,"After #953 and py-side molecule parsing, this magnesium returns `ValidationError: First line must be Cartesian or single atom.`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-410339120
https://github.com/psi4/psi4/pull/734#issuecomment-307941227:173,Security,hash,hashes,173,"There are further changes that I'd like to make (getting rid of the extra basis set constructor that extracts a single atom basis, in favor of a member to directly get atom hashes) but extra cleanup will be determined by whether we move to py-side construction. This is a decent start that I think we can use as a basis for further debate, once #736 is also merged. Therefore, I think this one's ready to review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307941227
https://github.com/psi4/psi4/pull/734#issuecomment-307963177:122,Deployability,update,updated,122,"One more thing, should [these names](https://github.com/andysim/psi4/blob/basisset/psi4/src/export_mints.cc#L890-L891) be updated now that BasisSet is unified? And is it clear where to get QC-frozen core vs. ECP-frozen core?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307963177
https://github.com/psi4/psi4/pull/734#issuecomment-307963177:170,Usability,clear,clear,170,"One more thing, should [these names](https://github.com/andysim/psi4/blob/basisset/psi4/src/export_mints.cc#L890-L891) be updated now that BasisSet is unified? And is it clear where to get QC-frozen core vs. ECP-frozen core?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307963177
https://github.com/psi4/psi4/pull/734#issuecomment-307966347:162,Deployability,update,update,162,"I think the name `ncore` is ok, since it's still asking for the number of core electrons (maybe `n_ecp_core` is more explicit?). The docstring certainly needs an update - good catch! If you have a suggestion on `ncore` nomenclature, fire away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307966347
https://github.com/psi4/psi4/pull/734#issuecomment-307966763:123,Usability,clear,clear,123,"I slightly prefer `n_ecp_core` in case a user thinks `n_core` valid for cc-pwCVXZ, but I'm fine as-is as long as docstring clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307966763
https://github.com/psi4/psi4/pull/735#issuecomment-307127282:50,Modifiability,plugin,plugin,50,Yay! Should the headers be removed from the ambit plugin template?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/735#issuecomment-307127282
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:116,Energy Efficiency,charge,charges,116,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1534,Integrability,interface,interface,1534,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1569,Integrability,interface,interface,1569,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1609,Integrability,rout,routines,1609,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:349,Modifiability,layers,layers,349,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:817,Safety,safe,safe,817,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-307629750:1710,Security,access,accessors,1710,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750
https://github.com/psi4/psi4/pull/736#issuecomment-308591444:26,Deployability,update,updates,26,Pushed out a new round of updates mostly removing more pybind11 from the core `size_t`ifying the code base. Also merged through @andysim ECP Basis changes without too much issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-308591444
https://github.com/psi4/psi4/pull/736#issuecomment-309296744:135,Security,expose,exposed,135,"Couldn't see anything obviously wrong on first pass through. I wonder if the EXTERN stuff is best handled by having a C++ class that's exposed using pybind11, so that it can be constructed py-side but easily stored in wfn. That way we wouldn't be passing a py object around. This is really great stuff - some long overdue cleanup and standardization in here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-309296744
https://github.com/psi4/psi4/pull/736#issuecomment-309297476:158,Integrability,depend,dependency,158,"Indeed, these are great improvements. Only the CheMPS2 print handling needs fixing before merging, I think. The PR has also greatly deranged the CMake module dependency chain, so `make -j8` fails over and over (but restartable). That needs to be handled soon but not necessarily immediately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-309297476
https://github.com/psi4/psi4/pull/737#issuecomment-312405533:35,Availability,down,downcast,35,"Hmm, tricky issues from Travis. We downcast to Wavefunction so we loose things like `cphf_solve` and `semicanonicalize` and we need to remove symmetry from not only the orbital, but also the density fitted basis sets as well. We may need to add `c1_deep_copy` to the SCF-level Wavefunctions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-312405533
https://github.com/psi4/psi4/pull/737#issuecomment-312405839:188,Safety,safe,safe,188,"We were thinking that the build_scf_wavefunction auxiliary basissets had already been consumed (except maybe decon) and the post-scf aux ones hadn't been added to Wfn. Thought we might be safe for the very particular location that c1_deep_copy is called at present, though, very true, not in general. Hopefully BasisSet will be copyable and/or rebuildable by then. Or our thing may be all wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-312405839
https://github.com/psi4/psi4/pull/737#issuecomment-343598455:13,Testability,test,test,13,"Ran complete test suite, looks ok. Ready to go. Did not have time to address all previous comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/737#issuecomment-343598455
https://github.com/psi4/psi4/issues/738#issuecomment-307585298:69,Testability,test,test,69,"Ah, in that case, perhaps we should remove at least the CUHF singlet test from scf5, if it is known to be nondeterministic?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585298
https://github.com/psi4/psi4/issues/738#issuecomment-307585640:658,Deployability,configurat,configuration,658,"I looked into this recently. The issue is that O2 has two degenerate orbitals. The issue begins when psi4 guesses the correct occupation. To determine which orbital is occupied we sort the orbitals and then populate them with electrons. If the alpha and beta orbitals end up being sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degenerac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640
https://github.com/psi4/psi4/issues/738#issuecomment-307585640:658,Modifiability,config,configuration,658,"I looked into this recently. The issue is that O2 has two degenerate orbitals. The issue begins when psi4 guesses the correct occupation. To determine which orbital is occupied we sort the orbitals and then populate them with electrons. If the alpha and beta orbitals end up being sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degenerac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640
https://github.com/psi4/psi4/issues/738#issuecomment-307585640:2039,Testability,test,test,2039,"eing sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degeneracies. In my opinion this is not a good test case. Perhaps it should be replaced with one where there is no issue with exactly degenerate orbitals. The puzzling aspect is that at one point during my debugging if I printed more information I was always getting the right answer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640
https://github.com/psi4/psi4/issues/738#issuecomment-307586031:46,Usability,clear,clear,46,"Just realized that the debug info is not very clear. The numbers printed are (MO index in irrep, orbital count, irrep). As you can see the last alpha/beta orbitals are different in the two runs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307586031
https://github.com/psi4/psi4/issues/738#issuecomment-307631551:427,Availability,error,errors,427,"Kind of an interesting edge case, since the SOCC orbitals area always assumed to be of the same spin the sorting breaks the multiplicity. This could be widely considered a ""bug"" as the sorting *should* be aware of this in a perfect world. At the same time, CUHF for closed shell doesn't make a ton of sense so perhaps the other way to do it is have CUHF complain if a closed shell molecule is given? We can likely find similar errors when running UHF in singlet mode. Some logic to switch between RHF and UHF can be added if a user doesnt specify a reference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307631551
https://github.com/psi4/psi4/issues/738#issuecomment-307631551:473,Testability,log,logic,473,"Kind of an interesting edge case, since the SOCC orbitals area always assumed to be of the same spin the sorting breaks the multiplicity. This could be widely considered a ""bug"" as the sorting *should* be aware of this in a perfect world. At the same time, CUHF for closed shell doesn't make a ton of sense so perhaps the other way to do it is have CUHF complain if a closed shell molecule is given? We can likely find similar errors when running UHF in singlet mode. Some logic to switch between RHF and UHF can be added if a user doesnt specify a reference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307631551
https://github.com/psi4/psi4/issues/738#issuecomment-308200161:299,Deployability,update,update,299,"For this I plan on setting the `DOCC` keyword in the test case and then printing a warning in `UHF` and `CUHF` that if a singlet is requested these things *can* go wonky in the presence of degeneracies. There are better solutions that range greatly in time, but I think this at least covers it. Ill update #736 unless anyone has objections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-308200161
https://github.com/psi4/psi4/issues/738#issuecomment-308200161:53,Testability,test,test,53,"For this I plan on setting the `DOCC` keyword in the test case and then printing a warning in `UHF` and `CUHF` that if a singlet is requested these things *can* go wonky in the presence of degeneracies. There are better solutions that range greatly in time, but I think this at least covers it. Ill update #736 unless anyone has objections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-308200161
https://github.com/psi4/psi4/pull/742#issuecomment-308568798:5,Deployability,update,updates,5,Also updates the unit tests for DF_Helper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-308568798
https://github.com/psi4/psi4/pull/742#issuecomment-308568798:22,Testability,test,tests,22,Also updates the unit tests for DF_Helper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-308568798
https://github.com/psi4/psi4/pull/742#issuecomment-316501447:36,Integrability,rout,route,36,"Rebased and pushed, some timings en route.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-316501447
https://github.com/psi4/psi4/pull/742#issuecomment-326597342:196,Availability,error,errors,196,"@schiebermc was seeing problems with `scf-coverage`, but my fresh build of this branch (icpc) came back clean on full tests. So no barriers to merge on my part. Keep an eye out for `scf-coverage` errors on the 3rd test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-326597342
https://github.com/psi4/psi4/pull/742#issuecomment-326597342:118,Testability,test,tests,118,"@schiebermc was seeing problems with `scf-coverage`, but my fresh build of this branch (icpc) came back clean on full tests. So no barriers to merge on my part. Keep an eye out for `scf-coverage` errors on the 3rd test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-326597342
https://github.com/psi4/psi4/pull/742#issuecomment-326597342:214,Testability,test,test,214,"@schiebermc was seeing problems with `scf-coverage`, but my fresh build of this branch (icpc) came back clean on full tests. So no barriers to merge on my part. Keep an eye out for `scf-coverage` errors on the 3rd test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-326597342
https://github.com/psi4/psi4/pull/743#issuecomment-308605290:117,Modifiability,plugin,plugin,117,"Thank @jturney !; However, `omp_get_thread_num()` always return 0 in this code when I call `timer_on()` from `forte` plugin. I don't understand why. Maybe because `forte` and psi4 are different libraries so that when psi4 is called by `forte`, it cannot figure out which thread it is on. Just my guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308605290
https://github.com/psi4/psi4/pull/743#issuecomment-308702663:43,Modifiability,plugin,plugin,43,"`omp_get_thread_num()` will work even in a plugin:. ```; void timer_on(); {; printf(""timer thread rank: %d\n"", omp_get_thread_num());; }. extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }; } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. You must call `psi4 -n 4` or some other number because psi4 tells OpenMP to use 1 thread by default. ```; Attention! This SCF may be density-fitted.; Hello World from thread = 0; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; timer thread rank: 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; Number of threads = 4; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; timer thread rank: 0; Number of threads = 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308702663
https://github.com/psi4/psi4/pull/743#issuecomment-308702663:341,Modifiability,variab,variables,341,"`omp_get_thread_num()` will work even in a plugin:. ```; void timer_on(); {; printf(""timer thread rank: %d\n"", omp_get_thread_num());; }. extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }; } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. You must call `psi4 -n 4` or some other number because psi4 tells OpenMP to use 1 thread by default. ```; Attention! This SCF may be density-fitted.; Hello World from thread = 0; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; timer thread rank: 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; Number of threads = 4; Hello World from thread = 3; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 0; timer thread rank: 3; timer thread rank: 2; timer thread rank: 1; timer thread rank: 0; Number of threads = 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308702663
https://github.com/psi4/psi4/pull/743#issuecomment-308820958:472,Energy Efficiency,energy,energy,472,"@jturney It is true if you have `timer` and `#pragma omp parallel` both in the plugin.; However, if I have; ```; void timer_on(const char *key, int thread_rank); {; ...; if (thread_rank != 0 and thread_rank != omp_get_thread_num()) {; printf(""\nTimer_on::Thread rank does not agree! arg=%d, %d=omp_get_thread_num()"",thread_rank, omp_get_thread_num());; }; ...; }; ```; in `/psi4/src/psi4/libqt/timer.cc`, and a plugin with; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; timer_on(""inner"",omp_get_thread_num());; printf(""Hello World from thread = %d\n"", omp_get_thread_num());; timer_off(""inner"",omp_get_thread_num());; } ; timer_off(""energy"");; return 0.0;; }; ```; It will print:; ```; Timer_on::Thread rank does not agree! arg=2, 0=omp_get_thread_num(); ```; That's what I don't understand here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308820958
https://github.com/psi4/psi4/pull/743#issuecomment-308820958:702,Energy Efficiency,energy,energy,702,"@jturney It is true if you have `timer` and `#pragma omp parallel` both in the plugin.; However, if I have; ```; void timer_on(const char *key, int thread_rank); {; ...; if (thread_rank != 0 and thread_rank != omp_get_thread_num()) {; printf(""\nTimer_on::Thread rank does not agree! arg=%d, %d=omp_get_thread_num()"",thread_rank, omp_get_thread_num());; }; ...; }; ```; in `/psi4/src/psi4/libqt/timer.cc`, and a plugin with; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; timer_on(""inner"",omp_get_thread_num());; printf(""Hello World from thread = %d\n"", omp_get_thread_num());; timer_off(""inner"",omp_get_thread_num());; } ; timer_off(""energy"");; return 0.0;; }; ```; It will print:; ```; Timer_on::Thread rank does not agree! arg=2, 0=omp_get_thread_num(); ```; That's what I don't understand here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308820958
https://github.com/psi4/psi4/pull/743#issuecomment-308820958:79,Modifiability,plugin,plugin,79,"@jturney It is true if you have `timer` and `#pragma omp parallel` both in the plugin.; However, if I have; ```; void timer_on(const char *key, int thread_rank); {; ...; if (thread_rank != 0 and thread_rank != omp_get_thread_num()) {; printf(""\nTimer_on::Thread rank does not agree! arg=%d, %d=omp_get_thread_num()"",thread_rank, omp_get_thread_num());; }; ...; }; ```; in `/psi4/src/psi4/libqt/timer.cc`, and a plugin with; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; timer_on(""inner"",omp_get_thread_num());; printf(""Hello World from thread = %d\n"", omp_get_thread_num());; timer_off(""inner"",omp_get_thread_num());; } ; timer_off(""energy"");; return 0.0;; }; ```; It will print:; ```; Timer_on::Thread rank does not agree! arg=2, 0=omp_get_thread_num(); ```; That's what I don't understand here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308820958
https://github.com/psi4/psi4/pull/743#issuecomment-308820958:411,Modifiability,plugin,plugin,411,"@jturney It is true if you have `timer` and `#pragma omp parallel` both in the plugin.; However, if I have; ```; void timer_on(const char *key, int thread_rank); {; ...; if (thread_rank != 0 and thread_rank != omp_get_thread_num()) {; printf(""\nTimer_on::Thread rank does not agree! arg=%d, %d=omp_get_thread_num()"",thread_rank, omp_get_thread_num());; }; ...; }; ```; in `/psi4/src/psi4/libqt/timer.cc`, and a plugin with; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; timer_on(""inner"",omp_get_thread_num());; printf(""Hello World from thread = %d\n"", omp_get_thread_num());; timer_off(""inner"",omp_get_thread_num());; } ; timer_off(""energy"");; return 0.0;; }; ```; It will print:; ```; Timer_on::Thread rank does not agree! arg=2, 0=omp_get_thread_num(); ```; That's what I don't understand here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308820958
https://github.com/psi4/psi4/pull/743#issuecomment-308824500:510,Modifiability,Plugin,Plugin,510,"Still works:. ```; psi4: timer_on: 0 thread; psi4: timer_on: 1 thread; psi4: timer_on: 2 thread; psi4: timer_on: 3 thread; Hello World from thread = 0; Hello World from thread = 1; Hello World from thread = 2; Hello World from thread = 3; Number of threads = 4; psi4: timer_on: 2 thread; psi4: timer_on: 1 thread; psi4: timer_on: 3 thread; psi4: timer_on: 0 thread; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 3; Hello World from thread = 0; Number of threads = 4; ```. Plugin:; ```; extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {; std::string timer_name = ""play "" + std::to_string(a);; timer_on(timer_name.c_str());. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; //timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }. timer_off(timer_name.c_str());. } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. Change to `timer_on` timer.cc in libqt with corresponding `#include <omp.h>`:; ```; printf(""psi4: timer_on: %d thread\n"", omp_get_thread_num());; ```. Then executed with `psi4 -n 4`. Not sure what's going on with your system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308824500
https://github.com/psi4/psi4/pull/743#issuecomment-308824500:727,Modifiability,variab,variables,727,"Still works:. ```; psi4: timer_on: 0 thread; psi4: timer_on: 1 thread; psi4: timer_on: 2 thread; psi4: timer_on: 3 thread; Hello World from thread = 0; Hello World from thread = 1; Hello World from thread = 2; Hello World from thread = 3; Number of threads = 4; psi4: timer_on: 2 thread; psi4: timer_on: 1 thread; psi4: timer_on: 3 thread; psi4: timer_on: 0 thread; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 3; Hello World from thread = 0; Number of threads = 4; ```. Plugin:; ```; extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {; std::string timer_name = ""play "" + std::to_string(a);; timer_on(timer_name.c_str());. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; //timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }. timer_off(timer_name.c_str());. } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. Change to `timer_on` timer.cc in libqt with corresponding `#include <omp.h>`:; ```; printf(""psi4: timer_on: %d thread\n"", omp_get_thread_num());; ```. Then executed with `psi4 -n 4`. Not sure what's going on with your system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308824500
https://github.com/psi4/psi4/pull/743#issuecomment-312718181:375,Safety,safe,safely,375,"I really like the way this turned out, thanks for the example. It looks like we should probably go back and look into the timing print outs a bit. For example:. ```; | | DIISManager::extrapolate: 0.00u 0.00s 0.000530w 10 calls; | | | DIISManager::extrapolate: bMatrix setup: 0.00u 0.00s 0.000085w 10 calls; ```. Since `bMatrix setup` is only called with `extrapolate` we can safely shorten this text so that we do not skew the columns. This can be done in later passes however. Did the threading issue get resolved?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312718181
https://github.com/psi4/psi4/pull/743#issuecomment-312719601:136,Testability,test,test,136,"Sure, I'm happy with that for now. On that regard can you switch on `psi4/libfock/v.cc:483,525` and the like timer functions back on to test out the new functionality? The rank information is unsurprisingly called `rank`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312719601
https://github.com/psi4/psi4/pull/743#issuecomment-312723477:21,Testability,test,test,21,@dgasmith By running test dft2 I got:; ```; HF: Form G : 18.68u 0.00s 1.955138w 24 calls; | RKS: Form V : 16.30u 0.00s 1.255284w 24 calls; | | V: Properties : 2.093465p 14064 calls; | | V: LSDA : 0.074432p 14064 calls; | JK: D : 0.00u 0.00s 0.000135w 24 calls; ```; after the corresponding modifications.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312723477
https://github.com/psi4/psi4/pull/743#issuecomment-312735086:77,Availability,down,down,77,"The serial run is correct. I think your automatic nesting scheme is breaking down as some of the above can turn off/on before other pieces as each block is not a static amount of work. I wonder if we can create a region where we freeze nesting like `timer_nesting_freeze(true)`. We would loose the LSDA/GGA nesting, but I think thats ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312735086
https://github.com/psi4/psi4/pull/743#issuecomment-312735584:185,Testability,test,test,185,@dgasmith It means I have a bug in my code. It is supposed to solve the correct nesting pattern no matter serial or parallel. I will look into this issue.; Thank you for providing this test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312735584
https://github.com/psi4/psi4/pull/743#issuecomment-313728409:82,Deployability,update,updated,82,@dgasmith The example output in PR description is the corresponding print out for updated `v.cc` in 8 threads.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-313728409
https://github.com/psi4/psi4/pull/743#issuecomment-313731298:83,Usability,responsiv,responsive,83,"Great, thanks. General question: What if we use a static print width rather than a responsive one. The print statement would move to something like `%10.3f` or the like. That gives us ms accuracy which is probably about as accurate as the timer really is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-313731298
https://github.com/psi4/psi4/pull/746#issuecomment-309645454:84,Testability,test,testing,84,"Works fine on my laptop, but it looks like i need to hop onto my linux box for more testing...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/746#issuecomment-309645454
https://github.com/psi4/psi4/pull/747#issuecomment-311554557:36,Usability,feedback,feedback,36,@dgasmith I think this is ready for feedback.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747#issuecomment-311554557
https://github.com/psi4/psi4/pull/747#issuecomment-312716724:48,Deployability,patch,patch,48,I think in terms of changes for this particular patch this is all ready to go. Any objections?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/747#issuecomment-312716724
https://github.com/psi4/psi4/issues/748#issuecomment-311448519:29,Availability,down,downgrading,29,"Update: I have also tried; - downgrading to the latest stable psi4 release, following the instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary) (just `conda update psi4 -c psi4`), which pulled `1.1+add49b9-py35_0 psi4`, and the issue persists.; - switching to conda Python 2.7 (mkl: 2017.0.1-0, numpy: 1.13.0-py27_0, psi4: 1.1+add49b9-py27_0 psi4). Same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311448519
https://github.com/psi4/psi4/issues/748#issuecomment-311448519:0,Deployability,Update,Update,0,"Update: I have also tried; - downgrading to the latest stable psi4 release, following the instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary) (just `conda update psi4 -c psi4`), which pulled `1.1+add49b9-py35_0 psi4`, and the issue persists.; - switching to conda Python 2.7 (mkl: 2017.0.1-0, numpy: 1.13.0-py27_0, psi4: 1.1+add49b9-py27_0 psi4). Same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311448519
https://github.com/psi4/psi4/issues/748#issuecomment-311448519:67,Deployability,release,release,67,"Update: I have also tried; - downgrading to the latest stable psi4 release, following the instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary) (just `conda update psi4 -c psi4`), which pulled `1.1+add49b9-py35_0 psi4`, and the issue persists.; - switching to conda Python 2.7 (mkl: 2017.0.1-0, numpy: 1.13.0-py27_0, psi4: 1.1+add49b9-py27_0 psi4). Same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311448519
https://github.com/psi4/psi4/issues/748#issuecomment-311448519:169,Deployability,update,update-a-,169,"Update: I have also tried; - downgrading to the latest stable psi4 release, following the instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary) (just `conda update psi4 -c psi4`), which pulled `1.1+add49b9-py35_0 psi4`, and the issue persists.; - switching to conda Python 2.7 (mkl: 2017.0.1-0, numpy: 1.13.0-py27_0, psi4: 1.1+add49b9-py27_0 psi4). Same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311448519
https://github.com/psi4/psi4/issues/748#issuecomment-311448519:204,Deployability,update,update,204,"Update: I have also tried; - downgrading to the latest stable psi4 release, following the instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary) (just `conda update psi4 -c psi4`), which pulled `1.1+add49b9-py35_0 psi4`, and the issue persists.; - switching to conda Python 2.7 (mkl: 2017.0.1-0, numpy: 1.13.0-py27_0, psi4: 1.1+add49b9-py27_0 psi4). Same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311448519
https://github.com/psi4/psi4/issues/748#issuecomment-311487436:0,Deployability,Update,Update,0,"Update: Installing a version of numpy that doesn't link against MKL ""fixes"" the problem in the short term, but there's still something deeply fishy going on. (`1.13.0 py27_nomkl_0 [nomkl]`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311487436
https://github.com/psi4/psi4/issues/748#issuecomment-311487436:8,Deployability,Install,Installing,8,"Update: Installing a version of numpy that doesn't link against MKL ""fixes"" the problem in the short term, but there's still something deeply fishy going on. (`1.13.0 py27_nomkl_0 [nomkl]`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311487436
https://github.com/psi4/psi4/issues/748#issuecomment-311490565:117,Deployability,install,installed,117,Intriguing. I had the reverse problem last week where a MKL-linked numpy was inoperable in psi4 when an openblas was installed in same conda env. I'll see about recreating your env locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311490565
https://github.com/psi4/psi4/issues/748#issuecomment-311736829:125,Integrability,depend,dependencies,125,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829
https://github.com/psi4/psi4/issues/748#issuecomment-311736829:62,Performance,load,loading,62,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829
https://github.com/psi4/psi4/issues/748#issuecomment-311736829:312,Testability,test,test,312,"Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. If true, numpy is really calling the system BLAS instead of MKL, and perhaps the instability resides in there? Is there a way we can link psi4 to MKL in the conda build, to test this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311736829
https://github.com/psi4/psi4/issues/748#issuecomment-311738003:127,Integrability,depend,dependencies,127,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003
https://github.com/psi4/psi4/issues/748#issuecomment-311738003:64,Performance,load,loading,64,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003
https://github.com/psi4/psi4/issues/748#issuecomment-311738003:251,Performance,load,loaded,251,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003
https://github.com/psi4/psi4/issues/748#issuecomment-311738398:265,Availability,avail,available,265,"Right, the psi4 conda package is built to link to Mac native Accelerate blas/lapack, not MKL. The MKL is present in the conda env for numpy's benefit. The reason for this is that until very recently all the supporting language libraries and headers for MKL weren't available on conda – they seem to be now through packages on the Intel conda channel, but I haven't switched over. I was thinking that when psi4 is imported before numpy that the latter may be trying to match symbols in the already loaded Accelerate when it should instead be importing mkl.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738398
https://github.com/psi4/psi4/issues/748#issuecomment-311738398:497,Performance,load,loaded,497,"Right, the psi4 conda package is built to link to Mac native Accelerate blas/lapack, not MKL. The MKL is present in the conda env for numpy's benefit. The reason for this is that until very recently all the supporting language libraries and headers for MKL weren't available on conda – they seem to be now through packages on the Intel conda channel, but I haven't switched over. I was thinking that when psi4 is imported before numpy that the latter may be trying to match symbols in the already loaded Accelerate when it should instead be importing mkl.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738398
https://github.com/psi4/psi4/issues/748#issuecomment-311739442:181,Integrability,rout,routines,181,"@rmcgibbo thanks for the info - I wasn't aware of those fine details of dynamic loading. So it seems the input to the SVD call is subtly different then, if both paths end up in MKL routines. This is quite a mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311739442
https://github.com/psi4/psi4/issues/748#issuecomment-311739442:80,Performance,load,loading,80,"@rmcgibbo thanks for the info - I wasn't aware of those fine details of dynamic loading. So it seems the input to the SVD call is subtly different then, if both paths end up in MKL routines. This is quite a mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311739442
https://github.com/psi4/psi4/issues/748#issuecomment-311744982:110,Testability,test,test,110,I only have a version compiled from source right now (macOS) and it works correctly. I'll try and get a conda test on my linux box later this afternoon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311744982
https://github.com/psi4/psi4/issues/748#issuecomment-311746162:52,Integrability,message,message,52,"Sorry, I overlooked that statement in your original message. Note to self: learn to read bug reports more carefully in future",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311746162
https://github.com/psi4/psi4/issues/748#issuecomment-311746162:75,Usability,learn,learn,75,"Sorry, I overlooked that statement in your original message. Note to self: learn to read bug reports more carefully in future",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311746162
https://github.com/psi4/psi4/issues/748#issuecomment-311749244:3837,Availability,error,error,3837,"rk/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib libz.dylib core.so; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib libz.dylib core.so; $ otool -L core.so; core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libpcm.1.dylib (compatibility version 1.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	@rpath/libgdma.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/liberd.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libsimint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libefp.dylib (compatibility version 0.0.0, current version 0.0.0); 	libz.dylib (compatibility version 1.0.0, current version 1.0.0); 	libz.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libchemps2.2.dylib (compatibility version 2.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. Now, this will lead to a ton of undefined symbols. But I don't really care, since I don't want to actually call any functions from `core.so` anyways. So I change the `sys.setdlopenflags` to RTLD_LAZY. i.e. ```; import sys; flags = sys.getdlopenflags(); sys.setdlopenflags(0x1) # RTLD_LAZY; import core; sys.setdlopenflags(flags). import numpy as np. random = np.random.RandomState(0); N = 46; A = random.randn(N, N). U, s, VT = np.linalg.svd(A, full_matrices=True); A_reconstructed = U.dot(np.diag(s)).dot(VT); print(np.linalg.norm(A-A_reconstructed)); ```. And I still get the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749244
https://github.com/psi4/psi4/issues/748#issuecomment-311749244:1642,Integrability,depend,dependency,1642,"th/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/liberd.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libsimint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libefp.dylib (compatibility version 0.0.0, current version 0.0.0); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib (compatibility version 1.0.0, current version 1.0.0); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libchemps2.2.dylib (compatibility version 2.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```; - I can play a few tricks with `install_name_tool` to basically get rid of the dependency on `libLAPACK.dylib` and `libBLAS.dylib`. I did that by changing `core.so` to reference `libz` in their place:; ```; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib libz.dylib core.so; $ install_name_tool -change /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib libz.dylib core.so; $ otool -L core.so; core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libpcm.1.dylib (compatibility version 1.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	@rpath/libgdma.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compati",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749244
https://github.com/psi4/psi4/issues/748#issuecomment-311749561:7,Performance,load,loading,7,So now loading `core.so` never loads a potentially-conflicting BLAS. But it still causes numpy to return garbage.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749561
https://github.com/psi4/psi4/issues/748#issuecomment-311749561:31,Performance,load,loads,31,So now loading `core.so` never loads a potentially-conflicting BLAS. But it still causes numpy to return garbage.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311749561
https://github.com/psi4/psi4/issues/748#issuecomment-311756543:205,Availability,error,error,205,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543
https://github.com/psi4/psi4/issues/748#issuecomment-311756543:302,Availability,down,down,302,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543
https://github.com/psi4/psi4/issues/748#issuecomment-311756543:69,Performance,load,loads,69,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543
https://github.com/psi4/psi4/issues/748#issuecomment-311756543:107,Usability,simpl,simple,107,"Yea, scratching my head over that one too. I was knee deep in `lsof` loads and thought we should check the simple things. The other weird thing is you can export either MKL or OMP threads and it fixes the error. I wonder what the precedence for`mkl/omp_set_num_threads/environ` is. It could help track down who is setting what.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311756543
https://github.com/psi4/psi4/issues/748#issuecomment-311786855:48,Usability,simpl,simple,48,Got it. I was thinking that there might be some simple difference between @dgasmith's locally-compiled and the conda-compiled psi4s related to compiler. But it seems like that's not the case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311786855
https://github.com/psi4/psi4/issues/748#issuecomment-311866695:1026,Availability,avail,avail,1026,"Ok, @andysim and @rmcgibbo, try out a mkl-built psi4 for Mac and see if it fixes both, either, or none of your problems. This is a minimal build with libint (am4) and libxc as internal dylibs. Install into a new env with. ```; >>> conda create -n idp35 psi4test python=3 -c intel -c psi4; >>> source activate idp35; ```. ```; >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. The env should look like this. Note that py36 is _not_ avail. Also, do _not_ install this into the main env of an anaconda or miniconda – subenvs only.; ```; >>> conda list; # packages in environment at /Users/loriab/linux/miniconda3/envs/idp35:; #; icc_rt 16.0.3 intel_6 [intel] intel; intelpython 2017.0.3 4 intel; mkl 2017.0.3 intel_6 [intel] intel; numpy 1.12.1 py35_intel_8 [intel] intel; openmp 2017.0.3 intel_8 intel; openssl 1.0.2k intel_3 [intel] intel; pip 9.0.1 py35_intel_0 [intel] intel; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 intel_1 [intel] intel; setuptools 27.2.0 py35_intel_0 [intel] intel; sqlite 3.13.0 intel_14 [intel] intel; tcl 8.6.4 intel_16 [intel] intel; tk 8.6.4 intel_26 [intel] intel; wheel 0.29.0 py35_intel_5 [intel] intel; xz 5.2.2 intel_15 [intel] intel; zlib 1.2.11 intel_2 [intel] intel; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311866695
https://github.com/psi4/psi4/issues/748#issuecomment-311866695:193,Deployability,Install,Install,193,"Ok, @andysim and @rmcgibbo, try out a mkl-built psi4 for Mac and see if it fixes both, either, or none of your problems. This is a minimal build with libint (am4) and libxc as internal dylibs. Install into a new env with. ```; >>> conda create -n idp35 psi4test python=3 -c intel -c psi4; >>> source activate idp35; ```. ```; >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. The env should look like this. Note that py36 is _not_ avail. Also, do _not_ install this into the main env of an anaconda or miniconda – subenvs only.; ```; >>> conda list; # packages in environment at /Users/loriab/linux/miniconda3/envs/idp35:; #; icc_rt 16.0.3 intel_6 [intel] intel; intelpython 2017.0.3 4 intel; mkl 2017.0.3 intel_6 [intel] intel; numpy 1.12.1 py35_intel_8 [intel] intel; openmp 2017.0.3 intel_8 intel; openssl 1.0.2k intel_3 [intel] intel; pip 9.0.1 py35_intel_0 [intel] intel; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 intel_1 [intel] intel; setuptools 27.2.0 py35_intel_0 [intel] intel; sqlite 3.13.0 intel_14 [intel] intel; tcl 8.6.4 intel_16 [intel] intel; tk 8.6.4 intel_26 [intel] intel; wheel 0.29.0 py35_intel_5 [intel] intel; xz 5.2.2 intel_15 [intel] intel; zlib 1.2.11 intel_2 [intel] intel; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311866695
https://github.com/psi4/psi4/issues/748#issuecomment-311866695:1048,Deployability,install,install,1048,"Ok, @andysim and @rmcgibbo, try out a mkl-built psi4 for Mac and see if it fixes both, either, or none of your problems. This is a minimal build with libint (am4) and libxc as internal dylibs. Install into a new env with. ```; >>> conda create -n idp35 psi4test python=3 -c intel -c psi4; >>> source activate idp35; ```. ```; >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. The env should look like this. Note that py36 is _not_ avail. Also, do _not_ install this into the main env of an anaconda or miniconda – subenvs only.; ```; >>> conda list; # packages in environment at /Users/loriab/linux/miniconda3/envs/idp35:; #; icc_rt 16.0.3 intel_6 [intel] intel; intelpython 2017.0.3 4 intel; mkl 2017.0.3 intel_6 [intel] intel; numpy 1.12.1 py35_intel_8 [intel] intel; openmp 2017.0.3 intel_8 intel; openssl 1.0.2k intel_3 [intel] intel; pip 9.0.1 py35_intel_0 [intel] intel; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 intel_1 [intel] intel; setuptools 27.2.0 py35_intel_0 [intel] intel; sqlite 3.13.0 intel_14 [intel] intel; tcl 8.6.4 intel_16 [intel] intel; tk 8.6.4 intel_26 [intel] intel; wheel 0.29.0 py35_intel_5 [intel] intel; xz 5.2.2 intel_15 [intel] intel; zlib 1.2.11 intel_2 [intel] intel; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311866695
https://github.com/psi4/psi4/issues/748#issuecomment-311869326:120,Performance,load,loaded,120,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326
https://github.com/psi4/psi4/issues/748#issuecomment-311869326:232,Performance,load,loaded,232,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326
https://github.com/psi4/psi4/issues/748#issuecomment-311869326:330,Performance,load,loaded,330,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326
https://github.com/psi4/psi4/issues/748#issuecomment-311869326:441,Performance,load,loaded,441,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326
https://github.com/psi4/psi4/issues/748#issuecomment-311869326:555,Performance,load,loaded,555,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326
https://github.com/psi4/psi4/issues/748#issuecomment-311869326:667,Performance,load,loaded,667,"A familiar story by now, @loriab, but the AVX issue still persists. With `DYLD_PRINT_LIBRARIES` I still get; ```; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/lib-dynload/_struct.cpython-35m-darwin.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib//python3.5/site-packages/psi4/core.so; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libxc.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libderiv.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libint.dylib; dyld: loaded: /Users/simmonettac/miniconda3/envs/idp35/lib/python3.5/site-packages/psi4/../../..//libmkl_rt.dylib; Illegal instruction: 4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311869326
https://github.com/psi4/psi4/issues/748#issuecomment-312126504:198,Testability,test,test,198,"Actually, I took the same psi4test from last night and tried it in a defaults-channel numpy & mkl via `conda create -n dfl35 psi4test python=3.5 -c psi4` and it works just fine according to `psi4 --test`. I'll feel more assured when the full test suite is run, but it looks like the answer to your question above is yes. Now if only Intel channel had a py36. ```; (dfl35) >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```; ```; (dfl35) >>> conda list; # packages in environment at /path/to/miniconda3/envs/dfl35:; #; mkl 2017.0.3 0 defaults; numpy 1.13.0 py35_0 defaults; openssl 1.0.2l 0 defaults; pip 9.0.1 py35_1 defaults; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 1 defaults; readline 6.2 2 defaults; setuptools 27.2.0 py35_0 defaults; sqlite 3.13.0 0 defaults; tk 8.5.18 0 defaults; wheel 0.29.0 py35_0 defaults; xz 5.2.2 1 defaults; zlib 1.2.8 3 defaults; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312126504
https://github.com/psi4/psi4/issues/748#issuecomment-312126504:242,Testability,test,test,242,"Actually, I took the same psi4test from last night and tried it in a defaults-channel numpy & mkl via `conda create -n dfl35 psi4test python=3.5 -c psi4` and it works just fine according to `psi4 --test`. I'll feel more assured when the full test suite is run, but it looks like the answer to your question above is yes. Now if only Intel channel had a py36. ```; (dfl35) >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```; ```; (dfl35) >>> conda list; # packages in environment at /path/to/miniconda3/envs/dfl35:; #; mkl 2017.0.3 0 defaults; numpy 1.13.0 py35_0 defaults; openssl 1.0.2l 0 defaults; pip 9.0.1 py35_1 defaults; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 1 defaults; readline 6.2 2 defaults; setuptools 27.2.0 py35_0 defaults; sqlite 3.13.0 0 defaults; tk 8.5.18 0 defaults; wheel 0.29.0 py35_0 defaults; xz 5.2.2 1 defaults; zlib 1.2.8 3 defaults; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312126504
https://github.com/psi4/psi4/issues/748#issuecomment-312305798:700,Deployability,install,installing,700,"Observations:; * RMcG found that psi4 Mac conda pkg (linked to native Accelerate) and numpy conda pkg (linked to in-env MKL) was fragile wrt psi4/numpy import ordering; * DGAS found that psi4 built from source (linked to native Accelerate but managing its own RPATH) and numpy conda pkg (linked to in-env MKL) was steady wrt psi4/numpy import ordering; * LAB found that psi4 built from source on Linux (linked to in-env OpenBlas) and numpy conda pkg (linked to in-env MKL) was fragile wrt numpy operation w/i psi4. Conclusions:; * Linking to multiple math libs in the same conda env is risky (perhaps more so on Mac than Linux); * Best solution for Mac is to just link Psi4 to MKL, not Accelerate if installing psi4 into same env as numpy (which, for ease of use and distribution, we want to do); * Requires mix and match of default-channel MKL and intel-channel mkl-include (for `mkl.h`) to get full py27/py35/py36 stack; * In practice, rolling this out along with `sse4.1` ""Illegal Instruction 4"" fix for old Mac hardware, so expect solutions in the coming week, rather than the coming day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312305798
https://github.com/psi4/psi4/issues/748#issuecomment-312305798:938,Deployability,rolling,rolling,938,"Observations:; * RMcG found that psi4 Mac conda pkg (linked to native Accelerate) and numpy conda pkg (linked to in-env MKL) was fragile wrt psi4/numpy import ordering; * DGAS found that psi4 built from source (linked to native Accelerate but managing its own RPATH) and numpy conda pkg (linked to in-env MKL) was steady wrt psi4/numpy import ordering; * LAB found that psi4 built from source on Linux (linked to in-env OpenBlas) and numpy conda pkg (linked to in-env MKL) was fragile wrt numpy operation w/i psi4. Conclusions:; * Linking to multiple math libs in the same conda env is risky (perhaps more so on Mac than Linux); * Best solution for Mac is to just link Psi4 to MKL, not Accelerate if installing psi4 into same env as numpy (which, for ease of use and distribution, we want to do); * Requires mix and match of default-channel MKL and intel-channel mkl-include (for `mkl.h`) to get full py27/py35/py36 stack; * In practice, rolling this out along with `sse4.1` ""Illegal Instruction 4"" fix for old Mac hardware, so expect solutions in the coming week, rather than the coming day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312305798
https://github.com/psi4/psi4/issues/748#issuecomment-312305798:586,Safety,risk,risky,586,"Observations:; * RMcG found that psi4 Mac conda pkg (linked to native Accelerate) and numpy conda pkg (linked to in-env MKL) was fragile wrt psi4/numpy import ordering; * DGAS found that psi4 built from source (linked to native Accelerate but managing its own RPATH) and numpy conda pkg (linked to in-env MKL) was steady wrt psi4/numpy import ordering; * LAB found that psi4 built from source on Linux (linked to in-env OpenBlas) and numpy conda pkg (linked to in-env MKL) was fragile wrt numpy operation w/i psi4. Conclusions:; * Linking to multiple math libs in the same conda env is risky (perhaps more so on Mac than Linux); * Best solution for Mac is to just link Psi4 to MKL, not Accelerate if installing psi4 into same env as numpy (which, for ease of use and distribution, we want to do); * Requires mix and match of default-channel MKL and intel-channel mkl-include (for `mkl.h`) to get full py27/py35/py36 stack; * In practice, rolling this out along with `sse4.1` ""Illegal Instruction 4"" fix for old Mac hardware, so expect solutions in the coming week, rather than the coming day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312305798
https://github.com/psi4/psi4/issues/748#issuecomment-312328448:91,Availability,error,error,91,Any test case that actually used NumPy (mostly casscf) failed. Afraid I don't remember the error trace details.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312328448
https://github.com/psi4/psi4/issues/748#issuecomment-312328448:4,Testability,test,test,4,Any test case that actually used NumPy (mostly casscf) failed. Afraid I don't remember the error trace details.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312328448
https://github.com/psi4/psi4/issues/748#issuecomment-340284447:1185,Energy Efficiency,power,power,1185,"Further note that importing numpy first won't fix everything. Accelerate-linked `import psi4` can still break numpy linalg. Whether it's fixed by Accelerate to Numpy or Accelerate to mkl-rt-linked Numpy is undetermined. Seen in evec of degen pair of hessian ; ```projhess = np.array([[ 0.0159, 0.0000, 0.0000, -0.0069, -0.0000, 0.0000, -0.0069, -0.0000, 0.0000],; [ 0.0000, 0.0159, 0.0000, -0.0000, -0.0069, 0.0000, 0.0000, -0.0069, 0.0000],; [ 0.0000, 0.0000, 0.1832, 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0793],; [-0.0069, -0.0000, 0.0000, 0.0030, 0.0000, 0.0000, 0.0030, 0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, 0.0777, 0.0000, 0.0000, -0.0090],; [-0.0069, 0.0000, 0.0000, 0.0030, -0.0000, 0.0000, 0.0030, -0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0090, 0.0000, 0.0000, 0.0777]]); ```. And the code turned out to be fully up-to-date. My foolishness was in not using the dev env that properly sets up MKL from conda and instead just using Mac built-ins. CMake does not have the power to select/reject dependencies based on their `ldd` profile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-340284447
https://github.com/psi4/psi4/issues/748#issuecomment-340284447:1208,Integrability,depend,dependencies,1208,"Further note that importing numpy first won't fix everything. Accelerate-linked `import psi4` can still break numpy linalg. Whether it's fixed by Accelerate to Numpy or Accelerate to mkl-rt-linked Numpy is undetermined. Seen in evec of degen pair of hessian ; ```projhess = np.array([[ 0.0159, 0.0000, 0.0000, -0.0069, -0.0000, 0.0000, -0.0069, -0.0000, 0.0000],; [ 0.0000, 0.0159, 0.0000, -0.0000, -0.0069, 0.0000, 0.0000, -0.0069, 0.0000],; [ 0.0000, 0.0000, 0.1832, 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0793],; [-0.0069, -0.0000, 0.0000, 0.0030, 0.0000, 0.0000, 0.0030, 0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, 0.0777, 0.0000, 0.0000, -0.0090],; [-0.0069, 0.0000, 0.0000, 0.0030, -0.0000, 0.0000, 0.0030, -0.0000, 0.0000],; [-0.0000, -0.0069, 0.0000, 0.0000, 0.0030, 0.0000, -0.0000, 0.0030, 0.0000],; [ 0.0000, 0.0000, -0.0793, 0.0000, 0.0000, -0.0090, 0.0000, 0.0000, 0.0777]]); ```. And the code turned out to be fully up-to-date. My foolishness was in not using the dev env that properly sets up MKL from conda and instead just using Mac built-ins. CMake does not have the power to select/reject dependencies based on their `ldd` profile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-340284447
https://github.com/psi4/psi4/issues/749#issuecomment-311747130:116,Deployability,install,installed,116,"The `/usr/lib/libSystem.B.dylib` is ok because we indeed want to link to the Sys lib on each computer, not anything installed by conda. Similarly `/usr/lib/libblas` or lapack if they ocurred b/c after much link following, they end up at Accelerate. The `libgcc_s.1.dylib` is bizarre – will investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/749#issuecomment-311747130
https://github.com/psi4/psi4/issues/749#issuecomment-311781954:169,Deployability,update,update,169,"Ok, new pkgs at https://anaconda.org/psi4/dkh/files (and gdma and erd) that should have a sane linkage listing. I get the following. Should be obtainable through `conda update dkh erd gdma -c psi4`. Those are the only ones I could see, and that's reasonable since I usually build the three pure fortran ones together. ```; /Users/github/builds/conda-builds/dkh_1498680189814/_t_env/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	@rpath/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/749#issuecomment-311781954
https://github.com/psi4/psi4/pull/751#issuecomment-312735405:31,Testability,test,tests,31,"While not formally part of our tests, all Psi4NumPy and SAPT(CASSCF) test cases pass with these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751#issuecomment-312735405
https://github.com/psi4/psi4/pull/751#issuecomment-312735405:69,Testability,test,test,69,"While not formally part of our tests, all Psi4NumPy and SAPT(CASSCF) test cases pass with these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/751#issuecomment-312735405
https://github.com/psi4/psi4/issues/752#issuecomment-312340409:362,Modifiability,extend,extend,362,"If we expand this issue to best practices, then a few lessons from #736 ; * Add as many headers as you like during development, but before making the PR, explicitly check if they're needed, and if so, move to source, not convenience header to minimize build impact.; * Avoid including any `py::` in `<top-lvl>/psi4/src/psi4` for the sake of build time. Instead, extend class (can't use private member data) in accompanying `<top-lvl>/psi4/src/export_<cls>.cc`. If you feel you need a `py::` in `<top-lvl>/psi4/src/psi4`, contact the core-devs to see if a work-around can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312340409
https://github.com/psi4/psi4/issues/752#issuecomment-312340409:269,Safety,Avoid,Avoid,269,"If we expand this issue to best practices, then a few lessons from #736 ; * Add as many headers as you like during development, but before making the PR, explicitly check if they're needed, and if so, move to source, not convenience header to minimize build impact.; * Avoid including any `py::` in `<top-lvl>/psi4/src/psi4` for the sake of build time. Instead, extend class (can't use private member data) in accompanying `<top-lvl>/psi4/src/export_<cls>.cc`. If you feel you need a `py::` in `<top-lvl>/psi4/src/psi4`, contact the core-devs to see if a work-around can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312340409
https://github.com/psi4/psi4/issues/752#issuecomment-312341747:57,Usability,guid,guide,57,I was kind of thinking this would be purely a code style guide for now. We could break off best practices and even Psi output formatting into other areas.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312341747
https://github.com/psi4/psi4/pull/753#issuecomment-312351821:9,Deployability,install,install,9,```; pip install yapf; yapf -i script.py; ```. Done! Best way to do this is use some sort of editor like Sublime and grab PyYapf so it will only format your selection.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/753#issuecomment-312351821
https://github.com/psi4/psi4/pull/753#issuecomment-312352303:13,Deployability,install,install,13,"also, `conda install yapf -c conda-forge`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/753#issuecomment-312352303
https://github.com/psi4/psi4/issues/755#issuecomment-312377006:157,Deployability,install,install,157,"I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just _different_ ones:; * Psi4 `libmkl_rt.so` of a local c.2016 Intel install; * NumPy `libmkl_core.so`, thread, lp64 of default-channel c.2017 conda install",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377006
https://github.com/psi4/psi4/issues/755#issuecomment-312377006:237,Deployability,install,install,237,"I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just _different_ ones:; * Psi4 `libmkl_rt.so` of a local c.2016 Intel install; * NumPy `libmkl_core.so`, thread, lp64 of default-channel c.2017 conda install",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377006
https://github.com/psi4/psi4/issues/755#issuecomment-312377598:193,Availability,down,down,193,"I can't reproduce this behavior on my linux installation of add49b95b6be2441c522f71bddb47f1371e16958 (icc 2017.2.050, mkl 2017.1.143, numpy is also linked to the same `libmkl_rt.so`). I turned down `thread = 20` to `threads = 4`, but regardless of the import order I see `Psi4@n1 : Psi4@n4 ratio (want ~4)` close to 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377598
https://github.com/psi4/psi4/issues/755#issuecomment-312377598:44,Deployability,install,installation,44,"I can't reproduce this behavior on my linux installation of add49b95b6be2441c522f71bddb47f1371e16958 (icc 2017.2.050, mkl 2017.1.143, numpy is also linked to the same `libmkl_rt.so`). I turned down `thread = 20` to `threads = 4`, but regardless of the import order I see `Psi4@n1 : Psi4@n4 ratio (want ~4)` close to 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377598
https://github.com/psi4/psi4/issues/755#issuecomment-312382898:351,Deployability,install,install,351,"@loriab: what happens if you set MKL_NUM_THREADS instead of calling the Psi function?. Sent from my iPhone. > On Jun 30, 2017, at 5:29 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just different ones:; > ; > Psi4 libmkl_rt.so of a local c.2016 Intel install; > NumPy libmkl_core.so, thread, lp64 of default-channel c.2017 conda install; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312382898
https://github.com/psi4/psi4/issues/755#issuecomment-312382898:429,Deployability,install,install,429,"@loriab: what happens if you set MKL_NUM_THREADS instead of calling the Psi function?. Sent from my iPhone. > On Jun 30, 2017, at 5:29 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just different ones:; > ; > Psi4 libmkl_rt.so of a local c.2016 Intel install; > NumPy libmkl_core.so, thread, lp64 of default-channel c.2017 conda install; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312382898
https://github.com/psi4/psi4/issues/755#issuecomment-312397812:1140,Energy Efficiency,energy,energy,1140,"Test subjects:; * `thread.py` from above (uses psi4 and np internally); * PsiAPI – has to import both; * Psithon – comment out both good and bad blocks above; * `tu1.py` below (uses psi4 internally so imports it); * Psi4 1.1 (add49) and current devel head Psi4. Findings:; * The SCF (tu1.py) scales as expected; * Psithon doesn't care if Numpy imported in bin/psi4; * Psithon takes orders from `psi4 -nN`; * Psithon & PsiAPI take orders preferentially from `psi4.set_num_threads(N)`; * Psithon & PsiAPI ignore :envvar:`MKL_NUM_THREADS`; * The DGEMM scaling thest (thread.py) behaves as previously described; * Psithon and PsiAPI thread if through the file itself or through bin/psi4 (if relevant) NumPy is imported before Psi4; * Psithon and PsiAPI _don't_ thread otherwise; * No difference btwn 1.1 and head (bad news for @schiebermc whose tests indicate something happened around June 14-15); * This contradicts @rmcgibbo's findings above, so maybe my MKLs are fighting; * Seem to be ok on most use cases, but not if doing detailed thread setting from input. ```; import psi4; #psi4.set_num_threads(6). def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({'basis': ""aug-cc-pV5Z""}); psi4.energy('scf'). if __name__ == '__main__':; test_psi4_basic(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312397812
https://github.com/psi4/psi4/issues/755#issuecomment-312397812:1300,Energy Efficiency,energy,energy,1300,"Test subjects:; * `thread.py` from above (uses psi4 and np internally); * PsiAPI – has to import both; * Psithon – comment out both good and bad blocks above; * `tu1.py` below (uses psi4 internally so imports it); * Psi4 1.1 (add49) and current devel head Psi4. Findings:; * The SCF (tu1.py) scales as expected; * Psithon doesn't care if Numpy imported in bin/psi4; * Psithon takes orders from `psi4 -nN`; * Psithon & PsiAPI take orders preferentially from `psi4.set_num_threads(N)`; * Psithon & PsiAPI ignore :envvar:`MKL_NUM_THREADS`; * The DGEMM scaling thest (thread.py) behaves as previously described; * Psithon and PsiAPI thread if through the file itself or through bin/psi4 (if relevant) NumPy is imported before Psi4; * Psithon and PsiAPI _don't_ thread otherwise; * No difference btwn 1.1 and head (bad news for @schiebermc whose tests indicate something happened around June 14-15); * This contradicts @rmcgibbo's findings above, so maybe my MKLs are fighting; * Seem to be ok on most use cases, but not if doing detailed thread setting from input. ```; import psi4; #psi4.set_num_threads(6). def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({'basis': ""aug-cc-pV5Z""}); psi4.energy('scf'). if __name__ == '__main__':; test_psi4_basic(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312397812
https://github.com/psi4/psi4/issues/755#issuecomment-312397812:0,Testability,Test,Test,0,"Test subjects:; * `thread.py` from above (uses psi4 and np internally); * PsiAPI – has to import both; * Psithon – comment out both good and bad blocks above; * `tu1.py` below (uses psi4 internally so imports it); * Psi4 1.1 (add49) and current devel head Psi4. Findings:; * The SCF (tu1.py) scales as expected; * Psithon doesn't care if Numpy imported in bin/psi4; * Psithon takes orders from `psi4 -nN`; * Psithon & PsiAPI take orders preferentially from `psi4.set_num_threads(N)`; * Psithon & PsiAPI ignore :envvar:`MKL_NUM_THREADS`; * The DGEMM scaling thest (thread.py) behaves as previously described; * Psithon and PsiAPI thread if through the file itself or through bin/psi4 (if relevant) NumPy is imported before Psi4; * Psithon and PsiAPI _don't_ thread otherwise; * No difference btwn 1.1 and head (bad news for @schiebermc whose tests indicate something happened around June 14-15); * This contradicts @rmcgibbo's findings above, so maybe my MKLs are fighting; * Seem to be ok on most use cases, but not if doing detailed thread setting from input. ```; import psi4; #psi4.set_num_threads(6). def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({'basis': ""aug-cc-pV5Z""}); psi4.energy('scf'). if __name__ == '__main__':; test_psi4_basic(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312397812
https://github.com/psi4/psi4/issues/755#issuecomment-312397812:841,Testability,test,tests,841,"Test subjects:; * `thread.py` from above (uses psi4 and np internally); * PsiAPI – has to import both; * Psithon – comment out both good and bad blocks above; * `tu1.py` below (uses psi4 internally so imports it); * Psi4 1.1 (add49) and current devel head Psi4. Findings:; * The SCF (tu1.py) scales as expected; * Psithon doesn't care if Numpy imported in bin/psi4; * Psithon takes orders from `psi4 -nN`; * Psithon & PsiAPI take orders preferentially from `psi4.set_num_threads(N)`; * Psithon & PsiAPI ignore :envvar:`MKL_NUM_THREADS`; * The DGEMM scaling thest (thread.py) behaves as previously described; * Psithon and PsiAPI thread if through the file itself or through bin/psi4 (if relevant) NumPy is imported before Psi4; * Psithon and PsiAPI _don't_ thread otherwise; * No difference btwn 1.1 and head (bad news for @schiebermc whose tests indicate something happened around June 14-15); * This contradicts @rmcgibbo's findings above, so maybe my MKLs are fighting; * Seem to be ok on most use cases, but not if doing detailed thread setting from input. ```; import psi4; #psi4.set_num_threads(6). def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({'basis': ""aug-cc-pV5Z""}); psi4.energy('scf'). if __name__ == '__main__':; test_psi4_basic(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312397812
https://github.com/psi4/psi4/issues/755#issuecomment-312399904:333,Performance,load,loaded,333,"If I have time this weekend, I'm going to try making a small little pair of Python extension modules that are each linked to a separate copy of MKL and see if I can reproduce anything like this. I _think_ that must be the relevant difference between my test and yours. Weirdness about two simultaneous copies of BLAS libraries being loaded + threads seems to be involved in #748 as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312399904
https://github.com/psi4/psi4/issues/755#issuecomment-312399904:253,Testability,test,test,253,"If I have time this weekend, I'm going to try making a small little pair of Python extension modules that are each linked to a separate copy of MKL and see if I can reproduce anything like this. I _think_ that must be the relevant difference between my test and yours. Weirdness about two simultaneous copies of BLAS libraries being loaded + threads seems to be involved in #748 as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312399904
https://github.com/psi4/psi4/issues/755#issuecomment-313016394:193,Performance,load,loads,193,"* Case A, the MKL trio; * NumPy from defaults linked to the MKL trio; * Psi4 forced to linked to MKL trio dynamically; * Result: n before p threads, p before n doesn't thread. p before n never loads libmkl_avx2.so. ```; (p4dev36) objdir-conda >>> ldd stage/usr/local/psi4/lib/psi4/core.so | grep mkl; 	libmkl_intel_lp64.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so (0x00007f1379f68000); 	libmkl_intel_thread.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so (0x00007f1378503000); 	libmkl_core.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_core.so (0x00007f1376a0b000). (p4dev36) >>> ldd ~/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/multiarray.cpython-36m-x86_64-linux-gnu.so | grep mkl; 	libmkl_intel_lp64.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_intel_lp64.so (0x00007fb96e623000); 	libmkl_intel_thread.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_intel_thread.so (0x00007fb96cbbe000); 	libmkl_core.so => /home/psilocaluser/miniconda3/envs/p4dev36/lib/python3.6/site-packages/numpy/core/../../../../libmkl_core.so (0x00007fb96b0c5000). (p4dev36) >>> head -13 thread.py ; import os; import time. # none for psithon. # good psiapi; import numpy as np; import psi4. # bad psiapi; #import psi4; #import numpy as np. (p4dev36) >>> PYTHONPATH=/home/psilocaluser/gits/hrw-lab/objdir-conda/stage/usr/local/psi4/lib python thread.py; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000772 NumPy: 0.000621; Time for threads 1, size 500: Psi4: 0.008650 NumPy: 0.009042; Time for threads 1, size 2000: Psi4: 0.839143 NumPy: 0.508247; Time for threads 1, size 4000: Psi4: 3.970799 NumPy: 4.251713; Threads set to 20 by Python driver.; Time for threads 20, size 200: Psi4: 0.000180 NumPy: 0.000201; Time for threads 20, size 500: Psi4: 0.001111 NumPy: 0.001470; Time for ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394
https://github.com/psi4/psi4/issues/755#issuecomment-313016394:7640,Performance,load,load,7640,"f84a0fdd000 rw-p 01631000 fd:02 203799116 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so; 7f84a0fe3000-7f84a103a000 rw-p 01a8b000 fd:02 203799116 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_thread.so; 7f84a103a000-7f84a1810000 r-xp 00000000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1810000-7f84a1a10000 ---p 007d6000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a10000-7f84a1a11000 r--p 007d6000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a11000-7f84a1a22000 rw-p 007d7000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; 7f84a1a27000-7f84a1a5c000 rw-p 008ff000 fd:02 203799115 /home/psilocaluser/miniconda3/envs/p4dev36/lib/libmkl_intel_lp64.so; ```. * Case B, the MKL RT; * NumPy from intel channel linked to mkl_rt.so; * Psi4 linked to MKL runtime dynamically; * Result: Both n before p and p before n thread, and both load the same libraries. ```; (idp3) objdir-idp3-4: >>> ldd stage/usr/local/psi4/lib/psi4/core.so | grep mkl; 	libmkl_rt.so => /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so (0x00007f3db8ab8000). (idp3) >>> ldd ~/miniconda3/envs/idp3/lib/python3.5/site-packages/numpy/core/multiarray.cpython-35m-x86_64-linux-gnu.so | grep mkl; 	libmkl_rt.so => /home/psilocaluser/miniconda3/envs/idp3/lib/python3.5/site-packages/numpy/core/../../../../libmkl_rt.so (0x00007fa3164df000). (idp3) >>> head -13 thread.py ; import os; import time. # none for psithon. # good psiapi; import numpy as np; import psi4. # bad psiapi; #import psi4; #import numpy as np. (idp3) >>> PYTHONPATH=/home/psilocaluser/gits/hrw-lab/objdir-idp3-4/stage/usr/local/psi4/lib python thread.py ; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000581 NumPy: 0.000603; Time for threads 1, size 500: Psi4: 0.008048 NumPy: 0.008170; Time for threads 1, size 2000: Psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394
https://github.com/psi4/psi4/issues/755#issuecomment-313016394:14809,Performance,load,loading,14809,"73000-7efc99c74000 r--p 0081f000 fd:02 251997410 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_lp64.so; 7efc99c74000-7efc99c85000 rw-p 00820000 fd:02 251997410 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_lp64.so; 7efc99c8b000-7efc9b367000 r-xp 00000000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b367000-7efc9b566000 ---p 016dc000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b566000-7efc9b569000 r--p 016db000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b569000-7efc9b749000 rw-p 016de000 fd:02 252025832 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_intel_thread.so; 7efc9b750000-7efc9d003000 r-xp 00000000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d003000-7efc9d202000 ---p 018b3000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d202000-7efc9d20a000 r--p 018b2000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efc9d20a000-7efc9d22b000 rw-p 018ba000 fd:02 252025831 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_core.so; 7efca5e25000-7efca621d000 r-xp 00000000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca621d000-7efca641d000 ---p 003f8000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca641d000-7efca6423000 r--p 003f8000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; 7efca6423000-7efca6424000 rw-p 003fe000 fd:02 252003863 /home/psilocaluser/miniconda3/envs/idp3/lib/libmkl_rt.so; ```. * Conclusions; * If we don't want to enforce a loading order of numpy and psi4, must use intel channel numpy; * When I was only using MKL headers from intel channel, lack of py36 didn't matter. But NumPy has to be compiled for a certain py version; * Ordinary psi4 core.so 37 MB. One compiled for avx2, avx, w/default sse4.1 is 53 MB. Not bad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-313016394
https://github.com/psi4/psi4/pull/757#issuecomment-347011768:81,Deployability,patch,patch,81,@ashutoshvt If you are delayed with other things it might be wise for us to just patch up first derivates and get that in. We can work on the rest in other PR's.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-347011768
https://github.com/psi4/psi4/pull/757#issuecomment-349813447:125,Energy Efficiency,efficient,efficient,125,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447
https://github.com/psi4/psi4/pull/757#issuecomment-349813447:87,Integrability,contract,contract,87,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447
https://github.com/psi4/psi4/pull/757#issuecomment-349813447:241,Performance,perform,performance,241,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447
https://github.com/psi4/psi4/pull/757#issuecomment-358123419:128,Testability,test,tests,128,"@psi4/maintainers Can we get a review on this, I think its time to get this in. . I believe @ashutoshvt Will edit the psi4numpy tests, but thats it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-358123419
https://github.com/psi4/psi4/issues/758#issuecomment-313731339:6049,Energy Efficiency,energy,energy,6049,"ls = psi4.core.Vector(""evals"", rdim); evecs = psi4.core.Matrix(""evecs"", rdim, rdim). S.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Descending); shalf_inv = psi4.core.Matrix(""s^(-1/2)"", rdim, rdim); for h in range(nirrep):; for i in range(rdim[h]):; shalf_inv.set(h, i, i, evals.get(h, i) ** -0.5). X = psi4.core.Matrix.doublet(evecs, shalf_inv, False, False); return X. """"""; This function semicanonicalize the orbitals; Fso: SO Fock matrix at geometry 2; C: molecular orbitals that transforms Fso to Fmo; return: unitary matrix that transforms orbitals to semicanonical orbitals; """"""; def semicanonicalize(Fso, C):; # transform SO Fock to MO Fock; Fmo = psi4.core.Matrix.triplet(C, Fso, C, True, False, False). offsets = psi4.core.Dimension.from_list([0 * i for i in range(nirrep)]). U = psi4.core.Matrix(""U to semi"", nmopi, nmopi). # diagonalize each blcok of Fmo; for block in [nrdoccpi,nactvpi,nruoccpi]:; F = psi4.core.Matrix(""Fock"",block,block); for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; F.set(h, i, j, Fmo.get(h, i + offset, j + offset)); ; evals = psi4.core.Vector(""F Evals"", block); evecs = psi4.core.Matrix(""F Evecs"", block, block); F.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Ascending); ; for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; U.set(h, i + offset, j + offset, evecs.get(h, i, j)); offsets[h] += block[h] ### important ###. return U. ```. To use it, you can put the following to the input:; ```; h2o.R = old; Ecas, wfn = energy('casscf', return_wfn=True). h2o.R = new; Escf, wfnSCF = energy('scf', return_wfn=True). # import the script <== Change HERE; sys.path.insert(0, '......'); from ...... import ortho_orbs. wfnSCF.Ca().copy(ortho_orbs(wfn,wfnSCF)); Ecas, wfn = energy('casscf', ref_wfn=wfnSCF, return_wfn=True); ```. I do not worry about efficiency usually, but you can probably make it faster using slicing when filling in the data to matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339
https://github.com/psi4/psi4/issues/758#issuecomment-313731339:6112,Energy Efficiency,energy,energy,6112,"ls = psi4.core.Vector(""evals"", rdim); evecs = psi4.core.Matrix(""evecs"", rdim, rdim). S.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Descending); shalf_inv = psi4.core.Matrix(""s^(-1/2)"", rdim, rdim); for h in range(nirrep):; for i in range(rdim[h]):; shalf_inv.set(h, i, i, evals.get(h, i) ** -0.5). X = psi4.core.Matrix.doublet(evecs, shalf_inv, False, False); return X. """"""; This function semicanonicalize the orbitals; Fso: SO Fock matrix at geometry 2; C: molecular orbitals that transforms Fso to Fmo; return: unitary matrix that transforms orbitals to semicanonical orbitals; """"""; def semicanonicalize(Fso, C):; # transform SO Fock to MO Fock; Fmo = psi4.core.Matrix.triplet(C, Fso, C, True, False, False). offsets = psi4.core.Dimension.from_list([0 * i for i in range(nirrep)]). U = psi4.core.Matrix(""U to semi"", nmopi, nmopi). # diagonalize each blcok of Fmo; for block in [nrdoccpi,nactvpi,nruoccpi]:; F = psi4.core.Matrix(""Fock"",block,block); for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; F.set(h, i, j, Fmo.get(h, i + offset, j + offset)); ; evals = psi4.core.Vector(""F Evals"", block); evecs = psi4.core.Matrix(""F Evecs"", block, block); F.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Ascending); ; for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; U.set(h, i + offset, j + offset, evecs.get(h, i, j)); offsets[h] += block[h] ### important ###. return U. ```. To use it, you can put the following to the input:; ```; h2o.R = old; Ecas, wfn = energy('casscf', return_wfn=True). h2o.R = new; Escf, wfnSCF = energy('scf', return_wfn=True). # import the script <== Change HERE; sys.path.insert(0, '......'); from ...... import ortho_orbs. wfnSCF.Ca().copy(ortho_orbs(wfn,wfnSCF)); Ecas, wfn = energy('casscf', ref_wfn=wfnSCF, return_wfn=True); ```. I do not worry about efficiency usually, but you can probably make it faster using slicing when filling in the data to matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339
https://github.com/psi4/psi4/issues/758#issuecomment-313731339:6296,Energy Efficiency,energy,energy,6296,"ls = psi4.core.Vector(""evals"", rdim); evecs = psi4.core.Matrix(""evecs"", rdim, rdim). S.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Descending); shalf_inv = psi4.core.Matrix(""s^(-1/2)"", rdim, rdim); for h in range(nirrep):; for i in range(rdim[h]):; shalf_inv.set(h, i, i, evals.get(h, i) ** -0.5). X = psi4.core.Matrix.doublet(evecs, shalf_inv, False, False); return X. """"""; This function semicanonicalize the orbitals; Fso: SO Fock matrix at geometry 2; C: molecular orbitals that transforms Fso to Fmo; return: unitary matrix that transforms orbitals to semicanonical orbitals; """"""; def semicanonicalize(Fso, C):; # transform SO Fock to MO Fock; Fmo = psi4.core.Matrix.triplet(C, Fso, C, True, False, False). offsets = psi4.core.Dimension.from_list([0 * i for i in range(nirrep)]). U = psi4.core.Matrix(""U to semi"", nmopi, nmopi). # diagonalize each blcok of Fmo; for block in [nrdoccpi,nactvpi,nruoccpi]:; F = psi4.core.Matrix(""Fock"",block,block); for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; F.set(h, i, j, Fmo.get(h, i + offset, j + offset)); ; evals = psi4.core.Vector(""F Evals"", block); evecs = psi4.core.Matrix(""F Evecs"", block, block); F.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Ascending); ; for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; U.set(h, i + offset, j + offset, evecs.get(h, i, j)); offsets[h] += block[h] ### important ###. return U. ```. To use it, you can put the following to the input:; ```; h2o.R = old; Ecas, wfn = energy('casscf', return_wfn=True). h2o.R = new; Escf, wfnSCF = energy('scf', return_wfn=True). # import the script <== Change HERE; sys.path.insert(0, '......'); from ...... import ortho_orbs. wfnSCF.Ca().copy(ortho_orbs(wfn,wfnSCF)); Ecas, wfn = energy('casscf', ref_wfn=wfnSCF, return_wfn=True); ```. I do not worry about efficiency usually, but you can probably make it faster using slicing when filling in the data to matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339
https://github.com/psi4/psi4/issues/758#issuecomment-313731339:238,Modifiability,variab,variables,238,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339
https://github.com/psi4/psi4/issues/758#issuecomment-313731339:705,Testability,Test,Testing,705,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339
https://github.com/psi4/psi4/issues/758#issuecomment-313731339:132,Usability,simpl,simply,132,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339
https://github.com/psi4/psi4/issues/758#issuecomment-869295505:72,Performance,optimiz,optimizations,72,"For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869295505
https://github.com/psi4/psi4/issues/758#issuecomment-869301276:74,Performance,optimiz,optimizations,74,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. It sort of sounds like the code should do a Gram-Schmidt to reorthogonalize the orbitals...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869301276
https://github.com/psi4/psi4/issues/758#issuecomment-869303745:110,Integrability,depend,dependent,110,"I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869303745
https://github.com/psi4/psi4/issues/758#issuecomment-869305358:112,Integrability,depend,dependent,112,"> I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go. But that's sort of the point: Gram-Schmidt keeps the meaning of the orbitals, which is important if you're running e.g. CASSCF. Of course, you can always do the orthogonalization per subspace, e.g. doubly occupied, RAS I, RAS II, RAS III, inactive, but then you also have to take care of the cross-block overlaps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305358
https://github.com/psi4/psi4/issues/758#issuecomment-869305662:349,Energy Efficiency,energy,energy,349,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. That also means that the first energy is non-variational...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305662
https://github.com/psi4/psi4/issues/758#issuecomment-869305662:74,Performance,optimiz,optimizations,74,"> For reference, this issue is _also_ known to cause problems in geometry optimizations. You read in the orbitals from the previous geometry but don't correct for orthogonality. Fock matrix diagonalization will correct for orthogonality due to the explicit S^(-1/2), but it costs you all the good orbital information. That also means that the first energy is non-variational...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305662
https://github.com/psi4/psi4/issues/758#issuecomment-869314229:114,Integrability,depend,dependent,114,"> > I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go.; > ; > But that's sort of the point: Gram-Schmidt keeps the meaning of the orbitals, which is important if you're running e.g. CASSCF. Of course, you can always do the orthogonalization per subspace, e.g. doubly occupied, RAS I, RAS II, RAS III, inactive, but then you also have to take care of the cross-block overlaps. For CASSCF, we **have to** do per subspace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869314229
https://github.com/psi4/psi4/issues/759#issuecomment-313824229:60,Availability,error,error,60,"Can confirm it, but had to fiddle with the input to see the error because coordinates were returning all 0s (integer rounding). This input work on my machine:; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; }. set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1.*(float(ir)/100.); mol.R2 = 2.*(float(ir)/100.); mol.R3 = 3.*(float(ir)/100.); ci_e=energy('fci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313824229
https://github.com/psi4/psi4/issues/759#issuecomment-313824229:503,Energy Efficiency,energy,energy,503,"Can confirm it, but had to fiddle with the input to see the error because coordinates were returning all 0s (integer rounding). This input work on my machine:; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; }. set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1.*(float(ir)/100.); mol.R2 = 2.*(float(ir)/100.); mol.R3 = 3.*(float(ir)/100.); ci_e=energy('fci'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313824229
https://github.com/psi4/psi4/issues/759#issuecomment-313982153:109,Deployability,update,update,109,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153
https://github.com/psi4/psi4/issues/759#issuecomment-313982153:152,Deployability,update,updated,152,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153
https://github.com/psi4/psi4/issues/759#issuecomment-313982153:118,Modifiability,variab,variable,118,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153
https://github.com/psi4/psi4/issues/759#issuecomment-313982153:367,Modifiability,variab,variable,367,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153
https://github.com/psi4/psi4/pull/760#issuecomment-314460580:145,Testability,test,test,145,@andysim I finally added your symmetrize Hessian code to your Hessian module. Looks like for some geometries the something goes slightly awry:. `test/gibbs` for the H20 dimer:. ```; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1799.290 2588.774; 2 3812.368 5485.140; 3 3945.823 5677.152; ```. ```; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 0.002 0.003; 2 1799.290 2588.774; 3 3812.368 5485.140; ```. which is actually a pretty good trick. I don't immediate see anything wrong in the symmetrize function `libmints/matrix.cc:1079`. The N2 dimer seems work however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314460580
https://github.com/psi4/psi4/pull/760#issuecomment-314470850:572,Availability,ping,ping,572,"Hmmm. Just looked at my implementation and saw this gem; ```; if(H->nirrep() > 1 || H->rowdim() != H->coldim() || H->rowdim() != 3*molecule->natom()); throw PSIEXCEPTION(""Molecule::symmetrize_hessian: Matrix cannot be symmetrized."");; ```; The routine is just to clean up an already symmetric Hessian, not to apply symmetry (years since I wrote it, so I'm having to trawl through code to put things back in RAM). It should be easy to use the CDSalc class to apply symmetry to the Hessian. I remember chatting with @loriab about that, btu can't find the code snippet. Will ping back when I find it. There's no reason I can think of for the cleanup code being restricted to C1 symmetry; it should only need small tweaks to work for all point groups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314470850
https://github.com/psi4/psi4/pull/760#issuecomment-314470850:244,Integrability,rout,routine,244,"Hmmm. Just looked at my implementation and saw this gem; ```; if(H->nirrep() > 1 || H->rowdim() != H->coldim() || H->rowdim() != 3*molecule->natom()); throw PSIEXCEPTION(""Molecule::symmetrize_hessian: Matrix cannot be symmetrized."");; ```; The routine is just to clean up an already symmetric Hessian, not to apply symmetry (years since I wrote it, so I'm having to trawl through code to put things back in RAM). It should be easy to use the CDSalc class to apply symmetry to the Hessian. I remember chatting with @loriab about that, btu can't find the code snippet. Will ping back when I find it. There's no reason I can think of for the cleanup code being restricted to C1 symmetry; it should only need small tweaks to work for all point groups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314470850
https://github.com/psi4/psi4/pull/760#issuecomment-317918961:49,Availability,failure,failure,49,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961
https://github.com/psi4/psi4/pull/760#issuecomment-317918961:551,Availability,Error,Error,551,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961
https://github.com/psi4/psi4/pull/760#issuecomment-317918961:707,Availability,Error,Error,707,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961
https://github.com/psi4/psi4/pull/760#issuecomment-317918961:273,Deployability,Install,Install,273,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961
https://github.com/psi4/psi4/pull/760#issuecomment-317918961:444,Deployability,Install,Install,444,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961
https://github.com/psi4/psi4/pull/760#issuecomment-317918961:493,Energy Efficiency,energy,energy,493,"@loriab @andysim Can you guys check into the EFP failure when you get a moment, not completely sure what to do about that one. If we *only* have EFP frags:; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 83, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib/psi4/driver/driver.py"", line 427, in energy; molecule.update_geometry(); RuntimeError: ; Fatal Error: Molecule::geometry(): molecule does not contain any atoms. Try calling `molecule.update_geometry(); to ensure the molecule is properly constructed.; Error occurred in file: /home/travis/build/psi4/psi4/psi4/src/psi4/libmints/molecule.cc on line: 541; The most recent 5 function calls were:; psi::PsiException::PsiException(std::string, char const*, int); psi::Molecule::geometry() const; psi::Molecule::set_full_point_group(double); psi::Molecule::update_geometry(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-317918961
https://github.com/psi4/psi4/pull/761#issuecomment-317204127:21,Usability,feedback,feedback,21,"Cool, thanks for the feedback everyone. There's still a handful of docstrings left that I felt I couldn't write, but they are rather niche. If Jet or someone who knows more about electronic structure theory or the corresponding C++ code could finish those up that would be great. I intend to finish the other export_x.cc docstrings in the future when I have more time. This one needed the most work by far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/761#issuecomment-317204127
https://github.com/psi4/psi4/issues/763#issuecomment-314960521:471,Deployability,release,release,471,"The `809f363` is the commit hash, which is the latest commit ""Merge pull request 743"" on the main GH page. The `dev419` just means 419 commits beyond the latest tag, which you probably saw is ""v1.1"". The conda dev package version is computed from a [git describe](https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L105) command so that there's always a sortable version for every commit but it can also be linked back to the git record via the hash. Last set of release notes will be for 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/763#issuecomment-314960521
https://github.com/psi4/psi4/issues/763#issuecomment-314960521:28,Security,hash,hash,28,"The `809f363` is the commit hash, which is the latest commit ""Merge pull request 743"" on the main GH page. The `dev419` just means 419 commits beyond the latest tag, which you probably saw is ""v1.1"". The conda dev package version is computed from a [git describe](https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L105) command so that there's always a sortable version for every commit but it can also be linked back to the git record via the hash. Last set of release notes will be for 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/763#issuecomment-314960521
https://github.com/psi4/psi4/issues/763#issuecomment-314960521:453,Security,hash,hash,453,"The `809f363` is the commit hash, which is the latest commit ""Merge pull request 743"" on the main GH page. The `dev419` just means 419 commits beyond the latest tag, which you probably saw is ""v1.1"". The conda dev package version is computed from a [git describe](https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L105) command so that there's always a sortable version for every commit but it can also be linked back to the git record via the hash. Last set of release notes will be for 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/763#issuecomment-314960521
https://github.com/psi4/psi4/issues/764#issuecomment-318659874:18,Availability,down,down,18,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874
https://github.com/psi4/psi4/issues/764#issuecomment-318659874:23,Deployability,update,updated,23,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874
https://github.com/psi4/psi4/issues/764#issuecomment-318659874:93,Deployability,update,update,93,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874
https://github.com/psi4/psi4/issues/764#issuecomment-318659874:290,Deployability,update,updated,290,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874
https://github.com/psi4/psi4/issues/764#issuecomment-318659874:310,Deployability,update,update,310,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874
https://github.com/psi4/psi4/issues/764#issuecomment-318659874:73,Integrability,depend,dependencies,73,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874
https://github.com/psi4/psi4/issues/765#issuecomment-316060861:1008,Modifiability,variab,variable,1008,"when you use the driver function `psi4.geometry()` the `psi4.core.Molecule` object that is returned has not been completely initialized yet. To complete the initialization of the molecule you can call the the `update_geometry` method of the `psi4.core.Molecule` instance that is returned. . In your case:. ```python; >>> import psi4; >>> mol = psi4.geometry('H 0.0 0.0 0.0\nH 1.5 0.0 0.0'); >>> atoms = mol.geometry().to_array(); >>> atoms; array([], shape=(0, 3), dtype=float64). >>> mol.update_geometry(); >>> atoms2 = mol.geometry().to_array(); >>> atoms2 ; array([[ -1.41729460e+00, -2.16960662e-17, 0.00000000e+00],; [ 1.41729460e+00, 2.16960662e-17, 0.00000000e+00]]). ```. While the docstring for `psi4.geometry()` might not make this clear, and perhaps it should? The docstring for `psi4.core.Molecule.update_geometry()` does:. ```python; >>> import psi4; >>> print(psi4.core.Molecule.update_geometry.__doc__); update_geometry(self: psi4.core.Molecule) -> None. Reevaluates the geometry with current variable values, orientation directives, etc. ; Must be called after initial Molecule definition by string.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316060861
https://github.com/psi4/psi4/issues/765#issuecomment-316060861:742,Usability,clear,clear,742,"when you use the driver function `psi4.geometry()` the `psi4.core.Molecule` object that is returned has not been completely initialized yet. To complete the initialization of the molecule you can call the the `update_geometry` method of the `psi4.core.Molecule` instance that is returned. . In your case:. ```python; >>> import psi4; >>> mol = psi4.geometry('H 0.0 0.0 0.0\nH 1.5 0.0 0.0'); >>> atoms = mol.geometry().to_array(); >>> atoms; array([], shape=(0, 3), dtype=float64). >>> mol.update_geometry(); >>> atoms2 = mol.geometry().to_array(); >>> atoms2 ; array([[ -1.41729460e+00, -2.16960662e-17, 0.00000000e+00],; [ 1.41729460e+00, 2.16960662e-17, 0.00000000e+00]]). ```. While the docstring for `psi4.geometry()` might not make this clear, and perhaps it should? The docstring for `psi4.core.Molecule.update_geometry()` does:. ```python; >>> import psi4; >>> print(psi4.core.Molecule.update_geometry.__doc__); update_geometry(self: psi4.core.Molecule) -> None. Reevaluates the geometry with current variable values, orientation directives, etc. ; Must be called after initial Molecule definition by string.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316060861
https://github.com/psi4/psi4/issues/765#issuecomment-316152578:16,Deployability,update,update,16,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578
https://github.com/psi4/psi4/issues/765#issuecomment-316152578:285,Deployability,update,update,285,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578
https://github.com/psi4/psi4/issues/765#issuecomment-316152578:314,Modifiability,variab,variables,314,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578
https://github.com/psi4/psi4/issues/765#issuecomment-316152578:58,Safety,sanity check,sanity checks,58,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578
https://github.com/psi4/psi4/issues/765#issuecomment-316154922:220,Availability,Down,Downside,220,"`Molecule.geometry()` is providing all Cart coords, so the Mol should be fully specified and this should be safe (at first appearances). If opt/findif don't protest and a trial period proves safe, then I'm good with it. Downside is that we make `update_geometry()` even more rare and forgettable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316154922
https://github.com/psi4/psi4/issues/765#issuecomment-316154922:108,Safety,safe,safe,108,"`Molecule.geometry()` is providing all Cart coords, so the Mol should be fully specified and this should be safe (at first appearances). If opt/findif don't protest and a trial period proves safe, then I'm good with it. Downside is that we make `update_geometry()` even more rare and forgettable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316154922
https://github.com/psi4/psi4/issues/765#issuecomment-316154922:191,Safety,safe,safe,191,"`Molecule.geometry()` is providing all Cart coords, so the Mol should be fully specified and this should be safe (at first appearances). If opt/findif don't protest and a trial period proves safe, then I'm good with it. Downside is that we make `update_geometry()` even more rare and forgettable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316154922
https://github.com/psi4/psi4/pull/767#issuecomment-316203705:25,Availability,Ping,Ping,25,Thanks for the heads up! Ping @bast. Do you have an example for the nondeterministic behavior? Might be something that happens also to other codes using these math detection macros.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767#issuecomment-316203705
https://github.com/psi4/psi4/pull/767#issuecomment-316203705:164,Safety,detect,detection,164,Thanks for the heads up! Ping @bast. Do you have an example for the nondeterministic behavior? Might be something that happens also to other codes using these math detection macros.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/767#issuecomment-316203705
https://github.com/psi4/psi4/issues/768#issuecomment-316410141:88,Safety,detect,detected,88,"Psi4 uses the python headers, so it must be run with the same Python version that CMake detected at build time. The `__Py_ZeroStruct` strongly suggests to me that you're mixing Py2/3. You can see what Python psi was built with in your `{objdir}/CMakeCache.txt` or in the top line of built executable `{objdir}/stage/.../bin/psi4`. If you continue this thread, also report `otool -L {objdir}/stage/.../lib/psi4/core.so`, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316410141
https://github.com/psi4/psi4/issues/768#issuecomment-316419197:100,Deployability,install,installation,100,"Yes, I believe that I am indeed mixing them. How do I specify a specific Python distribution in the installation process?. Also, the otool -L ...core.so output reads. ```; objdir/stage/usr/local/psi4/lib/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib (compatibility versio; 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib (compatibility version ; 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316419197
https://github.com/psi4/psi4/issues/768#issuecomment-316421062:199,Integrability,depend,dependencies,199,"Pass [these](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L40-L42) in via `cmake -DPYTHON_EXECUTABLE=/such/and/such/python -DPYTHON...`. Note that one can use conda to get a head start on dependencies like cmake, Libint, libxc, python, etc. (http://psicode.org/psi4manual/master/conda.html#faq-psi4deps). Also math libs, though they haven't made it into docs yet. But you seem to have the build under control. `otool -L` looks fine, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316421062
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:113,Availability,error,errors,113,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:177,Availability,error,errors,177,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:352,Availability,Error,Error,352,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:405,Availability,Error,Error,405,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:430,Availability,Error,Error,430,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:153,Modifiability,Config,Configuring,153,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:341,Modifiability,config,configure,341,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433585:273,Testability,log,log,273,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585
https://github.com/psi4/psi4/issues/768#issuecomment-316433982:123,Availability,error,error,123,"Make sure you're making a new object directory, not reusing the py27 one. And post everything from `cmake` command through error, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433982
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:24,Availability,error,errors,24,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:88,Availability,error,errors,88,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:148,Availability,error,errors,148,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:2374,Deployability,Release,Release,2374,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:2822,Deployability,install,install,2822,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6687,Modifiability,Config,Configuring,6687,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1762,Performance,Perform,Performing,1762,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1814,Performance,Perform,Performing,1814,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1885,Performance,Perform,Performing,1885,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1939,Performance,Perform,Performing,1939,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3739,Performance,Perform,Performing,3739,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3780,Performance,Perform,Performing,3780,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3865,Performance,Perform,Performing,3865,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3906,Performance,Perform,Performing,3906,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3998,Performance,Perform,Performing,3998,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4039,Performance,Perform,Performing,4039,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4123,Performance,Perform,Performing,4123,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4164,Performance,Perform,Performing,4164,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4249,Performance,Perform,Performing,4249,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4290,Performance,Perform,Performing,4290,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4374,Performance,Perform,Performing,4374,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4415,Performance,Perform,Performing,4415,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4500,Performance,Perform,Performing,4500,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4541,Performance,Perform,Performing,4541,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4626,Performance,Perform,Performing,4626,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4667,Performance,Perform,Performing,4667,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4749,Performance,Perform,Performing,4749, OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xope,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4790,Performance,Perform,Performing,4790, OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4870,Performance,Perform,Performing,4870, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag =,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4911,Performance,Perform,Performing,4911, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FL,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4991,Performance,Perform,Performing,4991,- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5032,Performance,Perform,Performing,5032,- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5119,Performance,Perform,Performing,5119,erforming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX fl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5160,Performance,Perform,Performing,5160,erforming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLA,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5254,Performance,Perform,Performing,5254, Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missin,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5295,Performance,Perform,Performing,5295, Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5381,Performance,Perform,Performing,5381,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5422,Performance,Perform,Performing,5422,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5509,Performance,Perform,Performing,5509,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5550,Performance,Perform,Performing,5550,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5636,Performance,Perform,Performing,5636,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5677,Performance,Perform,Performing,5677,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5764,Performance,Perform,Performing,5764,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5805,Performance,Perform,Performing,5805,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5892,Performance,Perform,Performing,5892,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5933,Performance,Perform,Performing,5933,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6017,Performance,Perform,Performing,6017,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6058,Performance,Perform,Performing,6058,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6140,Performance,Perform,Performing,6140,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6181,Performance,Perform,Performing,6181,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:868,Safety,Detect,Detecting,868,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:902,Safety,Detect,Detecting,902,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:943,Safety,Detect,Detecting,943,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:976,Safety,Detect,Detecting,976,"Im actually getting the errors after make -j\`..\`. The output of make -j... is ; [make errors.txt](https://github.com/psi4/psi4/files/1159909/make.errors.txt). And the output of cmake is. ```; pc0108717:psi4 edq$ sudo cmake -H. -Bobjdir -DPYTHON_EXECUTABLE=/opt/local/bin/python -DPYTHON_LIBRARY=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib -DPYTHON_INCLUDE_DIR=/opt/local/Library/Frameworks/Python.framework/Versions/3.6/include/python3.6m; -- The C compiler identification is AppleClang 8.0.0.8000042; -- The CXX compiler identification is AppleClang 8.0.0.8000042; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, App",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1279,Safety,Detect,Detecting,1279,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1315,Safety,Detect,Detecting,1315,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1358,Safety,Detect,Detecting,1358,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1393,Safety,Detect,Detecting,1393,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1773,Testability,Test,Test,1773,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1825,Testability,Test,Test,1825,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1896,Testability,Test,Test,1896,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1950,Testability,Test,Test,1950,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3750,Testability,Test,Test,3750,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3791,Testability,Test,Test,3791,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3876,Testability,Test,Test,3876,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:3917,Testability,Test,Test,3917,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4009,Testability,Test,Test,4009,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4050,Testability,Test,Test,4050,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4134,Testability,Test,Test,4134,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4175,Testability,Test,Test,4175,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4260,Testability,Test,Test,4260,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4301,Testability,Test,Test,4301,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4385,Testability,Test,Test,4385,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4426,Testability,Test,Test,4426,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4511,Testability,Test,Test,4511,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4552,Testability,Test,Test,4552,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4637,Testability,Test,Test,4637,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4678,Testability,Test,Test,4678,,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4760,Testability,Test,Test,4760,FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; --,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4801,Testability,Test,Test,4801,FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; --,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4881,Testability,Test,Test,4881,enMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopen,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4922,Testability,Test,Test,4922,enMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETEC,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5002,Testability,Test,Test,5002,ming Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5043,Testability,Test,Test,5043,ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_D,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5130,Testability,Test,Test,5130,g Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5171,Testability,Test,Test,5171,g Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECT,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5265,Testability,Test,Test,5265,enMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenM,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5306,Testability,Test,Test,5306,enMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxyg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5392,Testability,Test,Test,5392,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5433,Testability,Test,Test,5433,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5520,Testability,Test,Test,5520,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5561,Testability,Test,Test,5561,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5647,Testability,Test,Test,5647,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5688,Testability,Test,Test,5688,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5775,Testability,Test,Test,5775,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5816,Testability,Test,Test,5816,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5903,Testability,Test,Test,5903,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:5944,Testability,Test,Test,5944,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6028,Testability,Test,Test,6028,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6069,Testability,Test,Test,6069,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6151,Testability,Test,Test,6151,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6192,Testability,Test,Test,6192,"TECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6443,Testability,test,test,6443,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6494,Testability,test,test,6494,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6556,Testability,test,test,6556,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6618,Testability,test,test,6618,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/issues/768#issuecomment-316450754:6666,Testability,test,test,6666,"ming Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/edq/Github/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754
https://github.com/psi4/psi4/pull/769#issuecomment-316850403:34,Testability,test,tested,34,Better question: How was this not tested? Should Travis go through smoke tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316850403
https://github.com/psi4/psi4/pull/769#issuecomment-316850403:73,Testability,test,tests,73,Better question: How was this not tested? Should Travis go through smoke tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316850403
https://github.com/psi4/psi4/pull/769#issuecomment-316856046:22,Testability,test,tests,22,"Aren't a whole lot of tests of guess_basis. I think ""smoke"" is a subset of ""quick"", through I would like the full set of smoke addons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316856046
https://github.com/psi4/psi4/pull/769#issuecomment-316857100:106,Energy Efficiency,energy,energy,106,"Oh, I see its only if its cast and no other scenario. @bwb314 Can you add a *single* cast to `tests/dftd3/energy/input.dat`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316857100
https://github.com/psi4/psi4/pull/769#issuecomment-316857100:94,Testability,test,tests,94,"Oh, I see its only if its cast and no other scenario. @bwb314 Can you add a *single* cast to `tests/dftd3/energy/input.dat`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316857100
https://github.com/psi4/psi4/issues/771#issuecomment-317852195:99,Testability,test,test,99,"Thanks for the very detailed bug report. The changes you suggest look harmless to me, so I'll make test them on my local machine and submit a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/771#issuecomment-317852195
https://github.com/psi4/psi4/issues/773#issuecomment-319246264:13,Energy Efficiency,energy,energy,13,"Is the guess energy the same or does it change by a large amount when changing the Cholesky threshold?. So the SAD energies are correct which means the densities are *likely* similar, and tweaking the Cholesky doesn't help. Color me stumped. Maybe the SAD guess is picking up a odd symmetry with different diagonalizers, can you try `set sad_frac_occ true`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319246264
https://github.com/psi4/psi4/issues/773#issuecomment-319403375:10,Energy Efficiency,energy,energy,10,"The guess energy changes by 0.018 H when changing the Cholesky threshold from 1e-6 to 1e-12. . Using `set sad_frac_occ true`, the job actually converges, and the guess energy from the source build and Conda binary are much more similar (within 0.0001 H):. Conda Binary:; `@DF-RKS iter 0: -1710.72967880925034 -1.71073e+03 1.05313e-01`. Source Build:; `@DF-RKS iter 0: -1710.72974672447867 -1.71073e+03 9.17594e-02`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319403375
https://github.com/psi4/psi4/issues/773#issuecomment-319403375:168,Energy Efficiency,energy,energy,168,"The guess energy changes by 0.018 H when changing the Cholesky threshold from 1e-6 to 1e-12. . Using `set sad_frac_occ true`, the job actually converges, and the guess energy from the source build and Conda binary are much more similar (within 0.0001 H):. Conda Binary:; `@DF-RKS iter 0: -1710.72967880925034 -1.71073e+03 1.05313e-01`. Source Build:; `@DF-RKS iter 0: -1710.72974672447867 -1.71073e+03 9.17594e-02`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319403375
https://github.com/psi4/psi4/issues/773#issuecomment-319409584:187,Testability,test,test,187,"Thanks, @dgasmith. So the docstring should be something like ""Do use shielding to estimate fractional occupation in SAD guess?""? I've no objection to trying a `true` default. Want a full test suite run with that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319409584
https://github.com/psi4/psi4/issues/773#issuecomment-319410297:39,Testability,test,test,39,"I don't have enough compute for a full test run currently :). Maybe ""Forces a even distribution of occupations across the last partially occupied orbital shell"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319410297
https://github.com/psi4/psi4/issues/773#issuecomment-321896860:37,Testability,test,tests,37,"@loriab I think we were running full tests on this, do you have any results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321896860
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:9,Availability,failure,failures,9,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:649,Energy Efficiency,energy,energy-wise,649,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:2442,Energy Efficiency,Energy,Energy,2442,". But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968635687 -4.38531e-02 1.98267e-04 DIIS; @DF-RKS iter 18: -150.12286951781326 8.33017e-03 1.43806e-02 SOKS, nmicro = 4; @DF-RKS iter 19: -150.13120137806487 -8.33186e-03 5.00267e-05 DIIS; @DF-RKS iter 20: -150.12924629472502 1.95508e-03 6.96605e-03 SOKS, nmicro = 4; @DF-RKS iter 21: -150.13120149212386 -1.95520e-03 7.21044e-06 SOKS, nmicro = 4; @DF-RKS iter 22: -150.13120149480929 -2.68543e-09 3.33181e-08 SOKS, nmicro = conv; @DF-RKS Final Energy: -150.13120149480929; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:39,Testability,test,tests,39,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:232,Testability,Test,TestComparisonError,232,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:359,Testability,Test,TestComparisonError,359,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:508,Testability,Test,TestComparisonError,508,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/773#issuecomment-321913106:690,Testability,test,test,690,"Ok, four failures:. ```; The following tests FAILED:; 	269 - props2 (Failed); 	270 - props3 (Failed); 	324 - soscf-dft (Failed); 	349 - scf-coverage (Failed); ```. props3 and scf-coverage could be healed by slight relaxation:; ```; TestComparisonError: 	Lithium anion stability: computed value (-7.4168185) does not match (-7.4168196) to 6 digits.; ```. ```; TestComparisonError: 	64-pole ZZZZZZ: computed value (-20544.12046) does not match (-20544.12057) to 4 digits.; ```. But props2 is really off:; ```; TestComparisonError: Y Component of Dipole 0: computed value (21.592762) does not match (17.775955) to 5 digits.; ```. And soscf-dft is fine energy-wise but oscillates more that the test allows on iterations in the next-to-last (PBE) subtest:; ```; @DF-RKS iter 0: -148.97585698578987 -1.48976e+02 2.56136e-01 ; @DF-RKS iter 1: -148.95093820938956 2.49188e-02 1.50011e-01 ; @DF-RKS iter 2: -149.39705073850598 -4.46113e-01 1.11947e-01 DIIS; @DF-RKS iter 3: -150.12875309470365 -7.31702e-01 7.57889e-03 DIIS; @DF-RKS iter 4: -150.12714697276095 1.60612e-03 1.00558e-02 SOKS, nmicro = 4; @DF-RKS iter 5: -150.13120148446785 -4.05451e-03 1.42232e-05 DIIS; @DF-RKS iter 6: -150.12700529520501 4.19619e-03 1.02055e-02 SOKS, nmicro = 4; @DF-RKS iter 7: -150.13120147305844 -4.19618e-03 2.10040e-05 DIIS; @DF-RKS iter 8: -150.12394657944893 7.25489e-03 1.34190e-02 SOKS, nmicro = 4; @DF-RKS iter 9: -150.13120141103812 -7.25483e-03 4.21385e-05 DIIS; @DF-RKS iter 10: -150.12366619982981 7.53521e-03 1.36759e-02 SOKS, nmicro = 4; @DF-RKS iter 11: -150.13120140228156 -7.53520e-03 4.43841e-05 DIIS; @DF-RKS iter 12: -150.11089835193317 2.03031e-02 2.24444e-02 SOKS, nmicro = 4; @DF-RKS iter 13: -150.13120064244808 -2.03023e-02 1.38615e-04 DIIS; @DF-RKS iter 14: -150.10407305304250 2.71276e-02 2.59404e-02 SOKS, nmicro = 4; @DF-RKS iter 15: -150.13119989205700 -2.71268e-02 1.91309e-04 DIIS; @DF-RKS iter 16: -150.08734658173793 4.38533e-02 3.29682e-02 SOKS, nmicro = 5; @DF-RKS iter 17: -150.13119968",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321913106
https://github.com/psi4/psi4/issues/775#issuecomment-320452824:165,Deployability,install,install,165,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824
https://github.com/psi4/psi4/issues/775#issuecomment-320452824:271,Deployability,install,install,271,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824
https://github.com/psi4/psi4/issues/775#issuecomment-320452824:21,Modifiability,plugin,plugin,21,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824
https://github.com/psi4/psi4/issues/775#issuecomment-320452824:52,Modifiability,plugin,plugin-compile,52,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824
https://github.com/psi4/psi4/issues/775#issuecomment-320454022:78,Modifiability,plugin,plugin-compile,78,"Thanks for your reply! I was just using`cmake` with no options. Using `psi4 --plugin-compile` I can build my plugin now. However in previous versions, just` cmake .` used to work as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320454022
https://github.com/psi4/psi4/issues/775#issuecomment-320454022:109,Modifiability,plugin,plugin,109,"Thanks for your reply! I was just using`cmake` with no options. Using `psi4 --plugin-compile` I can build my plugin now. However in previous versions, just` cmake .` used to work as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320454022
https://github.com/psi4/psi4/pull/780#issuecomment-322811651:256,Testability,test,tests,256,"I think you have to add `.def(""irrep_labels"", &Molecule::irrep_labels, ""docstring"")` back to `export_mints`. But now it can be an ordinary export, not the complicated lambda. Same for any other export lambda you deleted as unnecessary. That should fix the tests. After that, lgtm!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/780#issuecomment-322811651
https://github.com/psi4/psi4/pull/780#issuecomment-323517982:73,Testability,test,tests,73,Looks like this may have caused some trouble in eom-ccsd (#786) that the tests didn't catch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/780#issuecomment-323517982
https://github.com/psi4/psi4/issues/782#issuecomment-332296506:119,Deployability,update,updated,119,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506
https://github.com/psi4/psi4/issues/782#issuecomment-332296506:87,Modifiability,variab,variable,87,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506
https://github.com/psi4/psi4/issues/782#issuecomment-332296506:224,Testability,Test,Test,224,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506
https://github.com/psi4/psi4/issues/782#issuecomment-332296506:910,Testability,test,test,910,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506
https://github.com/psi4/psi4/issues/782#issuecomment-332296506:1038,Testability,log,logical,1038,"w/o reinvestigating, this is my memory of what's going on:. props2 is a Cartesian-with-variable geometry (y-coord gets updated in a loop) with _no explicit_ freeze com/orient. System is a cation so origin of *poles matters. Test ref values are computed at COM. For a long time this was fine b/c in the absence of user forbidding it, molecule was moved to COM & std orientation and computed==expected. But there's a deep pit that both users and developers can fall into wrt scanning over coordinates of a Cartesian system -- values you're updating aren't in same coord sys as values being specified. Results can be jarring. So DGAS fixed with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc#L3110-L3117 . This fills the pitfall, but now the props2 case doesn't get moved to COM, so computed != expected. That is, until psi4/psi4#808 where we explictly instruct moving to COM so that test passes again. Naturally, a Z-Mat molecule would always go to COM and wouldn't have this distinction. This is all perfectly logical. Trouble is consistency btwn Cart/ZMat and what users will be least confused by.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332296506
https://github.com/psi4/psi4/issues/782#issuecomment-332298418:126,Availability,error,errors,126,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418
https://github.com/psi4/psi4/issues/782#issuecomment-332298418:264,Deployability,update,update,264,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418
https://github.com/psi4/psi4/issues/782#issuecomment-332298418:52,Integrability,bridg,bridge,52,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418
https://github.com/psi4/psi4/issues/782#issuecomment-332298418:179,Testability,log,logical,179,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:936,Availability,error,errors,936,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:310,Deployability,update,updated,310,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:1083,Deployability,update,update,1083,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:364,Energy Efficiency,charge,charged,364,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:676,Energy Efficiency,charge,charged,676,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:859,Integrability,bridg,bridge,859,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:59,Testability,log,logical,59,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/782#issuecomment-332340271:992,Testability,log,logical,992,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271
https://github.com/psi4/psi4/issues/785#issuecomment-323494378:132,Availability,error,error,132,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378
https://github.com/psi4/psi4/issues/785#issuecomment-323494378:189,Availability,error,error,189,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378
https://github.com/psi4/psi4/issues/785#issuecomment-323494378:195,Integrability,message,message,195,I have a computer at work with openSUSE 13.2 (Newer version compared to your 12.3) I have recently compiled psi4 on it without this error. Maybe it's an issue with that version of ld? Your error message seems to indicate that ld knows this behavior is a bug. My version of ld is newer than yours also:; $ ld --version; GNU ld (GNU Binutils; openSUSE 13.2) 2.24.0.20140403-6.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/785#issuecomment-323494378
https://github.com/psi4/psi4/issues/786#issuecomment-323517419:59,Modifiability,variab,variable,59,This may have been me. I am in the process of updating the variable types for the irreducible representations. The change in #780 passed all the tests but looks like we missed this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323517419
https://github.com/psi4/psi4/issues/786#issuecomment-323517419:145,Testability,test,tests,145,This may have been me. I am in the process of updating the variable types for the irreducible representations. The change in #780 passed all the tests but looks like we missed this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323517419
https://github.com/psi4/psi4/issues/786#issuecomment-323519546:30,Deployability,update,update,30,"ok, Let me please know of the update. I am in dire need of this part of the PSI4.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323519546
https://github.com/psi4/psi4/issues/786#issuecomment-323533197:134,Availability,error,error,134,"I checked with an earlier version of the code, before my changes were merged. Your example file dies at the same place, with the same error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323533197
https://github.com/psi4/psi4/issues/786#issuecomment-323554259:53,Availability,error,error,53,"Yes, I also did check it with PSI4_1.0 with the same error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323554259
https://github.com/psi4/psi4/issues/789#issuecomment-325218257:27,Availability,error,error,27,Issue #786 also has a PSIO error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325218257
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:63,Availability,error,errors,63,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:350,Availability,failure,failure,350,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:771,Availability,error,error,771,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:882,Availability,error,error,882,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:1087,Availability,error,error,1087,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:1191,Availability,error,error,1191,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:1227,Availability,error,error,1227,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:131,Performance,optimiz,optimization,131,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:207,Performance,optimiz,optimization,207,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:299,Performance,optimiz,optimizer,299,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:402,Performance,optimiz,optimization,402,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:524,Performance,optimiz,optimization,524,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:627,Performance,optimiz,optimization,627,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:671,Performance,optimiz,optimization,671,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:698,Performance,optimiz,optimization,698,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:1108,Performance,optimiz,optimization,1108,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-325800423:1273,Performance,optimiz,optimizer,1273,"Well, @dgasmith, it's not even really crashing due to the PSIO errors...the job continues to run after failing to write the binary optimization data, and finally fails after exceeding the number of allotted optimization iterations. But, it's the manner in which that happens which is the issue: the optimizer is failing to take steps after the first failure of PSIO, I expect because it can't read the optimization data from binary file. Below is a brief overview of the structure within the job. - Take some number of good optimization steps, with structure:; 1) SCF; - Compute SCF wavefunction & gradient; 2) OPTKING; - Read optimization data from binary file ; - Take optimization step; - Write optimization data to binary file; - Sets geometry for next step; - First error step:; 1) SCF wfn & grad computed successfully; 2) OPTKING; - Read data & take step successfully; - PSIO error when attempting to write data to binary file; - Sets geometry for next step; - All subsequent steps (until `geom_maxiter` reached):; 1) SCF wfn, grad computed successfully; 2) OPTKING; - Second PSIO error occurs; - **No optimization step taken**; - Geometry for next step is set to the same as in first error step. So, once the first PSIO error occurs, there's no progress made by the optimizer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-325800423
https://github.com/psi4/psi4/issues/789#issuecomment-327607047:0,Deployability,Update,Update,0,"Update from @psi-rking:; > When the dynamic level gets changed, the binary (file 1) file is; > supposed to be deleted. I guess that it is not. The function that; > removes it does check:; > `if (! psi::_default_psio_manager_->get_specific_retention(1))`; > In your .psi4rc, are you perhaps setting retention of file 1? This; > could be happening in the psi4 driver somewhere too.; > If this is the problem, and you need to set the specific retention for; > some reason, then we will have to add another check to indicate; > deletion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-327607047
https://github.com/psi4/psi4/issues/791#issuecomment-324963359:63,Availability,error,error,63,"Thanks a lot for the detailed bug report. I can reproduce your error and will look into it when I get time (probably not until next week, I'm afraid). The problem seems to occur when d functions are present as you indicated, but it's independent of whether spherical or Cartesian basis functions are used. It's also only an issue for molecules with degenerate modes, based on my 30 seconds of testing; that explains why my tests all passed when I wrote the code. I'll have to add a linear triatomic to the test suite when I get to the bottom of this mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/791#issuecomment-324963359
https://github.com/psi4/psi4/issues/791#issuecomment-324963359:393,Testability,test,testing,393,"Thanks a lot for the detailed bug report. I can reproduce your error and will look into it when I get time (probably not until next week, I'm afraid). The problem seems to occur when d functions are present as you indicated, but it's independent of whether spherical or Cartesian basis functions are used. It's also only an issue for molecules with degenerate modes, based on my 30 seconds of testing; that explains why my tests all passed when I wrote the code. I'll have to add a linear triatomic to the test suite when I get to the bottom of this mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/791#issuecomment-324963359
https://github.com/psi4/psi4/issues/791#issuecomment-324963359:423,Testability,test,tests,423,"Thanks a lot for the detailed bug report. I can reproduce your error and will look into it when I get time (probably not until next week, I'm afraid). The problem seems to occur when d functions are present as you indicated, but it's independent of whether spherical or Cartesian basis functions are used. It's also only an issue for molecules with degenerate modes, based on my 30 seconds of testing; that explains why my tests all passed when I wrote the code. I'll have to add a linear triatomic to the test suite when I get to the bottom of this mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/791#issuecomment-324963359
https://github.com/psi4/psi4/issues/791#issuecomment-324963359:506,Testability,test,test,506,"Thanks a lot for the detailed bug report. I can reproduce your error and will look into it when I get time (probably not until next week, I'm afraid). The problem seems to occur when d functions are present as you indicated, but it's independent of whether spherical or Cartesian basis functions are used. It's also only an issue for molecules with degenerate modes, based on my 30 seconds of testing; that explains why my tests all passed when I wrote the code. I'll have to add a linear triatomic to the test suite when I get to the bottom of this mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/791#issuecomment-324963359
https://github.com/psi4/psi4/issues/792#issuecomment-331600219:43,Deployability,install,installed,43,Fixed after psi4/psi4#801 after I properly installed dot/graphviz on the building computer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/792#issuecomment-331600219
https://github.com/psi4/psi4/issues/793#issuecomment-325682360:308,Deployability,update,updated,308,"We need a hardcoded list for documentation purposes. In addition, we use those mechanics under the hood. I suppose we could allow a pass through to check if a give functional/primitives exists from a libxc call, but this is not too much a priority since its pretty easy to copy over the header when libxc is updated. Feel free to make a PR if you want this feature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-325682360
https://github.com/psi4/psi4/issues/793#issuecomment-329258580:526,Usability,simpl,simply,526,"Given that pyscf also resorted to hardcoding the functional list in Python (sunqm/pyscf#48), the best option might be to move the whole thing inside libxc. Generating a Python file along the C and Fortran headers would be no trick at all; this could also encode other necessary functionalities such as the functional family etc. I've opened up a ticket on the libxc tracker at; https://gitlab.com/libxc/libxc/issues/28. What would be the minimal functionality you would need? It would appear from ```libxc_xc_funcs.py``` that simply replacing xc_func_list would be enough..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329258580
https://github.com/psi4/psi4/issues/793#issuecomment-329267656:111,Integrability,wrap,wrap,111,"Yes, I think simply producing that list would be sufficient. LibXC could also product a `char**` that we could wrap and pull out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329267656
https://github.com/psi4/psi4/issues/793#issuecomment-329267656:13,Usability,simpl,simply,13,"Yes, I think simply producing that list would be sufficient. LibXC could also product a `char**` that we could wrap and pull out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-329267656
https://github.com/psi4/psi4/issues/793#issuecomment-330901143:17,Integrability,rout,routines,17,I've changed the routines so that the memory management is entirely up to the caller.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330901143
https://github.com/psi4/psi4/issues/793#issuecomment-330903372:174,Deployability,release,release,174,Right now psi is still pulling libxc from our repo (from a 3 series tarball). Any dev/unstable warnings against pulling from gitlab branch to try this out? Timeframe of next release from GL?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330903372
https://github.com/psi4/psi4/issues/793#issuecomment-330907649:297,Deployability,release,release,297,"A lot has changed in libxc 4, but that's all on the back-end side. Libxc 3 still used hand-written functionals, whereas libxc 4 uses computer algebra generated code. I'd say there's a lot of things that work better in libxc 4. But some of the added functionals might not be thoroughly tested. The release of libxc 4 is pending improvements to the test suite, so that functionals that work pass on a variety of compilers and architectures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330907649
https://github.com/psi4/psi4/issues/793#issuecomment-330907649:285,Testability,test,tested,285,"A lot has changed in libxc 4, but that's all on the back-end side. Libxc 3 still used hand-written functionals, whereas libxc 4 uses computer algebra generated code. I'd say there's a lot of things that work better in libxc 4. But some of the added functionals might not be thoroughly tested. The release of libxc 4 is pending improvements to the test suite, so that functionals that work pass on a variety of compilers and architectures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330907649
https://github.com/psi4/psi4/issues/793#issuecomment-330907649:347,Testability,test,test,347,"A lot has changed in libxc 4, but that's all on the back-end side. Libxc 3 still used hand-written functionals, whereas libxc 4 uses computer algebra generated code. I'd say there's a lot of things that work better in libxc 4. But some of the added functionals might not be thoroughly tested. The release of libxc 4 is pending improvements to the test suite, so that functionals that work pass on a variety of compilers and architectures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330907649
https://github.com/psi4/psi4/issues/793#issuecomment-330936414:57,Deployability,release,released,57,That would be really great. Let us know when `libxc4` is released and we will switch over!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330936414
https://github.com/psi4/psi4/issues/793#issuecomment-331278345:69,Deployability,release,released,69,"I've just merged the new code in libxc master. Libxc4 is going to be released tomorrow, after which you can switch over.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-331278345
https://github.com/psi4/psi4/issues/793#issuecomment-347017285:395,Integrability,interface,interface,395,"Looking at this, we do not hardcode LibXC functionals in the full sense. We do present a list of functionals that are officially supported as we need to parse through them and make sure we actually support the underlying forms and dispersion corrections. Advanced users are free to build their own functionals from any LibXC primitive or mixed functional via the more advanced custom functional interface found [here](http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-347017285
https://github.com/psi4/psi4/pull/794#issuecomment-328489425:109,Availability,error,error,109,"@loriab yes, that still works. Travis still uses Makefiles, since the GCC builds are failing with a compiler error with Ninja.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-328489425
https://github.com/psi4/psi4/pull/794#issuecomment-335230588:174,Performance,optimiz,optimizations,174,"Hmm, do you think we would see anything else for another compiler like `clang`? Might be good to document this, get it in, and have it be disabled incase Ninja can find more optimizations in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-335230588
https://github.com/psi4/psi4/pull/794#issuecomment-335272408:84,Testability,test,test,84,It is entirely possible that it works better with `clang`. I'll try to run the same test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-335272408
https://github.com/psi4/psi4/pull/794#issuecomment-336314324:714,Deployability,release,release,714,"Setup line:; ```; cmake -H. -Bbuild ; -DCMAKE_CXX_COMPILER=clang++ ; -DCMAKE_CXX_FLAGS=""--gcc-toolchain=/global/hds/software/cpu/eb3/GCCcore/5.4.0""; -DCMAKE_Fortran_COMPILER=gfortran; -DCMAKE_C_COMPILER=clang; -DCMAKE_C_FLAGS=""--gcc-toolchain=/global/hds/software/cpu/eb3/GCCcore/5.4.0""; -DPYTHON_EXECUTABLE=`type -P python`; -DENABLE_dkh=ON; ```; Compiling with:; ```; cmake --build . -- -j20; ```; Results for `-GNinja`:; ```; real	41m37.081s; user	458m12.064s; sys	2m24.967s; ```; Results for `-G""Unix Makefiles""`:; ```; real	45m45.169s; user	458m39.363s; sys	2m28.485s; ```; I build Clang in debug mode, I guess that's why the builds are overall slower than with the Intel compilers. I am recompiling Clang in release mode to check that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-336314324
https://github.com/psi4/psi4/pull/794#issuecomment-336326567:24,Deployability,release,release,24,"OK, with Clang built in release mode I get:; - For `-G""Ninja""`; ```; real	7m35.581s; user	31m11.930s; sys	2m7.600s; ```; - For `-G""Unix Makefiles""`; ```; real	8m9.513s; user	31m30.395s; sys	3m24.407s; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-336326567
https://github.com/psi4/psi4/pull/794#issuecomment-337609308:224,Availability,avail,available,224,"Yeah, I can't tell which generator travis is using just from the build log. Because of the Ninja+Fortran+CMake issues, I don't think we can have Ninja as the default cmake generator. But if this is just enabling Ninja as an available non-default generator, LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-337609308
https://github.com/psi4/psi4/pull/794#issuecomment-337609308:71,Testability,log,log,71,"Yeah, I can't tell which generator travis is using just from the build log. Because of the Ninja+Fortran+CMake issues, I don't think we can have Ninja as the default cmake generator. But if this is just enabling Ninja as an available non-default generator, LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-337609308
https://github.com/psi4/psi4/pull/795#issuecomment-326351281:324,Availability,Error,Error,324,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281
https://github.com/psi4/psi4/pull/795#issuecomment-326351281:3213,Availability,down,downloads,3213,"4942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.12121680 1 -399.44122431 1; HEAVY28-18 2.2000 2.1130 -0.0870 -0.3641 -702.97644274 -1 -242.12121680 1 -460.85185870 1; HEAVY28-19 2.0700 1.9609 -0.1091 -0.4563 -2816.96828346 -1 -242.12121680 1 -2574.84394169 1; HEAVY28-20 1.6400 1.1654 -0.4746 -1.9859 -540.53025230 -1 -242.12121680 1 -298.40717839 1; HEAVY28-22 0.5800 -0.0821 -0.6621 -2.7702 -538.61694704 -1 -269.30853894 2; HEAVY28-24 0.5000 -0.0901 -0.5901 -2.4690 -668.74961966 -1 -269.30853894 1 -399.44122431 1; HEAVY28-25 1.2400 0.7192 -0.5208 -2.1790 -730.16154377 -1 -269.30853894 1 -460.85185870 1; HEAVY28-26 1.2400 0.7729 -0.4671 -1.9542 -2844.15371239 -1 -269.30853894 1 -2574.84394169 1; HEAVY28-27 0.8400 0.2215 -0.6185 -2.5876 -567.71607039 -1 -269.30853894 1 -298.40717839 1; --------------------------------------------------------------------------------------------------------------------------; Minimal Dev 0.0156 0.0653; Maximal Dev -1.2548 -5.2502; Mean Signed Dev -0.5805 -2.4287; Mean Absolute Dev 0.5965 2.4956; RMS Dev 0.6837 2.8605; --------------------------------------------------------------------------------------------------------------------------; ```; when col ""Energy Calc"" should match http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN30/funcsGMTKN30/HEAVY28B3LYP.html. Sorry, that's D2 vs D3, will post correction shortly. Just wanted to make materials available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281
https://github.com/psi4/psi4/pull/795#issuecomment-326351281:3353,Availability,avail,available,3353,"4942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.12121680 1 -399.44122431 1; HEAVY28-18 2.2000 2.1130 -0.0870 -0.3641 -702.97644274 -1 -242.12121680 1 -460.85185870 1; HEAVY28-19 2.0700 1.9609 -0.1091 -0.4563 -2816.96828346 -1 -242.12121680 1 -2574.84394169 1; HEAVY28-20 1.6400 1.1654 -0.4746 -1.9859 -540.53025230 -1 -242.12121680 1 -298.40717839 1; HEAVY28-22 0.5800 -0.0821 -0.6621 -2.7702 -538.61694704 -1 -269.30853894 2; HEAVY28-24 0.5000 -0.0901 -0.5901 -2.4690 -668.74961966 -1 -269.30853894 1 -399.44122431 1; HEAVY28-25 1.2400 0.7192 -0.5208 -2.1790 -730.16154377 -1 -269.30853894 1 -460.85185870 1; HEAVY28-26 1.2400 0.7729 -0.4671 -1.9542 -2844.15371239 -1 -269.30853894 1 -2574.84394169 1; HEAVY28-27 0.8400 0.2215 -0.6185 -2.5876 -567.71607039 -1 -269.30853894 1 -298.40717839 1; --------------------------------------------------------------------------------------------------------------------------; Minimal Dev 0.0156 0.0653; Maximal Dev -1.2548 -5.2502; Mean Signed Dev -0.5805 -2.4287; Mean Absolute Dev 0.5965 2.4956; RMS Dev 0.6837 2.8605; --------------------------------------------------------------------------------------------------------------------------; ```; when col ""Energy Calc"" should match http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN30/funcsGMTKN30/HEAVY28B3LYP.html. Sorry, that's D2 vs D3, will post correction shortly. Just wanted to make materials available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281
https://github.com/psi4/psi4/pull/795#issuecomment-326351281:154,Energy Efficiency,Energy,Energy,154,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281
https://github.com/psi4/psi4/pull/795#issuecomment-326351281:308,Energy Efficiency,Energy,Energy,308,"On ECP front, input:; ```; memory 12 gb. set basis def2-qzvp; set basis_guess def2-svp. database('b3lyp-d2', 'heavy28'); ```; yields:; ```; ==> Requested Energy <==. --------------------------------------------------------------------------------------------------------------------------; Reaction Reaction Energy Reaction Error Reagent 1 Reagent 2 Reagent 3; Ref Calc [kcal/mol] [kJ/mol] [Eh] Wt [Eh] Wt [Eh] Wt; --------------------------------------------------------------------------------------------------------------------------; HEAVY28-1 1.2900 0.1427 -1.1473 -4.8005 -432.98126591 -1 -216.49051929 2; HEAVY28-2 2.4200 2.6044 0.1844 0.7717 -292.96755189 -1 -216.49051929 1 -76.47288217 1; HEAVY28-3 1.4000 0.7130 -0.6870 -2.8744 -615.93287983 -1 -216.49051929 1 -399.44122431 1; HEAVY28-4 0.8500 0.2787 -0.5713 -2.3904 -677.34282211 -1 -216.49051929 1 -460.85185870 1; HEAVY28-5 1.1600 0.5208 -0.6392 -2.6745 -2791.33529091 -1 -216.49051929 1 -2574.84394169 1; HEAVY28-6 1.4200 0.3997 -1.0203 -4.2690 -514.89833461 -1 -216.49051929 1 -298.40717839 1; HEAVY28-7 0.6900 0.3720 -0.3180 -1.3306 -273.08491143 -1 -216.49051929 1 -56.59379936 1; HEAVY28-8 1.3200 0.0652 -1.2548 -5.2502 -390.55270102 -1 -195.27629857 2; HEAVY28-9 0.6800 -0.0169 -0.6969 -2.9160 -411.76679086 -1 -195.27629857 1 -216.49051929 1; HEAVY28-10 0.4400 0.1562 -0.2838 -1.1876 -271.74942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.121",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281
https://github.com/psi4/psi4/pull/795#issuecomment-326351281:3152,Energy Efficiency,Energy,Energy,3152,"4942958 -1 -195.27629857 1 -76.47288217 1; HEAVY28-11 0.8000 0.1821 -0.6179 -2.5853 -656.12844746 -1 -195.27629857 1 -460.85185870 1; HEAVY28-12 1.0400 0.4064 -0.6336 -2.6510 -2770.12088792 -1 -195.27629857 1 -2574.84394169 1; HEAVY28-13 1.2900 0.0679 -1.2221 -5.1133 -493.68358516 -1 -195.27629857 1 -298.40717839 1; HEAVY28-14 0.7000 0.1020 -0.5980 -2.5019 -464.58500012 -1 -195.27629857 1 -269.30853894 1; HEAVY28-15 1.3000 0.2426 -1.0574 -4.4240 -484.24282026 -1 -242.12121680 2; HEAVY28-16 1.7000 1.7156 0.0156 0.0653 -318.59683296 -1 -242.12121680 1 -76.47288217 1; HEAVY28-17 1.1400 0.7054 -0.4346 -1.8184 -641.56356522 -1 -242.12121680 1 -399.44122431 1; HEAVY28-18 2.2000 2.1130 -0.0870 -0.3641 -702.97644274 -1 -242.12121680 1 -460.85185870 1; HEAVY28-19 2.0700 1.9609 -0.1091 -0.4563 -2816.96828346 -1 -242.12121680 1 -2574.84394169 1; HEAVY28-20 1.6400 1.1654 -0.4746 -1.9859 -540.53025230 -1 -242.12121680 1 -298.40717839 1; HEAVY28-22 0.5800 -0.0821 -0.6621 -2.7702 -538.61694704 -1 -269.30853894 2; HEAVY28-24 0.5000 -0.0901 -0.5901 -2.4690 -668.74961966 -1 -269.30853894 1 -399.44122431 1; HEAVY28-25 1.2400 0.7192 -0.5208 -2.1790 -730.16154377 -1 -269.30853894 1 -460.85185870 1; HEAVY28-26 1.2400 0.7729 -0.4671 -1.9542 -2844.15371239 -1 -269.30853894 1 -2574.84394169 1; HEAVY28-27 0.8400 0.2215 -0.6185 -2.5876 -567.71607039 -1 -269.30853894 1 -298.40717839 1; --------------------------------------------------------------------------------------------------------------------------; Minimal Dev 0.0156 0.0653; Maximal Dev -1.2548 -5.2502; Mean Signed Dev -0.5805 -2.4287; Mean Absolute Dev 0.5965 2.4956; RMS Dev 0.6837 2.8605; --------------------------------------------------------------------------------------------------------------------------; ```; when col ""Energy Calc"" should match http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN30/funcsGMTKN30/HEAVY28B3LYP.html. Sorry, that's D2 vs D3, will post correction shortly. Just wanted to make materials available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-326351281
https://github.com/psi4/psi4/pull/795#issuecomment-335235553:72,Safety,avoid,avoid,72,There's nothing wrong with the PR. But I confess I was using it more to avoid misplacing files than to add to Psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-335235553
https://github.com/psi4/psi4/pull/795#issuecomment-482815441:581,Testability,benchmark,benchmarks,581,"These should have all been added to QCArchive now. Wouldn't hurt to get the non-controversial ones (non HEAVY, RG, RSE) into psi master at some time, even if subsequently removed, for the permanent record. Really not sure of the best course. I'll flag it for resolution by 1.4, in one direction or the other. @susilehtola, sorry, I lost track of your comment earlier. Generally, one collects all of a databases's geometries into xyz files, then runs [this script](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/ixyz2database.py) to form a skeleton database where benchmarks, reaction stoichiometry, citations, etc. can be added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/795#issuecomment-482815441
https://github.com/psi4/psi4/issues/796#issuecomment-326840681:293,Energy Efficiency,energy,energy,293,"Hello Francesco. I didn't check exactly the sign. I will try this with very small basis like STO-3G.; But I can take the orbitals from MOLDEN output and coefficients (with signs) and put it into CASINO program input, as I usually do this many times for another systems. Then I can recalculate energy with variational monte calro (VMC) method. I have to get the same energy but I didn't in the case of Boron.; Than I changed coefficients signs by hands and get the right VMC energy.; It makes me think that the sign was wrong. would you suggest a way to check quickly if the sign of coefficients is correct. I will use it. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-326840681
https://github.com/psi4/psi4/issues/796#issuecomment-326840681:366,Energy Efficiency,energy,energy,366,"Hello Francesco. I didn't check exactly the sign. I will try this with very small basis like STO-3G.; But I can take the orbitals from MOLDEN output and coefficients (with signs) and put it into CASINO program input, as I usually do this many times for another systems. Then I can recalculate energy with variational monte calro (VMC) method. I have to get the same energy but I didn't in the case of Boron.; Than I changed coefficients signs by hands and get the right VMC energy.; It makes me think that the sign was wrong. would you suggest a way to check quickly if the sign of coefficients is correct. I will use it. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-326840681
https://github.com/psi4/psi4/issues/796#issuecomment-326840681:474,Energy Efficiency,energy,energy,474,"Hello Francesco. I didn't check exactly the sign. I will try this with very small basis like STO-3G.; But I can take the orbitals from MOLDEN output and coefficients (with signs) and put it into CASINO program input, as I usually do this many times for another systems. Then I can recalculate energy with variational monte calro (VMC) method. I have to get the same energy but I didn't in the case of Boron.; Than I changed coefficients signs by hands and get the right VMC energy.; It makes me think that the sign was wrong. would you suggest a way to check quickly if the sign of coefficients is correct. I will use it. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-326840681
https://github.com/psi4/psi4/issues/796#issuecomment-331666710:127,Energy Efficiency,energy,energy,127,"It's too bad thus is not working properly!. If the Molden output from Psi is being used as input to the QMC, and the; wrong CI energy is obtained, then it may be that we have a bug in the; Molden output writer. (Are we sure the CAS orbitals are the ones being; written out, and not HF orbitals?). The signs on the determinants printed by Psi4 code are well tested, and so; I think it is extremely unlikely they could be wrong. It is much more; likely that there is some kind of mismatch between the orbitals being used; in the CAS and the orbitals being put into the QMC code. Possible due to a; bug in the Molden writer, or possibly due to some kind of enforced phase; convention in the QMC code that is incompatible with the phase of the; orbitals from Psi. On Sep 23, 2017 9:47 AM, ""Daniel Smith"" <notifications@github.com> wrote:. > @CDSherrill <https://github.com/cdsherrill> Perhaps you could comment on; > this?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331640263>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdiI93WW1UBA9Fg9JkauL9vxRKM6uks5slRnvgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331666710
https://github.com/psi4/psi4/issues/796#issuecomment-331666710:357,Testability,test,tested,357,"It's too bad thus is not working properly!. If the Molden output from Psi is being used as input to the QMC, and the; wrong CI energy is obtained, then it may be that we have a bug in the; Molden output writer. (Are we sure the CAS orbitals are the ones being; written out, and not HF orbitals?). The signs on the determinants printed by Psi4 code are well tested, and so; I think it is extremely unlikely they could be wrong. It is much more; likely that there is some kind of mismatch between the orbitals being used; in the CAS and the orbitals being put into the QMC code. Possible due to a; bug in the Molden writer, or possibly due to some kind of enforced phase; convention in the QMC code that is incompatible with the phase of the; orbitals from Psi. On Sep 23, 2017 9:47 AM, ""Daniel Smith"" <notifications@github.com> wrote:. > @CDSherrill <https://github.com/cdsherrill> Perhaps you could comment on; > this?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331640263>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdiI93WW1UBA9Fg9JkauL9vxRKM6uks5slRnvgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331666710
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:445,Availability,down,down,445,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:548,Availability,down,down,548,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1065,Deployability,configurat,configuration,1065,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:760,Energy Efficiency,energy,energy,760,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1402,Energy Efficiency,energy,energy,1402,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1065,Modifiability,config,configuration,1065,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331682241:76,Testability,test,tested,76,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241
https://github.com/psi4/psi4/issues/796#issuecomment-331683153:201,Energy Efficiency,energy,energy,201,"I've tried ROHF molden output from PSI4 input:. memory 2 Gb. molecule be {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; }. hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). Total Energy = -24.5289623832308834. Single determinant CASINO output:. E = -24.529(1) ; var = 4.89(8). 3 determinants with weighting factors:; 1-st 0.972153; 2-nd 0.165709; 3-rd 0.165709. CASINO output:. E = -24.459(1) ; var = 5.1(2) . 3 determinants with weighting factors:; 1-st 0.972153; 2-nd -0.165709; 3-rd -0.165709. CASINO output:. E = -24.535(1) ; var = 5.0(1) . The last determinant composition has lowest energy so I would like to know is multi-determinant construction convention PS4's and CASINO are equal. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331683153
https://github.com/psi4/psi4/issues/796#issuecomment-331683153:269,Energy Efficiency,Energy,Energy,269,"I've tried ROHF molden output from PSI4 input:. memory 2 Gb. molecule be {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; }. hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). Total Energy = -24.5289623832308834. Single determinant CASINO output:. E = -24.529(1) ; var = 4.89(8). 3 determinants with weighting factors:; 1-st 0.972153; 2-nd 0.165709; 3-rd 0.165709. CASINO output:. E = -24.459(1) ; var = 5.1(2) . 3 determinants with weighting factors:; 1-st 0.972153; 2-nd -0.165709; 3-rd -0.165709. CASINO output:. E = -24.535(1) ; var = 5.0(1) . The last determinant composition has lowest energy so I would like to know is multi-determinant construction convention PS4's and CASINO are equal. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331683153
https://github.com/psi4/psi4/issues/796#issuecomment-331683153:679,Energy Efficiency,energy,energy,679,"I've tried ROHF molden output from PSI4 input:. memory 2 Gb. molecule be {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; }. hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). Total Energy = -24.5289623832308834. Single determinant CASINO output:. E = -24.529(1) ; var = 4.89(8). 3 determinants with weighting factors:; 1-st 0.972153; 2-nd 0.165709; 3-rd 0.165709. CASINO output:. E = -24.459(1) ; var = 5.1(2) . 3 determinants with weighting factors:; 1-st 0.972153; 2-nd -0.165709; 3-rd -0.165709. CASINO output:. E = -24.535(1) ; var = 5.0(1) . The last determinant composition has lowest energy so I would like to know is multi-determinant construction convention PS4's and CASINO are equal. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331683153
https://github.com/psi4/psi4/issues/796#issuecomment-331875695:248,Energy Efficiency,energy,energy,248,"Hello Francesco.; I don't quite understand you. The only matrix determine orbital coefficients is [MO] section data of the MOLDEN file and different determinants have only different occupation numbers of there orbitals.; I only sort MO orbitals by energy if required before feed it into CASINO. I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2 hours when I will have access to the server. But you can also create these files easily from my inputs or you talk about some other matrices. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331875695
https://github.com/psi4/psi4/issues/796#issuecomment-331875695:392,Security,access,access,392,"Hello Francesco.; I don't quite understand you. The only matrix determine orbital coefficients is [MO] section data of the MOLDEN file and different determinants have only different occupation numbers of there orbitals.; I only sort MO orbitals by energy if required before feed it into CASINO. I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2 hours when I will have access to the server. But you can also create these files easily from my inputs or you talk about some other matrices. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331875695
https://github.com/psi4/psi4/issues/796#issuecomment-331884804:779,Energy Efficiency,energy,energy,779,"Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; like this for CASSCF. Are they CAS NO's? Perhaps the most important; determinants are printed prior to the natural orbital procedure (in which; case there would be a mismatch between the orbitals and the determinant; printout)? Or, alternatively, I wonder if we enforce any kind of phase; convention in our MOLDEN writer that the CASSCF code is unaware of?. David. On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:. > Hello Francesco.; > I don't quite understand you. The only matrix determine orbital; > coefficients is [MO] section data of the MOLDEN file and different; > determinants have only different occupation numbers of there orbitals.; > I only sort MO orbitals by energy if required before feed it into CASINO.; >; > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > hours when I will have access to the server.; >; > But you can also create these files easily from my inputs or you can talk; > about some other matrices.; >; > Best, Vladimir.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331884804
https://github.com/psi4/psi4/issues/796#issuecomment-331884804:932,Security,access,access,932,"Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; like this for CASSCF. Are they CAS NO's? Perhaps the most important; determinants are printed prior to the natural orbital procedure (in which; case there would be a mismatch between the orbitals and the determinant; printout)? Or, alternatively, I wonder if we enforce any kind of phase; convention in our MOLDEN writer that the CASSCF code is unaware of?. David. On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:. > Hello Francesco.; > I don't quite understand you. The only matrix determine orbital; > coefficients is [MO] section data of the MOLDEN file and different; > determinants have only different occupation numbers of there orbitals.; > I only sort MO orbitals by energy if required before feed it into CASINO.; >; > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > hours when I will have access to the server.; >; > But you can also create these files easily from my inputs or you can talk; > about some other matrices.; >; > Best, Vladimir.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331884804
https://github.com/psi4/psi4/issues/796#issuecomment-331891537:1378,Energy Efficiency,energy,energy,1378,"d be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > > .; > >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/796#issuecomment-331884804>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcVnVaDTdIjAAgctHtOFPT0ldszOGks5sl63AgaJpZM4PK23n>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537
https://github.com/psi4/psi4/issues/796#issuecomment-331891537:149,Performance,optimiz,optimized,149,"Hmm, Fransesco recently made some changes that rotate the MCSCF orbitals to a standard frame (either semicanonical or NO’s). The CI determinants are optimized and printed in this basis however. A quick pass shows that the MOLDEN writer should be picking everything up correctly; however, this doesn’t rule out something subtle. One check could be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537
https://github.com/psi4/psi4/issues/796#issuecomment-331891537:1537,Security,access,access,1537,"d be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > > .; > >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/796#issuecomment-331884804>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcVnVaDTdIjAAgctHtOFPT0ldszOGks5sl63AgaJpZM4PK23n>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537
https://github.com/psi4/psi4/issues/796#issuecomment-439626447:279,Availability,down,down,279,"I don't quite understand what the numbers in brackets mean; * 1 -0.972087 ( 0, 0) 2AX 3AA.; * 2 -0.165902 ( 2, 2) 3AA 4AX.; * 3 -0.165902 ( 4, 3) 3AA 5AX.; I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-439626447
https://github.com/psi4/psi4/issues/796#issuecomment-804983924:289,Availability,down,down,289,"> I don't quite understand what the numbers in brackets mean; > * 1 -0.972087 ( 0, 0) 2AX 3AA.; > * 2 -0.165902 ( 2, 2) 3AA 4AX.; > * 3 -0.165902 ( 4, 3) 3AA 5AX.; > I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed. 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. I think the difference may just be in the ordering of the different spin blocks: are the creation/annihilation operators acting on the HF determinant first by orbital, then by spin, or first by spin, and then by orbital.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-804983924
https://github.com/psi4/psi4/issues/796#issuecomment-804983924:599,Availability,down,down,599,"> I don't quite understand what the numbers in brackets mean; > * 1 -0.972087 ( 0, 0) 2AX 3AA.; > * 2 -0.165902 ( 2, 2) 3AA 4AX.; > * 3 -0.165902 ( 4, 3) 3AA 5AX.; > I'm also not sure that 3AA 4AX means 1-st up active space electron in 3-rd orbital, 2-nd up electron on 4-th orbital, 1-st down electron on 4-th orbital. This would explain the sign of the determinant, since in ORCA order is reversed. 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. I think the difference may just be in the ordering of the different spin blocks: are the creation/annihilation operators acting on the HF determinant first by orbital, then by spin, or first by spin, and then by orbital.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-804983924
https://github.com/psi4/psi4/issues/796#issuecomment-2425979772:519,Availability,down,down,519,"Hello Saeed. All questions about **multideterminant.py** should be asked [there](https://github.com/Konjkov/molden2qmc/issues) for this you need to apply psi4 version, input, output... this script works correctly for versions ORCA4.X and ORCA5.X. > 1 -0.445106 ( 735, 514) 6A1X* 7A1A* 8A1A* 9A1A* 1A2A* 2B1X* 3B1B* 2B2X* 3B2**X*. I don't know such notations for e-promotion rules, maybe that's why my script doesn't work correctly for PSI4. Maybe there is a link to documentation explaining this.; A - up electron; B - down electron; X - doubly occupied; also A, B can also mean irreducible representations. What do the asterisk mean? . Best wishes, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2425979772
https://github.com/psi4/psi4/issues/796#issuecomment-2426630487:200,Availability,down,down,200,"> 3AA 4AX means that you have an alpha electron in orbital 3A, and an alpha and beta electron in orbital 4A. You could also write the three determinants as 2u00, u200, and u020 with u=spin-up, d=spin-down, 2=doubly occupied, 0=unoccupied. Since the active orbitals are numbered A2 A3 A4 A5, why not the three determinants as 2u00, 0u20, and 0u02? 3A up-electron not promoted anyhow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2426630487
https://github.com/psi4/psi4/issues/796#issuecomment-2426850861:25,Integrability,interface,interfaces,25,"Yes, proposals to create interfaces to external programs are far beyond the scope of this issue. Please make a new one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-2426850861
https://github.com/psi4/psi4/pull/797#issuecomment-328286189:73,Deployability,update,update,73,"Hi Lori,. Now, the dfocc source code is properly clang-formatted. I also update the docs. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/797#issuecomment-328286189
https://github.com/psi4/psi4/pull/798#issuecomment-327985876:43,Availability,reboot,rebooted,43,macpsinet seems out of sorts even though I rebooted it earlier this week. Will attend to it tomorrow.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-327985876
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:680,Availability,error,error,680,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:878,Availability,error,error,878,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:996,Deployability,UPDATE,UPDATE,996,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:203,Energy Efficiency,energy,energy,203,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:229,Energy Efficiency,Energy,Energy,229,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:350,Energy Efficiency,Energy,Energy,350,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:796,Integrability,message,message,796,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:543,Performance,Optimiz,Optimization,543,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330583293:820,Performance,optimiz,optimization,820,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293
https://github.com/psi4/psi4/pull/798#issuecomment-330655700:81,Availability,error,error,81,Great catch by @dsirianni. I'll pull this one in (with squash) and the exception error can be fixed separately.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330655700
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:1155,Deployability,Release,Release,1155,"Daniel Smith <notifications@github.com>; wrote:. > Description; >; > The DFT_CUSTOM_FUNCTIONAL keyword died at some point so I started to; > examine how to re-enable it (@loriab <https://github.com/loriab>) and I; > was also bugged about HF-3C gradients (@bwb314 <https://github.com/bwb314>).; > Luckily it turns out I had already done most of the work at some point (I; > have 3 more of these branches apparently that I need to merge). Basically; > this works finishes the movement of trying to distinguish between DFT and; > SCF where SCF is now a very basic DFT ""functional"". This could lead it; > towards ""functionals"" are just SCF + stuff where the stuff could be XC,; > PCM, -D, external potentials, etc.; >; > I recall @adabbott <https://github.com/adabbott> is willing to document; > this.; > Todos; >; > Notable points that this PR has either accomplished or will accomplish.; >; > - *Developer Interest*; > - SCF is now basically a very vanilla case of DFT; > - Adds finite difference Hessians from gradients for -D corrections; > - *User-Facing for Release Notes*; > - Enables HF-3C gradients and Hessians.; >; > Status; >; > - Ready to go; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/799; > Commit Summary; >; > - XC: Work towards the UKS XC derivative kernel; > - Driver: Removes extraneous _dft_* funcs in favor of _scf_*; > - fd: Can quite fd funcs with print=0; > - gcp: Fixes analytical Hessians with fd gcp; > - proc: workaround for post-scf methods; > - xc: removes dft_functional keyword; > - Hess: Finishes up HF3C Hessians; > - DFT: Allows arbitrary dft_functionals to be called with SCF; > - DFT: Adds dft-custom test; > - DFT: Adds a MP2 example using a DFT reference; >; > File Changes; >; > - *M* psi4/driver/driver_util.py; > <https://github.com/psi4/psi4/pull/799/files#diff-0> (8); > - *M* psi4/driver/p4util/optproc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:5382,Deployability,Patch,Patch,5382,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:5441,Deployability,patch,patch,5441,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:1830,Testability,test,test,1830,"DFT ""functional"". This could lead it; > towards ""functionals"" are just SCF + stuff where the stuff could be XC,; > PCM, -D, external potentials, etc.; >; > I recall @adabbott <https://github.com/adabbott> is willing to document; > this.; > Todos; >; > Notable points that this PR has either accomplished or will accomplish.; >; > - *Developer Interest*; > - SCF is now basically a very vanilla case of DFT; > - Adds finite difference Hessians from gradients for -D corrections; > - *User-Facing for Release Notes*; > - Enables HF-3C gradients and Hessians.; >; > Status; >; > - Ready to go; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/799; > Commit Summary; >; > - XC: Work towards the UKS XC derivative kernel; > - Driver: Removes extraneous _dft_* funcs in favor of _scf_*; > - fd: Can quite fd funcs with print=0; > - gcp: Fixes analytical Hessians with fd gcp; > - proc: workaround for post-scf methods; > - xc: removes dft_functional keyword; > - Hess: Finishes up HF3C Hessians; > - DFT: Allows arbitrary dft_functionals to be called with SCF; > - DFT: Adds dft-custom test; > - DFT: Adds a MP2 example using a DFT reference; >; > File Changes; >; > - *M* psi4/driver/driver_util.py; > <https://github.com/psi4/psi4/pull/799/files#diff-0> (8); > - *M* psi4/driver/p4util/optproc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-1> (1); > - *M* psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py; > <https://github.com/psi4/psi4/pull/799/files#diff-2> (3); > - *M* psi4/driver/procrouting/dft_funcs/superfuncs.py; > <https://github.com/psi4/psi4/pull/799/files#diff-3> (124); > - *M* psi4/driver/procrouting/empirical_dispersion.py; > <https://github.com/psi4/psi4/pull/799/files#diff-4> (34); > - *M* psi4/driver/procrouting/proc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-5> (231); > - *M* psi4/driver/procrouting/proc_table.py; > <https://github.com/psi4/psi4/pull/799/fil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:3946,Testability,test,tests,3946, > <https://github.com/psi4/psi4/pull/799/files#diff-9> (62); > - *M* psi4/src/psi4/findif/fd_freq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-10> (33); > - *M* psi4/src/psi4/findif/fd_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-11> (28); > - *M* psi4/src/psi4/findif/fd_geoms_1_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-12> (35); > - *M* psi4/src/psi4/findif/fd_geoms_freq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-13> (72); > - *M* psi4/src/psi4/findif/fd_geoms_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-14> (79); > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/f,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4037,Testability,test,tests,4037,eq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-10> (33); > - *M* psi4/src/psi4/findif/fd_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-11> (28); > - *M* psi4/src/psi4/findif/fd_geoms_1_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-12> (35); > - *M* psi4/src/psi4/findif/fd_geoms_freq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-13> (72); > - *M* psi4/src/psi4/findif/fd_geoms_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-14> (79); > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4139,Testability,test,tests,4139,fd_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-11> (28); > - *M* psi4/src/psi4/findif/fd_geoms_1_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-12> (35); > - *M* psi4/src/psi4/findif/fd_geoms_freq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-13> (72); > - *M* psi4/src/psi4/findif/fd_geoms_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-14> (79); > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4237,Testability,test,tests,4237,findif/fd_geoms_1_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-12> (35); > - *M* psi4/src/psi4/findif/fd_geoms_freq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-13> (72); > - *M* psi4/src/psi4/findif/fd_geoms_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-14> (79); > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://gith,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4337,Testability,test,tests,4337,psi4/findif/fd_geoms_freq_0.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-13> (72); > - *M* psi4/src/psi4/findif/fd_geoms_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-14> (79); > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://gi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4442,Testability,test,tests,4442,si4/src/psi4/findif/fd_geoms_freq_1.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-14> (79); > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4543,Testability,test,tests,4543, > - *M* psi4/src/psi4/libscf_solver/hf.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-15> (2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this be,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4646,Testability,test,tests,4646,"(2); > - *M* psi4/src/psi4/scfgrad/scf_grad.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-16> (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4741,Testability,test,tests,4741," (93); > - *M* psi4/src/psi4/scfgrad/scf_grad.h; > <https://github.com/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4851,Testability,test,tests,4851,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:4957,Testability,test,tests,4957,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:5066,Testability,test,tests,5066,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:5174,Testability,test,tests,5174,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/799#issuecomment-330258817:5278,Testability,test,tests,5278,"om/psi4/psi4/pull/799/files#diff-17> (1); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/799/files#diff-18> (4); > - *M* tests/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-19> (2); > - *A* tests/dft-custom/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-20> (3); > - *A* tests/dft-custom/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-21> (54); > - *A* tests/dft-custom/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-22> (910); > - *A* tests/dft-reference/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-23> (3); > - *A* tests/dft-reference/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-24> (19); > - *A* tests/dft-reference/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-25> (366); > - *M* tests/gcp/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-26> (2); > - *A* tests/gcp/hf3c-gradients/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-27> (3); > - *A* tests/gcp/hf3c-gradients/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-28> (19); > - *A* tests/gcp/hf3c-gradients/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-29> (1438); > - *A* tests/gcp/hf3c-hessian/CMakeLists.txt; > <https://github.com/psi4/psi4/pull/799/files#diff-30> (3); > - *A* tests/gcp/hf3c-hessian/input.dat; > <https://github.com/psi4/psi4/pull/799/files#diff-31> (21); > - *A* tests/gcp/hf3c-hessian/output.ref; > <https://github.com/psi4/psi4/pull/799/files#diff-32> (2612); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/799.patch; > - https://github.com/psi4/psi4/pull/799.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/799>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdtmlo2soYV97EnbfPbQiixA89Mymks5sjoXOgaJpZM4PbDFk>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817
https://github.com/psi4/psi4/pull/802#issuecomment-331475409:8,Testability,test,tests,8,Which 4 tests fail? Kinda looks like the XC kernels are giving wonky results so that eigensolver implodes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-331475409
https://github.com/psi4/psi4/pull/802#issuecomment-331640641:94,Usability,guid,guidance,94,"Found wiki changelog (https://gitlab.com/libxc/libxc/wikis/Libxc-changes) with some migration guidance. Looks like ~`fctl_set_params(param, param)` --> ~`set_ext_params(fctl, param)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-331640641
https://github.com/psi4/psi4/pull/802#issuecomment-332738941:11,Deployability,release,released,11,libxc4 was released a few days ago.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-332738941
https://github.com/psi4/psi4/pull/802#issuecomment-366317953:163,Integrability,wrap,wrappers,163,"If [this](https://gitlab.com/libxc/libxc/merge_requests/62) LibXC PR goes through this should be closer to ready to go. They also deprecated many of the Minnesota wrappers for some reason, issue about it [here](https://gitlab.com/libxc/libxc/issues/42). So we will need to hand code these in as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-366317953
https://github.com/psi4/psi4/pull/802#issuecomment-382988041:55,Deployability,update,updates,55,"This is ready for consideration again. See ""April 2018 updates"" at top for status.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-382988041
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:806,Deployability,install,install-libxc,806,"Below is an overview of the M11 situation. I'm mainly looking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:924,Deployability,install,install-libxc,924,"Below is an overview of the M11 situation. I'm mainly looking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:1038,Deployability,install,install-libxc,1038,"oking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31 pm](https://user-images.githubusercontent.com/2314730/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:1154,Deployability,install,install-libxc,1154," Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31 pm](https://user-images.githubusercontent.com/2314730/39067238-f8f2c778-44a5-11e8-9e51-deda8f244f1a.png); from page 7 of https://comp.chem.umn.edu/mfm/mfm_Manual_v1.9.pdf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:1277,Deployability,install,install-libxc,1277," Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31 pm](https://user-images.githubusercontent.com/2314730/39067238-f8f2c778-44a5-11e8-9e51-deda8f244f1a.png); from page 7 of https://comp.chem.umn.edu/mfm/mfm_Manual_v1.9.pdf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:1385,Deployability,install,install-libxc,1385," Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31 pm](https://user-images.githubusercontent.com/2314730/39067238-f8f2c778-44a5-11e8-9e51-deda8f244f1a.png); from page 7 of https://comp.chem.umn.edu/mfm/mfm_Manual_v1.9.pdf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383182397:343,Testability,test,test,343,"Below is an overview of the M11 situation. I'm mainly looking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397
https://github.com/psi4/psi4/pull/802#issuecomment-383210085:12,Availability,error,error,12,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085
https://github.com/psi4/psi4/pull/802#issuecomment-383210085:0,Deployability,Update,Update,0,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085
https://github.com/psi4/psi4/pull/802#issuecomment-383210085:1670,Energy Efficiency,Energy,Energy,1670,"chwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91835e-02 DIIS	 |	 Ap App ; @DF-UKS iter 3: -75.87814618269091 -4.06312e-01 2.70648e-03 DIIS	 |	 DOCC [ 4, 0 ]; @DF-UKS iter 4: -75.87860013991410 -4.53957e-04 1.85656e-04 DIIS	 |	 SOCC [ 0, 1 ]; @DF-UKS iter 5: -75.87860479400773 -4.65409e-06 5.17609e-05 DIIS	 |; @DF-UKS iter 6: -75.87860525313432 -4.59127e-07 6.18748e-06 DIIS	 |	 @DF-UKS iter 1: -75.69919988631725 -3.76072e+00 8.89804e-02 ; @DF-UKS iter 7: -75.87860525835350 -5.21918e-09 1.04046e-06 DIIS	 |	 @DF-UKS iter 2: -75.57133352451177 1.27866e-01 1.11758e-01 DIIS; @DF-UKS iter 8: -75.87860525846337 -1.09864e-10 1.13063e-07 DIIS	 |	 @DF-UKS iter 3: -76.19695131159150 -6.25618e-01 4.05977e-03 DIIS; @DF-UKS iter 9: -75.87860525846484",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085
https://github.com/psi4/psi4/pull/802#issuecomment-383210085:1706,Energy Efficiency,Energy,Energy,1706,"chwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91835e-02 DIIS	 |	 Ap App ; @DF-UKS iter 3: -75.87814618269091 -4.06312e-01 2.70648e-03 DIIS	 |	 DOCC [ 4, 0 ]; @DF-UKS iter 4: -75.87860013991410 -4.53957e-04 1.85656e-04 DIIS	 |	 SOCC [ 0, 1 ]; @DF-UKS iter 5: -75.87860479400773 -4.65409e-06 5.17609e-05 DIIS	 |; @DF-UKS iter 6: -75.87860525313432 -4.59127e-07 6.18748e-06 DIIS	 |	 @DF-UKS iter 1: -75.69919988631725 -3.76072e+00 8.89804e-02 ; @DF-UKS iter 7: -75.87860525835350 -5.21918e-09 1.04046e-06 DIIS	 |	 @DF-UKS iter 2: -75.57133352451177 1.27866e-01 1.11758e-01 DIIS; @DF-UKS iter 8: -75.87860525846337 -1.09864e-10 1.13063e-07 DIIS	 |	 @DF-UKS iter 3: -76.19695131159150 -6.25618e-01 4.05977e-03 DIIS; @DF-UKS iter 9: -75.87860525846484",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085
https://github.com/psi4/psi4/pull/802#issuecomment-383210085:627,Performance,Cache,Cache,627,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085
https://github.com/psi4/psi4/pull/802#issuecomment-383210085:655,Performance,Cache,Cache,655,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085
https://github.com/psi4/psi4/pull/802#issuecomment-383211336:140,Safety,sanity check,sanity checking,140,"For the M11, can you try removing the whole `x_hf` subdirectory? The long range part should be just 0.572. If removing that helps, then the sanity checking function needs updating - it shouldn't allow two ""use_libxc"" parameters through.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383211336
https://github.com/psi4/psi4/pull/802#issuecomment-383216051:73,Availability,error,error,73,"Actually, as defined above, the M11 dictionary should raise a validation error, see section 2b of `check_consistency()`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383216051
https://github.com/psi4/psi4/pull/802#issuecomment-383216051:62,Security,validat,validation,62,"Actually, as defined above, the M11 dictionary should raise a validation error, see section 2b of `check_consistency()`...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383216051
https://github.com/psi4/psi4/pull/802#issuecomment-383224938:43,Availability,error,error,43,"You're right on 2b, there's a slight logic error that I was evading. Fixing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383224938
https://github.com/psi4/psi4/pull/802#issuecomment-383224938:37,Testability,log,logic,37,"You're right on 2b, there's a slight logic error that I was evading. Fixing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383224938
https://github.com/psi4/psi4/pull/802#issuecomment-383554275:175,Availability,fault,faulty,175,"@loriab libxc 4 uses Maple implementations of pretty much everything, whereas version 3 had my hand-written implementation. But yes, it would appear that the Maple version is faulty and needs to be fixed. https://gitlab.com/libxc/libxc/issues/45",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383554275
https://github.com/psi4/psi4/pull/802#issuecomment-383599351:167,Integrability,interface,interface,167,"Thanks for the MVS bug fix, @susilehtola. I'll pull it over when it gets merged on GL. And for the tag, too. It'll be nice to have a one that includes Daniel's python interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383599351
https://github.com/psi4/psi4/pull/802#issuecomment-384340524:49,Integrability,interface,interface,49,"@loriab FYI libxc 4.0.5 won't include the Python interface, that'll be left to 4.1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-384340524
https://github.com/psi4/psi4/pull/802#issuecomment-384512147:45,Deployability,release,release,45,"@loriab ok. Micael Oliveira said he'd do the release next week, with the fixes to the MVS and TM functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-384512147
https://github.com/psi4/psi4/pull/802#issuecomment-386621898:28,Deployability,patch,patched,28,"Thanks, @susilehtola, but I patched up master earlier in the week to get things working, as the retweaking and py interface stuff were wrt master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-386621898
https://github.com/psi4/psi4/pull/802#issuecomment-386621898:114,Integrability,interface,interface,114,"Thanks, @susilehtola, but I patched up master earlier in the week to get things working, as the retweaking and py interface stuff were wrt master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-386621898
https://github.com/psi4/psi4/issues/804#issuecomment-333541702:725,Availability,error,error,725,"Yes, this is an embarrassing but rare known issue. It's not unalike the problem mentioned in #782 where geometry updates were interpreted in a different frame from internal representation leading to surprise results. Only in this case it's a units problem. There isn't a ready solution, so it's simply in mind to be fixed at next Mol spec iteration (in progress). If you hit it in the meantime, just toggle [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L1165) with `if True:` (and re-make to copy the file); it's harmless so long as your input geometry doesn't actually have overlapping atoms. The class was designed better than this; there was a later decision that leads to this error popping up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-333541702
https://github.com/psi4/psi4/issues/804#issuecomment-333541702:113,Deployability,update,updates,113,"Yes, this is an embarrassing but rare known issue. It's not unalike the problem mentioned in #782 where geometry updates were interpreted in a different frame from internal representation leading to surprise results. Only in this case it's a units problem. There isn't a ready solution, so it's simply in mind to be fixed at next Mol spec iteration (in progress). If you hit it in the meantime, just toggle [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L1165) with `if True:` (and re-make to copy the file); it's harmless so long as your input geometry doesn't actually have overlapping atoms. The class was designed better than this; there was a later decision that leads to this error popping up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-333541702
https://github.com/psi4/psi4/issues/804#issuecomment-333541702:400,Deployability,toggle,toggle,400,"Yes, this is an embarrassing but rare known issue. It's not unalike the problem mentioned in #782 where geometry updates were interpreted in a different frame from internal representation leading to surprise results. Only in this case it's a units problem. There isn't a ready solution, so it's simply in mind to be fixed at next Mol spec iteration (in progress). If you hit it in the meantime, just toggle [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L1165) with `if True:` (and re-make to copy the file); it's harmless so long as your input geometry doesn't actually have overlapping atoms. The class was designed better than this; there was a later decision that leads to this error popping up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-333541702
https://github.com/psi4/psi4/issues/804#issuecomment-333541702:295,Usability,simpl,simply,295,"Yes, this is an embarrassing but rare known issue. It's not unalike the problem mentioned in #782 where geometry updates were interpreted in a different frame from internal representation leading to surprise results. Only in this case it's a units problem. There isn't a ready solution, so it's simply in mind to be fixed at next Mol spec iteration (in progress). If you hit it in the meantime, just toggle [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L1165) with `if True:` (and re-make to copy the file); it's harmless so long as your input geometry doesn't actually have overlapping atoms. The class was designed better than this; there was a later decision that leads to this error popping up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-333541702
https://github.com/psi4/psi4/issues/804#issuecomment-381037567:59,Security,validat,validate,59,We're switching to a consider-all-molecule-at-once test to validate input geometries rather than the present each-atom-at-a-time. The `Adding atom on top of an existing atom` check is thus unneeded and just causes very rare trouble. It has been silenced (though I can't find in which PR).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-381037567
https://github.com/psi4/psi4/issues/804#issuecomment-381037567:51,Testability,test,test,51,We're switching to a consider-all-molecule-at-once test to validate input geometries rather than the present each-atom-at-a-time. The `Adding atom on top of an existing atom` check is thus unneeded and just causes very rare trouble. It has been silenced (though I can't find in which PR).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-381037567
https://github.com/psi4/psi4/pull/808#issuecomment-332288034:356,Integrability,depend,dependent,356,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034
https://github.com/psi4/psi4/pull/808#issuecomment-332288034:76,Testability,test,tests,76,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034
https://github.com/psi4/psi4/pull/808#issuecomment-332288034:425,Testability,test,test,425,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034
https://github.com/psi4/psi4/pull/808#issuecomment-332288034:455,Testability,test,test,455,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034
https://github.com/psi4/psi4/pull/808#issuecomment-332291477:911,Integrability,depend,dependent,911,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477
https://github.com/psi4/psi4/pull/808#issuecomment-332291477:572,Testability,test,tests,572,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477
https://github.com/psi4/psi4/pull/808#issuecomment-332291477:980,Testability,test,test,980,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477
https://github.com/psi4/psi4/pull/808#issuecomment-332291477:1013,Testability,test,test,1013,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477
https://github.com/psi4/psi4/pull/808#issuecomment-332294941:64,Testability,test,test,64,I view `props3` and `scf-cov` fixing up a slightly shaky/flawed test. For `props2` this is fixing an issue caused by the Cart/ZMat changes. Let me comment there further to keep that discussion contiguous.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332294941
https://github.com/psi4/psi4/pull/809#issuecomment-334001557:192,Deployability,integrat,integrate,192,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557
https://github.com/psi4/psi4/pull/809#issuecomment-334001557:192,Integrability,integrat,integrate,192,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557
https://github.com/psi4/psi4/pull/809#issuecomment-334001557:74,Security,validat,validation,74,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557
https://github.com/psi4/psi4/pull/810#issuecomment-337288321:32,Testability,test,test,32,I'm trying to debug the failing test cases and I've run `clang-format` on some of the CC sources. Don't hate me (too much) when you look at the diffs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810#issuecomment-337288321
https://github.com/psi4/psi4/pull/810#issuecomment-337592287:42,Testability,test,tests,42,"Sure, as soon as I'm done with fixing the tests and cleaning up the code as you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810#issuecomment-337592287
https://github.com/psi4/psi4/pull/810#issuecomment-533552543:56,Deployability,update,update,56,"@robertodr A gentle poke here, can you provide a status update?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/810#issuecomment-533552543
https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1166,Availability,down,down,1166,"patibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.so => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libxc.so (0x00007f4311d74000); 	libdl.so.2 => /lib64/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335
https://github.com/psi4/psi4/issues/812#issuecomment-332960335:823,Integrability,depend,dependency,823,"Hi @j3mdamas,. Yes, the defaults version 4.8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335
https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1017,Integrability,depend,dependency,1017,"8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335
https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1136,Integrability,message,message,1136,"dern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.so => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335
https://github.com/psi4/psi4/issues/812#issuecomment-332960335:12805,Integrability,depend,dependency,12805,2.5) => /lib64/libc.so.6; 	/scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../.././libhdf5.so.10:; 		libdl.so.2 (GLIBC_2.2.5) => /lib64/libdl.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libpthread.so.0 (GLIBC_2.3.2) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.8) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; 	/scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../.././libhdf5_hl.so.10:; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; + conda-inspect linkages --show-files --groupby=dependency chemps2 dkh libefp erd gdma libint pcmsolver simint libxc psi4; file:///scratch/psilocaluser/conda-builds::chemps2-1.8.4-0; ----------------------------------------------------------. chemps2:; libchemps2.so.2 (lib/libchemps2.so.2) from bin/chemps2. psi4:; libchemps2.so.2 (lib/libchemps2.so.2) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::dkh-1.2-1; ----------------------------------------------------. psi4:; libdkh.so (lib/libdkh.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::erd-3.0.6-1; ------------------------------------------------------. psi4:; liberd.so (lib/liberd.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::gdma-2.2.6-3; -------------------------------------------------------. psi4:; libgdma.so (lib/libgdma.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::libefp-1.5b1-0; ---------------------------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335
https://github.com/psi4/psi4/issues/812#issuecomment-332960335:998,Testability,test,tested,998,"Hi @j3mdamas,. Yes, the defaults version 4.8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335
https://github.com/psi4/psi4/issues/812#issuecomment-335043822:29,Usability,learn,learned,29,"Sure! Since your query, I've learned that in principle, the new compiler toolchain on Mac can do OpenMP parallelism. I've started working on that (https://github.com/AnacondaRecipes/aggregate/issues/10). If that ends up working, we'll still want to use Intel compilers on top of it for Linux, but, in principle, we'd switch Linux, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-335043822
https://github.com/psi4/psi4/issues/812#issuecomment-347015850:14,Deployability,update,update,14,@j3mdamas Any update on this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347015850
https://github.com/psi4/psi4/issues/812#issuecomment-347016842:41,Deployability,install,install,41,"Oh yeah, on linux you can try out `conda install psi4 -c psi4/label/agg` . It's a basic compile and low AM integrals, and only py36, but it is using the new 7.2 conda compilers and full-length prefix padding. (Still segfaults linux jupyter `import psi4`, though.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347016842
https://github.com/psi4/psi4/issues/812#issuecomment-347174011:321,Availability,down,down,321,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011
https://github.com/psi4/psi4/issues/812#issuecomment-347174011:38,Deployability,update,update,38,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011
https://github.com/psi4/psi4/issues/812#issuecomment-347174011:195,Integrability,depend,depend,195,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011
https://github.com/psi4/psi4/issues/812#issuecomment-347174011:228,Integrability,depend,dependencies,228,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011
https://github.com/psi4/psi4/issues/812#issuecomment-347207093:151,Integrability,depend,dependencies,151,"I wouldn't ship it in its current state, but it sounds like the `-c psi4/label/agg` (built with gcc_linux-64) is what you want. It'll end up with more dependencies than it has now (this is a minimal build) but not any more from the gcc family (except maybe gfortran).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347207093
https://github.com/psi4/psi4/issues/812#issuecomment-347223179:75,Deployability,release,release,75,"First step is it'll replace `psi4/label/dev`. The timing of a new official release and hence `psi4/label/main` is beyond my control (that is, effectively I can veto but not assert). But absolutely, the plan is for `gcc_linux-64`-built Psi to trickle ever upward and replace the `gcc-5` presently distributed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347223179
https://github.com/psi4/psi4/issues/812#issuecomment-347223179:173,Testability,assert,assert,173,"First step is it'll replace `psi4/label/dev`. The timing of a new official release and hence `psi4/label/main` is beyond my control (that is, effectively I can veto but not assert). But absolutely, the plan is for `gcc_linux-64`-built Psi to trickle ever upward and replace the `gcc-5` presently distributed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347223179
https://github.com/psi4/psi4/pull/814#issuecomment-333604954:0,Deployability,Update,Update,0,Update: `-fvisibility=hidden` is indeed active in 2.2.1 and quite breaking plugins. Shelving this PR and recommending that symbols/c-layer-/py-layer-plugin-interfacing be a topic at WWDC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-333604954
https://github.com/psi4/psi4/pull/814#issuecomment-333604954:75,Modifiability,plugin,plugins,75,Update: `-fvisibility=hidden` is indeed active in 2.2.1 and quite breaking plugins. Shelving this PR and recommending that symbols/c-layer-/py-layer-plugin-interfacing be a topic at WWDC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-333604954
https://github.com/psi4/psi4/pull/814#issuecomment-333604954:149,Modifiability,plugin,plugin-interfacing,149,Update: `-fvisibility=hidden` is indeed active in 2.2.1 and quite breaking plugins. Shelving this PR and recommending that symbols/c-layer-/py-layer-plugin-interfacing be a topic at WWDC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-333604954
https://github.com/psi4/psi4/pull/814#issuecomment-335233936:256,Deployability,release,releases,256,"I skimmed the functionality for new goodies, I dont see too many that effects us (and nothing in a major way). So nothing too promising there. Do the PyBind11 folks have an official stance on cross version compatibility. I dont see a huge reason for major releases not to work together at the moment. Although I do see possible issues as they tweak things like `py::keep_alive` between 2.1 and 2.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-335233936
https://github.com/psi4/psi4/pull/814#issuecomment-347012820:120,Safety,avoid,avoid,120,@loriab Looks like Pybind11 #1121 is clearing up. Do you have thoughts on getting this or should I tweak up gau2grid to avoid 2.2 features?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347012820
https://github.com/psi4/psi4/pull/814#issuecomment-347012820:37,Usability,clear,clearing,37,@loriab Looks like Pybind11 #1121 is clearing up. Do you have thoughts on getting this or should I tweak up gau2grid to avoid 2.2 features?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347012820
https://github.com/psi4/psi4/pull/814#issuecomment-347016004:113,Availability,down,downgrade,113,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004
https://github.com/psi4/psi4/pull/814#issuecomment-347016004:30,Deployability,upgrade,upgrade,30,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004
https://github.com/psi4/psi4/pull/814#issuecomment-347016004:270,Integrability,interface,interface,270,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004
https://github.com/psi4/psi4/pull/814#issuecomment-347016004:195,Modifiability,plugin,plugins,195,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004
https://github.com/psi4/psi4/issues/815#issuecomment-333552997:90,Deployability,update,update,90,"If someone can confirm what the units are, or how they should be described,; I'm happy to update the docs and the code. On Mon, Oct 2, 2017 at 7:31 AM, Daniel Smith <notifications@github.com>; wrote:. > Sounds like a good plan, looks like the units should be in natural units; > since we are not applying conversion factors. @fevangelista; > <https://github.com/fevangelista> may be a better person to comment.; >; > 1. Docs for cube prop can be found here; > <https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/cubeprop.rst>; > .; > b) Looks like editing these keys or lines here; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libcubeprop/cubeprop.cc#L202>; > will change the name header.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/815#issuecomment-333534925>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABxha7tvsa0oDGt2ZE-ABO63Yg54lRgqks5soOW8gaJpZM4Ppvfg>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-333552997
https://github.com/psi4/psi4/issues/815#issuecomment-333639899:12,Energy Efficiency,energy,energy,12,"Eh (Hartree energy) is the [atomic unit of energy](https://physics.nist.gov/cgi-bin/cuu/Value?thr), while a0 (Bohr radius) is the [atomic unit of length](https://physics.nist.gov/cgi-bin/cuu/Value?tbohrrada0|search_for=nonsi_in!)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-333639899
https://github.com/psi4/psi4/issues/815#issuecomment-333639899:43,Energy Efficiency,energy,energy,43,"Eh (Hartree energy) is the [atomic unit of energy](https://physics.nist.gov/cgi-bin/cuu/Value?thr), while a0 (Bohr radius) is the [atomic unit of length](https://physics.nist.gov/cgi-bin/cuu/Value?tbohrrada0|search_for=nonsi_in!)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-333639899
https://github.com/psi4/psi4/issues/815#issuecomment-347021249:643,Safety,safe,safelinks,643,"Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249
https://github.com/psi4/psi4/issues/815#issuecomment-347021249:956,Safety,safe,safelinks,956,"Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249
https://github.com/psi4/psi4/issues/815#issuecomment-347021249:1406,Safety,safe,safelinks,1406,"xing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249
https://github.com/psi4/psi4/issues/815#issuecomment-347021249:1755,Safety,safe,safelinks,1755,"xing this myself, but your solution(s) seem much better than whatever hack I would have come up with. Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master?. From: Daniel Smith [mailto:notifications@github.com]; Sent: Sunday, November 26, 2017 8:22 AM; To: psi4/psi4 <psi4@noreply.github.com>; Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com>; Subject: Re: [psi4/psi4] Cube file units? (#815). Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347021249
https://github.com/psi4/psi4/issues/815#issuecomment-347029051:883,Safety,safe,safelinks,883,"We pulled it in today. A fresh pull and rebuild should have these changes for you. . -Daniel Smith; Sent from my iPhone. . > On Nov 26, 2017, at 11:35, Ian Bell <notifications@github.com> wrote:; > ; > Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. ; > ; > Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051
https://github.com/psi4/psi4/issues/815#issuecomment-347029051:1196,Safety,safe,safelinks,1196," Yes, this seems good from reading the code, but I haven’t tried it in the real world. Sorry I didn’t get around to fixing this myself, but your solution(s) seem much better than whatever hack I would have come up with. ; > ; > Especially like the isocontour that contains XX% of the electron density PDF modification. When will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051
https://github.com/psi4/psi4/issues/815#issuecomment-347029051:1660,Safety,safe,safelinks,1660,"hen will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>. ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051
https://github.com/psi4/psi4/issues/815#issuecomment-347029051:2009,Safety,safe,safelinks,2009,"hen will that make it into the master? ; > ; > From: Daniel Smith [mailto:notifications@github.com] ; > Sent: Sunday, November 26, 2017 8:22 AM ; > To: psi4/psi4 <psi4@noreply.github.com> ; > Cc: Bell, Ian (Fed) <ian.bell@nist.gov>; Mention <mention@noreply.github.com> ; > Subject: Re: [psi4/psi4] Cube file units? (#815) ; > ; > ; > Fixed in #864<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fpull%2F864&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=ovNTIVz57LVNsjcGLTnY7x6FdVA6LrnzFfr8rODv8jM%3D&reserved=0>. @ianhbell<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fianhbell&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=BbgIavE%2BOpBG2nShMTB9WmFqu1z1Oy10YPHDlbWHK4Q%3D&reserved=0> please let us know if that works for you. Closing for now. ; > ; > — ; > You are receiving this because you were mentioned. ; > Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpsi4%2Fpsi4%2Fissues%2F815%23issuecomment-347015726&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=6LFqXLzB8E2v9UgPYsuvVSjQh7PY0s6mhRGYe7bL3hg%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALaZLRBPKhKV-XYnDzyf891po65sdy-Cks5s6YH7gaJpZM4Ppvfg&data=02%7C01%7Cian.bell%40nist.gov%7Cd020f6f597454c9465fb08d534e1602c%7C2ab5d82fd8fa4797a93e054655c61dec%7C1%7C0%7C636473064942393956&sdata=hmIB%2BNI%2BFucZdgbKzRI%2BuIT%2B11FYAsARSktaDW9%2B0s0%3D&reserved=0>. ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-347029051
https://github.com/psi4/psi4/issues/817#issuecomment-335202988:101,Availability,down,down,101,"@raimis, could you post here an example? if @dgasmith already spot it, maybe it's easier to track it down?; Thanks guys!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-335202988
https://github.com/psi4/psi4/issues/817#issuecomment-351387637:36,Deployability,update,updates,36,"@robertodr Made a PR a bit ago, any updates there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351387637
https://github.com/psi4/psi4/issues/817#issuecomment-351450253:66,Testability,test,test,66,The PR is #818 and I was waiting for a minimal failing example to test that that was actually the fix needed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351450253
https://github.com/psi4/psi4/issues/817#issuecomment-351739145:664,Deployability,pipeline,pipeline,664,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145
https://github.com/psi4/psi4/issues/817#issuecomment-351739145:235,Energy Efficiency,energy,energy,235,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145
https://github.com/psi4/psi4/issues/817#issuecomment-351739145:516,Energy Efficiency,energy,energy,516,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145
https://github.com/psi4/psi4/issues/817#issuecomment-351739145:296,Testability,test,test,296,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145
https://github.com/psi4/psi4/issues/817#issuecomment-351739145:577,Testability,test,test,577,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145
https://github.com/psi4/psi4/issues/817#issuecomment-351739145:25,Usability,simpl,simple,25,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145
https://github.com/psi4/psi4/issues/817#issuecomment-356713683:672,Availability,down,down,672,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683
https://github.com/psi4/psi4/issues/817#issuecomment-356713683:516,Deployability,release,release,516,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683
https://github.com/psi4/psi4/issues/817#issuecomment-356713683:566,Testability,test,tested,566,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683
https://github.com/psi4/psi4/issues/817#issuecomment-356713683:1002,Testability,test,test,1002,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683
https://github.com/psi4/psi4/issues/817#issuecomment-356713683:1181,Testability,test,test,1181,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683
https://github.com/psi4/psi4/issues/817#issuecomment-356749030:32,Testability,test,test,32,"Apologies for slowness! I _did_ test both Psithon _and_ PsiAPI before submitting the PR, so I am a bit surprised things are broken for you @loriab I can surely take another look. The long term solution is to ditch the additional input file for PCM. This requires changes in the PCM library that I am (alas, slowly) making right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356749030
https://github.com/psi4/psi4/issues/817#issuecomment-356771661:19,Deployability,update,update,19,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661
https://github.com/psi4/psi4/issues/817#issuecomment-356771661:165,Modifiability,flexible,flexible,165,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661
https://github.com/psi4/psi4/issues/817#issuecomment-356771661:194,Security,access,access,194,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661
https://github.com/psi4/psi4/issues/817#issuecomment-356786390:38,Testability,test,test,38,"I won't close then. @raimis could you test PR #818?. Yeah, we use psithon. Could be interesting to change to psiapi, but we're happy with the passing the input to bin/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356786390
https://github.com/psi4/psi4/issues/817#issuecomment-356790530:19,Testability,test,testing,19,Actually not worth testing 818. It won't have had any effect on psithon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356790530
https://github.com/psi4/psi4/issues/817#issuecomment-356791472:318,Modifiability,variab,variables,318,"Just noticed [this](https://github.com/raimis/htmd/blob/a43918d2642585e61882f1f22d4502809611374c/htmd/qm/psi4.py#L226). I don't recall if it's merged to master yet, but I changed it and others https://github.com/psi4/psi4/blob/scfitertopy/psi4/src/psi4/libmints/oeprop.cc#L1355 . You may prefer to grab stuff from psi variables `psi4.print_variables()` if you've only the output file to work from.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356791472
https://github.com/psi4/psi4/issues/817#issuecomment-356990910:270,Deployability,pipeline,pipeline,270,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910
https://github.com/psi4/psi4/issues/817#issuecomment-356990910:434,Energy Efficiency,energy,energy,434,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910
https://github.com/psi4/psi4/issues/817#issuecomment-356990910:302,Testability,test,test,302,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910
https://github.com/psi4/psi4/issues/817#issuecomment-356990910:483,Testability,test,test,483,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1000,Energy Efficiency,energy,energy,1000,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1237,Energy Efficiency,energy,energy,1237,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1359,Energy Efficiency,energy,energy,1359,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1014,Performance,optimiz,optimize,1014,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:1343,Performance,optimiz,optimize,1343,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:594,Testability,log,log,594,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-357208169:380,Usability,simpl,simple,380,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169
https://github.com/psi4/psi4/issues/817#issuecomment-370246501:27,Availability,down,down,27,"Yes. Though as I've fallen down on my conda-building duties, haven't personally confirmed. Should be safe to close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370246501
https://github.com/psi4/psi4/issues/817#issuecomment-370246501:101,Safety,safe,safe,101,"Yes. Though as I've fallen down on my conda-building duties, haven't personally confirmed. Should be safe to close.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370246501
https://github.com/psi4/psi4/issues/817#issuecomment-370274485:118,Deployability,update,update,118,"It's been in since late January. But the nightly conda build machinery is broken until I get some time to universally update to the new conda-build compilers (prototyped in the fall that they do work with psi) which won't be until after ACS. As far as stable release, the fix'll be in the next one, 1.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370274485
https://github.com/psi4/psi4/issues/817#issuecomment-370274485:259,Deployability,release,release,259,"It's been in since late January. But the nightly conda build machinery is broken until I get some time to universally update to the new conda-build compilers (prototyped in the fall that they do work with psi) which won't be until after ACS. As far as stable release, the fix'll be in the next one, 1.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370274485
https://github.com/psi4/psi4/pull/818#issuecomment-335224403:34,Testability,test,test,34,"Did you happen to confirm `psi4 --test` is still ok, @robertodr? That runs PCM in PsiAPI mode.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-335224403
https://github.com/psi4/psi4/pull/818#issuecomment-335230894:150,Testability,test,test,150,Everything is prone to breaking is PsiAPI mode because there's none of the saving new instance of psi4 between calculations. Try commenting out every test besides the PCM in `tests/pytest/test_addons.py` and see if that's ok? Note that `psi4 --test` is just `pytest -rs -v` behind the scenes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-335230894
https://github.com/psi4/psi4/pull/818#issuecomment-335230894:175,Testability,test,tests,175,Everything is prone to breaking is PsiAPI mode because there's none of the saving new instance of psi4 between calculations. Try commenting out every test besides the PCM in `tests/pytest/test_addons.py` and see if that's ok? Note that `psi4 --test` is just `pytest -rs -v` behind the scenes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-335230894
https://github.com/psi4/psi4/pull/818#issuecomment-335230894:244,Testability,test,test,244,Everything is prone to breaking is PsiAPI mode because there's none of the saving new instance of psi4 between calculations. Try commenting out every test besides the PCM in `tests/pytest/test_addons.py` and see if that's ok? Note that `psi4 --test` is just `pytest -rs -v` behind the scenes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-335230894
https://github.com/psi4/psi4/pull/818#issuecomment-345243568:4,Deployability,update,update,4,Any update on whats wrong with this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-345243568
https://github.com/psi4/psi4/pull/818#issuecomment-352043441:8,Testability,test,test,8,`psi4 --test` is now OK. @j3mdamas @raimis issue #817 should be fixed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352043441
https://github.com/psi4/psi4/pull/818#issuecomment-352287559:57,Availability,avail,available,57,"thanks @robertodr and all. In which version will this be available? @raimis, we should change our code when it's available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352287559
https://github.com/psi4/psi4/pull/818#issuecomment-352287559:113,Availability,avail,available,113,"thanks @robertodr and all. In which version will this be available? @raimis, we should change our code when it's available.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352287559
https://github.com/psi4/psi4/pull/818#issuecomment-352470152:223,Availability,avail,available,223,"It's on master already, you can just clone from github. On Dec 17, 2017 16:38, ""João M. Damas"" <notifications@github.com> wrote:. > thanks @robertodr <https://github.com/robertodr> and all. In which; > version will this be available? @raimis <https://github.com/raimis>, we; > should change our code when it's available.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/818#issuecomment-352287559>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADiXEcgYF_RXeb88yNyaVqEJorcDgpuwks5tBYnJgaJpZM4PyztD>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352470152
https://github.com/psi4/psi4/pull/818#issuecomment-352470152:310,Availability,avail,available,310,"It's on master already, you can just clone from github. On Dec 17, 2017 16:38, ""João M. Damas"" <notifications@github.com> wrote:. > thanks @robertodr <https://github.com/robertodr> and all. In which; > version will this be available? @raimis <https://github.com/raimis>, we; > should change our code when it's available.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/818#issuecomment-352287559>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADiXEcgYF_RXeb88yNyaVqEJorcDgpuwks5tBYnJgaJpZM4PyztD>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352470152
https://github.com/psi4/psi4/pull/818#issuecomment-352470569:16,Usability,clear,clear,16,"Sorry, I wasn't clear. I meant on conda, on the main channel :) On 1.2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-352470569
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:945,Availability,Error,Error,945,"Sometime, could you take another look at `psi4 --test`, @robertodr? Whenever I run, I get the below, and it looks like it's happening outside the pcm_helper fn. That is, in c-side SCF where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFER",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:952,Availability,Error,Error,952,"Sometime, could you take another look at `psi4 --test`, @robertodr? Whenever I run, I get the below, and it looks like it's happening outside the pcm_helper fn. That is, in c-side SCF where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFER",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1169,Energy Efficiency,energy,energy,1169,"where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1555,Energy Efficiency,energy,energy,1555," Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'scf', ref_wfn = <psi4.core.Wavefunction object at 0x7fa9d0ef4af0>, reference = 'RHF'. def scf_wavefunction_factory(name, ref_wfn, reference):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1581,Energy Efficiency,energy,energy,1581," Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'scf', ref_wfn = <psi4.core.Wavefunction object at 0x7fa9d0ef4af0>, reference = 'RHF'. def scf_wavefunction_factory(name, ref_wfn, reference):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:49,Testability,test,test,49,"Sometime, could you take another look at `psi4 --test`, @robertodr? Whenever I run, I get the below, and it looks like it's happening outside the pcm_helper fn. That is, in c-side SCF where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFER",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1267,Testability,test,tests,1267,"ubdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'scf', ref_wfn = <psi4.core.Wavefunction object at 0x7fa9d0ef4af0>, reference = ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977
https://github.com/psi4/psi4/pull/818#issuecomment-354305258:385,Availability,avail,available,385,"Hi @loriab,. Thanks for looking carefully into this. I don't really understand the terms psithon and psiapi you use, but our use of psi4 is always through the command-line tool, and this is the functionality where we were trying to fix the pcm capabilities, because we were rather using an ugly fix of saving the working directory and changing back to it in the end. @raimis and I are available to provide any help you may need. Happy holidays to the PSI4 team!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-354305258
https://github.com/psi4/psi4/issues/820#issuecomment-335915587:48,Performance,load,loaded,48,"See if you can check that a proper gcc is being loaded for `psi4/core.so`. That `cxx11::basic_string<char, std::char_traits` brings to mind the pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it all conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335915587
https://github.com/psi4/psi4/issues/820#issuecomment-335970314:45,Deployability,install,install,45,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314
https://github.com/psi4/psi4/issues/820#issuecomment-335970314:196,Performance,load,loaded,196,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314
https://github.com/psi4/psi4/issues/820#issuecomment-335970314:61,Testability,test,test,61,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314
https://github.com/psi4/psi4/issues/820#issuecomment-336332157:36,Deployability,install,installation,36,"Hi @loriab,. Just did a fresh conda installation, and this problem does not exist. I'm going to close it for now then. Sorry to bother!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-336332157
https://github.com/psi4/psi4/pull/822#issuecomment-336671639:99,Testability,test,test,99,Thanks for the PR! Definitely add units where applicable. . Looks like you will need to tweak that test after your changes. Everything else looks great.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/822#issuecomment-336671639
https://github.com/psi4/psi4/pull/822#issuecomment-337743478:183,Availability,error,error,183,"What I did before failed because I was putting the units into a string that was also used to generate file names. As the string contained illegal characters the execution ran into an error. Should I add a general comment (third argument) by default the units to compute_density and related functions, or hard-wire the units into the cube file header?. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libcubeprop/cubeprop.h#L98-L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/822#issuecomment-337743478
https://github.com/psi4/psi4/issues/823#issuecomment-337805838:100,Testability,test,tests,100,Psi4 never uses nested braces. See a combination of [this](https://github.com/psi4/psi4/blob/master/tests/mints2/input.dat#L59-L111) and [this](https://github.com/psi4/psi4/blob/master/tests/pywrap-basis/input.dat#L27-L34) for manually specifying an auxiliary basis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/823#issuecomment-337805838
https://github.com/psi4/psi4/issues/823#issuecomment-337805838:185,Testability,test,tests,185,Psi4 never uses nested braces. See a combination of [this](https://github.com/psi4/psi4/blob/master/tests/mints2/input.dat#L59-L111) and [this](https://github.com/psi4/psi4/blob/master/tests/pywrap-basis/input.dat#L27-L34) for manually specifying an auxiliary basis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/823#issuecomment-337805838
https://github.com/psi4/psi4/issues/823#issuecomment-337808388:18,Availability,error,error,18,there is a syntax error when [] and * are in the file.; [my3-21g] is putted in the input file?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/823#issuecomment-337808388
https://github.com/psi4/psi4/issues/823#issuecomment-337917955:159,Availability,error,error,159,You may have to replace `*` with `s` as [described here](http://psicode.org/psi4manual/master/basissets.html#user-defined-basis-sets). You'll have to post the error and input to get specific advice.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/823#issuecomment-337917955
https://github.com/psi4/psi4/pull/825#issuecomment-339744853:271,Safety,safe,safe,271,"@jturney Fixing this pull request has not been at the top of my priority list, for reasons you can probably guess. The metadata has been added to the ANO0 basis file. This is the only ANO basis set Psi4 has, so I didn't need to add the metadata to any other files. To be safe, I ran the entire file through a diff-checker against the EMSL file. They match. I've used my own timestamp for the metadata.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/825#issuecomment-339744853
https://github.com/psi4/psi4/issues/827#issuecomment-339688990:80,Deployability,integrat,integration,80,"I don't recall the actual recc. values, but that paper does discuss two sets of integration grid. probably (99, 590) for the main functional grid and ~SG1~(50, 146) for the VV10 grid.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339688990
https://github.com/psi4/psi4/issues/827#issuecomment-339688990:80,Integrability,integrat,integration,80,"I don't recall the actual recc. values, but that paper does discuss two sets of integration grid. probably (99, 590) for the main functional grid and ~SG1~(50, 146) for the VV10 grid.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339688990
https://github.com/psi4/psi4/issues/827#issuecomment-339771034:21,Usability,clear,clear,21,"Awesome, that's very clear. Thank you all for the timely and descriptive answers!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339771034
https://github.com/psi4/psi4/issues/828#issuecomment-339397438:45,Energy Efficiency,energy,energy,45,I also noticed like an hour ago that running energy('cisd') triggers for some reason a frozen natural orbital calculation. I don't think this should be happening..?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339397438
https://github.com/psi4/psi4/issues/828#issuecomment-339405629:289,Energy Efficiency,energy,energy,289,"The FNOCC module includes CEPA/LCCSD/CISD codes, and I suppose FNOCC’s version of CISD is default. That code assumes the number of virtual orbitals is greater than the number of occupied orbitals and won’t work in this case. You can invoke DETCI’s CISD code instead with . set ex_level 2; energy(‘detci’). > On Oct 25, 2017, at 12:55 PM, Susi Lehtola <notifications@github.com> wrote:; > ; > I also noticed like an hour ago that running energy('cisd') triggers for some reason a frozen natural orbital calculation. I don't think this should be happening..?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339397438>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGkBj9d5B7EnoRZvyETzQg7vKsysdks5sv2gegaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339405629
https://github.com/psi4/psi4/issues/828#issuecomment-339405629:437,Energy Efficiency,energy,energy,437,"The FNOCC module includes CEPA/LCCSD/CISD codes, and I suppose FNOCC’s version of CISD is default. That code assumes the number of virtual orbitals is greater than the number of occupied orbitals and won’t work in this case. You can invoke DETCI’s CISD code instead with . set ex_level 2; energy(‘detci’). > On Oct 25, 2017, at 12:55 PM, Susi Lehtola <notifications@github.com> wrote:; > ; > I also noticed like an hour ago that running energy('cisd') triggers for some reason a frozen natural orbital calculation. I don't think this should be happening..?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339397438>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGkBj9d5B7EnoRZvyETzQg7vKsysdks5sv2gegaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339405629
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:10389,Availability,avail,available,10389,"d on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.01 seconds = 0.00 minutes; 	system time = 0.03 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.46 seconds = 0.01 minutes; 	system time = 0.09 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:9940,Deployability,Configurat,Configuration,9940,"sort will use 2.02 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.01 seconds = 0.00 minutes; 	system time = 0.03 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.46 seconds = 0.01 minutes; 	system time = 0.09 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:58,Energy Efficiency,energy,energy,58,"@susilehtola, I'm not seeing what you're seeing. A plain `energy('cisd')` (below) does run through DePrince's module `fnocc` but FNO is off. I quite agree that what you describe shouldn't be happening. What's your input?. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.2a1.dev612 . Git: Rev {macintelclang} 94b2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1291,Energy Efficiency,Energy,Energy,1291,"----------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.2a1.dev612 . Git: Rev {macintelclang} 94b2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1576,Energy Efficiency,energy,energy,1576,"rd, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1670,Energy Efficiency,energy,energy,1670,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1735,Energy Efficiency,energy,energy,1735,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1753,Energy Efficiency,energy,energy,1753,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1811,Energy Efficiency,energy,energy,1811,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1881,Energy Efficiency,ENERGY,ENERGY,1881,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1910,Energy Efficiency,energy,energy,1910,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:2740,Energy Efficiency,charge,charge,2740,"), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:3282,Energy Efficiency,Charge,Charge,3282,"e 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:3480,Energy Efficiency,Energy,Energy,3480,"tin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:4905,Energy Efficiency,Energy,Energy,4905,"-------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 3081 shell quartets total.; Whereas there are 3081 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 2.3361254517E-02.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -75.89338120057249 -7.58934e+01 1.07730e-01 ; @RHF iter 1: -75.98060436750765 -8.72232e-02 1.95692e-02 ; @RHF iter 2: -76.00861798186263 -2.80136e-02 1.04925e-02 DIIS; @RHF iter 3: -76.01673061204843 -8.11263e-03 1.56037e-03 DIIS; @RHF iter 4: -76.01722494225463 -4.94330e-04 5.00914e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.80",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6139,Energy Efficiency,Energy,Energy,6139,"8.11263e-03 1.56037e-03 DIIS; @RHF iter 4: -76.01722494225463 -4.94330e-04 5.00914e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6168,Energy Efficiency,Energy,Energy,6168,"03 DIIS; @RHF iter 4: -76.01722494225463 -4.94330e-04 5.00914e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 mi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6232,Energy Efficiency,Energy,Energy,6232,"4e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total ti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6274,Energy Efficiency,Energy,Energy,6274,"826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6319,Energy Efficiency,Energy,Energy,6319,"ter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6366,Energy Efficiency,Energy,Energy,6366,"6e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6401,Energy Efficiency,Energy,Energy,6401,"60 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 3; Number of AO shells: 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:10701,Energy Efficiency,Allocate,Allocate,10701," 	total time = 0 seconds = 0.00 minutes. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:10821,Energy Efficiency,Energy,Energy,10821,"13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:10830,Energy Efficiency,Energy,Energy,10830,"13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; M",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11497,Energy Efficiency,energy,energy,11497,"CISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11538,Energy Efficiency,energy,energy,11538,"g <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11586,Energy Efficiency,energy,energy,11586,"cks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 secon",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11634,Energy Efficiency,energy,energy,11634,"in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting succe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11679,Energy Efficiency,energy,energy,11679,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11720,Energy Efficiency,energy,energy,11720,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11765,Energy Efficiency,energy,energy,11765,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11809,Energy Efficiency,energy,energy,11809,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11850,Energy Efficiency,energy,energy,11850,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11887,Energy Efficiency,energy,energy,11887,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11933,Energy Efficiency,energy,energy,11933,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11978,Energy Efficiency,energy,energy,11978,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:12020,Energy Efficiency,energy,energy,12020,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:12058,Energy Efficiency,energy,energy,12058,ams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:7266,Integrability,Wrap,Wrapper,7266,"lectron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 3; Number of AO shells: 12; Number of SO shells: 9; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 12 2 4 7 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 13773 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformatio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:9940,Modifiability,Config,Configuration,9940,"sort will use 2.02 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.01 seconds = 0.00 minutes; 	system time = 0.03 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.46 seconds = 0.01 minutes; 	system time = 0.09 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? no; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 1; Number of active occupied orbitals: 4; Number of active virtual orbitals: 20; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 0.16 mb; memory requirements for QCISD(T) = 0.29 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:2102,Performance,Load,Loading,2102,"sr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational consta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:4409,Performance,Perform,Performing,4409,"upation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 3081 shell quartets total.; Whereas there are 3081 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 2.3361254517E-02.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -75.89338120057249 -7.58934e+01 1.07730e-01 ; @RHF iter 1: -75.98060436750765 -8.72232e-02 1.95692e-02 ; @RHF iter 2: -76.00861798186263 -2.80136e-02 1.04925e-02 DIIS; @RHF iter 3: -76.01673061204843 -8.11263e-03 1.56037e-03 DIIS; @RHF iter 4: -76.01722494225463 -4.94330e-04 5.00914e-04 DIIS; @RHF iter 5: -76.01729299826569 -6.80560e-05 1.02319e-04 DIIS; @RHF iter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1281,Testability,Test,Test,1281,"----------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.2a1.dev612 . Git: Rev {macintelclang} 94b2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1331,Testability,TEST,TEST,1331,"ectronic Structure Package; Psi4 1.2a1.dev612 . Git: Rev {macintelclang} 94b2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1365,Testability,TEST,TEST,1365,"1.2a1.dev612 . Git: Rev {macintelclang} 94b2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1398,Testability,TEST,TEST,1398,"2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1430,Testability,TEST,TEST,1430,"2ae0 dirty. R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1680,Testability,TEST,TEST,1680,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1763,Testability,TEST,TEST,1763,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1821,Testability,TEST,TEST,1821,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1920,Testability,TEST,TEST,1920,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:12331,Availability,avail,available,12331,"ne. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:43 2017; Module time:; 	user time = 0.42 seconds = 0.01 minutes; 	system time = 0.37 seconds = 0.01 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 5.26 seconds = 0.09 minutes; 	system time = 0.90 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:44,Deployability,update,updated,44,"@loriab It might be just because I recently updated my workstation and I don't have a recent version of psi4 compiled. Psi4 1.1 runs energy('cisd') through fnocc.; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1 release. Git: Rev {} zzzzzzz . R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:312,Deployability,release,release,312,"@loriab It might be just because I recently updated my workstation and I don't have a recent version of psi4 compiled. Psi4 1.1 runs energy('cisd') through fnocc.; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1 release. Git: Rev {} zzzzzzz . R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:11881,Deployability,Configurat,Configuration,11881,"******. CC integral sort will use 116.60 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:43 2017; Module time:; 	user time = 0.42 seconds = 0.01 minutes; 	system time = 0.37 seconds = 0.01 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 5.26 seconds = 0.09 minutes; 	system time = 0.90 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:133,Energy Efficiency,energy,energy,133,"@loriab It might be just because I recently updated my workstation and I don't have a recent version of psi4 compiled. Psi4 1.1 runs energy('cisd') through fnocc.; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1 release. Git: Rev {} zzzzzzz . R. M. Parrish, L. A. Burns, D. G. A. Smith, A. C. Simmonett,; A. E. DePrince III, E. G. Hohenstein, U. Bozkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1476,Energy Efficiency,energy,energy,1476,"mar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.8",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1525,Energy Efficiency,energy,energy,1525,"mar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.8",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:2264,Energy Efficiency,charge,charge,2264,"Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry. Rotational constants: A = 0.08471 B = 0.08471 C = 0.08471 [cm^-1]; Rotational constants: A = 2539.41412 B = 2539.41051 C = 2539.40513 [MHz]; Nuclear repulsion = 46.252677099401765. Charge = -1; Multiplicity = 1; Electrons = 34; Nalpha = 17; Nbeta = 17. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:2936,Energy Efficiency,Charge,Charge,2936,"---------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry. Rotational constants: A = 0.08471 B = 0.08471 C = 0.08471 [cm^-1]; Rotational constants: A = 2539.41412 B = 2539.41051 C = 2539.40513 [MHz]; Nuclear repulsion = 46.252677099401765. Charge = -1; Multiplicity = 1; Electrons = 34; Nalpha = 17; Nbeta = 17. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PCSEG-0; Blend: AUG-PCSEG-0; Number of shells: 37; Number of basis function: 73; Number of Cartesian functions: 76; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:3137,Energy Efficiency,Energy,Energy,3137,"-------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry. Rotational constants: A = 0.08471 B = 0.08471 C = 0.08471 [cm^-1]; Rotational constants: A = 2539.41412 B = 2539.41051 C = 2539.40513 [MHz]; Nuclear repulsion = 46.252677099401765. Charge = -1; Multiplicity = 1; Electrons = 34; Nalpha = 17; Nbeta = 17. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PCSEG-0; Blend: AUG-PCSEG-0; Number of shells: 37; Number of basis function: 73; Number of Cartesian functions: 76; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:4528,Energy Efficiency,Energy,Energy,4528,"eta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas there are 247456 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 1.5687182609E-03.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -802.88132998346850 -8.02881e+02 1.33370e-02 ; @RHF iter 1: -787.60962084475932 1.52717e+01 5.31297e-03 ; @RHF iter 2: -784.61065630353232 2.99896e+00 2.74010e-02 DIIS; @RHF iter 3: -787.81386527066320 -3.20321e+00 1.99984e-03 DIIS; @RHF iter 4: -787.84423605872018 -3.03708e-02 3.17913e-04 DIIS; @RHF iter 5: -787.84661751791953 -2.38146e-03 1.61048e-04 DIIS; @RHF iter 6: -787.84753550465541 -9.17987e-04 8.58328e-05 DIIS; @RHF iter 7: -787.84773333581302 -1.97831e-04 4.22806e-05 DIIS; @RHF iter 8: -787.84780097425346 -6.76384e-05 1.42899e-05 DIIS; @RHF iter 9: -787.84781537788342 -1.44036e-05 9.60906e-06 DIIS; @RHF iter 10: -787.84782410513617 -8.72725e-06 5.16659e-06 DIIS; @RHF iter 11: -787.84782705514579 -2.95001e-06 2.70301e-06 DIIS; @RHF iter 12: -787.84782764529461 -5.90149e-07 1.01248e-06 DIIS; @RHF iter 13: -787.84782771441280 -6.91182e-08 4.44180e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6609,Energy Efficiency,Energy,Energy,6609,"2.561534 ; 7A -2.321044 8A -2.321030 9A -2.321028 ; 10A -2.321027 11A -1.493580 12A -1.493579 ; 13A -1.493578 14A -0.152702 15A -0.050078 ; 16A -0.050072 17A -0.050066 . Virtual: . 18A 0.078304 19A 0.097245 20A 0.097248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6638,Energy Efficiency,Energy,Energy,6638,"44 8A -2.321030 9A -2.321028 ; 10A -2.321027 11A -1.493580 12A -1.493579 ; 13A -1.493578 14A -0.152702 15A -0.050078 ; 16A -0.050072 17A -0.050066 . Virtual: . 18A 0.078304 19A 0.097245 20A 0.097248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6703,Energy Efficiency,Energy,Energy,6703,"A -1.493579 ; 13A -1.493578 14A -0.152702 15A -0.050078 ; 16A -0.050072 17A -0.050066 . Virtual: . 18A 0.078304 19A 0.097245 20A 0.097248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6746,Energy Efficiency,Energy,Energy,6746,"02 15A -0.050078 ; 16A -0.050072 17A -0.050066 . Virtual: . 18A 0.078304 19A 0.097245 20A 0.097248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6792,Energy Efficiency,Energy,Energy,6792,"6 . Virtual: . 18A 0.078304 19A 0.097245 20A 0.097248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	sy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6848,Energy Efficiency,Energy,Energy,6848,"7248 ; 21A 0.097249 22A 0.112922 23A 0.112923 ; 24A 0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6898,Energy Efficiency,Energy,Energy,6898,"0.112923 25A 0.113993 26A 0.116451 ; 27A 0.116452 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6944,Energy Efficiency,Energy,Energy,6944,"2 28A 0.133456 29A 0.133457 ; 30A 0.133457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation informati",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:6977,Energy Efficiency,Energy,Energy,6977,"457 31A 0.144405 32A 0.154794 ; 33A 0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of ato",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:7012,Energy Efficiency,Energy,Energy,7012,"0.154799 34A 0.154803 35A 0.171872 ; 36A 0.171874 37A 0.171880 38A 0.182327 ; 39A 0.182328 40A 0.195145 41A 0.195148 ; 42A 0.195151 43A 0.207055 44A 0.266927 ; 45A 0.266928 46A 0.283654 47A 0.283658 ; 48A 0.283662 49A 0.288897 50A 0.288898 ; 51A 0.288899 52A 0.333946 53A 0.337328 ; 54A 0.337329 55A 0.337330 56A 0.383705 ; 57A 0.383705 58A 0.383706 59A 0.424706 ; 60A 0.424707 61A 0.470452 62A 0.470453 ; 63A 0.470455 64A 0.472868 65A 0.509891 ; 66A 0.538119 67A 0.538120 68A 0.538121 ; 69A 0.791769 70A 0.791770 71A 0.831182 ; 72A 0.831183 73A 0.831185 . Final Occupation by Irrep:; A ; DOCC [ 17 ]. Energy converged. @RHF Final Energy: -787.84782771441280. => Energetics <=. Nuclear Repulsion Energy = 46.2526770994017653; One-Electron Energy = -1168.6473048717509755; Two-Electron Energy = 334.5468000579363661; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 5; Number of AO shells: 37; Num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9118,Energy Efficiency,energy,energy,9118,"73. Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9162,Energy Efficiency,energy,energy,9162,"ff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transfo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9203,Energy Efficiency,energy,energy,9203,": [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral trans",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9240,Energy Efficiency,energy,energy,9240,"ential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:12645,Energy Efficiency,Allocate,Allocate,12645,"inutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:12766,Energy Efficiency,Energy,Energy,12766,"0:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:12775,Energy Efficiency,Energy,Energy,12775,"0:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13544,Energy Efficiency,energy,energy,13544,"agrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13585,Energy Efficiency,energy,energy,13585,"s over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13750,Energy Efficiency,energy,energy,13750, iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds =,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13798,Energy Efficiency,energy,energy,13798,(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfu,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13843,Energy Efficiency,energy,energy,13843,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13884,Energy Efficiency,energy,energy,13884,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13930,Energy Efficiency,energy,energy,13930,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13974,Energy Efficiency,energy,energy,13974,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:14015,Energy Efficiency,energy,energy,14015,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:14052,Energy Efficiency,energy,energy,14052,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:14099,Energy Efficiency,energy,energy,14099,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:14144,Energy Efficiency,energy,energy,14144,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:14186,Energy Efficiency,energy,energy,14186,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:14224,Energy Efficiency,energy,energy,14224,.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 16.89 seconds = 0.28 minutes; 	system time = 2.38 seconds = 0.04 minutes; 	total time = 12 seconds = 0.20 minutes. *** Psi4 exiting successfully. Buy a developer a beer!; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:7871,Integrability,Wrap,Wrapper,7871,"0000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 5; Number of AO shells: 37; Number of SO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transfo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:11881,Modifiability,Config,Configuration,11881,"******. CC integral sort will use 116.60 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:43 2017; Module time:; 	user time = 0.42 seconds = 0.01 minutes; 	system time = 0.37 seconds = 0.01 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 5.26 seconds = 0.09 minutes; 	system time = 0.90 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1744,Performance,Load,Loading,1744,"ory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.896398821596 0.808962637124 7.016004548000; LI 1.081537578823 -2.973449901804 -0.791231130076 7.016004548000; LI -1.564061269977 1.301793414796 -2.548766321776 7.016004548000. Running in c1 symmetry",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339418202:4027,Performance,Perform,Performing,4027,"enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-PCSEG-0; Blend: AUG-PCSEG-0; Number of shells: 37; Number of basis function: 73; Number of Cartesian functions: 76; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas there are 247456 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 1.5687182609E-03.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -802.88132998346850 -8.02881e+02 1.33370e-02 ; @RHF iter 1: -787.60962084475932 1.52717e+01 5.31297e-03 ; @RHF iter 2: -784.61065630353232 2.99896e+00 2.74010e-02 DIIS; @RHF iter 3: -787.81386527066320 -3.20321e+00 1.99984e-03 DIIS; @RHF iter 4: -787.84423605872018 -3.03708e-02 3.17913e-04 DIIS; @RHF iter 5: -787.84661751791953 -2.38146e-03 1.61048e-04 DIIS; @RHF iter 6: -787.84753550465541 -9.17987e-04 8.58328e-05 DIIS; @RHF iter 7: -787.84773333581302 -1.97831e-04 4.22806e-05 DIIS; @R",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202
https://github.com/psi4/psi4/issues/828#issuecomment-339434110:78,Usability,simpl,simplify,78,"Eugene, I'm surprised you assumed nvirt > ndocc, since that wouldn't seem; to simplify anything in the code. How hard would it be to remove that; assumption? Might be useful for students running pedagogical computations; in small basis sets like STO-3G. David. On Wed, Oct 25, 2017 at 2:18 PM, Lori A. Burns <notifications@github.com>; wrote:. > Ah, you have set nat_orbs true which is the cue to turn on FNO. Confirmed; > that it runs non-FNO w/o that keyword. Arguably, we should mark that; > !expert or take it away from the user. @susilehtola; > <https://github.com/susilehtola>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339422776>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdqHHvQZiRN70JB94CeH7BMTKSv6Vks5sv3ttgaJpZM4QGSFE>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339434110
https://github.com/psi4/psi4/issues/828#issuecomment-339447402:154,Energy Efficiency,efficient,efficient,154,@CDSherrill @edeprince3 could it be that that nvirt > ndocc is an assumption that's made in the contraction order? If nvirt < ndocc then it might be more efficient to contract first over the occupied orbitals?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339447402
https://github.com/psi4/psi4/issues/828#issuecomment-339447402:96,Integrability,contract,contraction,96,@CDSherrill @edeprince3 could it be that that nvirt > ndocc is an assumption that's made in the contraction order? If nvirt < ndocc then it might be more efficient to contract first over the occupied orbitals?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339447402
https://github.com/psi4/psi4/issues/828#issuecomment-339447402:167,Integrability,contract,contract,167,@CDSherrill @edeprince3 could it be that that nvirt > ndocc is an assumption that's made in the contraction order? If nvirt < ndocc then it might be more efficient to contract first over the occupied orbitals?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339447402
https://github.com/psi4/psi4/issues/828#issuecomment-339448378:510,Energy Efficiency,efficient,efficient,510,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378
https://github.com/psi4/psi4/issues/828#issuecomment-339448378:56,Integrability,contract,contraction,56,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378
https://github.com/psi4/psi4/issues/828#issuecomment-339448378:451,Integrability,contract,contraction,451,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378
https://github.com/psi4/psi4/issues/828#issuecomment-339448378:523,Integrability,contract,contract,523,"Well, yes, he relative sizes would effect efficiency of contraction order,; but I don't see why they would make the code not working at all... I; suppose this restriction is in there somewhere but I don't see why. On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:. @CDSherrill <https://github.com/cdsherrill> @edeprince3; <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; assumption that's made in the contraction order? If nvirt < ndocc then it; might be more efficient to contract first over the occupied orbitals?. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339448378
https://github.com/psi4/psi4/issues/828#issuecomment-339458114:964,Energy Efficiency,efficient,efficient,964,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114
https://github.com/psi4/psi4/issues/828#issuecomment-339458114:487,Integrability,contract,contraction,487,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114
https://github.com/psi4/psi4/issues/828#issuecomment-339458114:903,Integrability,contract,contraction,903,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114
https://github.com/psi4/psi4/issues/828#issuecomment-339458114:977,Integrability,contract,contract,977,"I recall that the restriction arises from an assumption I made about storage requirements. I think I was assuming that o^4 and o^3v arrays could be stored in a block of memory the size of t2, but I can’t be sure without looking through the code a bit. I’m not sure how difficult it would be to remove this restriction, but I will look into it. > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com> wrote:; > ; > Well, yes, he relative sizes would effect efficiency of contraction order,; > but I don't see why they would make the code not working at all... I; > suppose this restriction is in there somewhere but I don't see why.; > ; > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com> wrote:; > ; > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > <https://github.com/edeprince3> could it be that that nvirt > ndocc is an; > assumption that's made in the contraction order? If nvirt < ndocc then it; > might be more efficient to contract first over the occupied orbitals?; > ; > —; > You are receiving this because you were mentioned.; > ; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > .; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339458114
https://github.com/psi4/psi4/issues/828#issuecomment-339460309:1165,Energy Efficiency,efficient,efficient,1165,"> I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339458114>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309
https://github.com/psi4/psi4/issues/828#issuecomment-339460309:663,Integrability,contract,contraction,663,"That would make sense. Yeah, would be great if you could check this. On Oct 25, 2017 4:19 PM, ""Eugene DePrince"" <notifications@github.com> wrote:. > I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309
https://github.com/psi4/psi4/issues/828#issuecomment-339460309:1102,Integrability,contract,contraction,1102,"> I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339458114>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309
https://github.com/psi4/psi4/issues/828#issuecomment-339460309:1178,Integrability,contract,contract,1178,"> I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339458114>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309
https://github.com/psi4/psi4/issues/829#issuecomment-339624297:118,Availability,avail,available,118,"Oh look at that; I wonder how I've managed to miss that. However, the documentation states ""MP2 natural orbitals only available for DF-RHF reference"". Does the fno code have these restrictions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339624297
https://github.com/psi4/psi4/issues/829#issuecomment-339627123:630,Energy Efficiency,energy,energy,630,"Is that a new option? It's doesn't seem to have an effect in version 1.1.; ```; molecule {; -1 1; Mn -5.8534733333 1.3394733837 -0.4649497438; O -4.6678229246 2.7275455154 -0.8242237964; H -4.6340746874 3.3845395668 -0.1494211065; O -7.2789168965 2.1411811086 0.4215893334; H -7.8199772787 1.5357569391 0.8999611740; O -5.3067672331 -0.0431310925 0.6533689515; H -4.7858036361 -0.6983214503 0.2203485236; O -6.1585656429 0.5314683638 -2.1129873999; H -6.1687683674 1.1358176653 -2.8360759358; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type df; set mcscf_type df; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True). # 31 occ orbs; set restricted_docc [ 26 ]; set active [10]; set mcscf_algorithm ah; set mcscf_guess mp2; cas_e, cas_wfn = energy('casscf', ref_wfn = scf_wfn, return_wfn = True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339627123
https://github.com/psi4/psi4/issues/829#issuecomment-339627123:786,Energy Efficiency,energy,energy,786,"Is that a new option? It's doesn't seem to have an effect in version 1.1.; ```; molecule {; -1 1; Mn -5.8534733333 1.3394733837 -0.4649497438; O -4.6678229246 2.7275455154 -0.8242237964; H -4.6340746874 3.3845395668 -0.1494211065; O -7.2789168965 2.1411811086 0.4215893334; H -7.8199772787 1.5357569391 0.8999611740; O -5.3067672331 -0.0431310925 0.6533689515; H -4.7858036361 -0.6983214503 0.2203485236; O -6.1585656429 0.5314683638 -2.1129873999; H -6.1687683674 1.1358176653 -2.8360759358; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type df; set mcscf_type df; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True). # 31 occ orbs; set restricted_docc [ 26 ]; set active [10]; set mcscf_algorithm ah; set mcscf_guess mp2; cas_e, cas_wfn = energy('casscf', ref_wfn = scf_wfn, return_wfn = True); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339627123
https://github.com/psi4/psi4/issues/829#issuecomment-339671722:421,Usability,simpl,simply,421,"If you pass in a reference wavefunction we assume that you have set the guess as you would like it and those keywords are ignored. You can use MP2 NO's by running the following:. ```; psi4.core.set_global_option('ONEPDM', True); psi4.core.set_global_option('OPDM_RELAX', False); mp2_e, ref_wfn = psi4.gradient(""MP2"", return_wfn=True); ```. Odd I know and I agree that we need a generic MP2 natural orbital module, but we simply have not gotten there yet. @bozkaya Do you have ROHF MP2 densities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/829#issuecomment-339671722
https://github.com/psi4/psi4/issues/833#issuecomment-340458295:360,Testability,test,tests,360,"Yes, the key barrier is that sow/reap pickles its major pieces (mol, opts, call) for transport across p4 instances, and the py Molecule class has serious opposition to being pickled (side effect of the nice `h2o.R = 1.5` capability). That's in general, and DGAS and I had a go a any sort of hack for py3 with no luck. The result is as you see all the sow/reap tests are deactivated in py3. The whole sow/reap scheme just needs reimplementation with json I/O and the option to Dask/Fireworks/etc. drive the freq.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/833#issuecomment-340458295
https://github.com/psi4/psi4/issues/833#issuecomment-356769175:0,Deployability,Update,Update,0,"Update: fixed some of the py Molecule class issues (no more infinite recursion, yay!). Also gave the sow/reap pickles a serious stab, but was bested by unicode. So this issue will persist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/833#issuecomment-356769175
https://github.com/psi4/psi4/pull/834#issuecomment-343891498:70,Testability,test,test,70,"With the newest commits, this still has one embarrassing bug, but all test cases pass, and it's ready for review. This is as far as I intend to dismantle findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-343891498
https://github.com/psi4/psi4/pull/834#issuecomment-344691586:65,Integrability,interface,interface,65,"@psi-rking . Yup, `asarray()` is great, a product of DGAS' numpy interface. And so much handier for printing psi4.core.Matrix to screen, rather than just mat.print_out() to file. I haven't traced it fully recently, but I expect [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.cc#L111) is where mass changes get caught. In practical terms, the freq-isotope[12] test cases should cover the rotational_symmetry_number with some care. You're right that mass-symmetry-breaking in Molecule wasn't working at one time, though. I should probably spice up mints5 to check this thoroughly. Or were you concerned particularly with non-Abelian PG involving `n`? Or something else I've missed?. Hmm, I keep reading it as ""nwchem hessian"". Maybe time for a name change to just ""hessian"" with the weightedness in the docstring.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-344691586
https://github.com/psi4/psi4/pull/834#issuecomment-344691586:394,Testability,test,test,394,"@psi-rking . Yup, `asarray()` is great, a product of DGAS' numpy interface. And so much handier for printing psi4.core.Matrix to screen, rather than just mat.print_out() to file. I haven't traced it fully recently, but I expect [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.cc#L111) is where mass changes get caught. In practical terms, the freq-isotope[12] test cases should cover the rotational_symmetry_number with some care. You're right that mass-symmetry-breaking in Molecule wasn't working at one time, though. I should probably spice up mints5 to check this thoroughly. Or were you concerned particularly with non-Abelian PG involving `n`? Or something else I've missed?. Hmm, I keep reading it as ""nwchem hessian"". Maybe time for a name change to just ""hessian"" with the weightedness in the docstring.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-344691586
https://github.com/psi4/psi4/pull/834#issuecomment-349573814:58,Testability,test,test,58,"Ok, @psi-rking, I've expanded the [`qcdb.Molecule` mints5 test case](https://github.com/psi4/psi4/pull/834/files#diff-76da01941b921d68cfbfb7408ed0c512) to change the mass of various atoms, then check that the symmetry changes accordingly. Haven't done _every_ PG, but did a variety. Assuming the `psi4.core.Molecule` behaves analogously, does that alleviate your earlier concern?. Any other problems you notice?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-349573814
https://github.com/psi4/psi4/pull/834#issuecomment-362098903:76,Deployability,update,updated,76,"Ok, @psi4/maintainers and @psi-rking, this mammoth is ready to review. I've updated the RN at the top, and I recommend reading them over before meeting the code. Nitpick away (esp. at numpy stuff that I was still learning at the start), and feel free to question the broader (esp. vibanal) logic flow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-362098903
https://github.com/psi4/psi4/pull/834#issuecomment-362098903:290,Testability,log,logic,290,"Ok, @psi4/maintainers and @psi-rking, this mammoth is ready to review. I've updated the RN at the top, and I recommend reading them over before meeting the code. Nitpick away (esp. at numpy stuff that I was still learning at the start), and feel free to question the broader (esp. vibanal) logic flow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-362098903
https://github.com/psi4/psi4/pull/834#issuecomment-362098903:213,Usability,learn,learning,213,"Ok, @psi4/maintainers and @psi-rking, this mammoth is ready to review. I've updated the RN at the top, and I recommend reading them over before meeting the code. Nitpick away (esp. at numpy stuff that I was still learning at the start), and feel free to question the broader (esp. vibanal) logic flow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-362098903
https://github.com/psi4/psi4/pull/834#issuecomment-380206803:54,Availability,robust,robustness,54,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803
https://github.com/psi4/psi4/pull/834#issuecomment-380206803:16,Deployability,upgrade,upgrade,16,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803
https://github.com/psi4/psi4/pull/834#issuecomment-380206803:463,Safety,avoid,avoid,463,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803
https://github.com/psi4/psi4/pull/834#issuecomment-380230319:10,Integrability,contract,contracted,10,"Hmm, I've contracted that the wfn returned from Hessian shall always contain current E, G, H, and I don't want to break that. What do ppl think of freq/hessian fns optionally taking in kwarg `ref_wfn` and if a gradient's found on it (user responsibility that it should be sensible one), then G0 won't be recomputed. And that same G0 will be used to assess eq/non-eq status.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380230319
https://github.com/psi4/psi4/pull/834#issuecomment-485313358:659,Testability,log,log,659,"Thank you so much for thinking of me! I gave it some thought, and don't; quite understand what is needed. Also, I think it's a bit unlikely for me; to get to it within the next two months, is that okay?. On Wed, Apr 10, 2019 at 2:08 PM Lori A. Burns <notifications@github.com>; wrote:. > *@loriab* commented on this pull request.; > ------------------------------; >; > In psi4/driver/qcdb/vib.py; > <https://github.com/psi4/psi4/pull/834#discussion_r274090415>:; >; > > + phi_A, phi_B, phi_C = rot_const * 100 * psi_c * psi_h / psi_kb; > + q_rot = math.sqrt(math.pi) * T**1.5 / (sigma * math.sqrt(phi_A * phi_B * phi_C)); > + sm[('S', 'rot')] = 3 / 2 + math.log(q_rot); > + sm[('Cv', 'rot')] = 3 / 2; > + sm[('Cp', 'rot')] = 3 / 2; > + sm[('E', 'rot')] = 3 / 2 * T; > + sm[('H', 'rot')] = sm[('E', 'rot')]; > +; > + # vibrational; > + vibonly = filter_nonvib(vibinfo); > + ZPE_cm_1 = 1 / 2 * np.sum(vibonly['omega'].data.real); > + omega_str = _format_omega(vibonly['omega'].data, decimals=4); > +; > + imagfreqidx = np.where(vibonly['omega'].data.imag > vibonly['omega'].data.real)[0]; > + if len(imagfreqidx):; > + print(""Warning: thermodynamics relations excluded imaginary frequencies: {}"".format(omega_str[imagfreqidx])); >; > It did make it on to the wish list, so not wholly lost. No one working on; > it. @rainli323 <https://github.com/rainli323> wanted a project and it; > might be suitably compact unless you had your eye on it.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/834#discussion_r274090415>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AdbCvRCQrgbenf4C_5gu4S8gOa0kR6NTks5vfiixgaJpZM4QMWN4>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-485313358
https://github.com/psi4/psi4/pull/837#issuecomment-343331857:12,Testability,test,test,12,"failing ECP test case demanding more matching digits than test was run with. need to tighten the reference and loosen the check, I imagine. just a note to the next person (likely me) to touch this branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/837#issuecomment-343331857
https://github.com/psi4/psi4/pull/837#issuecomment-343331857:58,Testability,test,test,58,"failing ECP test case demanding more matching digits than test was run with. need to tighten the reference and loosen the check, I imagine. just a note to the next person (likely me) to touch this branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/837#issuecomment-343331857
https://github.com/psi4/psi4/pull/842#issuecomment-433958214:11,Deployability,update,update,11,Any status update on this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-433958214
https://github.com/psi4/psi4/pull/842#issuecomment-583597940:0,Availability,ping,ping,0,"ping that this needs a rebase to resolve a conflict. does anything special need to be added for UHF dipole derivatives?. it'd be nice to get an open-shell in the test_vib_analysis II/III/IV section, at least checking hessian and DD match for dertype=2/1/0. that can be a follow-up PR, but if you have reference Hessian and other arrays lying around from another code, let's collect them into that file. (it's a convoluted file to handle different programs' std orientations, so if you wade in, feel free to ping me for a map.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-583597940
https://github.com/psi4/psi4/pull/842#issuecomment-583597940:507,Availability,ping,ping,507,"ping that this needs a rebase to resolve a conflict. does anything special need to be added for UHF dipole derivatives?. it'd be nice to get an open-shell in the test_vib_analysis II/III/IV section, at least checking hessian and DD match for dertype=2/1/0. that can be a follow-up PR, but if you have reference Hessian and other arrays lying around from another code, let's collect them into that file. (it's a convoluted file to handle different programs' std orientations, so if you wade in, feel free to ping me for a map.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-583597940
https://github.com/psi4/psi4/pull/842#issuecomment-590177244:111,Testability,assert,assertion,111,"Is this both conventional and DF, like the RHF Hessians? I'm adding a note to the paper to consult with you so assertion can be deleted if wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-590177244
https://github.com/psi4/psi4/issues/843#issuecomment-347015589:70,Integrability,interface,interface,70,"Hmm, that is odd. The `bsse_type` uses the `Molecule.extract_subsets` interface and gets around this a bit. @shannonhouck Do you think you could explore this a bit?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-347015589
https://github.com/psi4/psi4/issues/843#issuecomment-358616567:195,Testability,test,tested,195,"This has something to do with ECPs and not iodine. If the basis contains ECPs, the ghost atom are not recognized, i.e. not printed as ghost atoms in the geometry summary at the start. Separately tested it with a water dimer and an oxygen ECP.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-358616567
https://github.com/psi4/psi4/issues/843#issuecomment-397901527:296,Energy Efficiency,energy,energy,296,"It's actually not in the molecule parsing, as the first `Mol.print_out()` is correct. So somewhere in the driver call. Investigating ... ```; molecule probe {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe {; @H 0.0 0.0 0.0; @F 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397901527
https://github.com/psi4/psi4/issues/843#issuecomment-397901527:483,Energy Efficiency,energy,energy,483,"It's actually not in the molecule parsing, as the first `Mol.print_out()` is correct. So somewhere in the driver call. Investigating ... ```; molecule probe {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe {; @H 0.0 0.0 0.0; @F 1.5 0.0 0.0; 0 1; H 0.0 3.0 0.0; F 1.5 3.0 0.0; noreorient; }; probe.update_geometry(); probe.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397901527
https://github.com/psi4/psi4/issues/843#issuecomment-397970352:1105,Energy Efficiency,Energy,Energy,1105,"Yep, what we have here is a casualty of one of my less favorite topics, the type A vs. type B ghost ([details](https://github.com/psi4/psi4/issues/909#issuecomment-363473061)). By subtracting out the ECP electrons [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L182) and resetting `Z`, it's wiping out the only evidence of those atoms being ghosted (compare `gh=1` for extract_subsets ghosting vs. `gh=0` for `@/Gh()` ghosting). Printing is `printf(""ECP: preZ=%f TAN=%d - ncore=%d = Z=%d gh=%d\n"", mol->Z(atom), mol->true_atomic_number(atom), ncore, Z, mol->atom_entry(atom)->is_ghosted());`. ```; # @/Gh() ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=0; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; # extract_subsets ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=1; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=1; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; >>> grep 'Final E' i843_c.out ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033528; ```. ```; memory 1800 Mb; set guess core. molecule probe1 {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe1.update_geometry(); probe1.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe3 {; H 0.0 0.0 0.0; I 1.5 0.0 0.0; --; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe3.update_geometry(); probe3gh = probe3.extract_subsets(2, 1); probe3gh.update_geometry(); probe3gh.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397970352
https://github.com/psi4/psi4/issues/843#issuecomment-397970352:1148,Energy Efficiency,Energy,Energy,1148,"Yep, what we have here is a casualty of one of my less favorite topics, the type A vs. type B ghost ([details](https://github.com/psi4/psi4/issues/909#issuecomment-363473061)). By subtracting out the ECP electrons [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L182) and resetting `Z`, it's wiping out the only evidence of those atoms being ghosted (compare `gh=1` for extract_subsets ghosting vs. `gh=0` for `@/Gh()` ghosting). Printing is `printf(""ECP: preZ=%f TAN=%d - ncore=%d = Z=%d gh=%d\n"", mol->Z(atom), mol->true_atomic_number(atom), ncore, Z, mol->atom_entry(atom)->is_ghosted());`. ```; # @/Gh() ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=0; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; # extract_subsets ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=1; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=1; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; >>> grep 'Final E' i843_c.out ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033528; ```. ```; memory 1800 Mb; set guess core. molecule probe1 {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe1.update_geometry(); probe1.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe3 {; H 0.0 0.0 0.0; I 1.5 0.0 0.0; --; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe3.update_geometry(); probe3gh = probe3.extract_subsets(2, 1); probe3gh.update_geometry(); probe3gh.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397970352
https://github.com/psi4/psi4/issues/843#issuecomment-397970352:1384,Energy Efficiency,energy,energy,1384,"Yep, what we have here is a casualty of one of my less favorite topics, the type A vs. type B ghost ([details](https://github.com/psi4/psi4/issues/909#issuecomment-363473061)). By subtracting out the ECP electrons [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L182) and resetting `Z`, it's wiping out the only evidence of those atoms being ghosted (compare `gh=1` for extract_subsets ghosting vs. `gh=0` for `@/Gh()` ghosting). Printing is `printf(""ECP: preZ=%f TAN=%d - ncore=%d = Z=%d gh=%d\n"", mol->Z(atom), mol->true_atomic_number(atom), ncore, Z, mol->atom_entry(atom)->is_ghosted());`. ```; # @/Gh() ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=0; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; # extract_subsets ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=1; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=1; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; >>> grep 'Final E' i843_c.out ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033528; ```. ```; memory 1800 Mb; set guess core. molecule probe1 {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe1.update_geometry(); probe1.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe3 {; H 0.0 0.0 0.0; I 1.5 0.0 0.0; --; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe3.update_geometry(); probe3gh = probe3.extract_subsets(2, 1); probe3gh.update_geometry(); probe3gh.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397970352
https://github.com/psi4/psi4/issues/843#issuecomment-397970352:1655,Energy Efficiency,energy,energy,1655,"Yep, what we have here is a casualty of one of my less favorite topics, the type A vs. type B ghost ([details](https://github.com/psi4/psi4/issues/909#issuecomment-363473061)). By subtracting out the ECP electrons [here](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L182) and resetting `Z`, it's wiping out the only evidence of those atoms being ghosted (compare `gh=1` for extract_subsets ghosting vs. `gh=0` for `@/Gh()` ghosting). Printing is `printf(""ECP: preZ=%f TAN=%d - ncore=%d = Z=%d gh=%d\n"", mol->Z(atom), mol->true_atomic_number(atom), ncore, Z, mol->atom_entry(atom)->is_ghosted());`. ```; # @/Gh() ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=0; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; # extract_subsets ghosted; ECP: preZ=0.000000 TAN=1 - ncore=0 = Z=1 gh=1; ECP: preZ=0.000000 TAN=53 - ncore=28 = Z=25 gh=1; ECP: preZ=1.000000 TAN=1 - ncore=0 = Z=1 gh=0; ECP: preZ=53.000000 TAN=53 - ncore=28 = Z=25 gh=0; >>> grep 'Final E' i843_c.out ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033528; ```. ```; memory 1800 Mb; set guess core. molecule probe1 {; @H 0.0 0.0 0.0; @I 1.5 0.0 0.0; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe1.update_geometry(); probe1.print_out(); e_probe = energy('hf/def2-svpd'). clean(). molecule probe3 {; H 0.0 0.0 0.0; I 1.5 0.0 0.0; --; H 0.0 3.0 0.0; I 1.5 3.0 0.0; symmetry c1; noreorient; }; probe3.update_geometry(); probe3gh = probe3.extract_subsets(2, 1); probe3gh.update_geometry(); probe3gh.print_out(); e_probe = energy('hf/def2-svpd'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/843#issuecomment-397970352
https://github.com/psi4/psi4/pull/844#issuecomment-343210050:139,Testability,test,test,139,"Heads-up, @bozkaya, there are some changes in DFOCC that should make your code play nicely with external potentials and the like. The full test suite passes right now, but I welcome any input from you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343210050
https://github.com/psi4/psi4/pull/844#issuecomment-343331298:11,Deployability,patch,patch,11,Probably a patch or two needed to the plugin templates to satisfy Travis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343331298
https://github.com/psi4/psi4/pull/844#issuecomment-343331298:38,Modifiability,plugin,plugin,38,Probably a patch or two needed to the plugin templates to satisfy Travis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343331298
https://github.com/psi4/psi4/pull/844#issuecomment-346040344:58,Deployability,update,update,58,Just a note to whomever that I will use this all-but-done update as soon as we can get it merged. Let me know if I can help. Whose problem is the dfocc one to solve?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346040344
https://github.com/psi4/psi4/pull/844#issuecomment-346231339:16,Modifiability,plugin,plugins,16,"Ok fixed up the plugins, modernized the SCF plugin example, and a few other odds and ends. This should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346231339
https://github.com/psi4/psi4/pull/844#issuecomment-346231339:44,Modifiability,plugin,plugin,44,"Ok fixed up the plugins, modernized the SCF plugin example, and a few other odds and ends. This should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346231339
https://github.com/psi4/psi4/pull/844#issuecomment-346345543:70,Modifiability,plugin,plugins,70,"Oops, I ran the tests when I submitted this one, but didn't check the plugins. Thanks a lot for dealing with that, @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346345543
https://github.com/psi4/psi4/pull/844#issuecomment-346345543:16,Testability,test,tests,16,"Oops, I ran the tests when I submitted this one, but didn't check the plugins. Thanks a lot for dealing with that, @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346345543
https://github.com/psi4/psi4/pull/845#issuecomment-343231505:113,Security,sanitiz,sanitizer,113,This is very cool! I have an instance of [Drone CI](https://www.drone-ci.science/) that can be used to run these sanitizer jobs on each commit.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343231505
https://github.com/psi4/psi4/pull/845#issuecomment-343241183:18,Security,sanitiz,sanitizer,18,I've added memory sanitizer and comments that Python and Numpy need to be compiled similarly. I'm happy to change to using `check_cxx_source_compiles` if that's the way it needs to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343241183
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:268,Deployability,patch,patch,268,"Since `check_<lang>_compiler_flag` calls `check_<lang>_source_compiles` defining `CMAKE_REQUIRED_FLAGS` right before the former is called does the trick. I don't know why this isn't done automatically or why it isn't clearly documented, but it works. This is the full patch:; ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index ca7e20054..6cc4ee09e 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1246,Deployability,install,installed,1246,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1328,Deployability,install,installed,1328,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:2448,Deployability,Release,Release,2448," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:2467,Deployability,Release,Release,2467," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:3079,Integrability,message,message,3079,"index bdcda4962..000000000; --- a/cmake/custom_sanitize.cmake; +++ /dev/null; @@ -1,44 +0,0 @@; -if(ENABLE_ASAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - else(); - message(WARNING ""ASAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_TSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - else(); - message(WARNING ""TSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:3537,Integrability,message,message,3537,"index bdcda4962..000000000; --- a/cmake/custom_sanitize.cmake; +++ /dev/null; @@ -1,44 +0,0 @@; -if(ENABLE_ASAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - else(); - message(WARNING ""ASAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_TSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - else(); - message(WARNING ""TSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:3992,Integrability,message,message,3992,"index bdcda4962..000000000; --- a/cmake/custom_sanitize.cmake; +++ /dev/null; @@ -1,44 +0,0 @@; -if(ENABLE_ASAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - else(); - message(WARNING ""ASAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_TSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - else(); - message(WARNING ""TSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:4441,Integrability,message,message,4441,"index bdcda4962..000000000; --- a/cmake/custom_sanitize.cmake; +++ /dev/null; @@ -1,44 +0,0 @@; -if(ENABLE_ASAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer""); - else(); - message(WARNING ""ASAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_TSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=thread -fno-omit-frame-pointer -pie""); - else(); - message(WARNING ""TSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5022,Integrability,wrap,wrappers,5022,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5384,Integrability,message,message,5384,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1239,Modifiability,plugin,plugin,1239,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1321,Modifiability,plugin,plugin,1321,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5149,Performance,CACHE,CACHE,5149,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:784,Security,sanitiz,sanitizer,784,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:884,Security,sanitiz,sanitizer,884,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:997,Security,sanitiz,sanitizer,997,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1097,Security,sanitiz,sanitizer,1097,"txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1698,Security,sanitiz,sanitizer,1698," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:1857,Security,sanitiz,sanitizer,1857," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:2039,Security,sanitiz,sanitizer,2039," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:2200,Security,sanitiz,sanitizer,2200," OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=undefined -fno-omit-frame-pointer""); +option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals"" 5); option_with_default(CMAKE_BUILD_TYPE ""Build type (Release or Debug)"" Release); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); diff --git a/cmake/custom_sanitize.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343290538:217,Usability,clear,clearly,217,"Since `check_<lang>_compiler_flag` calls `check_<lang>_source_compiles` defining `CMAKE_REQUIRED_FLAGS` right before the former is called does the trick. I don't know why this isn't done automatically or why it isn't clearly documented, but it works. This is the full patch:; ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index ca7e20054..6cc4ee09e 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538
https://github.com/psi4/psi4/pull/845#issuecomment-343300716:329,Deployability,patch,patch,329,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716
https://github.com/psi4/psi4/pull/845#issuecomment-343300716:396,Performance,CACHE,CACHE,396,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716
https://github.com/psi4/psi4/pull/845#issuecomment-343300716:95,Security,sanitiz,sanitizer,95,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716
https://github.com/psi4/psi4/pull/845#issuecomment-343300716:13,Testability,test,tested,13,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716
https://github.com/psi4/psi4/pull/845#issuecomment-343303520:149,Performance,CACHE,CACHE,149,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520
https://github.com/psi4/psi4/pull/845#issuecomment-343303520:187,Performance,cache,cache,187,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520
https://github.com/psi4/psi4/pull/845#issuecomment-343303520:210,Safety,safe,safe,210,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520
https://github.com/psi4/psi4/pull/845#issuecomment-343303520:84,Testability,test,test,84,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520
https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1046,Energy Efficiency,energy,energy,1046,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294
https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1111,Energy Efficiency,energy,energy,1111,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294
https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1271,Energy Efficiency,energy,energy,1271,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294
https://github.com/psi4/psi4/pull/847#issuecomment-343481294:1493,Integrability,wrap,wrapper,1493,"Nice @loriab! As we, very briefly, discussed at WWDC: ; 1. I had to rework the way the PCM potential is added to the Fock matrix in `hf.cc` in #810. I ended up adding a `std::vector<SharedMatrix> external_potentials_` to the base HF objects to store the PCM potential computer at each iteration. This data member is then used in `form_F()` in the derived classes. This is in `rohf.cc`, for example:; ```; // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fa_->add(Vext); });; }. // ... some more code ... if (!external_potentials_.empty()) {; std::for_each(external_potentials_.begin(), external_potentials_.end(),; [this](SharedMatrix Vext) { Fb_->add(Vext); });; }; ```; For the PCM (and I'm pretty sure also EFP) potential, this is enough: these do not need to distinguish between alpha and beta.; The caveat of this approach is that `compute_E()` cannot rely on tracing the Fock matrix with the density matrix to calculate the energy anymore, since there might be more (or less) polarization energy included in that way. In the mentioned PR, I modified the `compute_E()` functions to only use traces of one- and two-electron integrals to calculate the energy. I think this approach could be ported Python side and would fit very nicely with the infrastructure changes you are proposing.; 2. Since PCMSolver itself is quite far from being pybind-able, I suggest I pybind the wrapper within Psi4 (`libpsipcm/psipcm.h` and `libpsipcm/psipcm.cc`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-343481294
https://github.com/psi4/psi4/pull/847#issuecomment-347012315:314,Deployability,patch,patch,314,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315
https://github.com/psi4/psi4/pull/847#issuecomment-347012315:544,Deployability,release,releases,544,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315
https://github.com/psi4/psi4/pull/847#issuecomment-347012315:867,Deployability,update,updates,867,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315
https://github.com/psi4/psi4/pull/847#issuecomment-347012315:524,Testability,test,tests,524,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315
https://github.com/psi4/psi4/pull/847#issuecomment-347012315:570,Testability,test,test,570,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315
https://github.com/psi4/psi4/pull/847#issuecomment-347012315:642,Testability,test,test,642,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315
https://github.com/psi4/psi4/pull/847#issuecomment-347013624:696,Availability,error,error,696,"Quite right on the chicken/egg problem. One approach I considered was to get normal 3-round approval of this PR with the current scf-only changes. The re-rebase it, `c-f` it, and post it to psi4/psi4 as a branch. _Then_ ppl can make additional EFP/PCM/etc. PRs to that branch rather than master, so all the discussion will stay on psi4/psi4 but we won't have an enormous final PR that no one wants to review. For longer term, though, yes, if we had a stable, vetted, low-key release every couple months, there wouldn't be this considerable pressure to maintain master in top-notch working order. And if we wanted to deprecate something, wouldn't take 2 years to get through warning release, then error release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347013624
https://github.com/psi4/psi4/pull/847#issuecomment-347013624:475,Deployability,release,release,475,"Quite right on the chicken/egg problem. One approach I considered was to get normal 3-round approval of this PR with the current scf-only changes. The re-rebase it, `c-f` it, and post it to psi4/psi4 as a branch. _Then_ ppl can make additional EFP/PCM/etc. PRs to that branch rather than master, so all the discussion will stay on psi4/psi4 but we won't have an enormous final PR that no one wants to review. For longer term, though, yes, if we had a stable, vetted, low-key release every couple months, there wouldn't be this considerable pressure to maintain master in top-notch working order. And if we wanted to deprecate something, wouldn't take 2 years to get through warning release, then error release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347013624
https://github.com/psi4/psi4/pull/847#issuecomment-347013624:682,Deployability,release,release,682,"Quite right on the chicken/egg problem. One approach I considered was to get normal 3-round approval of this PR with the current scf-only changes. The re-rebase it, `c-f` it, and post it to psi4/psi4 as a branch. _Then_ ppl can make additional EFP/PCM/etc. PRs to that branch rather than master, so all the discussion will stay on psi4/psi4 but we won't have an enormous final PR that no one wants to review. For longer term, though, yes, if we had a stable, vetted, low-key release every couple months, there wouldn't be this considerable pressure to maintain master in top-notch working order. And if we wanted to deprecate something, wouldn't take 2 years to get through warning release, then error release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347013624
https://github.com/psi4/psi4/pull/847#issuecomment-347013624:702,Deployability,release,release,702,"Quite right on the chicken/egg problem. One approach I considered was to get normal 3-round approval of this PR with the current scf-only changes. The re-rebase it, `c-f` it, and post it to psi4/psi4 as a branch. _Then_ ppl can make additional EFP/PCM/etc. PRs to that branch rather than master, so all the discussion will stay on psi4/psi4 but we won't have an enormous final PR that no one wants to review. For longer term, though, yes, if we had a stable, vetted, low-key release every couple months, there wouldn't be this considerable pressure to maintain master in top-notch working order. And if we wanted to deprecate something, wouldn't take 2 years to get through warning release, then error release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347013624
https://github.com/psi4/psi4/pull/850#issuecomment-344706017:39,Modifiability,plugin,plugin,39,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017
https://github.com/psi4/psi4/pull/850#issuecomment-344706017:197,Modifiability,plugin,plugins,197,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017
https://github.com/psi4/psi4/pull/850#issuecomment-344706017:80,Performance,concurren,concurrent,80,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017
https://github.com/psi4/psi4/pull/850#issuecomment-344706017:123,Security,access,access,123,"Would it make sense to add the SNS-MP2 plugin to any of the psi4 conda packages concurrent with this, to make it easier to access for users? (I'm not sure if that's standard practice for ""endorsed plugins"" or not.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344706017
https://github.com/psi4/psi4/pull/850#issuecomment-344708105:362,Availability,down,downstream,362,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105
https://github.com/psi4/psi4/pull/850#issuecomment-344708105:222,Integrability,depend,dependencies,222,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105
https://github.com/psi4/psi4/pull/850#issuecomment-344708105:89,Modifiability,plugin,plugins,89,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105
https://github.com/psi4/psi4/pull/850#issuecomment-344708105:242,Modifiability,plugin,plugins,242,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:113,Deployability,install,install,113,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:280,Deployability,install,installed,280,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:459,Deployability,install,installation,459,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:143,Modifiability,plugin,plugin,143,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:165,Testability,test,tests,165,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:217,Testability,test,tests,217,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:323,Testability,test,tests,323,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345242566:396,Testability,test,tests,396,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566
https://github.com/psi4/psi4/pull/850#issuecomment-345262845:27,Testability,test,testing,27,"Yes, I was confused by the testing in `sns-mp2`. When I tried to run `pytest` in a repo, it complained about `import garden`. And `python setup.py [py]test` wasn't happy, either. On the other hand, the simple input worked just fine, and there are reference values in the two pytest input files, so I can just copy them over to become conditional psi test cases. By the way, @rmcgibbo, I can get the version from `python setup.py --version` (`1.0.1.dev1`, I think). Is there a way to get that from the imported module (e.g., `python c ""import snsmp2; print(snsmp2.__version__)""` or similar)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345262845
https://github.com/psi4/psi4/pull/850#issuecomment-345262845:151,Testability,test,test,151,"Yes, I was confused by the testing in `sns-mp2`. When I tried to run `pytest` in a repo, it complained about `import garden`. And `python setup.py [py]test` wasn't happy, either. On the other hand, the simple input worked just fine, and there are reference values in the two pytest input files, so I can just copy them over to become conditional psi test cases. By the way, @rmcgibbo, I can get the version from `python setup.py --version` (`1.0.1.dev1`, I think). Is there a way to get that from the imported module (e.g., `python c ""import snsmp2; print(snsmp2.__version__)""` or similar)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345262845
https://github.com/psi4/psi4/pull/850#issuecomment-345262845:350,Testability,test,test,350,"Yes, I was confused by the testing in `sns-mp2`. When I tried to run `pytest` in a repo, it complained about `import garden`. And `python setup.py [py]test` wasn't happy, either. On the other hand, the simple input worked just fine, and there are reference values in the two pytest input files, so I can just copy them over to become conditional psi test cases. By the way, @rmcgibbo, I can get the version from `python setup.py --version` (`1.0.1.dev1`, I think). Is there a way to get that from the imported module (e.g., `python c ""import snsmp2; print(snsmp2.__version__)""` or similar)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345262845
https://github.com/psi4/psi4/pull/850#issuecomment-345262845:202,Usability,simpl,simple,202,"Yes, I was confused by the testing in `sns-mp2`. When I tried to run `pytest` in a repo, it complained about `import garden`. And `python setup.py [py]test` wasn't happy, either. On the other hand, the simple input worked just fine, and there are reference values in the two pytest input files, so I can just copy them over to become conditional psi test cases. By the way, @rmcgibbo, I can get the version from `python setup.py --version` (`1.0.1.dev1`, I think). Is there a way to get that from the imported module (e.g., `python c ""import snsmp2; print(snsmp2.__version__)""` or similar)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345262845
https://github.com/psi4/psi4/pull/850#issuecomment-345778933:44,Energy Efficiency,energy,energy,44,"Also, @rmcgibbo, did you want to settle on `energy('sns-mp2')` or `energy('nnmp2')` for the call? I'm guessing the former, so changing w/i the p4 test suite. Latter appears [here](https://github.com/DEShawResearch/sns-mp2/blob/master/tests/2x%7BCC%7D.in#L30-L35). (Note that unless you're doing something I didn't notice, setting memory w/i `set ...` isn't valid; memory is a plain `memory 7 gb` statement.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345778933
https://github.com/psi4/psi4/pull/850#issuecomment-345778933:67,Energy Efficiency,energy,energy,67,"Also, @rmcgibbo, did you want to settle on `energy('sns-mp2')` or `energy('nnmp2')` for the call? I'm guessing the former, so changing w/i the p4 test suite. Latter appears [here](https://github.com/DEShawResearch/sns-mp2/blob/master/tests/2x%7BCC%7D.in#L30-L35). (Note that unless you're doing something I didn't notice, setting memory w/i `set ...` isn't valid; memory is a plain `memory 7 gb` statement.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345778933
https://github.com/psi4/psi4/pull/850#issuecomment-345778933:146,Testability,test,test,146,"Also, @rmcgibbo, did you want to settle on `energy('sns-mp2')` or `energy('nnmp2')` for the call? I'm guessing the former, so changing w/i the p4 test suite. Latter appears [here](https://github.com/DEShawResearch/sns-mp2/blob/master/tests/2x%7BCC%7D.in#L30-L35). (Note that unless you're doing something I didn't notice, setting memory w/i `set ...` isn't valid; memory is a plain `memory 7 gb` statement.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345778933
https://github.com/psi4/psi4/pull/850#issuecomment-345778933:234,Testability,test,tests,234,"Also, @rmcgibbo, did you want to settle on `energy('sns-mp2')` or `energy('nnmp2')` for the call? I'm guessing the former, so changing w/i the p4 test suite. Latter appears [here](https://github.com/DEShawResearch/sns-mp2/blob/master/tests/2x%7BCC%7D.in#L30-L35). (Note that unless you're doing something I didn't notice, setting memory w/i `set ...` isn't valid; memory is a plain `memory 7 gb` statement.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345778933
https://github.com/psi4/psi4/issues/851#issuecomment-343700592:254,Security,access,accessing,254,"Looks the OS is supposed to provide it, [except on Apple](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L49-L53). Maybe that ifdef needed to be more specific to BSD than Apple. Though that code is still present in master, accessing the environment is not, so it should be removed. For now compiling 1.1, please just adjust that ifdef or whatever is necessary. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/851#issuecomment-343700592
https://github.com/psi4/psi4/issues/853#issuecomment-343702224:582,Availability,down,down,582,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224
https://github.com/psi4/psi4/issues/853#issuecomment-343702224:728,Availability,error,error,728,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224
https://github.com/psi4/psi4/issues/853#issuecomment-343702224:387,Deployability,update,updated,387,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224
https://github.com/psi4/psi4/issues/853#issuecomment-343702224:645,Deployability,install,installed,645,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224
https://github.com/psi4/psi4/issues/853#issuecomment-343702224:673,Integrability,depend,dependency,673,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224
https://github.com/psi4/psi4/issues/853#issuecomment-343702224:160,Testability,test,tested,160,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224
https://github.com/psi4/psi4/issues/853#issuecomment-343702979:204,Availability,error,error,204,"> From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. . It's somewhere in between. Good news is that besides this error, it finished building fine. Previously reported by me errors are only in 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702979
https://github.com/psi4/psi4/issues/853#issuecomment-343702979:264,Availability,error,errors,264,"> From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. . It's somewhere in between. Good news is that besides this error, it finished building fine. Previously reported by me errors are only in 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702979
https://github.com/psi4/psi4/issues/853#issuecomment-381031400:221,Security,access,accessible,221,"For the most part, we let CMake figure out `-lm`. We'll try to catch the clang warnings in a cleanup pass. If there's anything you'd like to submit a PR for, please do so. The dev community doesn't have a FreeBSD machine accessible. Thanks for packaging!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-381031400
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:50,Deployability,deploy,deployment,50,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:670,Deployability,install,installed,670,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:780,Deployability,deploy,deployment,780,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:825,Deployability,install,install,825,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:615,Integrability,depend,dependencies,615,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:114,Modifiability,config,configure,114,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:168,Modifiability,variab,variables,168,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:188,Modifiability,Variab,Variables,188,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:266,Modifiability,config,configure-libint-for-building-,266,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:313,Modifiability,variab,variables,313,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:464,Modifiability,config,config,464,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715845:724,Safety,safe,safer,724,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845
https://github.com/psi4/psi4/issues/854#issuecomment-343715965:52,Deployability,deploy,deployment,52,"> Are you building Psi4 for packaging or for single-deployment use?. For packaging. > Psi4 does check for external packages . If does, but it falls back on the bundled version when it doesn't find the external package for some reason when it actually exists. There should be a clear way to require to use external packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715965
https://github.com/psi4/psi4/issues/854#issuecomment-343715965:277,Usability,clear,clear,277,"> Are you building Psi4 for packaging or for single-deployment use?. For packaging. > Psi4 does check for external packages . If does, but it falls back on the bundled version when it doesn't find the external package for some reason when it actually exists. There should be a clear way to require to use external packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715965
https://github.com/psi4/psi4/issues/854#issuecomment-343716686:91,Availability,down,download,91,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686
https://github.com/psi4/psi4/issues/854#issuecomment-343716686:319,Deployability,install,installs,319,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686
https://github.com/psi4/psi4/issues/854#issuecomment-343716686:356,Deployability,install,install,356,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686
https://github.com/psi4/psi4/issues/854#issuecomment-343716686:443,Deployability,install,installed,443,"@loriab For example, libxc project. The version here http://www.tddft.org/programs/octopus/download/libxc/ doesn't even contain .cmake files. Why doesn't it and how can external libxc be found without .cmake? Your version here https://github.com/loriab/libxc has .cmake files in the tree, and its README claims that it installs them, but it really doesn't install them. So, again, how can the external libxc be found?. Why aren't .cmake files installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343716686
https://github.com/psi4/psi4/issues/854#issuecomment-343717373:292,Deployability,release,release,292,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373
https://github.com/psi4/psi4/issues/854#issuecomment-343717373:460,Deployability,install,installing,460,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373
https://github.com/psi4/psi4/issues/854#issuecomment-343717373:129,Modifiability,variab,variables,129,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373
https://github.com/psi4/psi4/issues/854#issuecomment-343774871:383,Deployability,install,installs,383,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871
https://github.com/psi4/psi4/issues/854#issuecomment-343774871:590,Deployability,install,installed,590,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871
https://github.com/psi4/psi4/issues/854#issuecomment-343774871:194,Integrability,depend,dependency,194,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871
https://github.com/psi4/psi4/issues/854#issuecomment-343774871:129,Modifiability,variab,variables,129,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871
https://github.com/psi4/psi4/issues/854#issuecomment-343774871:172,Modifiability,variab,variables,172,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:217,Deployability,install,installations,217,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:502,Deployability,install,install,502,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:173,Modifiability,plugin,plugins,173,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:479,Modifiability,plugin,plugin,479,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:604,Modifiability,plugin,plugin,604,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:775,Modifiability,plugin,plugin,775,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:1101,Modifiability,config,config,1101,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:1142,Modifiability,config,config,1142,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343777115:348,Safety,detect,detected,348,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115
https://github.com/psi4/psi4/issues/854#issuecomment-343778164:415,Availability,down,download,415,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164
https://github.com/psi4/psi4/issues/854#issuecomment-343778164:478,Availability,down,downloads,478,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164
https://github.com/psi4/psi4/issues/854#issuecomment-343778164:542,Availability,down,downloaded,542,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164
https://github.com/psi4/psi4/issues/854#issuecomment-343778164:359,Deployability,install,installed,359,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164
https://github.com/psi4/psi4/issues/854#issuecomment-343778164:508,Safety,risk,risk,508,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164
https://github.com/psi4/psi4/issues/854#issuecomment-343778164:499,Security,secur,security,499,"> I may be not quite following the INSIST_FIND_PACKAGE reasoning. ENABLE_PkgName=ON/OFF turns it off completely. And I would like to control bundling. I want cmake to fail when external package isn't found. I am trying to create the FreeBSD port for psi4. Package build infrastructure is all automated, and is very rigorous. So if the package is chosen to be installed externally, there is no reason to even try to download it from github. It's besides the point here, but such downloads are also a security risk, because you don't check the downloaded file's fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343778164
https://github.com/psi4/psi4/issues/854#issuecomment-344296003:143,Availability,down,download,143,"wrt to the security issues you brought up @yurivict I know that cmake's ExternalProject tools make it possible to check fingerprints after the download step, but this is usually done when some tarball is being downloaded. In our case we are actually using git to clone a repo with the source code, I don't know how you can check the fingerprint for a repo. Now, if we do download any of the external projects as a tarball I completely agree with you that we should probably start checking the fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344296003
https://github.com/psi4/psi4/issues/854#issuecomment-344296003:210,Availability,down,downloaded,210,"wrt to the security issues you brought up @yurivict I know that cmake's ExternalProject tools make it possible to check fingerprints after the download step, but this is usually done when some tarball is being downloaded. In our case we are actually using git to clone a repo with the source code, I don't know how you can check the fingerprint for a repo. Now, if we do download any of the external projects as a tarball I completely agree with you that we should probably start checking the fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344296003
https://github.com/psi4/psi4/issues/854#issuecomment-344296003:371,Availability,down,download,371,"wrt to the security issues you brought up @yurivict I know that cmake's ExternalProject tools make it possible to check fingerprints after the download step, but this is usually done when some tarball is being downloaded. In our case we are actually using git to clone a repo with the source code, I don't know how you can check the fingerprint for a repo. Now, if we do download any of the external projects as a tarball I completely agree with you that we should probably start checking the fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344296003
https://github.com/psi4/psi4/issues/854#issuecomment-344296003:11,Security,secur,security,11,"wrt to the security issues you brought up @yurivict I know that cmake's ExternalProject tools make it possible to check fingerprints after the download step, but this is usually done when some tarball is being downloaded. In our case we are actually using git to clone a repo with the source code, I don't know how you can check the fingerprint for a repo. Now, if we do download any of the external projects as a tarball I completely agree with you that we should probably start checking the fingerprints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344296003
https://github.com/psi4/psi4/issues/854#issuecomment-344327124:93,Availability,down,downloads,93,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124
https://github.com/psi4/psi4/issues/854#issuecomment-344327124:203,Availability,down,downloads,203,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124
https://github.com/psi4/psi4/issues/854#issuecomment-344327124:179,Security,hash,hash,179,> I don't know how you can check the fingerprint for a repo. Probably not for github. Github downloads are fundamentally insecure as implemented by cmake. Documentation says that hash can be set for URL downloads though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-344327124
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:89,Deployability,install,install,89,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:128,Deployability,install,install,128,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:239,Deployability,install,install,239,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:354,Deployability,install,installing,354,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:435,Deployability,install,installed,435,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:517,Deployability,install,installation,517,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:556,Deployability,install,install,556,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:165,Integrability,wrap,wrappings,165,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778590:198,Safety,detect,detections,198,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590
https://github.com/psi4/psi4/issues/855#issuecomment-343778979:19,Deployability,install,installed,19,"Normally, they are installed into /usr/local (under the stage directory). But these files go into /usr/ports under the same stage directory. It must have ran ```pwd``` or something like that during build/install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778979
https://github.com/psi4/psi4/issues/855#issuecomment-343778979:204,Deployability,install,install,204,"Normally, they are installed into /usr/local (under the stage directory). But these files go into /usr/ports under the same stage directory. It must have ran ```pwd``` or something like that during build/install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778979
https://github.com/psi4/psi4/issues/855#issuecomment-343783023:933,Deployability,release,release,933,"I'm not following, I'm afraid. On a build with only pb11 built internally and configured and launched from odd directories to try to provoke a `pwd` issue, these are the only Target files I get under `stage/`, and they seem to be in place and not duplicated. ```; objdir1: (insist) find stage/ -name ""*Target*""; stage/usr/local/psi4/share/cmake/TargetLAPACK; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Config.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; stage/usr/local/psi4/share/cmake/pybind11/pybind11Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets-release.cmake; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343783023
https://github.com/psi4/psi4/issues/855#issuecomment-343783023:78,Modifiability,config,configured,78,"I'm not following, I'm afraid. On a build with only pb11 built internally and configured and launched from odd directories to try to provoke a `pwd` issue, these are the only Target files I get under `stage/`, and they seem to be in place and not duplicated. ```; objdir1: (insist) find stage/ -name ""*Target*""; stage/usr/local/psi4/share/cmake/TargetLAPACK; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Config.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; stage/usr/local/psi4/share/cmake/pybind11/pybind11Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets-release.cmake; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343783023
https://github.com/psi4/psi4/pull/856#issuecomment-344288297:72,Availability,avail,available,72,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297
https://github.com/psi4/psi4/pull/856#issuecomment-344288297:222,Deployability,install,install,222,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297
https://github.com/psi4/psi4/pull/856#issuecomment-344288297:136,Modifiability,variab,variable,136,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297
https://github.com/psi4/psi4/pull/856#issuecomment-344288297:56,Security,hash,hash,56,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297
https://github.com/psi4/psi4/pull/856#issuecomment-344288297:402,Security,hash,hash,402,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297
https://github.com/psi4/psi4/pull/856#issuecomment-350826018:44,Availability,down,downloading,44,"In case we do ever switch to tarball+sha256 downloading in ExternalProject, here's a GH blogpost on accessing non-tagged versions. https://github.com/blog/651-annotated-downloads",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-350826018
https://github.com/psi4/psi4/pull/856#issuecomment-350826018:169,Availability,down,downloads,169,"In case we do ever switch to tarball+sha256 downloading in ExternalProject, here's a GH blogpost on accessing non-tagged versions. https://github.com/blog/651-annotated-downloads",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-350826018
https://github.com/psi4/psi4/pull/856#issuecomment-350826018:100,Security,access,accessing,100,"In case we do ever switch to tarball+sha256 downloading in ExternalProject, here's a GH blogpost on accessing non-tagged versions. https://github.com/blog/651-annotated-downloads",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-350826018
https://github.com/psi4/psi4/pull/857#issuecomment-344102578:253,Modifiability,plugin,plugins,253,"I thought about the explicit checking of psivars. In fact, I figured that if anything would fail the test suite, it would be if there were tests which checked these (evidently there was not). I could possibly add one at a later date- it would help keep plugins which parse a dictionary created by `core.get_variables()` from randomly breaking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344102578
https://github.com/psi4/psi4/pull/857#issuecomment-344102578:101,Testability,test,test,101,"I thought about the explicit checking of psivars. In fact, I figured that if anything would fail the test suite, it would be if there were tests which checked these (evidently there was not). I could possibly add one at a later date- it would help keep plugins which parse a dictionary created by `core.get_variables()` from randomly breaking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344102578
https://github.com/psi4/psi4/pull/857#issuecomment-344102578:139,Testability,test,tests,139,"I thought about the explicit checking of psivars. In fact, I figured that if anything would fail the test suite, it would be if there were tests which checked these (evidently there was not). I could possibly add one at a later date- it would help keep plugins which parse a dictionary created by `core.get_variables()` from randomly breaking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344102578
https://github.com/psi4/psi4/pull/857#issuecomment-344103991:13,Testability,test,tests,13,There aren't tests that check these because the whole `tests/cc*` got only sparsely ported to the new `compare_values()` testing scheme. Mostly cc tests are compared via a perl script against output.ref. I hope optical rotation is checked there. I'd strongly encourage throwing in a couple lines in one of the existing optrot and polarizability test cases to `compare_values()` against your new psivars.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344103991
https://github.com/psi4/psi4/pull/857#issuecomment-344103991:55,Testability,test,tests,55,There aren't tests that check these because the whole `tests/cc*` got only sparsely ported to the new `compare_values()` testing scheme. Mostly cc tests are compared via a perl script against output.ref. I hope optical rotation is checked there. I'd strongly encourage throwing in a couple lines in one of the existing optrot and polarizability test cases to `compare_values()` against your new psivars.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344103991
https://github.com/psi4/psi4/pull/857#issuecomment-344103991:121,Testability,test,testing,121,There aren't tests that check these because the whole `tests/cc*` got only sparsely ported to the new `compare_values()` testing scheme. Mostly cc tests are compared via a perl script against output.ref. I hope optical rotation is checked there. I'd strongly encourage throwing in a couple lines in one of the existing optrot and polarizability test cases to `compare_values()` against your new psivars.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344103991
https://github.com/psi4/psi4/pull/857#issuecomment-344103991:147,Testability,test,tests,147,There aren't tests that check these because the whole `tests/cc*` got only sparsely ported to the new `compare_values()` testing scheme. Mostly cc tests are compared via a perl script against output.ref. I hope optical rotation is checked there. I'd strongly encourage throwing in a couple lines in one of the existing optrot and polarizability test cases to `compare_values()` against your new psivars.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344103991
https://github.com/psi4/psi4/pull/857#issuecomment-344103991:345,Testability,test,test,345,There aren't tests that check these because the whole `tests/cc*` got only sparsely ported to the new `compare_values()` testing scheme. Mostly cc tests are compared via a perl script against output.ref. I hope optical rotation is checked there. I'd strongly encourage throwing in a couple lines in one of the existing optrot and polarizability test cases to `compare_values()` against your new psivars.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344103991
https://github.com/psi4/psi4/pull/857#issuecomment-344106570:27,Testability,test,test,27,Understood. I will add new test cases to this PR either tonight or tomorrow morning.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344106570
https://github.com/psi4/psi4/pull/857#issuecomment-344331581:62,Modifiability,variab,variables,62,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581
https://github.com/psi4/psi4/pull/857#issuecomment-344331581:21,Testability,test,tests,21,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581
https://github.com/psi4/psi4/pull/857#issuecomment-344331581:105,Testability,test,tested,105,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581
https://github.com/psi4/psi4/pull/857#issuecomment-344331581:158,Testability,test,tests,158,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581
https://github.com/psi4/psi4/pull/857#issuecomment-345267970:208,Availability,down,download,208,"We had a trial to get `c-f` at gatech, too. maybe this helps. https://psi4.slack.com/archives/C5BLBG6VB/p1503008447000049. any poor souls trying to get `clang-format` on RHEL7 w/ broken `yum`, the magic llvm download is 3.9.0 (being early enough to have req. library abis (unlike 4.0.1) and late enough to recognize psi4's clang-format keywords(unlike 3.6.2)) for pkg Fedora23_x64_64. System `libstdc++` is still too old, but you can feed it any of psi4's gcc 5.2 via `LD_LIBRARY_PATH=${CONDA_PREFIX}/lib`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-345267970
https://github.com/psi4/psi4/pull/857#issuecomment-345269703:115,Deployability,install,installs,115,Dont forget you can just `conda create -n cformat -c conda-forge clangdev`. Really recommend a venv for this as it installs a lot of things you may not want floating around.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-345269703
https://github.com/psi4/psi4/issues/858#issuecomment-344080024:16,Availability,error,errors,16,"We do hit these errors sometimes. Some special cases have been fixed this year. What version of the code are you running, `psi4 --version`?. It's failing on the backtransformation in the second opt iter. Dihedrals are near 180 to start but no angles are. If up-to-date, any suggestions, @psi-rking ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344080024
https://github.com/psi4/psi4/issues/858#issuecomment-344080503:49,Deployability,update,update,49,I'm using the latest version according to `conda update psi4`. Is there a dev version for me to use?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344080503
https://github.com/psi4/psi4/issues/858#issuecomment-344082701:224,Safety,avoid,avoid,224,"At the bottom of the output, after 3 steps, many of the torsions are very close to 180. Is the structure exactly planar? I'm not surprised if you are not able to converge this tightly. You could try Cartesian coordinates to avoid all these discontinuities (not just in the value of the torsion, but in its derivative too). 	 D(7,11,6,18) = -3.129372	 -179.299795; 	 D(8,6,11,10) = -3.133590	 -179.541496; 	 D(8,12,9,21) = 3.130680	 179.374777; 	 D(9,7,11,10) = 3.130802	 179.381713; 	 D(9,12,8,20) = 3.137161	 179.746078; 	 D(10,4,2,14) = -3.130400	 -179.358722",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344082701
https://github.com/psi4/psi4/issues/858#issuecomment-344334581:486,Availability,Error,Error,486,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581
https://github.com/psi4/psi4/issues/858#issuecomment-344334581:498,Availability,Error,Error,498,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581
https://github.com/psi4/psi4/issues/858#issuecomment-344334581:505,Availability,Error,Error,505,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581
https://github.com/psi4/psi4/issues/858#issuecomment-344334581:610,Availability,error,error,610,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581
https://github.com/psi4/psi4/issues/858#issuecomment-344334581:221,Performance,optimiz,optimization,221,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581
https://github.com/psi4/psi4/issues/858#issuecomment-344334581:442,Performance,optimiz,optimization,442,"I tried running it again with `opt_coordinates = cartesian` with a restrained dihedral and `dynamic_level = 1`. However, it crashed again, this time when it raises dynamic level to 3 it crashed when it tries to write the optimization data to binary file. [Here's](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831) the traceback:. ```; 	Writing optimization data to binary file.; 	; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); ```. Also, it still seems to be using internal coordinates (unless I'm not understanding the output file). ; Here is the new [input](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat) and [output](https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344334581
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:1021,Availability,Error,Error,1021,"on value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:1033,Availability,Error,Error,1033,"on value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:1042,Availability,Error,Error,1042,"on value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:1147,Availability,error,error,1147,"on value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:312,Performance,optimiz,optimization,312,"I took a closer look at the system. You are beginning with a geometrical; torsion value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:392,Performance,optimiz,optimization,392,"I took a closer look at the system. You are beginning with a geometrical; torsion value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:747,Performance,optimiz,optimization,747,"I took a closer look at the system. You are beginning with a geometrical; torsion value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344476280:973,Performance,optimiz,optimization,973,"I took a closer look at the system. You are beginning with a geometrical; torsion value of 15 degrees and want to keep it there, apparently. If you; can build a starting geometry that satisfies the desired constraint, then; you've got better odds of success using ""frozen"" coordinates. I tried a; double-zeta HF optimization with frozen_dihedral = ""4 10 11 6"" with; dynamic_level =1, and the optimization converged within 10 iterations. On Tue, Nov 14, 2017 at 11:28 AM, Chaya Stern <notifications@github.com>; wrote:. > I tried running it again with opt_coordinates = cartesian with a; > restrained dihedral and dynamic_level = 1. However, it crashed again,; > this time when it raises dynamic level to 3 it crashed when it tries to; > write the optimization data to binary file. Here's; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.out#L12821-L12831>; > the traceback:; >; > 	Writing optimization data to binary file.; > 	; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); > psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); > psi::psio_write_entry(unsigned int, char const*, char*, unsigned long); >; > Also, it still seems to be using internal coordinates (unless I'm not; > understanding the output file).; > Here is the new input; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsion_drive/torsion_drive/biphenyl/phepyr/4_10_11_6/15/phepyr_4_10_11_6_15.dat>; > and output; > <https://github.com/ChayaSt/torsionfit_examples/blob/torsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344476280
https://github.com/psi4/psi4/issues/858#issuecomment-344630452:230,Energy Efficiency,energy,energy,230,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452
https://github.com/psi4/psi4/issues/858#issuecomment-344630452:91,Performance,optimiz,optimization,91,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452
https://github.com/psi4/psi4/issues/858#issuecomment-344630452:307,Performance,optimiz,optimizing,307,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452
https://github.com/psi4/psi4/issues/858#issuecomment-344630452:572,Performance,optimiz,optimize,572,"I tried freezing the cartesian coordinates of the dihedral atoms and it seems to work. The optimization converged within 10 iterations. I also used `consecutive_backsteps = 2`. However, since the bonds and angles can't relax, the energy of the converged structure is higher. I'll try your approach of first optimizing with a lower level of theory. . ```; frozen_string = """"""; 4 xyz; 10 xyz; 11 xyz; 6 xyz; """"""; set optking { opt_coordinates = cartesian; frozen_cartesian = $frozen_string; consecutive_backsteps = 2; geom_maxiter = 250; print_trajectory_xyz_file = True }. optimize('MP2/aug-cc-PVTZ'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344630452
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:306,Availability,robust,robust,306,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:472,Availability,error,error,472,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:495,Availability,Error,Error,495,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:600,Availability,error,error,600,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:1044,Availability,error,error,1044,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:1076,Availability,error,error,1076,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344761262:1101,Performance,optimiz,optimization,1101,"@psi-rking : Can you elaborate on what the fundamental issue here is? Is it that the internal-to-cartesian coordinate conversion is numerically unstable? Or that there is some other weird saddle point that the minimization converges to instead? If you could point us to the code that needs to be made more robust, we can take a stab at it, but if there's fundamentally no way to converge these kinds of calculations, that would be helpful to know. Also, isn't this second error unrelated?; ```; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495011512596/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::write_entry(unsigned int, char const*, char*, unsigned long); ```; This seems to be an error in writing rather than an error in the constrained optimization, isn't it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344761262
https://github.com/psi4/psi4/issues/858#issuecomment-344762514:22,Availability,error,error,22,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514
https://github.com/psi4/psi4/issues/858#issuecomment-344762514:54,Availability,error,error,54,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514
https://github.com/psi4/psi4/issues/858#issuecomment-344762514:109,Availability,error,error,109,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514
https://github.com/psi4/psi4/issues/858#issuecomment-344762514:79,Performance,optimiz,optimization,79,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514
https://github.com/psi4/psi4/issues/858#issuecomment-344762514:215,Performance,optimiz,optimization,215,"> This seems to be an error in writing rather than an error in the constrained optimization, isn't it?. This error shows up when dynamic level is raised to 3 after the first convergence check when it tries to write optimization data to binary file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344762514
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:18,Availability,error,error,18,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:38,Availability,error,error,38,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:568,Availability,robust,robust,568,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1183,Availability,error,error,1183,"hat happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1674,Availability,error,error,1674," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1706,Availability,error,error,1706," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1769,Availability,error,error,1769," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:69,Performance,optimiz,optimization,69,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1545,Performance,optimiz,optimizer,1545," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1734,Performance,optimiz,optimization,1734," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1878,Performance,optimiz,optimization,1878," has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTMqNeh8Ky1RIqF0KceVVWoPAvSuHks5s23H-gaJpZM4QcgDn>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:405,Testability,test,tested,405,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/858#issuecomment-344949158:1081,Usability,simpl,simply,1081,"hat happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/858#issuecomment-344762514>, or mute; > the t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:810,Energy Efficiency,energy,energy,810,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:416,Performance,optimiz,optimizer,416,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:589,Performance,optimiz,optimize,589,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:819,Performance,optimiz,optimize,819,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:198,Testability,test,test,198,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:378,Testability,log,logic,378,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346373530:887,Testability,test,testing,887,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530
https://github.com/psi4/psi4/issues/860#issuecomment-346417491:295,Testability,log,logic,295,"I can confirm that your input, @psi-rking, seems to work fine. I don't see any indeterminism either. When I turn symmetry off entirely, though, the IRC does quit early and I'm not sure why. I poked around the code a bit -- debugging this is a real headache, since I wrote it 6 years ago and the logic is pretty convoluted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346417491
https://github.com/psi4/psi4/issues/860#issuecomment-346421257:723,Testability,log,logic,723,"If going to C1 makes a difference, then a couple of likely reasons are that; 1) we are symmetrizing the step if C2 is included; or 2) it's surprisingly; easy to get the wrong orbital occupations for hydrogen peroxide. It will; be less convoluted in the new python version (which still needs; debugged...). On Wed, Nov 22, 2017 at 11:18 AM, avcopan <notifications@github.com> wrote:. > I can confirm that your input, @psi-rking <https://github.com/psi-rking>,; > seems to work fine. I don't see any indeterminism either. When I turn; > symmetry off entirely, though, the IRC does quit early and I'm not sure; > why. I poked around the code a bit -- debugging this is a real headache,; > since I wrote it 6 years ago and the logic is pretty convoluted.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/860#issuecomment-346417491>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTB2jUneo6c5HZCbvvkm44FnlmnO9ks5s5FdLgaJpZM4QeK0n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346421257
https://github.com/psi4/psi4/issues/860#issuecomment-346434514:24,Deployability,hotfix,hotfix,24,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514
https://github.com/psi4/psi4/issues/860#issuecomment-346434514:235,Deployability,hotfix,hotfix,235,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514
https://github.com/psi4/psi4/issues/860#issuecomment-346434514:11,Testability,test,tests,11,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514
https://github.com/psi4/psi4/issues/860#issuecomment-346434514:294,Testability,Test,Test,294,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514
https://github.com/psi4/psi4/issues/860#issuecomment-346434514:868,Testability,log,logic,868,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:744,Availability,reliab,reliable,744,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:59,Deployability,hotfix,hotfix,59,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:915,Performance,optimiz,optimizations,915,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:1978,Performance,optimiz,optimizer,1978," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:39,Testability,test,testing,39,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:419,Testability,test,test,419,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:2162,Testability,test,test,2162," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:2355,Testability,test,testing,2355," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-349520464:2224,Usability,simpl,simply,2224," ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have flipped signs, concludes we are near a gradient, and says we are in the range of a minimum - which we are - to trigger the convergence machinery. I will want to test this hypothesis some more, but I suspect the fix will be simply to move the lines I mentioned to inside the size > 3 clause a few lines below.; EDIT2: That fixed the bug. Going to do some testing to trace the bug to this source. I've verified that when the bug does not appear, u_f_q_0 has a consistent direction. The direction changes in the bug cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:324,Energy Efficiency,Energy,Energy,324,"@psi-rking . I have the IRC mostly fixed, but the final step is difficult to control. For comparison, have the energies that result from the exact same job being run six times:. ```@IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020851 -0.000351118183; @IRC 2 -148.751921813112 -0.001007792261; @IRC 3 -148.753458618899 -0.001536805787; @IRC 4 -148.755338547024 -0.001879928125; @IRC 5 -148.757353153707 -0.002014606684; @IRC 6 -148.759306859301 -0.001953705594; @IRC 7 -148.761045995024 -0.001739135723; @IRC 8 -148.762474848946 -0.001428853922; @IRC 9 -148.763557315982 -0.001082467035; @IRC 10 -148.764306952597 -0.000749636616; @IRC 11 -148.764771570120 -0.000464617522; @IRC 12 -148.765017199697 -0.000245629578; @IRC 13 -148.765113810944 -0.000096611247; @IRC 14 -148.765124130978 -0.000010320034; @IRC 15 -148.764729734758 0.000394396220; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:341,Energy Efficiency,Energy,Energy,341,"@psi-rking . I have the IRC mostly fixed, but the final step is difficult to control. For comparison, have the energies that result from the exact same job being run six times:. ```@IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020851 -0.000351118183; @IRC 2 -148.751921813112 -0.001007792261; @IRC 3 -148.753458618899 -0.001536805787; @IRC 4 -148.755338547024 -0.001879928125; @IRC 5 -148.757353153707 -0.002014606684; @IRC 6 -148.759306859301 -0.001953705594; @IRC 7 -148.761045995024 -0.001739135723; @IRC 8 -148.762474848946 -0.001428853922; @IRC 9 -148.763557315982 -0.001082467035; @IRC 10 -148.764306952597 -0.000749636616; @IRC 11 -148.764771570120 -0.000464617522; @IRC 12 -148.765017199697 -0.000245629578; @IRC 13 -148.765113810944 -0.000096611247; @IRC 14 -148.765124130978 -0.000010320034; @IRC 15 -148.764729734758 0.000394396220; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:1278,Energy Efficiency,Energy,Energy,1278,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020851 -0.000351118183; @IRC 2 -148.751921813112 -0.001007792261; @IRC 3 -148.753458618899 -0.001536805787; @IRC 4 -148.755338547024 -0.001879928125; @IRC 5 -148.757353153707 -0.002014606684; @IRC 6 -148.759306859301 -0.001953705594; @IRC 7 -148.761045995024 -0.001739135723; @IRC 8 -148.762474848946 -0.001428853922; @IRC 9 -148.763557315982 -0.001082467035; @IRC 10 -148.764306952597 -0.000749636616; @IRC 11 -148.764771570120 -0.000464617522; @IRC 12 -148.765017199697 -0.000245629578; @IRC 13 -148.765113810944 -0.000096611247; @IRC 14 -148.765124130978 -0.000010320034; @IRC 15 -148.764729734758 0.000394396220; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:1295,Energy Efficiency,Energy,Energy,1295,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020851 -0.000351118183; @IRC 2 -148.751921813112 -0.001007792261; @IRC 3 -148.753458618899 -0.001536805787; @IRC 4 -148.755338547024 -0.001879928125; @IRC 5 -148.757353153707 -0.002014606684; @IRC 6 -148.759306859301 -0.001953705594; @IRC 7 -148.761045995024 -0.001739135723; @IRC 8 -148.762474848946 -0.001428853922; @IRC 9 -148.763557315982 -0.001082467035; @IRC 10 -148.764306952597 -0.000749636616; @IRC 11 -148.764771570120 -0.000464617522; @IRC 12 -148.765017199697 -0.000245629578; @IRC 13 -148.765113810944 -0.000096611247; @IRC 14 -148.765124130978 -0.000010320034; @IRC 15 -148.764729734758 0.000394396220; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:2232,Energy Efficiency,Energy,Energy,2232,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:2249,Energy Efficiency,Energy,Energy,2249,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:3186,Energy Efficiency,Energy,Energy,3186,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in En,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:3203,Energy Efficiency,Energy,Energy,3203,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in En,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:4141,Energy Efficiency,Energy,Energy,4141,rt ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020614 -0.000351117946; @IRC 2 -148.751921813072 -0.001007792458; @IRC 3 -148.753458618806 -0.001536805734; @IRC 4 -148.755338546954 -0.001879928149; @IRC 5 -148.757353153393 -0.002014606439; @IRC 6 -148.759306859244 -0.001953705851; @IRC 7 -148.761045994807 -0.001739135563; @IRC 8 -148.762474848960 -0.001428854153; @IRC 9 -148.763557315823 -0.001082466863; @IRC 10 -148.764306952777 -0.000749636954; @IRC 11 -148.764771569804 -0.000464617027; @IRC 12 -148.765017199652 -0.000245629848; @IRC 13 -148.765113811017 -0.000096611365; @IRC 14 -148.765113820352 -0.000000009335; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC -------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:4158,Energy Efficiency,Energy,Energy,4158,rt ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020614 -0.000351117946; @IRC 2 -148.751921813072 -0.001007792458; @IRC 3 -148.753458618806 -0.001536805734; @IRC 4 -148.755338546954 -0.001879928149; @IRC 5 -148.757353153393 -0.002014606439; @IRC 6 -148.759306859244 -0.001953705851; @IRC 7 -148.761045994807 -0.001739135563; @IRC 8 -148.762474848960 -0.001428854153; @IRC 9 -148.763557315823 -0.001082466863; @IRC 10 -148.764306952777 -0.000749636954; @IRC 11 -148.764771569804 -0.000464617027; @IRC 12 -148.765017199652 -0.000245629848; @IRC 13 -148.765113811017 -0.000096611365; @IRC 14 -148.765113820352 -0.000000009335; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC -------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:5053,Energy Efficiency,Energy,Energy,5053,"-----------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020614 -0.000351117946; @IRC 2 -148.751921813072 -0.001007792458; @IRC 3 -148.753458618806 -0.001536805734; @IRC 4 -148.755338546954 -0.001879928149; @IRC 5 -148.757353153393 -0.002014606439; @IRC 6 -148.759306859244 -0.001953705851; @IRC 7 -148.761045994807 -0.001739135563; @IRC 8 -148.762474848960 -0.001428854153; @IRC 9 -148.763557315823 -0.001082466863; @IRC 10 -148.764306952777 -0.000749636954; @IRC 11 -148.764771569804 -0.000464617027; @IRC 12 -148.765017199652 -0.000245629848; @IRC 13 -148.765113811017 -0.000096611365; @IRC 14 -148.765113820352 -0.000000009335; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020808 -0.000351118140; @IRC 2 -148.751921813104 -0.001007792295; @IRC 3 -148.753458618713 -0.001536805609; @IRC 4 -148.755338547051 -0.001879928339; @IRC 5 -148.757353153581 -0.002014606530; @IRC 6 -148.759306859192 -0.001953705611; @IRC 7 -148.761045995024 -0.001739135832; @IRC 8 -148.762474848811 -0.001428853786; @IRC 9 -148.763557315832 -0.001082467021; @IRC 10 -148.764306952658 -0.000749636826; @IRC 11 -148.764771570088 -0.000464617430; @IRC 12 -148.765017199695 -0.000245629606; @IRC 13 -148.765113810604 -0.000096610909; @IRC 14 -148.765124130954 -0.000010320350; @IRC 15 -148.764489158578 0.000634972376; @IRC ----------------------------------------------; ```. **I'm inclined to submit what I have now and marked these bugs as closed.** Opinions? There's still some non-determinism, but disagreement about the last step",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351195913:5070,Energy Efficiency,Energy,Energy,5070,"-----------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020614 -0.000351117946; @IRC 2 -148.751921813072 -0.001007792458; @IRC 3 -148.753458618806 -0.001536805734; @IRC 4 -148.755338546954 -0.001879928149; @IRC 5 -148.757353153393 -0.002014606439; @IRC 6 -148.759306859244 -0.001953705851; @IRC 7 -148.761045994807 -0.001739135563; @IRC 8 -148.762474848960 -0.001428854153; @IRC 9 -148.763557315823 -0.001082466863; @IRC 10 -148.764306952777 -0.000749636954; @IRC 11 -148.764771569804 -0.000464617027; @IRC 12 -148.765017199652 -0.000245629848; @IRC 13 -148.765113811017 -0.000096611365; @IRC 14 -148.765113820352 -0.000000009335; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020808 -0.000351118140; @IRC 2 -148.751921813104 -0.001007792295; @IRC 3 -148.753458618713 -0.001536805609; @IRC 4 -148.755338547051 -0.001879928339; @IRC 5 -148.757353153581 -0.002014606530; @IRC 6 -148.759306859192 -0.001953705611; @IRC 7 -148.761045995024 -0.001739135832; @IRC 8 -148.762474848811 -0.001428853786; @IRC 9 -148.763557315832 -0.001082467021; @IRC 10 -148.764306952658 -0.000749636826; @IRC 11 -148.764771570088 -0.000464617430; @IRC 12 -148.765017199695 -0.000245629606; @IRC 13 -148.765113810604 -0.000096610909; @IRC 14 -148.765124130954 -0.000010320350; @IRC 15 -148.764489158578 0.000634972376; @IRC ----------------------------------------------; ```. **I'm inclined to submit what I have now and marked these bugs as closed.** Opinions? There's still some non-determinism, but disagreement about the last step",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913
https://github.com/psi4/psi4/issues/860#issuecomment-351224954:348,Safety,avoid,avoid,348,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954
https://github.com/psi4/psi4/issues/860#issuecomment-351224954:26,Testability,test,test-case,26,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954
https://github.com/psi4/psi4/issues/860#issuecomment-351224954:335,Testability,test,test,335,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954
https://github.com/psi4/psi4/issues/860#issuecomment-351224954:81,Usability,simpl,simple-but-intuitive,81,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954
https://github.com/psi4/psi4/issues/860#issuecomment-352229920:81,Performance,optimiz,optimizer,81,"This issue was fixed by #882. While there is still some non-determinism when the optimizer gets to a minimum, it does not have a common cause with the behavior reported here. It may also be fixed when optking is brought Python-side. For reference, the output I generated demonstrating non-determinism at the mimum was using the test case created in #882, without the early exit condition. If this issue needs to be raised again, it would be a separate issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-352229920
https://github.com/psi4/psi4/issues/860#issuecomment-352229920:328,Testability,test,test,328,"This issue was fixed by #882. While there is still some non-determinism when the optimizer gets to a minimum, it does not have a common cause with the behavior reported here. It may also be fixed when optking is brought Python-side. For reference, the output I generated demonstrating non-determinism at the mimum was using the test case created in #882, without the early exit condition. If this issue needs to be raised again, it would be a separate issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-352229920
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:44,Deployability,install,install,44,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:84,Deployability,install,install,84,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:145,Deployability,install,install,145,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:964,Modifiability,plugin,plugins-base,964,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:451,Security,certificate,certificates,451,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:3246,Testability,test,testpath,3246,.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; nb_conda_kernels 2.1.0 py36_0 conda-forge; nbconvert 5.3.1 py_1 conda-forge; nbformat 4.4.0 py36_0 conda-forge; ncurses 5.9 10 conda-forge; notebook 5.2.1 py36_2 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pandoc 2.0.0.1 1 conda-forge; pandocfilters 1.4.1 py36_0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pcre 8.41 hc27e229_1 ; pexpect 4.2.1 py36_0 conda-forge; pickleshare 0.7.4 py36_0 conda-forge; pip 9.0.1 py36_0 conda-forge; prompt_toolkit 1.0.15 py36_0 conda-forge; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; psi4-rt 1.2a1.dev3 py36_0 psi4/label/dev; ptyprocess 0.5.2 py36_0 conda-forge; py 1.5.2 py_0 conda-forge; pygments 2.2.0 py36_0 conda-forge; pyqt 5.6.0 py36h0386399_5 ; pytest 3.2.5 py36_0 conda-forge; python 3.6.3 1 conda-forge; python-dateutil 2.6.1 py36_0 conda-forge; pyzmq 16.0.2 py36_2 conda-forge; qt 5.6.2 5 ; qtconsole 4.3.1 py36h8f73b5b_0 ; readline 6.2 0 conda-forge; setuptools 36.6.0 py36_1 conda-forge; simint 0.7 0 psi4; simplegeneric 0.8.1 py36_0 conda-forge; sip 4.18.1 py36h51ed4ed_2 ; six 1.11.0 py36_1 conda-forge; sqlite 3.13.0 1 conda-forge; terminado 0.6 py36_0 conda-forge; testpath 0.3.1 py36_0 conda-forge; tk 8.5.19 2 conda-forge; tornado 4.5.2 py36_0 conda-forge; traitlets 4.3.2 py36_0 conda-forge; v2rdm_casscf 0.4 py36_1 psi4/label/dev; wcwidth 0.1.7 py36_0 conda-forge; webencodings 0.5 py36_0 conda-forge; wheel 0.30.0 py_1 conda-forge; widgetsnbextension 3.0.2 py36hd01bb71_1 ; xz 5.2.3 0 conda-forge; zeromq 4.2.1 1 conda-forge; zlib 1.2.11 0 conda-forge; ```; Do you have any thoughts?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345317385:3084,Usability,simpl,simplegeneric,3084,.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 hb491cac_4 ; mpc 1.0.1 0 ; mpfr 3.1.2 0 ; nb_conda_kernels 2.1.0 py36_0 conda-forge; nbconvert 5.3.1 py_1 conda-forge; nbformat 4.4.0 py36_0 conda-forge; ncurses 5.9 10 conda-forge; notebook 5.2.1 py36_2 conda-forge; numpy 1.13.3 py36ha12f23b_0 ; openssl 1.0.2l 0 conda-forge; pandoc 2.0.0.1 1 conda-forge; pandocfilters 1.4.1 py36_0 conda-forge; pcmsolver 1.1.10 py36_1 psi4/label/dev; pcre 8.41 hc27e229_1 ; pexpect 4.2.1 py36_0 conda-forge; pickleshare 0.7.4 py36_0 conda-forge; pip 9.0.1 py36_0 conda-forge; prompt_toolkit 1.0.15 py36_0 conda-forge; psi4 1.2a1.dev611+8fe3513 py36_0 psi4/label/dev; psi4-lt-mp 1.2a1.dev3 py36_0 psi4/label/dev; psi4-rt 1.2a1.dev3 py36_0 psi4/label/dev; ptyprocess 0.5.2 py36_0 conda-forge; py 1.5.2 py_0 conda-forge; pygments 2.2.0 py36_0 conda-forge; pyqt 5.6.0 py36h0386399_5 ; pytest 3.2.5 py36_0 conda-forge; python 3.6.3 1 conda-forge; python-dateutil 2.6.1 py36_0 conda-forge; pyzmq 16.0.2 py36_2 conda-forge; qt 5.6.2 5 ; qtconsole 4.3.1 py36h8f73b5b_0 ; readline 6.2 0 conda-forge; setuptools 36.6.0 py36_1 conda-forge; simint 0.7 0 psi4; simplegeneric 0.8.1 py36_0 conda-forge; sip 4.18.1 py36h51ed4ed_2 ; six 1.11.0 py36_1 conda-forge; sqlite 3.13.0 1 conda-forge; terminado 0.6 py36_0 conda-forge; testpath 0.3.1 py36_0 conda-forge; tk 8.5.19 2 conda-forge; tornado 4.5.2 py36_0 conda-forge; traitlets 4.3.2 py36_0 conda-forge; v2rdm_casscf 0.4 py36_1 psi4/label/dev; wcwidth 0.1.7 py36_0 conda-forge; webencodings 0.5 py36_0 conda-forge; wheel 0.30.0 py_1 conda-forge; widgetsnbextension 3.0.2 py36hd01bb71_1 ; xz 5.2.3 0 conda-forge; zeromq 4.2.1 1 conda-forge; zlib 1.2.11 0 conda-forge; ```; Do you have any thoughts?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385
https://github.com/psi4/psi4/issues/862#issuecomment-345402467:1378,Availability,error,error,1378,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467
https://github.com/psi4/psi4/issues/862#issuecomment-345402467:335,Deployability,install,install,335,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467
https://github.com/psi4/psi4/issues/862#issuecomment-345402467:423,Deployability,install,install,423,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467
https://github.com/psi4/psi4/issues/862#issuecomment-345402467:1142,Deployability,rolling,rolling,1142,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467
https://github.com/psi4/psi4/issues/862#issuecomment-345402467:983,Safety,avoid,avoid,983,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467
https://github.com/psi4/psi4/issues/862#issuecomment-345402467:639,Testability,test,test,639,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467
https://github.com/psi4/psi4/issues/862#issuecomment-345406827:386,Deployability,install,install,386,"> Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's ldd and psi4's (envname/lib/pythonx.x/site-packages/psi4/core.so). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Ah, I ran into this for the first time recently with another module. > Indeed, if I install psi4 the way you listed into p4env and then create another env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (sys.path.append('/path/to/p4env/lib/python3.6/site-packages/), I can import psi4 just fine. Okay, I'll give this a shot. > The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Is there anything actionable with this or do I sit tight until there's a new psi4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345406827
https://github.com/psi4/psi4/issues/862#issuecomment-345406827:470,Deployability,install,install,470,"> Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's ldd and psi4's (envname/lib/pythonx.x/site-packages/psi4/core.so). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Ah, I ran into this for the first time recently with another module. > Indeed, if I install psi4 the way you listed into p4env and then create another env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (sys.path.append('/path/to/p4env/lib/python3.6/site-packages/), I can import psi4 just fine. Okay, I'll give this a shot. > The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Is there anything actionable with this or do I sit tight until there's a new psi4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345406827
https://github.com/psi4/psi4/issues/862#issuecomment-345406827:757,Deployability,rolling,rolling,757,"> Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's ldd and psi4's (envname/lib/pythonx.x/site-packages/psi4/core.so). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Ah, I ran into this for the first time recently with another module. > Indeed, if I install psi4 the way you listed into p4env and then create another env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (sys.path.append('/path/to/p4env/lib/python3.6/site-packages/), I can import psi4 just fine. Okay, I'll give this a shot. > The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Is there anything actionable with this or do I sit tight until there's a new psi4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345406827
https://github.com/psi4/psi4/issues/862#issuecomment-345406827:981,Deployability,release,release,981,"> Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's ldd and psi4's (envname/lib/pythonx.x/site-packages/psi4/core.so). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Ah, I ran into this for the first time recently with another module. > Indeed, if I install psi4 the way you listed into p4env and then create another env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (sys.path.append('/path/to/p4env/lib/python3.6/site-packages/), I can import psi4 just fine. Okay, I'll give this a shot. > The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Is there anything actionable with this or do I sit tight until there's a new psi4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345406827
https://github.com/psi4/psi4/issues/862#issuecomment-345422371:220,Deployability,install,install,220,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371
https://github.com/psi4/psi4/issues/862#issuecomment-345422371:212,Safety,safe,safe,212,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371
https://github.com/psi4/psi4/issues/862#issuecomment-345422371:594,Testability,test,test,594,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371
https://github.com/psi4/psi4/issues/862#issuecomment-347710296:15,Deployability,update,update,15,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296
https://github.com/psi4/psi4/issues/862#issuecomment-347710296:153,Deployability,install,installing,153,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296
https://github.com/psi4/psi4/issues/862#issuecomment-347710296:405,Energy Efficiency,energy,energy,405,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296
https://github.com/psi4/psi4/issues/862#issuecomment-347710296:706,Energy Efficiency,energy,energy,706,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296
https://github.com/psi4/psi4/issues/862#issuecomment-347710296:636,Performance,optimiz,optimization,636,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296
https://github.com/psi4/psi4/issues/862#issuecomment-347710296:286,Safety,risk,risk,286,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296
https://github.com/psi4/psi4/issues/862#issuecomment-347904720:404,Deployability,install,installing,404,"> Unless your molecule has a couple hundred atoms, that does sound slow. The molecule is big, but not that big -- about 50 atoms (mostly C and H). . > You're setting PSI_SCRATCH to a local disk, not a network disk?. I started running on a remote machine, and even though I have `PSI_SCRATCH` set on my local machine, I don't have it set on the remote machine (probably didn't re-source `~/.bashrc` after installing `psi4`. However, it should be writing to local disks. I can see `psi...clean` files in the local directory, are those scratch files?. > Go ahead and run this to make sure you're getting threading. Based on the script you sent, it does appear that threading is working (see below), however, I have noticed that during my geometry optimization and single point energy that most of the time `psi4` is running with a single thread according to `top`. I ran `psi4` using `psi4 input -o output -n 12`, is that correct?. ```; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000708 NumPy: 0.000670; Time for threads 1, size 500: Psi4: 0.009402 NumPy: 0.009941; Time for threads 1, size 2000: Psi4: 1.583517 NumPy: 0.586573; Time for threads 1, size 4000: Psi4: 4.562361 NumPy: 4.587518; Threads set to 6 by Python driver.; Time for threads 6, size 200: Psi4: 0.000143 NumPy: 0.000212; Time for threads 6, size 500: Psi4: 0.001804 NumPy: 0.002355; Time for threads 6, size 2000: Psi4: 0.105539 NumPy: 0.108854; Time for threads 6, size 4000: Psi4: 0.839776 NumPy: 0.858277; NumPy@n6 : Psi4@n6 ratio (want ~1): 1.02; Psi4@n1 : Psi4@n6 ratio (want ~6): 5.43; 7fc910341000-7fc91244e000 r-xp 00000000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91244e000-7fc91264e000 ---p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91264e000-7fc912653000 r--p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc912653000-7fc91265b000 rw-p 02112000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91265b000-7fc9126",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347904720
https://github.com/psi4/psi4/issues/862#issuecomment-347904720:774,Energy Efficiency,energy,energy,774,"> Unless your molecule has a couple hundred atoms, that does sound slow. The molecule is big, but not that big -- about 50 atoms (mostly C and H). . > You're setting PSI_SCRATCH to a local disk, not a network disk?. I started running on a remote machine, and even though I have `PSI_SCRATCH` set on my local machine, I don't have it set on the remote machine (probably didn't re-source `~/.bashrc` after installing `psi4`. However, it should be writing to local disks. I can see `psi...clean` files in the local directory, are those scratch files?. > Go ahead and run this to make sure you're getting threading. Based on the script you sent, it does appear that threading is working (see below), however, I have noticed that during my geometry optimization and single point energy that most of the time `psi4` is running with a single thread according to `top`. I ran `psi4` using `psi4 input -o output -n 12`, is that correct?. ```; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000708 NumPy: 0.000670; Time for threads 1, size 500: Psi4: 0.009402 NumPy: 0.009941; Time for threads 1, size 2000: Psi4: 1.583517 NumPy: 0.586573; Time for threads 1, size 4000: Psi4: 4.562361 NumPy: 4.587518; Threads set to 6 by Python driver.; Time for threads 6, size 200: Psi4: 0.000143 NumPy: 0.000212; Time for threads 6, size 500: Psi4: 0.001804 NumPy: 0.002355; Time for threads 6, size 2000: Psi4: 0.105539 NumPy: 0.108854; Time for threads 6, size 4000: Psi4: 0.839776 NumPy: 0.858277; NumPy@n6 : Psi4@n6 ratio (want ~1): 1.02; Psi4@n1 : Psi4@n6 ratio (want ~6): 5.43; 7fc910341000-7fc91244e000 r-xp 00000000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91244e000-7fc91264e000 ---p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91264e000-7fc912653000 r--p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc912653000-7fc91265b000 rw-p 02112000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91265b000-7fc9126",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347904720
https://github.com/psi4/psi4/issues/862#issuecomment-347904720:744,Performance,optimiz,optimization,744,"> Unless your molecule has a couple hundred atoms, that does sound slow. The molecule is big, but not that big -- about 50 atoms (mostly C and H). . > You're setting PSI_SCRATCH to a local disk, not a network disk?. I started running on a remote machine, and even though I have `PSI_SCRATCH` set on my local machine, I don't have it set on the remote machine (probably didn't re-source `~/.bashrc` after installing `psi4`. However, it should be writing to local disks. I can see `psi...clean` files in the local directory, are those scratch files?. > Go ahead and run this to make sure you're getting threading. Based on the script you sent, it does appear that threading is working (see below), however, I have noticed that during my geometry optimization and single point energy that most of the time `psi4` is running with a single thread according to `top`. I ran `psi4` using `psi4 input -o output -n 12`, is that correct?. ```; Threads set to 1 by Python driver.; Time for threads 1, size 200: Psi4: 0.000708 NumPy: 0.000670; Time for threads 1, size 500: Psi4: 0.009402 NumPy: 0.009941; Time for threads 1, size 2000: Psi4: 1.583517 NumPy: 0.586573; Time for threads 1, size 4000: Psi4: 4.562361 NumPy: 4.587518; Threads set to 6 by Python driver.; Time for threads 6, size 200: Psi4: 0.000143 NumPy: 0.000212; Time for threads 6, size 500: Psi4: 0.001804 NumPy: 0.002355; Time for threads 6, size 2000: Psi4: 0.105539 NumPy: 0.108854; Time for threads 6, size 4000: Psi4: 0.839776 NumPy: 0.858277; NumPy@n6 : Psi4@n6 ratio (want ~1): 1.02; Psi4@n1 : Psi4@n6 ratio (want ~6): 5.43; 7fc910341000-7fc91244e000 r-xp 00000000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91244e000-7fc91264e000 ---p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91264e000-7fc912653000 r--p 0210d000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc912653000-7fc91265b000 rw-p 02112000 08:01 13910611 /data/davids4/anaconda3/lib/libmkl_avx.so; 7fc91265b000-7fc9126",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347904720
https://github.com/psi4/psi4/issues/862#issuecomment-347905172:146,Performance,optimiz,optimize,146,"My input file basically just has the molecule definition and then:. ```; dih_string = ""17 4 2 5 0.001""; set optking fixed_dihedral = $dih_string. optimize('B3LYP/3-21G'); ```. ...so I don't think it should be doing anything fancy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347905172
https://github.com/psi4/psi4/issues/862#issuecomment-369560595:307,Availability,error,error,307,"I have the same issue:; ```; Python 3.6.4 |Anaconda custom (64-bit)| (default, Jan 16 2018, 18:10:19) ; [GCC 7.2.0] on linux. Ubuntu 16.04.2 LTS. python -c 'import psi4; print(psi4.__version__)'; 1.1; ```. It works under terminal and `ipython ` but crashes immediately in `jupyter notebook` with `bad_cast` error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369560595
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:919,Availability,error,error,919,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:628,Deployability,update,updated,628,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:116,Integrability,depend,depending,116,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:228,Integrability,depend,depending,228,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:191,Performance,load,loaded,191,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:800,Safety,safe,safe,800,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369640226:335,Usability,simpl,simply,335,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1749,Availability,error,error,1749,"t set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr3o6Z-YaJeCQ901ywG8eMHjO8c5ks5taBxDgaJpZM4Qhais>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:188,Deployability,install,installing,188,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1449,Deployability,update,updated,1449,"t set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr3o6Z-YaJeCQ901ywG8eMHjO8c5ks5taBxDgaJpZM4Qhais>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:862,Integrability,depend,depending,862,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:980,Integrability,depend,depending,980,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:641,Performance,perform,performance,641,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:940,Performance,load,loaded,940,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1633,Safety,safe,safe,1633,"t set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr3o6Z-YaJeCQ901ywG8eMHjO8c5ks5taBxDgaJpZM4Qhais>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-369646381:1090,Usability,simpl,simply,1090,"ve PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381
https://github.com/psi4/psi4/issues/862#issuecomment-379955622:84,Availability,down,down,84,"I've been playing build bisect today on the conda package and narrowed this problem down to `-static-libstdc++`. Troublesome, since the build will have to become less static, but hardly the worst outcome. So by the time new conda packages are public again, this will be fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-379955622
https://github.com/psi4/psi4/issues/862#issuecomment-380106497:68,Availability,down,down,68,"Whoa, fantastic! These kinds of issues are extremely tough to track down, so I also transfer 5 psicoin. ; Out of interest, is this limited to `libstdc++`, or have you observed the same with `libc++`? Great detective work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380106497
https://github.com/psi4/psi4/issues/862#issuecomment-380106497:206,Safety,detect,detective,206,"Whoa, fantastic! These kinds of issues are extremely tough to track down, so I also transfer 5 psicoin. ; Out of interest, is this limited to `libstdc++`, or have you observed the same with `libc++`? Great detective work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380106497
https://github.com/psi4/psi4/issues/862#issuecomment-380133564:351,Integrability,depend,dependency,351,"Thanks. I haven't tackled Mac yet (or clang on Linux) on the conda revamp, but it's unlikely to be a problem. If I had built packages the canonical conda way (dynamic link _everything_), psi4 wouldn't have had this problem in the first place. Slowly all my ""tricks"" in the original psi4 binary (where python itself was practically the only non-static dependency) have been given up for good technical reasons in favor of system packages from the conda ecosystem. On Mac (clang), I never implemented those tricks in the first place, so it didn't hit this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-380133564
https://github.com/psi4/psi4/issues/862#issuecomment-381024713:59,Deployability,release,release,59,This has been identified and will be fixed in the Psi4 1.2 release. This happens in custom build scripts and no changes are required on GitHub.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-381024713
https://github.com/psi4/psi4/issues/863#issuecomment-345250225:149,Deployability,upgrade,upgrade,149,After chatting with the LibXC dev's I think we can do a few workarounds so that LibXC 4 works for us. If I get a second I might work on getting that upgrade through.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345250225
https://github.com/psi4/psi4/issues/863#issuecomment-345263623:52,Safety,detect,detect,52,"@susilehtola Ah, I see thank you. Is there a way to detect this in LibXC 4.0?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345263623
https://github.com/psi4/psi4/issues/863#issuecomment-345264267:0,Safety,Detect,Detect,0,Detect what? Libxc 4 has SCAN.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345264267
https://github.com/psi4/psi4/issues/863#issuecomment-345265139:0,Safety,Detect,Detect,0,Detect non-operational functionals ahead of time.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345265139
https://github.com/psi4/psi4/issues/863#issuecomment-345267250:230,Deployability,release,release,230,Not really. Libxc4 doesn't have anything that crashes. I've backported the SCAN implementation to libxc 3 at; https://gitlab.com/libxc/libxc/commit/96568b1dd36130df57d19f7037fab7afecde48a4; as it appears there's going to be a new release in that series soon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345267250
https://github.com/psi4/psi4/issues/863#issuecomment-345682809:25,Deployability,release,released,25,"libxc 3.0.1 has now been released, which includes my backport of SCAN correlation. Still, I would recommend migrating to libxc 4, where the functional implementations are autogenerated using Maple.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345682809
https://github.com/psi4/psi4/issues/863#issuecomment-345706660:38,Availability,down,downloaded,38,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660
https://github.com/psi4/psi4/issues/863#issuecomment-345706660:286,Availability,fault,fault,286,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660
https://github.com/psi4/psi4/issues/863#issuecomment-345706660:141,Deployability,install,installation,141,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660
https://github.com/psi4/psi4/issues/863#issuecomment-345706660:335,Energy Efficiency,Energy,Energy,335,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660
https://github.com/psi4/psi4/issues/863#issuecomment-345775474:34,Integrability,depend,dependency,34,"odd, I know of the increased grid dependency from colleagues. But both qchem and Grimme's manual SCAN implementation in Turbomole do not seem to have NaN issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345775474
https://github.com/psi4/psi4/issues/863#issuecomment-345783270:29,Deployability,update,update,29,"@hokru, psi won't be able to update to 3.0.1 in general because the cmake buildsys wasn't backported. But so long as you can get a v3 `libxc.a` or `.so` out of libtools and stuff things in the right place, the ""hand update"" you describe should be perfectly legit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345783270
https://github.com/psi4/psi4/issues/863#issuecomment-345783270:216,Deployability,update,update,216,"@hokru, psi won't be able to update to 3.0.1 in general because the cmake buildsys wasn't backported. But so long as you can get a v3 `libxc.a` or `.so` out of libtools and stuff things in the right place, the ""hand update"" you describe should be perfectly legit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345783270
https://github.com/psi4/psi4/issues/863#issuecomment-345818205:108,Deployability,integrat,integration,108,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205
https://github.com/psi4/psi4/issues/863#issuecomment-345818205:108,Integrability,integrat,integration,108,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205
https://github.com/psi4/psi4/issues/863#issuecomment-345818205:130,Safety,avoid,avoid,130,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205
https://github.com/psi4/psi4/issues/863#issuecomment-345818613:65,Deployability,update,update,65,@loriab aren't you still using your own libxc repo? You can just update those files to 3.0.1...?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818613
https://github.com/psi4/psi4/issues/863#issuecomment-346123658:174,Availability,down,downstream,174,"@susilehtola Actually after thinking about it, shouldn't LibXC do the `nan` scan and filter out these values? The user should filter through the input set for speed, but the downstream program probably shouldn't be responsible for output massaging as this will lead to *everyone* using LibXC fiddling with this (in probably different manners) when it should be fixed in a single place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-346123658
https://github.com/psi4/psi4/pull/865#issuecomment-347565056:61,Deployability,update,updates,61,"@loriab I've merged your PR into DEShawResearch/sns-mp2, and updates the testing code to work better outside of desres internal infrastructure (no `import garden)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865#issuecomment-347565056
https://github.com/psi4/psi4/pull/865#issuecomment-347565056:73,Testability,test,testing,73,"@loriab I've merged your PR into DEShawResearch/sns-mp2, and updates the testing code to work better outside of desres internal infrastructure (no `import garden)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/865#issuecomment-347565056
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:380,Availability,avail,available,380,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:299,Deployability,install,install,299,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:38,Testability,test,testing,38,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:68,Testability,test,tests,68,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:134,Testability,test,testing,134,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:282,Testability,test,tests,282,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:326,Testability,test,test,326,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:344,Testability,test,tests,344,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:372,Testability,test,testing,372,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/pull/866#issuecomment-350503264:481,Testability,test,tests,481,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264
https://github.com/psi4/psi4/issues/867#issuecomment-346631515:53,Energy Efficiency,energy,energy,53,"You can run it like this:; ```; set scf_type direct; energy('scf',df_functional='wb97x'). ```; But first I would carefully compare if the gradient is actually OK.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346631515
https://github.com/psi4/psi4/issues/867#issuecomment-346646875:352,Testability,test,test,352,"I had a typo! You did maybe only HF. ```; import psi4. psi4.geometry('H -.5 0 0\nH .5 0 0'). set global {; basis def2-SVP; scf_type direct; }. num=gradient('scf',dft_functional='wb97x',dertype=0); ana=gradient('scf',dft_functional='wb97x',dertype=1); compare_matrices(ana, num, 5, ""LR grad""). ```; That seems to pass with 5 decimals at least.; I would test a larger molecule, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346646875
https://github.com/psi4/psi4/issues/867#issuecomment-346668004:132,Availability,error,error,132,"The reason its bouncing is we are not entirely sure the range-seperatated gradients are correct. This admittedly could use a better error message. On `psi4.gradient('scf/3-21g', df_functional='wb97x', dertype=1)` I think this shows a need to scan for valid `kwargs`. This could be difficult to do however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668004
https://github.com/psi4/psi4/issues/867#issuecomment-346668004:138,Integrability,message,message,138,"The reason its bouncing is we are not entirely sure the range-seperatated gradients are correct. This admittedly could use a better error message. On `psi4.gradient('scf/3-21g', df_functional='wb97x', dertype=1)` I think this shows a need to scan for valid `kwargs`. This could be difficult to do however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668004
https://github.com/psi4/psi4/issues/867#issuecomment-346668022:27,Testability,test,test,27,@hokru Thanks! I'll try to test with bigger molecules.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668022
https://github.com/psi4/psi4/issues/867#issuecomment-347016473:41,Safety,safe,safety,41,"So to reiterate, you are circumventing a safety feature of Psi4 this way. The analytical gradients are very likely wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-347016473
https://github.com/psi4/psi4/issues/867#issuecomment-351024635:548,Availability,error,error,548,"@hokru and @dgasmith . I tested the analytic and numeric gradients with 100 molecules using wB97X-D and B3LYP (for reference). ![anal_vs_grad_wb97x-d](https://user-images.githubusercontent.com/2469715/33882176-8d09a24e-df37-11e7-9aee-3a6a4530d4a9.png). Sample: 4512; MaxAE 0.002127; MSE -0.000000; MAE 0.000039; RMSE 0.000089. ![anal_vs_grad_b3lyp](https://user-images.githubusercontent.com/2469715/33882181-8f7b6972-df37-11e7-8377-358eb436c824.png). Sample: 4512; MaxAE 0.000631; MSE -0.000000; MAE 0.000016; RMSE 0.000031. There is no systematic error in both cases, but wB97X-D results are more skewed. Do you think, it is just numerics or indication of a more serious problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351024635
https://github.com/psi4/psi4/issues/867#issuecomment-351024635:25,Testability,test,tested,25,"@hokru and @dgasmith . I tested the analytic and numeric gradients with 100 molecules using wB97X-D and B3LYP (for reference). ![anal_vs_grad_wb97x-d](https://user-images.githubusercontent.com/2469715/33882176-8d09a24e-df37-11e7-9aee-3a6a4530d4a9.png). Sample: 4512; MaxAE 0.002127; MSE -0.000000; MAE 0.000039; RMSE 0.000089. ![anal_vs_grad_b3lyp](https://user-images.githubusercontent.com/2469715/33882181-8f7b6972-df37-11e7-8377-358eb436c824.png). Sample: 4512; MaxAE 0.000631; MSE -0.000000; MAE 0.000016; RMSE 0.000031. There is no systematic error in both cases, but wB97X-D results are more skewed. Do you think, it is just numerics or indication of a more serious problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351024635
https://github.com/psi4/psi4/issues/867#issuecomment-351148891:235,Availability,error,error,235,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891
https://github.com/psi4/psi4/issues/867#issuecomment-351148891:584,Modifiability,rewrite,rewrite,584,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891
https://github.com/psi4/psi4/issues/867#issuecomment-351148891:3848,Safety,safe,safety,3848," Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.01448679231786; 2 0.00000000000000 0.00000000000000 0.00650780527423; 3 0.00000000000000 0.00000000000000 -0.01467048755060; 4 -0.00257410227128 0.00000000000000 -0.00298989706945; 5 0.00257410227128 0.00000000000000 -0.00298989706945; 6 -0.00015309842746 -0.00478900518843 -0.00008607897565; 7 -0.00015309842746 0.00478900518843 -0.00008607897565; 8 0.00015309842746 0.00478900518843 -0.00008607897565; 9 0.00015309842746 -0.00478900518843 -0.00008607897565; ```. and thse for wB97X-D:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02530663408790; 2 0.00000000000000 -0.00000000000000 0.06073552407916; 3 0.00000000000000 -0.00000000000000 -0.01910268412068; 4 0.00053727899697 0.00000000000000 0.00185002606365; 5 -0.00053727899697 -0.00000000000000 0.00185002606365; 6 -0.00554076664310 -0.01384288220048 -0.00500656449972; 7 -0.00554076664310 0.01384288220048 -0.00500656449972; 8 0.00554076664310 0.01384288220048 -0.00500656449972; 9 0.00554076664310 -0.01384288220048 -0.00500656449972. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 -0.02530648968490; 2 0.00000000000000 0.00000000000000 0.06073503270434; 3 0.00000000000000 0.00000000000000 -0.01910251844802; 4 0.00053728999275 0.00000000000000 0.00185009324839; 5 -0.00053728999275 0.00000000000000 0.00185009324839; 6 -0.00554074931312 -0.01384287705163 -0.00500655276705; 7 -0.00554074931312 0.01384287705163 -0.00500655276705; 8 0.00554074931312 0.01384287705163 -0.00500655276705; 9 0.00554074931312 -0.01384287705163 -0.00500655276705; ```. I'd actually expect slightly better agreement out of a 5 point finite difference stencil, but I'm willing to say that the gradient bug was fixed and we just never removed the safety check. I know I'm asking you to go way back here, @robparrish , but is this consistent with your memory of this code development?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891
https://github.com/psi4/psi4/issues/867#issuecomment-351148891:77,Testability,benchmark,benchmarks,77,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891
https://github.com/psi4/psi4/issues/867#issuecomment-351148891:264,Testability,test,tests,264,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:40,Availability,error,errors,40,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:1138,Availability,error,error,1138,"ymmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.52915989; > H 2.41269553 -1.74021190 -3.52915989; > units bohr; > }; >; > set {; > basis 6-3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:1502,Modifiability,rewrite,rewrite,1502,"ably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.52915989; > H 2.41269553 -1.74021190 -3.52915989; > units bohr; > }; >; > set {; > basis 6-31G; > d_convergence 11; > points 5; > }; >; > anl = gradient('scf', df_functional='wB97X-D', dertype=1); > num = gradient('scf', df_functional='wB97X-D', dertype=0); >; > anl.print_out(); > num.print_out(); >; > Yields the following analytic/numerical grads for B3LYP:; >; > ## Total Gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 -0.00000000000000 0.01448961501491; > 2 0.00000000000000 0.00000000000000 0.00650495770571",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:4968,Safety,safe,safety,4968,"8843 -0.00008607897565; > 9 0.00015309842746 -0.00478900518843 -0.00008607897565; >; > and thse for wB97X-D:; >; > ## Total Gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 0.00000000000000 -0.02530663408790; > 2 0.00000000000000 -0.00000000000000 0.06073552407916; > 3 0.00000000000000 -0.00000000000000 -0.01910268412068; > 4 0.00053727899697 0.00000000000000 0.00185002606365; > 5 -0.00053727899697 -0.00000000000000 0.00185002606365; > 6 -0.00554076664310 -0.01384288220048 -0.00500656449972; > 7 -0.00554076664310 0.01384288220048 -0.00500656449972; > 8 0.00554076664310 0.01384288220048 -0.00500656449972; > 9 0.00554076664310 -0.01384288220048 -0.00500656449972; >; >; >; > ## F-D gradient (Symmetry 0) ##; > Irrep: 1 Size: 9 x 3; >; > 1 2 3; >; > 1 0.00000000000000 0.00000000000000 -0.02530648968490; > 2 0.00000000000000 0.00000000000000 0.06073503270434; > 3 0.00000000000000 0.00000000000000 -0.01910251844802; > 4 0.00053728999275 0.00000000000000 0.00185009324839; > 5 -0.00053728999275 0.00000000000000 0.00185009324839; > 6 -0.00554074931312 -0.01384287705163 -0.00500655276705; > 7 -0.00554074931312 0.01384287705163 -0.00500655276705; > 8 0.00554074931312 0.01384287705163 -0.00500655276705; > 9 0.00554074931312 -0.01384287705163 -0.00500655276705; >; > I'd actually expect slightly better agreement out of a 5 point finite; > difference stencil, but I'm willing to say that the gradient bug was fixed; > and we just never removed the safety check. I know I'm asking you to go way; > back here, @robparrish <https://github.com/robparrish> , but is this; > consistent with your memory of this code development?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351148891>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdl5lqVefV1QILD-ityM84jvv2zgUks5s_smZgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:436,Testability,test,tests,436,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:702,Testability,test,test,702,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:939,Testability,benchmark,benchmarks,939,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351166112:1167,Testability,test,tests,1167,"hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.52915989; > H 2.41269553 -1.74021190 -3.52915989; > units bohr; > }; >; > set {; > basis 6-31G; > d_convergence 11; > points 5; > }; >; > anl = gradient('scf', df_functional='wB97X-D', dertype=1); > num = gradient('",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112
https://github.com/psi4/psi4/issues/867#issuecomment-351180986:327,Integrability,rout,routine,327,I think that a little noise in the gradients is inevitable with so many moving parts; that's why we have calls like [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275) for all (I think) gradients throughout the code. It sounds like we just need to consider non-Abelian symmetry in this routine to fix the issue you're describing,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351180986
https://github.com/psi4/psi4/issues/867#issuecomment-351195906:244,Availability,error,error,244,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906
https://github.com/psi4/psi4/issues/867#issuecomment-351195906:726,Integrability,rout,routine,726,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906
https://github.com/psi4/psi4/issues/867#issuecomment-351195906:126,Modifiability,extend,extended,126,"Yes, the symmetrize call is nice and should help cleanup any inevitable; small numerical noise. Would be great if it could be extended to; non-Abelian point groups! But the noise @wardence is seeing looks a bit; more serious than just roundoff error. (Sorry to tease an issue before it; gets posted.). On Tue, Dec 12, 2017 at 3:17 PM, Andy Simmonett <notifications@github.com>; wrote:. > I think that a little noise in the gradients is inevitable with so many; > moving parts; that's why we have calls like this; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/scf_grad.cc#L274-L275>; > for all (I think) gradients throughout the code. It sounds like we just; > need to consider non-Abelian symmetry in this routine to fix the issue; > you're describing; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/867#issuecomment-351180986>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdgWeF2gB7_UhJZNjJt2DDz91wdahks5s_t9IgaJpZM4QonpI>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351195906
https://github.com/psi4/psi4/issues/867#issuecomment-351389916:23,Testability,test,tests,23,"@CDSherrill, I did the tests with the 3-point finite differences and the default convergence. @andysim, your input has a misspelled keyword `df_functional` in stead of `dft_functional`. The same mistake I had, which runs just HF, as @hokru pointed out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351389916
https://github.com/psi4/psi4/issues/867#issuecomment-351404019:523,Integrability,rout,route,523,"Firstly, wow, nice doing this benchmark. @andysim wrote:; > The direct range-separated code worked fine, confirming that the derivative integrals were correct. You are talking about the complete direct RSF gradient code? because it has also been disabled in the driver. The manual only ever explicitly told that the DF gradient code is not working, i believe. I actually asked about this once in the forum: http://forum.psicode.org/t/lrc-dft-gradients-time-plan/140/4 ; Basically my test back then caused me to suggest the route (direct and not DF gradients) @raimis is trying out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351404019
https://github.com/psi4/psi4/issues/867#issuecomment-351404019:30,Testability,benchmark,benchmark,30,"Firstly, wow, nice doing this benchmark. @andysim wrote:; > The direct range-separated code worked fine, confirming that the derivative integrals were correct. You are talking about the complete direct RSF gradient code? because it has also been disabled in the driver. The manual only ever explicitly told that the DF gradient code is not working, i believe. I actually asked about this once in the forum: http://forum.psicode.org/t/lrc-dft-gradients-time-plan/140/4 ; Basically my test back then caused me to suggest the route (direct and not DF gradients) @raimis is trying out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351404019
https://github.com/psi4/psi4/issues/867#issuecomment-351404019:483,Testability,test,test,483,"Firstly, wow, nice doing this benchmark. @andysim wrote:; > The direct range-separated code worked fine, confirming that the derivative integrals were correct. You are talking about the complete direct RSF gradient code? because it has also been disabled in the driver. The manual only ever explicitly told that the DF gradient code is not working, i believe. I actually asked about this once in the forum: http://forum.psicode.org/t/lrc-dft-gradients-time-plan/140/4 ; Basically my test back then caused me to suggest the route (direct and not DF gradients) @raimis is trying out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351404019
https://github.com/psi4/psi4/issues/867#issuecomment-351422094:2821,Availability,fault,faulty,2821,"4218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.00081633836046; 5 0.00080665975793 0.00000000000000 -0.00081633836046; 6 -0.00151005119180 -0.00585353047813 -0.00140640315084; 7 -0.00151005119180 0.00585353047813 -0.00140640315084; 8 0.00151005119180 0.00585353047813 -0.00140640315084; 9 0.00151005119180 -0.00585353047813 -0.00140640315084; ```; It does look like we can re-enable the exact integral methods in the driver, but the DF bug is still present. Thankfully DF cannot be run without code modifications, so users will never see that faulty DF gradients. I bet it's an easy one to figure out - should be a good candidate for the next hackathon unless somebody gets to it before then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094
https://github.com/psi4/psi4/issues/867#issuecomment-351422094:1341,Safety,safe,safety,1341,"0000000000 0.01566508504775; 3 -0.00000000000000 -0.00000000000000 -0.01592565050467; 4 -0.00087629381335 -0.00000000000000 -0.00080744525748; 5 0.00087629381335 0.00000000000000 -0.00080744525748; 6 -0.00150497205043 -0.00584776113735 -0.00140352222961; 7 -0.00150497205043 0.00584776113735 -0.00140352222961; 8 0.00150497205043 0.00584776113735 -0.00140352222961; 9 0.00150497205043 -0.00584776113735 -0.00140352222961. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759155743061; 2 0.00000000000000 0.00000000000000 0.01575348711316; 3 0.00000000000000 0.00000000000000 -0.01604218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.0008163383",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094
https://github.com/psi4/psi4/issues/867#issuecomment-351422094:1475,Usability,clear,clearly,1475,"9381335 0.00000000000000 -0.00080744525748; 6 -0.00150497205043 -0.00584776113735 -0.00140352222961; 7 -0.00150497205043 0.00584776113735 -0.00140352222961; 8 0.00150497205043 0.00584776113735 -0.00140352222961; 9 0.00150497205043 -0.00584776113735 -0.00140352222961. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759155743061; 2 0.00000000000000 0.00000000000000 0.01575348711316; 3 0.00000000000000 0.00000000000000 -0.01604218334710; 4 -0.00080458046709 0.00000000000000 -0.00083578684600; 5 0.00080458046709 0.00000000000000 -0.00083578684600; 6 -0.00151233457098 -0.00586107718524 -0.00140782187617; 7 -0.00151233457098 0.00586107718524 -0.00140782187617; 8 0.00151233457098 0.00586107718524 -0.00140782187617; 9 0.00151233457098 -0.00586107718524 -0.00140782187617; ```; By disabling [this safety check](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/scfgrad/jk_grad.cc#L185) I can make the DF version run, which is clearly wrong:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 -0.34802063969605; 2 0.00000000000000 -0.00000000000000 0.51455817020357; 3 0.00000000000000 0.00000000000000 0.04263207395510; 4 -0.03687141420968 -0.00000000000000 -0.01196133113197; 5 0.03687141420968 0.00000000000000 -0.01196133113197; 6 -0.06383887601370 -0.11505211473982 -0.04636560808797; 7 -0.06383887601370 0.11505211473982 -0.04636560808797; 8 0.06383887601370 0.11505211473982 -0.04636560808797; 9 0.06383887601370 -0.11505211473982 -0.04636560808797. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 0.00000000000000 0.00759612379921; 2 0.00000000000000 0.00000000000000 0.01575853518631; 3 0.00000000000000 0.00000000000000 -0.01609636966124; 4 -0.00080665975793 0.00000000000000 -0.00081633836046; 5 0.00080665975793 0.00000000000000 -0.00081633836046; 6 -0.00151005119180 -0.00585353047813 -0.00140640315084; 7 -0.00151005119180 0.0058535304781",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351422094
https://github.com/psi4/psi4/issues/867#issuecomment-396931668:171,Availability,error,error,171,How awful would it be if did DF SCF iterations with a direct gradient evaluation? I poured over the range-separated gradient code a few times and have not figured out the error.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-396931668
https://github.com/psi4/psi4/issues/868#issuecomment-347519616:60,Deployability,update,update,60,"Btw does the x2c code actually do the exact treatment, i.e. update the transformation matrices at (every) iteration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-347519616
https://github.com/psi4/psi4/issues/868#issuecomment-869207320:162,Integrability,depend,dependencies,162,"Carrying forward from #2201:. Quoth Francesco:; > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly. Quoth Susi:; > This is an inherent drawback of X2C which employs a restricted minimal balance basis. The orbital basis set of non-relativistic theory is the large component set that depicts the electronic part of the relativistic wave function, and the small component set is obtained by acting on the large component with something that looks like `sigma . p` that has the classical three-momentum operator which is essentially nabla. This approach becomes inefficient when the orbital basis is large; this is why four-component codes favor the use of separate basis sets for the small and large components.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-869207320
https://github.com/psi4/psi4/issues/868#issuecomment-869207320:497,Integrability,depend,dependency,497,"Carrying forward from #2201:. Quoth Francesco:; > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly. Quoth Susi:; > This is an inherent drawback of X2C which employs a restricted minimal balance basis. The orbital basis set of non-relativistic theory is the large component set that depicts the electronic part of the relativistic wave function, and the small component set is obtained by acting on the large component with something that looks like `sigma . p` that has the classical three-momentum operator which is essentially nabla. This approach becomes inefficient when the orbital basis is large; this is why four-component codes favor the use of separate basis sets for the small and large components.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-869207320
https://github.com/psi4/psi4/issues/868#issuecomment-869207320:267,Usability,simpl,simpler,267,"Carrying forward from #2201:. Quoth Francesco:; > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly. Quoth Susi:; > This is an inherent drawback of X2C which employs a restricted minimal balance basis. The orbital basis set of non-relativistic theory is the large component set that depicts the electronic part of the relativistic wave function, and the small component set is obtained by acting on the large component with something that looks like `sigma . p` that has the classical three-momentum operator which is essentially nabla. This approach becomes inefficient when the orbital basis is large; this is why four-component codes favor the use of separate basis sets for the small and large components.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-869207320
https://github.com/psi4/psi4/pull/869#issuecomment-349436402:440,Availability,ping,pinged,440,"Switched over Psi4 grid generation to `libgg`. Looks like about a 4x speedup in general for collocation generation. However, it spends ~65% of the time transposing the collocation matrices back to Psi4 order otherwise this would be killer (~12x faster). I can look at a few other transpose options in `libgg`, but it would be tough to spit them out correctly. Still helps dramatically for small molecules/bases and large grids. As a note I pinged TBLIS [here](https://github.com/devinamatthews/tblis/issues/13) seeing if they would implement the common grid operation `A_ij \epsilon_j B_jk -> C_ik`. Looks like they have thought about it, but not yet in. Could be a great use case to pull TBLIS in. I know @amjames or @schiebermc might need it soon. Updated the TODO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-349436402
https://github.com/psi4/psi4/pull/869#issuecomment-349436402:750,Deployability,Update,Updated,750,"Switched over Psi4 grid generation to `libgg`. Looks like about a 4x speedup in general for collocation generation. However, it spends ~65% of the time transposing the collocation matrices back to Psi4 order otherwise this would be killer (~12x faster). I can look at a few other transpose options in `libgg`, but it would be tough to spit them out correctly. Still helps dramatically for small molecules/bases and large grids. As a note I pinged TBLIS [here](https://github.com/devinamatthews/tblis/issues/13) seeing if they would implement the common grid operation `A_ij \epsilon_j B_jk -> C_ik`. Looks like they have thought about it, but not yet in. Could be a great use case to pull TBLIS in. I know @amjames or @schiebermc might need it soon. Updated the TODO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-349436402
https://github.com/psi4/psi4/pull/869#issuecomment-350035658:73,Availability,down,down,73,"This is ready for review. For our DLDF test case the overall timing went down from 52 to 28 seconds. We are still spending ~11 seconds transposing our grids, eliminating this could push the time down to ~17 seconds. Hybrid DFT K cost will swamp these changes at larger sizes, but for small computations or GGA you should see quite a bit of benefit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-350035658
https://github.com/psi4/psi4/pull/869#issuecomment-350035658:195,Availability,down,down,195,"This is ready for review. For our DLDF test case the overall timing went down from 52 to 28 seconds. We are still spending ~11 seconds transposing our grids, eliminating this could push the time down to ~17 seconds. Hybrid DFT K cost will swamp these changes at larger sizes, but for small computations or GGA you should see quite a bit of benefit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-350035658
https://github.com/psi4/psi4/pull/869#issuecomment-350035658:39,Testability,test,test,39,"This is ready for review. For our DLDF test case the overall timing went down from 52 to 28 seconds. We are still spending ~11 seconds transposing our grids, eliminating this could push the time down to ~17 seconds. Hybrid DFT K cost will swamp these changes at larger sizes, but for small computations or GGA you should see quite a bit of benefit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-350035658
https://github.com/psi4/psi4/pull/869#issuecomment-351577847:31,Deployability,update,updated,31,"@loriab Roger that. Everything updated and gau2grid re-pinned. Ill probably do another release or two before Psi4 1.2(?) ships, but I can update those versions pins then. @psi4/maintainers This is ready to go. Id like to get this out soon so that we can start hammering on the library. There should be no bugs, but it's a low-level change so best to really check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-351577847
https://github.com/psi4/psi4/pull/869#issuecomment-351577847:87,Deployability,release,release,87,"@loriab Roger that. Everything updated and gau2grid re-pinned. Ill probably do another release or two before Psi4 1.2(?) ships, but I can update those versions pins then. @psi4/maintainers This is ready to go. Id like to get this out soon so that we can start hammering on the library. There should be no bugs, but it's a low-level change so best to really check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-351577847
https://github.com/psi4/psi4/pull/869#issuecomment-351577847:138,Deployability,update,update,138,"@loriab Roger that. Everything updated and gau2grid re-pinned. Ill probably do another release or two before Psi4 1.2(?) ships, but I can update those versions pins then. @psi4/maintainers This is ready to go. Id like to get this out soon so that we can start hammering on the library. There should be no bugs, but it's a low-level change so best to really check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-351577847
https://github.com/psi4/psi4/issues/870#issuecomment-347998008:626,Energy Efficiency,energy,energy,626,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008
https://github.com/psi4/psi4/issues/870#issuecomment-347998008:323,Integrability,interface,interface,323,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008
https://github.com/psi4/psi4/issues/870#issuecomment-347998008:730,Modifiability,inherit,inheritance,730,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008
https://github.com/psi4/psi4/issues/870#issuecomment-347998008:12,Security,access,access,12,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008
https://github.com/psi4/psi4/issues/870#issuecomment-347998008:1238,Security,access,access,1238,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008
https://github.com/psi4/psi4/issues/870#issuecomment-347998008:907,Testability,log,logic,907,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008
https://github.com/psi4/psi4/issues/870#issuecomment-348128880:402,Safety,detect,detection,402,"Ah wonderful! Yes, `sup.set_vv10_b()` is what I was looking for. I also (finally) found [api/psi4.core.SuperFunctional](http://www.psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html); for a good overview what is accessible. DFT-NL (nl=non-local) is just like DFT-D, where the _b_ parameter of the VV10 kernel is fitted to an arbitrary functional. Ideally I would like to add an automatic detection similar to the -D dashparam in superfuncs.py to an eventual PR.; Though I am wondering if it is a good idea to piggy-back on the -D part and extent it to -NL or to make something separate. It would make sense to add the non-local dispersion to the 'empirical' dispersion. This is mostly a design choice, i suppose. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348128880
https://github.com/psi4/psi4/issues/870#issuecomment-348128880:226,Security,access,accessible,226,"Ah wonderful! Yes, `sup.set_vv10_b()` is what I was looking for. I also (finally) found [api/psi4.core.SuperFunctional](http://www.psicode.org/psi4manual/master/api/psi4.core.SuperFunctional.html); for a good overview what is accessible. DFT-NL (nl=non-local) is just like DFT-D, where the _b_ parameter of the VV10 kernel is fitted to an arbitrary functional. Ideally I would like to add an automatic detection similar to the -D dashparam in superfuncs.py to an eventual PR.; Though I am wondering if it is a good idea to piggy-back on the -D part and extent it to -NL or to make something separate. It would make sense to add the non-local dispersion to the 'empirical' dispersion. This is mostly a design choice, i suppose. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348128880
https://github.com/psi4/psi4/issues/870#issuecomment-348223488:110,Safety,detect,detected,110,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488
https://github.com/psi4/psi4/issues/870#issuecomment-348223488:294,Safety,detect,detection,294,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488
https://github.com/psi4/psi4/issues/870#issuecomment-348223488:76,Security,access,accessible,76,"Hmm, your right it might be good to doc the SuperFunctional class somewhere accessible. VV10 is automatically detected for full LibXC superfunctionals which contain VV10 parameters. However, -D and -NL and disparate enough that they likely need to be handled separately. What kind of automatic detection where you thinking about? Tagging `-V` to a functional will not work unless fit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348223488
https://github.com/psi4/psi4/issues/870#issuecomment-348251623:157,Availability,error,error,157,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623
https://github.com/psi4/psi4/issues/870#issuecomment-348251623:532,Safety,avoid,avoid,532,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623
https://github.com/psi4/psi4/issues/870#issuecomment-348251623:577,Safety,detect,detection,577,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623
https://github.com/psi4/psi4/issues/870#issuecomment-348251623:651,Usability,simpl,simple,651,"The handling for the user should be the same as for -D3/D3BJ etc. Add it to the functional name and psi4 handles finding the correct parameters or throws an error. I haven't gone through with it, but adding another case for the multiple -D options seems OK. So in the end the NL parameters are added to the list of D parameters here:; ```; dashcoeff = {; 'nl:{; 'tpss' : {nl_b: 1.23}; }; 'D2: ...; ```; [dashparam.py]( https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/dashparam.py; ); It could be an annoying extra case to avoid actually running dftd3, but the ""dash"" detection and general infrastructure is really nice. --; regarding doc, a simple link within http://psicode.org/psi4manual/master/dft.html#advanced-functional-use-and-manipulation would probably suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-348251623
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:434,Availability,error,error,434,"We updated to a new nuclear signature so the two are getting out of sync. Not completely sure this is fixable as you are pulling addons and Psi4 from different locations. . -Daniel Smith; Sent from my iPhone. . > On Nov 29, 2017, at 11:17, shannonhouck <notifications@github.com> wrote:; > ; > When trying to compile Psi4 with Miniconda3 using the keywords generated by psi4-path-advisor in the development environment, the following error is produced:; > ; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc: In function ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:847,Availability,error,error,847,"We updated to a new nuclear signature so the two are getting out of sync. Not completely sure this is fixable as you are pulling addons and Psi4 from different locations. . -Daniel Smith; Sent from my iPhone. . > On Nov 29, 2017, at 11:17, shannonhouck <notifications@github.com> wrote:; > ; > When trying to compile Psi4 with Miniconda3 using the keywords generated by psi4-path-advisor in the development environment, the following error is produced:; > ; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc: In function ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1511,Availability,Error,Error,1511,":buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1575,Availability,Error,Error,1575,"CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1605,Availability,Error,Error,1605,"CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1684,Availability,Error,Error,1684,"CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1739,Availability,Error,Error,1739," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:1766,Availability,Error,Error,1766," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2036,Availability,down,down,2036," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2409,Availability,error,error,2409," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:3,Deployability,update,updated,3,"We updated to a new nuclear signature so the two are getting out of sync. Not completely sure this is fixable as you are pulling addons and Psi4 from different locations. . -Daniel Smith; Sent from my iPhone. . > On Nov 29, 2017, at 11:17, shannonhouck <notifications@github.com> wrote:; > ; > When trying to compile Psi4 with Miniconda3 using the keywords generated by psi4-path-advisor in the development environment, the following error is produced:; > ; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc: In function ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2385,Deployability,update,updated,2385," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2163,Performance,CACHE,CACHE,2163," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2254,Performance,CACHE,CACHE,2254," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2419,Testability,log,log,2419," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2472,Testability,log,log,2472," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347970165:2491,Testability,log,log,2491," CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and @robertodr have narrowed the issue down to the CheMPS2 module, which is set to ON in psi4DepsCache.cmake by default; changing it to; > ; > set(ENABLE_CheMPS2 OFF CACHE BOOL """"); > set(CheMPS2_DIR ""/home/shouck/miniconda3/envs/p4dev/share/cmake/CheMPS2"" CACHE PATH """"); > allows Psi4 to compile without issues. I'm not sure, but it seems like maybe a function was changed and then not updated in CheMPS2. The error and log files are attached. Thank you!; > ; > CMakeError.log; > CMakeOutput.log; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165
https://github.com/psi4/psi4/issues/871#issuecomment-347979916:204,Availability,avail,available,204,"Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using `conda update chemps2` doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3. I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347979916
https://github.com/psi4/psi4/issues/871#issuecomment-347979916:171,Deployability,update,update,171,"Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using `conda update chemps2` doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3. I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347979916
https://github.com/psi4/psi4/issues/871#issuecomment-347979916:214,Deployability,update,updates,214,"Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using `conda update chemps2` doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3. I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347979916
https://github.com/psi4/psi4/issues/871#issuecomment-347988321:557,Availability,avail,available,557,"Yes, if you were pulling from Conda everything would be fine. Conda is only updated periodically on the /dev channel, so its natural that psi4/psi4:master will get ahead of those built binaries. I usually recommend going sans addons while dev’ing unless you need them. > On Nov 29, 2017, at 12:05 PM, shannonhouck <notifications@github.com> wrote:; > ; > Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using conda update chemps2 doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3.; > ; > I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/871#issuecomment-347979916>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcS5FvbqgbVG1GK3u1ZsrwtiI714aks5s7bjvgaJpZM4QvfAl>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347988321
https://github.com/psi4/psi4/issues/871#issuecomment-347988321:76,Deployability,update,updated,76,"Yes, if you were pulling from Conda everything would be fine. Conda is only updated periodically on the /dev channel, so its natural that psi4/psi4:master will get ahead of those built binaries. I usually recommend going sans addons while dev’ing unless you need them. > On Nov 29, 2017, at 12:05 PM, shannonhouck <notifications@github.com> wrote:; > ; > Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using conda update chemps2 doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3.; > ; > I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/871#issuecomment-347979916>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcS5FvbqgbVG1GK3u1ZsrwtiI714aks5s7bjvgaJpZM4QvfAl>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347988321
https://github.com/psi4/psi4/issues/871#issuecomment-347988321:525,Deployability,update,update,525,"Yes, if you were pulling from Conda everything would be fine. Conda is only updated periodically on the /dev channel, so its natural that psi4/psi4:master will get ahead of those built binaries. I usually recommend going sans addons while dev’ing unless you need them. > On Nov 29, 2017, at 12:05 PM, shannonhouck <notifications@github.com> wrote:; > ; > Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using conda update chemps2 doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3.; > ; > I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/871#issuecomment-347979916>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcS5FvbqgbVG1GK3u1ZsrwtiI714aks5s7bjvgaJpZM4QvfAl>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347988321
https://github.com/psi4/psi4/issues/871#issuecomment-347988321:567,Deployability,update,updates,567,"Yes, if you were pulling from Conda everything would be fine. Conda is only updated periodically on the /dev channel, so its natural that psi4/psi4:master will get ahead of those built binaries. I usually recommend going sans addons while dev’ing unless you need them. > On Nov 29, 2017, at 12:05 PM, shannonhouck <notifications@github.com> wrote:; > ; > Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using conda update chemps2 doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3.; > ; > I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/871#issuecomment-347979916>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcS5FvbqgbVG1GK3u1ZsrwtiI714aks5s7bjvgaJpZM4QvfAl>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347988321
https://github.com/psi4/psi4/issues/871#issuecomment-347991366:38,Safety,avoid,avoid,38,"Ok, good to know-- I'll probably just avoid using addons altogether when doing dev stuff, then. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347991366
https://github.com/psi4/psi4/issues/871#issuecomment-348088682:120,Testability,test,test,120,"This is probably why nightly builds stopped 6 days ago when merged. And why I really must do full addons for the travis test – that would have caught this quicker. Fortunately, only the psi code will need changing. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-348088682
https://github.com/psi4/psi4/pull/872#issuecomment-355077662:120,Deployability,patch,patch,120,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662
https://github.com/psi4/psi4/pull/872#issuecomment-355077662:195,Deployability,update,update,195,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662
https://github.com/psi4/psi4/pull/872#issuecomment-355077662:206,Modifiability,plugin,plugin,206,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662
https://github.com/psi4/psi4/pull/872#issuecomment-355082034:274,Deployability,patch,patch,274,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034
https://github.com/psi4/psi4/pull/872#issuecomment-355082034:347,Deployability,update,update,347,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034
https://github.com/psi4/psi4/pull/872#issuecomment-355082034:358,Modifiability,plugin,plugin,358,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:169,Availability,error,errors,169,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:323,Deployability,install,install,323,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:424,Deployability,install,install,424,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:562,Deployability,install,install,562,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:704,Deployability,install,install,704,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:869,Deployability,install,install,869,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:1004,Deployability,install,install,1004,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:1190,Deployability,install,install,1190,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:1373,Deployability,install,install,1373,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:1514,Deployability,install,install,1514,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:1675,Deployability,install,install,1675,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355307312:93,Modifiability,plugin,plugin,93,"regarding v2rdm_casscf, I think everything is now compatible with this PR on the C side; the plugin compiles against @robertodr 's fcidump branch. However, I get python errors when running any input file that are unrelated to v2rdm_casscf:. Traceback (most recent call last):; File ""/Users/deprince/software/robertodr/psi4/install/bin/psi4"", line 158, in <module>; import psi4; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/__init__.py"", line 31, in <module>; from psi4.driver.molutil import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/molutil.py"", line 35, in <module>; from psi4.driver.p4util import constants, filter_comments; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/__init__.py"", line 32, in <module>; from .util import *; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/p4util/util.py"", line 39, in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/proc_table.py"", line 35, in <module>; from . import sapt; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft; File ""/Users/deprince/software/robertodr/psi4/install/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 32, in <module>; from psi4.driver import p4util; ImportError: cannot import name p4util",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355307312
https://github.com/psi4/psi4/pull/872#issuecomment-355344822:53,Availability,error,error,53,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822
https://github.com/psi4/psi4/pull/872#issuecomment-355344822:786,Availability,Error,Error,786,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822
https://github.com/psi4/psi4/pull/872#issuecomment-355344822:99,Modifiability,plugin,plugin,99,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822
https://github.com/psi4/psi4/pull/872#issuecomment-355344822:149,Modifiability,plugin,plugin,149,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822
https://github.com/psi4/psi4/pull/872#issuecomment-355376217:338,Availability,error,error,338,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217
https://github.com/psi4/psi4/pull/872#issuecomment-355376217:95,Integrability,message,message,95,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217
https://github.com/psi4/psi4/pull/872#issuecomment-355376217:126,Security,access,accessible,126,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217
https://github.com/psi4/psi4/pull/872#issuecomment-355376217:286,Usability,clear,clears,286,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217
https://github.com/psi4/psi4/pull/872#issuecomment-355381185:36,Energy Efficiency,green,green,36,Thanks @loriab and @edeprince3 It's green! 🎉,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355381185
https://github.com/psi4/psi4/pull/872#issuecomment-355744886:87,Testability,test,tests,87,"@loriab I have a couple of reference FCIDUMP files that the HANDE QMC code uses in its tests. I have been checking against those, so I can definitely add tests. I'll add a `compare` function similar to `compare_cubes`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355744886
